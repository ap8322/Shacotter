2016-06-19 02:13:41,995 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-06-19 02:13:41,996 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 02:13:41,996 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-06-19 02:13:41,997 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 02:13:42,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-06-19 02:13:42.071, foo, 2016-06-19 02:13:42.071, foo, 0}
2016-06-19 02:13:42,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-06-19 02:13:42.073, foo, 2016-06-19 02:13:42.073, foo, 0}
2016-06-19 02:13:42,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-06-19 02:13:42.074, foo, 2016-06-19 02:13:42.074, foo, 0}
2016-06-19 02:13:42,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-06-19 02:13:42.075, foo, 2016-06-19 02:13:42.075, foo, 0}
2016-06-19 02:13:42,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-06-19 02:13:42.076, foo, 2016-06-19 02:13:42.076, foo, 0}
2016-06-19 02:13:42,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-06-19 02:13:42.077, foo, 2016-06-19 02:13:42.077, foo, 0}
2016-06-19 02:13:42,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-06-19 02:13:42.078, foo, 2016-06-19 02:13:42.078, foo, 0}
2016-06-19 02:13:42,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-06-19 02:13:42.079, foo, 2016-06-19 02:13:42.079, foo, 0}
2016-06-19 02:13:42,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-06-19 02:13:42.08, foo, 2016-06-19 02:13:42.08, foo, 0}
2016-06-19 02:13:42,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-06-19 02:13:42.081, foo, 2016-06-19 02:13:42.081, foo, 0}
2016-06-19 02:13:42,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-06-19 02:13:42.082, foo, 2016-06-19 02:13:42.082, foo, 0}
2016-06-19 02:13:42,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-06-19 02:13:42.083, foo, 2016-06-19 02:13:42.083, foo, 0}
2016-06-19 02:13:42,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-06-19 02:13:42.084, foo, 2016-06-19 02:13:42.084, foo, 0}
2016-06-19 02:13:42,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-06-19 02:13:42.085, foo, 2016-06-19 02:13:42.085, foo, 0}
2016-06-19 02:13:42,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-06-19 02:13:42.086, foo, 2016-06-19 02:13:42.086, foo, 0}
2016-06-19 02:13:42,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-06-19 02:13:42.087, foo, 2016-06-19 02:13:42.087, foo, 0}
2016-06-19 02:13:42,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-06-19 02:13:42.088, foo, 2016-06-19 02:13:42.088, foo, 0}
2016-06-19 02:13:42,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-06-19 02:13:42.089, foo, 2016-06-19 02:13:42.089, foo, 0}
2016-06-19 02:13:42,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-06-19 02:13:42.09, foo, 2016-06-19 02:13:42.09, foo, 0}
2016-06-19 02:13:42,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-06-19 02:13:42.091, foo, 2016-06-19 02:13:42.091, foo, 0}
2016-06-19 02:13:42,116 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-06-19 02:13:42,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-06-19 02:13:42.118, foo, 2016-06-19 02:13:42.118, foo, 0}
2016-06-19 02:13:42,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-06-19 02:13:42.12, foo, 2016-06-19 02:13:42.12, foo, 0}
2016-06-19 02:13:42,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-06-19 02:13:42.121, foo, 2016-06-19 02:13:42.121, foo, 0}
2016-06-19 02:13:42,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-06-19 02:13:42.124, foo, 2016-06-19 02:13:42.124, foo, 0}
2016-06-19 02:13:42,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-06-19 02:13:42.125, foo, 2016-06-19 02:13:42.125, foo, 0}
2016-06-19 02:13:42,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-06-19 02:13:42.127, foo, 2016-06-19 02:13:42.127, foo, 0}
2016-06-19 02:13:42,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-06-19 02:13:42.129, foo, 2016-06-19 02:13:42.129, foo, 0}
2016-06-19 02:13:42,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-06-19 02:13:42.13, foo, 2016-06-19 02:13:42.13, foo, 0}
2016-06-19 02:13:42,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-06-19 02:13:42.131, foo, 2016-06-19 02:13:42.131, foo, 0}
2016-06-19 02:13:42,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-06-19 02:13:42.133, foo, 2016-06-19 02:13:42.133, foo, 0}
2016-06-19 02:13:42,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-06-19 02:13:42.134, foo, 2016-06-19 02:13:42.134, foo, 0}
2016-06-19 02:13:42,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-06-19 02:13:42.135, foo, 2016-06-19 02:13:42.135, foo, 0}
2016-06-19 02:13:42,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-06-19 02:13:42.137, foo, 2016-06-19 02:13:42.137, foo, 0}
2016-06-19 02:13:42,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-06-19 02:13:42.138, foo, 2016-06-19 02:13:42.138, foo, 0}
2016-06-19 02:13:42,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-06-19 02:13:42.14, foo, 2016-06-19 02:13:42.14, foo, 0}
2016-06-19 02:13:42,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-06-19 02:13:42.141, foo, 2016-06-19 02:13:42.141, foo, 0}
2016-06-19 02:13:42,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-06-19 02:13:42.144, foo, 2016-06-19 02:13:42.144, foo, 0}
2016-06-19 02:13:42,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-06-19 02:13:42.145, foo, 2016-06-19 02:13:42.145, foo, 0}
2016-06-19 02:13:42,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-06-19 02:13:42.146, foo, 2016-06-19 02:13:42.146, foo, 0}
2016-06-19 02:13:42,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-06-19 02:13:42.148, foo, 2016-06-19 02:13:42.148, foo, 0}
2016-06-19 02:13:42,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-06-19 02:13:42.15, foo, 2016-06-19 02:13:42.15, foo, 0}
2016-06-19 02:13:42,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-06-19 02:13:42.151, foo, 2016-06-19 02:13:42.151, foo, 0}
2016-06-19 02:13:42,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-06-19 02:13:42.152, foo, 2016-06-19 02:13:42.152, foo, 0}
2016-06-19 02:13:42,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-06-19 02:13:42.154, foo, 2016-06-19 02:13:42.154, foo, 0}
2016-06-19 02:13:42,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-06-19 02:13:42.155, foo, 2016-06-19 02:13:42.155, foo, 0}
2016-06-19 02:13:42,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-06-19 02:13:42.156, foo, 2016-06-19 02:13:42.156, foo, 0}
2016-06-19 02:13:42,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-06-19 02:13:42.157, foo, 2016-06-19 02:13:42.157, foo, 0}
2016-06-19 02:13:42,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-06-19 02:13:42.159, foo, 2016-06-19 02:13:42.159, foo, 0}
2016-06-19 02:13:42,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-06-19 02:13:42.161, foo, 2016-06-19 02:13:42.161, foo, 0}
2016-06-19 02:13:42,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-06-19 02:13:42.165, foo, 2016-06-19 02:13:42.165, foo, 0}
2016-06-19 02:13:42,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-06-19 02:13:42.166, foo, 2016-06-19 02:13:42.166, foo, 0}
2016-06-19 02:13:42,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 02:13:42.167, foo, 2016-06-19 02:13:42.167, foo, 0}
2016-06-19 02:13:42,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 02:13:42.169, foo, 2016-06-19 02:13:42.169, foo, 0}
2016-06-19 02:13:42,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:13:42.17, foo, 2016-06-19 02:13:42.17, foo, 0}
2016-06-19 02:13:42,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 02:13:42.173, foo, 2016-06-19 02:13:42.173, foo, 0}
2016-06-19 02:13:42,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:13:42.174, foo, 2016-06-19 02:13:42.174, foo, 0}
2016-06-19 02:13:42,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-06-19 02:13:42.175, foo, 2016-06-19 02:13:42.175, foo, 0}
2016-06-19 02:13:42,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 02:13:42.176, foo, 2016-06-19 02:13:42.176, foo, 0}
2016-06-19 02:13:42,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 02:13:42.179, foo, 2016-06-19 02:13:42.179, foo, 0}
2016-06-19 02:13:42,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-06-19 02:13:42.18, foo, 2016-06-19 02:13:42.18, foo, 0}
2016-06-19 02:13:42,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-06-19 02:13:42.181, foo, 2016-06-19 02:13:42.181, foo, 0}
2016-06-19 02:13:42,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-06-19 02:13:42.182, foo, 2016-06-19 02:13:42.182, foo, 0}
2016-06-19 02:13:42,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 02:13:42.183, foo, 2016-06-19 02:13:42.183, foo, 0}
2016-06-19 02:13:42,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 02:13:42.184, foo, 2016-06-19 02:13:42.184, foo, 0}
2016-06-19 02:13:42,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:13:42.185, foo, 2016-06-19 02:13:42.185, foo, 0}
2016-06-19 02:13:42,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 02:13:42.187, foo, 2016-06-19 02:13:42.187, foo, 0}
2016-06-19 02:13:42,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:13:42.189, foo, 2016-06-19 02:13:42.189, foo, 0}
2016-06-19 02:13:42,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-06-19 02:13:42.192, foo, 2016-06-19 02:13:42.192, foo, 0}
2016-06-19 02:13:42,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 02:13:42.197, foo, 2016-06-19 02:13:42.197, foo, 0}
2016-06-19 02:13:42,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 02:13:42.199, foo, 2016-06-19 02:13:42.199, foo, 0}
2016-06-19 02:13:42,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-06-19 02:13:42.201, foo, 2016-06-19 02:13:42.201, foo, 0}
2016-06-19 02:13:42,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-06-19 02:13:42.217, foo, 2016-06-19 02:13:42.217, foo, 0}
2016-06-19 02:13:42,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-06-19 02:13:42.218, foo, 2016-06-19 02:13:42.218, foo, 0}
2016-06-19 02:13:42,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-06-19 02:13:42.223, foo, 2016-06-19 02:13:42.223, foo, 0}
2016-06-19 02:13:42,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:13:42.224, foo, 2016-06-19 02:13:42.224, foo, 0}
2016-06-19 02:13:42,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-06-19 02:13:42.226, foo, 2016-06-19 02:13:42.226, foo, 0}
2016-06-19 02:13:42,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:13:42.228, foo, 2016-06-19 02:13:42.228, foo, 0}
2016-06-19 02:13:42,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-06-19 02:13:42.236, foo, 2016-06-19 02:13:42.236, foo, 0}
2016-06-19 02:13:42,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-06-19 02:13:42.238, foo, 2016-06-19 02:13:42.238, foo, 0}
2016-06-19 02:13:42,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-06-19 02:13:42.239, foo, 2016-06-19 02:13:42.239, foo, 0}
2016-06-19 02:13:42,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-06-19 02:13:42.24, foo, 2016-06-19 02:13:42.24, foo, 0}
2016-06-19 02:13:42,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-06-19 02:13:42.241, foo, 2016-06-19 02:13:42.241, foo, 0}
2016-06-19 02:13:42,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-06-19 02:13:42.247, foo, 2016-06-19 02:13:42.247, foo, 0}
2016-06-19 02:13:42,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-06-19 02:13:42.25, foo, 2016-06-19 02:13:42.25, foo, 0}
2016-06-19 02:13:42,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-06-19 02:13:42.251, foo, 2016-06-19 02:13:42.251, foo, 0}
2016-06-19 02:13:42,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-06-19 02:13:42.252, foo, 2016-06-19 02:13:42.252, foo, 0}
2016-06-19 02:13:42,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-06-19 02:13:42.256, foo, 2016-06-19 02:13:42.256, foo, 0}
2016-06-19 02:13:42,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-06-19 02:13:42.259, foo, 2016-06-19 02:13:42.259, foo, 0}
2016-06-19 02:13:42,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-06-19 02:13:42.262, foo, 2016-06-19 02:13:42.262, foo, 0}
2016-06-19 02:13:42,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-06-19 02:13:42.264, foo, 2016-06-19 02:13:42.264, foo, 0}
2016-06-19 02:13:42,321 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-06-19 02:13:42,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-06-19 02:13:42.322, foo, 2016-06-19 02:13:42.322, foo}
2016-06-19 02:13:42,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-06-19 02:13:42.326, foo, 2016-06-19 02:13:42.326, foo}
2016-06-19 02:13:42,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-06-19 02:13:42.327, foo, 2016-06-19 02:13:42.327, foo}
2016-06-19 02:13:42,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-06-19 02:13:42.328, foo, 2016-06-19 02:13:42.328, foo}
2016-06-19 02:13:42,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-06-19 02:13:42.328, foo, 2016-06-19 02:13:42.328, foo}
2016-06-19 02:13:42,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-06-19 02:13:42.329, foo, 2016-06-19 02:13:42.329, foo}
2016-06-19 02:13:42,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-06-19 02:13:42.331, foo, 2016-06-19 02:13:42.331, foo}
2016-06-19 02:13:42,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-06-19 02:13:42.332, foo, 2016-06-19 02:13:42.332, foo}
2016-06-19 02:13:42,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-06-19 02:13:42.333, foo, 2016-06-19 02:13:42.333, foo}
2016-06-19 02:13:42,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-06-19 02:13:42.334, foo, 2016-06-19 02:13:42.334, foo}
2016-06-19 02:13:42,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-06-19 02:13:42.335, foo, 2016-06-19 02:13:42.336, foo}
2016-06-19 02:13:42,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-06-19 02:13:42.337, foo, 2016-06-19 02:13:42.337, foo}
2016-06-19 02:13:42,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-06-19 02:13:42.339, foo, 2016-06-19 02:13:42.339, foo}
2016-06-19 02:13:42,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-06-19 02:13:42.34, foo, 2016-06-19 02:13:42.34, foo}
2016-06-19 02:13:42,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-06-19 02:13:42.341, foo, 2016-06-19 02:13:42.341, foo}
2016-06-19 02:13:42,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-06-19 02:13:42.342, foo, 2016-06-19 02:13:42.342, foo}
2016-06-19 02:13:42,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-06-19 02:13:42.343, foo, 2016-06-19 02:13:42.343, foo}
2016-06-19 02:13:42,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-06-19 02:13:42.343, foo, 2016-06-19 02:13:42.343, foo}
2016-06-19 02:13:42,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-06-19 02:13:42.344, foo, 2016-06-19 02:13:42.344, foo}
2016-06-19 02:13:42,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-06-19 02:13:42.345, foo, 2016-06-19 02:13:42.345, foo}
2016-06-19 02:13:42,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-06-19 02:13:42.346, foo, 2016-06-19 02:13:42.346, foo}
2016-06-19 02:13:42,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-06-19 02:13:42.347, foo, 2016-06-19 02:13:42.347, foo}
2016-06-19 02:13:42,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-06-19 02:13:42.348, foo, 2016-06-19 02:13:42.348, foo}
2016-06-19 02:13:42,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-06-19 02:13:42.349, foo, 2016-06-19 02:13:42.349, foo}
2016-06-19 02:13:42,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-06-19 02:13:42.35, foo, 2016-06-19 02:13:42.35, foo}
2016-06-19 02:13:42,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 02:13:42.351, foo, 2016-06-19 02:13:42.351, foo}
2016-06-19 02:13:42,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-06-19 02:13:42.352, foo, 2016-06-19 02:13:42.352, foo}
2016-06-19 02:13:42,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-06-19 02:13:42.353, foo, 2016-06-19 02:13:42.353, foo}
2016-06-19 02:13:42,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-06-19 02:13:42.361, foo, 2016-06-19 02:13:42.361, foo}
2016-06-19 02:13:42,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:13:42.363, foo, 2016-06-19 02:13:42.363, foo}
2016-06-19 02:13:42,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:13:42.364, foo, 2016-06-19 02:13:42.364, foo}
2016-06-19 02:13:42,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:13:42.366, foo, 2016-06-19 02:13:42.366, foo}
2016-06-19 02:13:42,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-06-19 02:13:42.367, foo, 2016-06-19 02:13:42.367, foo}
2016-06-19 02:13:42,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-06-19 02:13:42.368, foo, 2016-06-19 02:13:42.368, foo}
2016-06-19 02:13:42,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-06-19 02:13:42.379, foo, 2016-06-19 02:13:42.379, foo}
2016-06-19 02:13:42,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-06-19 02:13:42.38, foo, 2016-06-19 02:13:42.38, foo}
2016-06-19 02:13:42,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-06-19 02:13:42.382, foo, 2016-06-19 02:13:42.382, foo}
2016-06-19 02:13:42,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-06-19 02:13:42.383, foo, 2016-06-19 02:13:42.383, foo}
2016-06-19 02:13:42,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-06-19 02:13:42.384, foo, 2016-06-19 02:13:42.384, foo}
2016-06-19 02:13:42,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-06-19 02:13:42.385, foo, 2016-06-19 02:13:42.385, foo}
2016-06-19 02:13:42,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-06-19 02:13:42.386, foo, 2016-06-19 02:13:42.386, foo}
2016-06-19 02:13:42,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-06-19 02:13:42.388, foo, 2016-06-19 02:13:42.388, foo}
2016-06-19 02:13:42,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-06-19 02:13:42.39, foo, 2016-06-19 02:13:42.39, foo}
2016-06-19 02:13:42,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-06-19 02:13:42.391, foo, 2016-06-19 02:13:42.392, foo}
2016-06-19 02:13:42,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-06-19 02:13:42.393, foo, 2016-06-19 02:13:42.393, foo}
2016-06-19 02:13:42,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-06-19 02:13:42.395, foo, 2016-06-19 02:13:42.395, foo}
2016-06-19 02:13:42,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-06-19 02:13:42.396, foo, 2016-06-19 02:13:42.396, foo}
2016-06-19 02:13:42,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-06-19 02:13:42.398, foo, 2016-06-19 02:13:42.398, foo}
2016-06-19 02:13:42,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-06-19 02:13:42.4, foo, 2016-06-19 02:13:42.4, foo}
2016-06-19 02:13:42,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-06-19 02:13:42.402, foo, 2016-06-19 02:13:42.402, foo}
2016-06-19 02:13:42,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-06-19 02:13:42.405, foo, 2016-06-19 02:13:42.405, foo}
2016-06-19 02:13:42,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-06-19 02:13:42.425, foo, 2016-06-19 02:13:42.425, foo}
2016-06-19 02:13:42,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-06-19 02:13:42.426, foo, 2016-06-19 02:13:42.426, foo}
2016-06-19 02:13:42,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-06-19 02:13:42.427, foo, 2016-06-19 02:13:42.427, foo}
2016-06-19 02:13:42,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-06-19 02:13:42.43, foo, 2016-06-19 02:13:42.43, foo}
2016-06-19 02:13:42,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-06-19 02:13:42.431, foo, 2016-06-19 02:13:42.431, foo}
2016-06-19 02:13:42,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-06-19 02:13:42.432, foo, 2016-06-19 02:13:42.432, foo}
2016-06-19 02:13:42,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-06-19 02:13:42.433, foo, 2016-06-19 02:13:42.433, foo}
2016-06-19 02:13:42,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 02:13:42.436, foo, 2016-06-19 02:13:42.436, foo}
2016-06-19 02:13:42,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-06-19 02:13:42.437, foo, 2016-06-19 02:13:42.437, foo}
2016-06-19 02:13:42,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-06-19 02:13:42.438, foo, 2016-06-19 02:13:42.438, foo}
2016-06-19 02:13:42,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-06-19 02:13:42.439, foo, 2016-06-19 02:13:42.439, foo}
2016-06-19 02:13:42,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-06-19 02:13:42.441, foo, 2016-06-19 02:13:42.441, foo}
2016-06-19 02:13:42,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-06-19 02:13:42.442, foo, 2016-06-19 02:13:42.442, foo}
2016-06-19 02:13:42,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-06-19 02:13:42.446, foo, 2016-06-19 02:13:42.446, foo}
2016-06-19 02:13:42,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-06-19 02:13:42.448, foo, 2016-06-19 02:13:42.448, foo}
2016-06-19 02:13:42,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-06-19 02:13:42.449, foo, 2016-06-19 02:13:42.449, foo}
2016-06-19 02:13:42,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-06-19 02:13:42.45, foo, 2016-06-19 02:13:42.45, foo}
2016-06-19 02:13:42,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-06-19 02:13:42.451, foo, 2016-06-19 02:13:42.451, foo}
2016-06-19 02:13:42,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-06-19 02:13:42.452, foo, 2016-06-19 02:13:42.452, foo}
2016-06-19 02:13:42,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-06-19 02:13:42.453, foo, 2016-06-19 02:13:42.453, foo}
2016-06-19 02:13:42,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-06-19 02:13:42.454, foo, 2016-06-19 02:13:42.454, foo}
2016-06-19 02:13:42,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-06-19 02:13:42.455, foo, 2016-06-19 02:13:42.455, foo}
2016-06-19 02:13:42,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-06-19 02:13:42.456, foo, 2016-06-19 02:13:42.456, foo}
2016-06-19 02:13:42,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-06-19 02:13:42.457, foo, 2016-06-19 02:13:42.457, foo}
2016-06-19 02:13:42,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-06-19 02:13:42.458, foo, 2016-06-19 02:13:42.458, foo}
2016-06-19 02:13:42,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-06-19 02:13:42.459, foo, 2016-06-19 02:13:42.459, foo}
2016-06-19 02:13:42,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-06-19 02:13:42.46, foo, 2016-06-19 02:13:42.46, foo}
2016-06-19 02:13:42,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-06-19 02:13:42.461, foo, 2016-06-19 02:13:42.461, foo}
2016-06-19 02:13:42,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-06-19 02:13:42.462, foo, 2016-06-19 02:13:42.462, foo}
2016-06-19 02:13:42,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-06-19 02:13:42.463, foo, 2016-06-19 02:13:42.463, foo}
2016-06-19 02:13:42,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-06-19 02:13:42.464, foo, 2016-06-19 02:13:42.464, foo}
2016-06-19 02:13:42,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:13:42.466, foo, 2016-06-19 02:13:42.466, foo}
2016-06-19 02:13:42,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:13:42.466, foo, 2016-06-19 02:13:42.466, foo}
2016-06-19 02:13:42,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:13:42.467, foo, 2016-06-19 02:13:42.467, foo}
2016-06-19 02:13:42,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:13:42.468, foo, 2016-06-19 02:13:42.468, foo}
2016-06-19 02:13:42,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-06-19 02:13:42.47, foo, 2016-06-19 02:13:42.47, foo}
2016-06-19 02:13:42,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-06-19 02:13:42.471, foo, 2016-06-19 02:13:42.471, foo}
2016-06-19 02:13:42,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-06-19 02:13:42.472, foo, 2016-06-19 02:13:42.472, foo}
2016-06-19 02:13:42,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-06-19 02:13:42.476, foo, 2016-06-19 02:13:42.476, foo}
2016-06-19 02:13:42,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-06-19 02:13:42.478, foo, 2016-06-19 02:13:42.478, foo}
2016-06-19 02:13:42,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-06-19 02:13:42.479, foo, 2016-06-19 02:13:42.479, foo}
2016-06-19 02:13:42,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-06-19 02:13:42.48, foo, 2016-06-19 02:13:42.48, foo}
2016-06-19 02:13:42,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-06-19 02:13:42.481, foo, 2016-06-19 02:13:42.481, foo}
2016-06-19 02:13:42,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-06-19 02:13:42.482, foo, 2016-06-19 02:13:42.482, foo}
2016-06-19 02:13:42,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-06-19 02:13:42.483, foo, 2016-06-19 02:13:42.483, foo}
2016-06-19 02:13:42,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-06-19 02:13:42.487, foo, 2016-06-19 02:13:42.487, foo}
2016-06-19 02:13:42,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-06-19 02:13:42.488, foo, 2016-06-19 02:13:42.488, foo}
2016-06-19 02:13:42,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-06-19 02:13:42.489, foo, 2016-06-19 02:13:42.489, foo}
2016-06-19 02:13:42,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-06-19 02:13:42.491, foo, 2016-06-19 02:13:42.491, foo}
2016-06-19 02:13:42,577 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-06-19 02:13:42,578 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-06-19 02:13:42,597 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:13:42,610 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:13:42,623 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:13:42,627 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:13:42,631 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:13:42,635 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:13:42,641 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:13:42,657 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 02:13:42,659 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 02:13:42,663 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-06-19 02:13:42,666 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-06-19 02:13:42,668 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-06-19 02:13:42,676 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-06-19 02:13:42,676 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-06-19 02:13:42,677 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-06-19 02:13:42,677 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-06-19 02:13:42,677 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-06-19 02:13:42,677 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-06-19 02:13:42,687 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-06-19 02:13:42,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-06-19 02:13:42,694 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-06-19 02:13:42,696 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-06-19 02:13:42,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-06-19 02:13:42,700 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-06-19 02:13:42,701 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-06-19 02:13:42,702 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 02:13:42,707 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m06s259ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=42 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-19 02:13:43,877 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-06-19 02:13:43,881 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-06-19 02:13:43,882 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-06-19 02:13:43,883 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-06-19 02:13:43,883 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-06-19 02:13:43,921 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:13:43,922 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:13:43,923 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:13:43,923 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:13:43,996 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-06-19 02:13:43,996 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-06-19 02:13:43,997 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-06-19 02:13:44,016 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:13:44,222 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-06-19 02:13:44,227 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 02:13:44,855 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 02:13:44,856 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 02:13:44,858 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-06-19 02:13:44,862 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 02:13:44,863 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:13:44,863 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 02:13:44,886 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-06-19 02:13:44,891 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-06-19 02:13:44,916 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-06-19 02:13:44,916 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-06-19 02:13:44,917 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-06-19 02:13:44,917 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-06-19 02:13:44,978 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-06-19 02:13:44,997 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-06-19 02:13:45,012 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-06-19 02:13:45,028 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-06-19 02:13:45,043 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-06-19 02:13:45,060 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-06-19 02:13:45,092 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-06-19 02:13:45,106 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-06-19 02:13:45,115 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-06-19 02:13:45,123 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-06-19 02:13:45,137 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-06-19 02:13:45,148 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-06-19 02:13:45,158 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-06-19 02:13:45,169 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-06-19 02:13:45,177 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-06-19 02:13:45,177 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-06-19 02:13:45,177 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-06-19 02:13:45,178 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-06-19 02:13:45,178 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-06-19 02:13:45,181 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-06-19 02:13:45,188 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-06-19 02:13:45,188 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-06-19 02:13:45,188 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-06-19 02:13:45,247 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-06-19 02:13:45,250 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:13:45,334 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-06-19 02:13:45,335 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 02:13:45,345 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s494ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-06-19 02:13:46,359 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-06-19 02:13:46,362 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-06-19 02:13:46,362 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-06-19 02:13:46,363 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-06-19 02:13:46,363 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-06-19 02:13:46,390 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:13:46,391 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:13:46,391 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:13:46,391 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:13:46,393 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-06-19 02:13:46,393 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-06-19 02:13:46,394 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-06-19 02:13:46,394 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-06-19 02:13:46,394 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-06-19 02:13:46,394 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-06-19 02:13:46,450 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:13:46,590 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-06-19 02:13:46,792 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-06-19 02:13:46,803 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 02:13:46,803 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 02:13:46,805 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 02:13:46,807 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 02:13:46,807 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 02:13:46,809 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 02:13:46,811 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 02:13:46,812 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 02:13:46,815 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 02:13:46,821 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:13:46,821 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 02:13:46,822 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 02:13:46,822 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 02:13:46,823 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:13:46,824 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 02:13:46,824 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 02:13:46,824 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 02:13:46,841 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:13:47,235 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:13:47,241 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:13:47,244 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:13:47,247 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:13:47,253 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:13:47,257 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:13:47,266 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-06-19 02:13:47,266 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-06-19 02:13:47,766 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:13:47,845 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s499ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-06-19 02:13:54,459 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-06-19 02:13:54,464 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-06-19 02:13:54,464 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-06-19 02:13:54,465 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-06-19 02:13:54,465 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-06-19 02:13:54,526 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:13:54,526 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:13:54,526 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:13:54,527 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:13:54,581 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-06-19 02:13:54,582 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-06-19 02:13:54,691 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:13:54,865 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-06-19 02:13:55,431 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-06-19 02:13:55,441 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 02:13:55,442 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 02:13:55,444 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 02:13:55,445 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 02:13:55,446 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 02:13:55,448 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 02:13:55,452 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 02:13:55,452 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 02:13:55,455 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 02:13:55,563 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:13:55,574 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 02:13:55,588 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 02:13:55,589 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 02:13:55,591 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:13:55,591 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 02:13:55,592 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 02:13:55,593 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 02:13:55,611 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:13:56,468 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:13:56,475 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:13:56,492 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:13:56,496 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:13:56,502 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:13:56,505 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:13:56,533 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-06-19 02:13:56,534 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-06-19 02:13:56,534 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-06-19 02:13:56,535 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-06-19 02:13:56,535 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-06-19 02:13:56,536 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-06-19 02:13:56,538 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-06-19 02:13:56,540 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-06-19 02:13:56,541 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-06-19 02:13:56,542 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-06-19 02:13:56,611 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-06-19 02:13:56,615 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-06-19 02:13:56,755 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-06-19 02:13:56,759 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-06-19 02:13:56,782 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-06-19 02:13:56,852 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-06-19 02:13:56,906 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-06-19 02:13:56,912 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-06-19 02:13:56,923 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-06-19 02:13:56,932 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-06-19 02:13:56,941 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-06-19 02:13:56,947 [main] INFO  (Database#info():2711) - }
2016-06-19 02:13:56,947 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-06-19 02:13:56,948 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-06-19 02:13:57,050 [main] INFO  (Database#info():2711) - }
2016-06-19 02:13:57,059 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-06-19 02:13:57,149 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 02:13:57,150 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-06-19 02:13:57,155 [main] INFO  (Database#info():2711) -     parse('member');
2016-06-19 02:13:57,967 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-06-19 02:13:58,355 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-06-19 02:13:58,641 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-06-19 02:13:58,880 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-06-19 02:13:59,120 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-06-19 02:13:59,362 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-06-19 02:13:59,578 [main] INFO  (Database#info():2711) -     parse('product');
2016-06-19 02:13:59,841 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-06-19 02:14:00,049 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-06-19 02:14:00,211 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-06-19 02:14:00,471 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-06-19 02:14:00,654 [main] INFO  (Database#info():2711) -     parse('region');
2016-06-19 02:14:00,791 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-06-19 02:14:00,969 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-06-19 02:14:01,109 [main] INFO  (Database#info():2711) - }
2016-06-19 02:14:01,109 [main] INFO  (Database#info():2711) -  
2016-06-19 02:14:01,134 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:14:01,147 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m06s738ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-06-19 02:14:02,571 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-06-19 02:14:02,576 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-06-19 02:14:02,577 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-06-19 02:14:02,578 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-06-19 02:14:02,578 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-06-19 02:14:02,617 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:14:02,618 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:14:02,618 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:14:02,618 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:14:02,667 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 02:14:02,684 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s128ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-06-19 02:14:03,918 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-19 02:14:03,923 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-19 02:14:03,923 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-19 02:14:03,923 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-19 02:14:03,924 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-19 02:14:03,953 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:14:03,954 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:14:03,955 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:14:03,956 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:14:03,976 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-19 02:14:03,976 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-19 02:14:03,985 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:14:04,158 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 02:14:04,201 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-19 02:14:04,201 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-19 02:14:04,202 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-19 02:14:04,207 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-19 02:14:04,406 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:14:04,785 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:14:04,791 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:14:04,794 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:14:04,796 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:14:04,803 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:14:04,809 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:14:04,835 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-19 02:14:04,840 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-19 02:14:04,854 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 02:14:04,855 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-19 02:14:04,858 [main] INFO  (Database#info():2711) - }
2016-06-19 02:14:04,871 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2016-06-19 02:14:04,878 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:14:04,893 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s991ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-19 02:17:39,728 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-06-19 02:17:39,732 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-06-19 02:17:39,732 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-06-19 02:17:39,739 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-06-19 02:17:39,740 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-06-19 02:17:39,742 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-06-19 02:17:42,261 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:42,262 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:42,262 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:42,263 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:42,272 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 02:17:42,679 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 02:17:42,680 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 02:17:42,705 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-06-19 02:17:42,706 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-06-19 02:17:42,706 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-06-19 02:17:42,708 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-06-19 02:17:42,709 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-06-19 02:17:42,709 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-06-19 02:17:42,733 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 02:17:42,733 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:42,734 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 02:17:42,865 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-06-19 02:17:42,871 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-06-19 02:17:42,876 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-06-19 02:17:42,881 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-06-19 02:17:42,890 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-06-19 02:17:42,906 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-06-19 02:17:42,936 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-06-19 02:17:42,955 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-06-19 02:17:42,971 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-06-19 02:17:42,996 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-06-19 02:17:43,010 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-06-19 02:17:43,034 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-06-19 02:17:43,054 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-06-19 02:17:43,071 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-06-19 02:17:43,085 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-06-19 02:17:43,101 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-06-19 02:17:43,114 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-06-19 02:17:43,131 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-06-19 02:17:43,156 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-06-19 02:17:43,173 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-06-19 02:17:43,194 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-06-19 02:17:43,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-06-19 02:17:43,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-06-19 02:17:43,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-06-19 02:17:43,243 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-06-19 02:17:43,247 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-06-19 02:17:43,250 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-06-19 02:17:43,255 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-06-19 02:17:43,260 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-06-19 02:17:43,265 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-06-19 02:17:43,269 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-06-19 02:17:43,274 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-06-19 02:17:43,277 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-06-19 02:17:43,282 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-06-19 02:17:43,286 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-06-19 02:17:43,289 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-06-19 02:17:43,292 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-06-19 02:17:43,322 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-06-19 02:17:43,323 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-06-19 02:17:43,323 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-06-19 02:17:43,323 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-06-19 02:17:43,324 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-06-19 02:17:43,324 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-06-19 02:17:43,331 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-06-19 02:17:43,335 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-06-19 02:17:43,336 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-06-19 02:17:43,337 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-06-19 02:17:43,346 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-06-19 02:17:43,347 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-06-19 02:17:43,348 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-06-19 02:17:43,348 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-06-19 02:17:43,350 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-06-19 02:17:43,419 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-06-19 02:17:43,422 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-06-19 02:17:43,422 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-06-19 02:17:43,424 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-06-19 02:17:43,425 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-06-19 02:17:43,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-06-19 02:17:43,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-06-19 02:17:43,467 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-06-19 02:17:43,493 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-06-19 02:17:43,503 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-06-19 02:17:43,514 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-06-19 02:17:43,523 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-06-19 02:17:43,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-06-19 02:17:43,560 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-06-19 02:17:43,572 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-06-19 02:17:43,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-06-19 02:17:43,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-06-19 02:17:43,606 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-06-19 02:17:43,619 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-06-19 02:17:43,636 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-06-19 02:17:43,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 02:17:43,665 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,687 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-06-19 02:17:43,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 02:17:43,727 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,780 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-06-19 02:17:43,800 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,856 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-06-19 02:17:43,877 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 02:17:43,901 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-06-19 02:17:43,930 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-06-19 02:17:43,956 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 02:17:43,977 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-06-19 02:17:44,002 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 02:17:44,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-06-19 02:17:44,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-06-19 02:17:44,065 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-06-19 02:17:44,082 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-06-19 02:17:44,103 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-06-19 02:17:44,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-06-19 02:17:44,144 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-06-19 02:17:44,165 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-06-19 02:17:44,182 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-06-19 02:17:44,203 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-06-19 02:17:44,203 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=42 failure=0 (in 2 files)
2016-06-19 02:17:44,204 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-06-19 02:17:44,318 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-06-19 02:17:44,319 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-06-19 02:17:44,319 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-06-19 02:17:44,319 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-06-19 02:17:44,319 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-06-19 02:17:44,320 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-06-19 02:17:44,346 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 02:17:44,346 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-06-19 02:17:44,347 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 02:17:44,618 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 02:17:44,619 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:44,619 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 02:17:44,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-06-19 02:17:44,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-06-19 02:17:44,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-06-19 02:17:44,699 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-06-19 02:17:44,704 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-06-19 02:17:44,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-06-19 02:17:44,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-06-19 02:17:44,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-06-19 02:17:44,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-06-19 02:17:44,713 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-06-19 02:17:44,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-06-19 02:17:44,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-06-19 02:17:44,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-06-19 02:17:44,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-06-19 02:17:44,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-06-19 02:17:44,722 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-06-19 02:17:44,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-06-19 02:17:44,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-06-19 02:17:44,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-06-19 02:17:44,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-06-19 02:17:44,735 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-06-19 02:17:44,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-06-19 02:17:44,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-06-19 02:17:44,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-06-19 02:17:44,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-06-19 02:17:44,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-06-19 02:17:44,746 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-06-19 02:17:44,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-06-19 02:17:44,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-06-19 02:17:44,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-06-19 02:17:44,757 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-06-19 02:17:44,759 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 02:17:44,760 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-06-19 02:17:44,760 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 02:17:44,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-06-19 02:17:44.84, foo, 2016-06-19 02:17:44.84, foo, 0}
2016-06-19 02:17:44,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-06-19 02:17:44.848, foo, 2016-06-19 02:17:44.848, foo, 0}
2016-06-19 02:17:44,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-06-19 02:17:44.85, foo, 2016-06-19 02:17:44.85, foo, 0}
2016-06-19 02:17:44,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-06-19 02:17:44.852, foo, 2016-06-19 02:17:44.852, foo, 0}
2016-06-19 02:17:44,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-06-19 02:17:44.855, foo, 2016-06-19 02:17:44.855, foo, 0}
2016-06-19 02:17:44,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-06-19 02:17:44.857, foo, 2016-06-19 02:17:44.857, foo, 0}
2016-06-19 02:17:44,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-06-19 02:17:44.859, foo, 2016-06-19 02:17:44.859, foo, 0}
2016-06-19 02:17:44,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-06-19 02:17:44.861, foo, 2016-06-19 02:17:44.861, foo, 0}
2016-06-19 02:17:44,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-06-19 02:17:44.863, foo, 2016-06-19 02:17:44.863, foo, 0}
2016-06-19 02:17:44,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-06-19 02:17:44.866, foo, 2016-06-19 02:17:44.866, foo, 0}
2016-06-19 02:17:44,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-06-19 02:17:44.867, foo, 2016-06-19 02:17:44.867, foo, 0}
2016-06-19 02:17:44,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-06-19 02:17:44.869, foo, 2016-06-19 02:17:44.869, foo, 0}
2016-06-19 02:17:44,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-06-19 02:17:44.871, foo, 2016-06-19 02:17:44.871, foo, 0}
2016-06-19 02:17:44,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-06-19 02:17:44.873, foo, 2016-06-19 02:17:44.873, foo, 0}
2016-06-19 02:17:44,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-06-19 02:17:44.876, foo, 2016-06-19 02:17:44.876, foo, 0}
2016-06-19 02:17:44,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-06-19 02:17:44.879, foo, 2016-06-19 02:17:44.879, foo, 0}
2016-06-19 02:17:44,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-06-19 02:17:44.881, foo, 2016-06-19 02:17:44.881, foo, 0}
2016-06-19 02:17:44,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-06-19 02:17:44.883, foo, 2016-06-19 02:17:44.883, foo, 0}
2016-06-19 02:17:44,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-06-19 02:17:44.885, foo, 2016-06-19 02:17:44.885, foo, 0}
2016-06-19 02:17:44,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-06-19 02:17:44.887, foo, 2016-06-19 02:17:44.887, foo, 0}
2016-06-19 02:17:44,913 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-06-19 02:17:44,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-06-19 02:17:44.914, foo, 2016-06-19 02:17:44.914, foo, 0}
2016-06-19 02:17:44,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-06-19 02:17:44.918, foo, 2016-06-19 02:17:44.918, foo, 0}
2016-06-19 02:17:44,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-06-19 02:17:44.92, foo, 2016-06-19 02:17:44.92, foo, 0}
2016-06-19 02:17:44,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-06-19 02:17:44.922, foo, 2016-06-19 02:17:44.922, foo, 0}
2016-06-19 02:17:44,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-06-19 02:17:44.924, foo, 2016-06-19 02:17:44.924, foo, 0}
2016-06-19 02:17:44,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-06-19 02:17:44.928, foo, 2016-06-19 02:17:44.928, foo, 0}
2016-06-19 02:17:44,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-06-19 02:17:44.931, foo, 2016-06-19 02:17:44.931, foo, 0}
2016-06-19 02:17:44,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-06-19 02:17:44.934, foo, 2016-06-19 02:17:44.934, foo, 0}
2016-06-19 02:17:44,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-06-19 02:17:44.94, foo, 2016-06-19 02:17:44.94, foo, 0}
2016-06-19 02:17:44,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-06-19 02:17:44.942, foo, 2016-06-19 02:17:44.942, foo, 0}
2016-06-19 02:17:44,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-06-19 02:17:44.944, foo, 2016-06-19 02:17:44.944, foo, 0}
2016-06-19 02:17:44,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-06-19 02:17:44.947, foo, 2016-06-19 02:17:44.947, foo, 0}
2016-06-19 02:17:44,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-06-19 02:17:44.949, foo, 2016-06-19 02:17:44.949, foo, 0}
2016-06-19 02:17:44,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-06-19 02:17:44.952, foo, 2016-06-19 02:17:44.952, foo, 0}
2016-06-19 02:17:44,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-06-19 02:17:44.954, foo, 2016-06-19 02:17:44.954, foo, 0}
2016-06-19 02:17:44,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-06-19 02:17:44.956, foo, 2016-06-19 02:17:44.956, foo, 0}
2016-06-19 02:17:44,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-06-19 02:17:44.958, foo, 2016-06-19 02:17:44.958, foo, 0}
2016-06-19 02:17:44,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-06-19 02:17:44.96, foo, 2016-06-19 02:17:44.96, foo, 0}
2016-06-19 02:17:44,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-06-19 02:17:44.963, foo, 2016-06-19 02:17:44.963, foo, 0}
2016-06-19 02:17:44,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-06-19 02:17:44.966, foo, 2016-06-19 02:17:44.966, foo, 0}
2016-06-19 02:17:44,982 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-06-19 02:17:44,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-06-19 02:17:44,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-06-19 02:17:44,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-06-19 02:17:44,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-06-19 02:17:44,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-06-19 02:17:44,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-06-19 02:17:44,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-06-19 02:17:44,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-06-19 02:17:44,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-06-19 02:17:44,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-06-19 02:17:44,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-06-19 02:17:44,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-06-19 02:17:44,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-06-19 02:17:44,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-06-19 02:17:44,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-06-19 02:17:45,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-06-19 02:17:45,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-06-19 02:17:45,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-06-19 02:17:45,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-06-19 02:17:45,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-06-19 02:17:45,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-06-19 02:17:45,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-06-19 02:17:45,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-06-19 02:17:45,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-06-19 02:17:45,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-06-19 02:17:45,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-06-19 02:17:45,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-06-19 02:17:45,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-06-19 02:17:45,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-06-19 02:17:45,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-06-19 02:17:45,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-06-19 02:17:45,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-06-19 02:17:45,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-06-19 02:17:45,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-06-19 02:17:45,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-06-19 02:17:45,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-06-19 02:17:45,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-06-19 02:17:45,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-06-19 02:17:45,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-06-19 02:17:45,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-06-19 02:17:45,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-06-19 02:17:45,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-06-19 02:17:45,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-06-19 02:17:45,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-06-19 02:17:45,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-06-19 02:17:45,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-06-19 02:17:45,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-06-19 02:17:45,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-06-19 02:17:45,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-06-19 02:17:45,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-06-19 02:17:45,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-06-19 02:17:45,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-06-19 02:17:45,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-06-19 02:17:45,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-06-19 02:17:45,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-06-19 02:17:45,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-06-19 02:17:45,084 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-06-19 02:17:45,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-06-19 02:17:45.085, foo, 2016-06-19 02:17:45.085, foo, 0}
2016-06-19 02:17:45,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-06-19 02:17:45.086, foo, 2016-06-19 02:17:45.086, foo, 0}
2016-06-19 02:17:45,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-06-19 02:17:45.088, foo, 2016-06-19 02:17:45.088, foo, 0}
2016-06-19 02:17:45,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-06-19 02:17:45.088, foo, 2016-06-19 02:17:45.088, foo, 0}
2016-06-19 02:17:45,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-06-19 02:17:45.089, foo, 2016-06-19 02:17:45.089, foo, 0}
2016-06-19 02:17:45,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-06-19 02:17:45.091, foo, 2016-06-19 02:17:45.091, foo, 0}
2016-06-19 02:17:45,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-06-19 02:17:45.092, foo, 2016-06-19 02:17:45.092, foo, 0}
2016-06-19 02:17:45,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-06-19 02:17:45.093, foo, 2016-06-19 02:17:45.093, foo, 0}
2016-06-19 02:17:45,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-06-19 02:17:45.094, foo, 2016-06-19 02:17:45.094, foo, 0}
2016-06-19 02:17:45,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-06-19 02:17:45.094, foo, 2016-06-19 02:17:45.094, foo, 0}
2016-06-19 02:17:45,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-06-19 02:17:45.095, foo, 2016-06-19 02:17:45.095, foo, 0}
2016-06-19 02:17:45,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-06-19 02:17:45.096, foo, 2016-06-19 02:17:45.096, foo, 0}
2016-06-19 02:17:45,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-06-19 02:17:45.098, foo, 2016-06-19 02:17:45.098, foo, 0}
2016-06-19 02:17:45,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-06-19 02:17:45.099, foo, 2016-06-19 02:17:45.099, foo, 0}
2016-06-19 02:17:45,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-06-19 02:17:45.1, foo, 2016-06-19 02:17:45.1, foo, 0}
2016-06-19 02:17:45,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-06-19 02:17:45.101, foo, 2016-06-19 02:17:45.101, foo, 0}
2016-06-19 02:17:45,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-06-19 02:17:45.103, foo, 2016-06-19 02:17:45.103, foo, 0}
2016-06-19 02:17:45,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-06-19 02:17:45.104, foo, 2016-06-19 02:17:45.104, foo, 0}
2016-06-19 02:17:45,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-06-19 02:17:45.104, foo, 2016-06-19 02:17:45.104, foo, 0}
2016-06-19 02:17:45,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-06-19 02:17:45.105, foo, 2016-06-19 02:17:45.105, foo, 0}
2016-06-19 02:17:45,124 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-06-19 02:17:45,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-06-19 02:17:45.126, foo, 2016-06-19 02:17:45.126, foo, 0}
2016-06-19 02:17:45,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-06-19 02:17:45.128, foo, 2016-06-19 02:17:45.128, foo, 0}
2016-06-19 02:17:45,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-06-19 02:17:45.129, foo, 2016-06-19 02:17:45.129, foo, 0}
2016-06-19 02:17:45,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-06-19 02:17:45.137, foo, 2016-06-19 02:17:45.137, foo, 0}
2016-06-19 02:17:45,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-06-19 02:17:45.138, foo, 2016-06-19 02:17:45.138, foo, 0}
2016-06-19 02:17:45,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-06-19 02:17:45.139, foo, 2016-06-19 02:17:45.139, foo, 0}
2016-06-19 02:17:45,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-06-19 02:17:45.14, foo, 2016-06-19 02:17:45.14, foo, 0}
2016-06-19 02:17:45,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-06-19 02:17:45.14, foo, 2016-06-19 02:17:45.14, foo, 0}
2016-06-19 02:17:45,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-06-19 02:17:45.141, foo, 2016-06-19 02:17:45.141, foo, 0}
2016-06-19 02:17:45,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-06-19 02:17:45.142, foo, 2016-06-19 02:17:45.142, foo, 0}
2016-06-19 02:17:45,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-06-19 02:17:45.143, foo, 2016-06-19 02:17:45.143, foo, 0}
2016-06-19 02:17:45,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-06-19 02:17:45.144, foo, 2016-06-19 02:17:45.144, foo, 0}
2016-06-19 02:17:45,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-06-19 02:17:45.145, foo, 2016-06-19 02:17:45.145, foo, 0}
2016-06-19 02:17:45,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-06-19 02:17:45.146, foo, 2016-06-19 02:17:45.146, foo, 0}
2016-06-19 02:17:45,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-06-19 02:17:45.147, foo, 2016-06-19 02:17:45.147, foo, 0}
2016-06-19 02:17:45,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-06-19 02:17:45.154, foo, 2016-06-19 02:17:45.154, foo, 0}
2016-06-19 02:17:45,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-06-19 02:17:45.155, foo, 2016-06-19 02:17:45.155, foo, 0}
2016-06-19 02:17:45,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-06-19 02:17:45.155, foo, 2016-06-19 02:17:45.155, foo, 0}
2016-06-19 02:17:45,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-06-19 02:17:45.156, foo, 2016-06-19 02:17:45.156, foo, 0}
2016-06-19 02:17:45,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-06-19 02:17:45.156, foo, 2016-06-19 02:17:45.156, foo, 0}
2016-06-19 02:17:45,172 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-06-19 02:17:45,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-06-19 02:17:45.173, foo, 2016-06-19 02:17:45.173, foo}
2016-06-19 02:17:45,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-06-19 02:17:45.175, foo, 2016-06-19 02:17:45.175, foo}
2016-06-19 02:17:45,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-06-19 02:17:45.176, foo, 2016-06-19 02:17:45.176, foo}
2016-06-19 02:17:45,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-06-19 02:17:45.177, foo, 2016-06-19 02:17:45.177, foo}
2016-06-19 02:17:45,182 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-06-19 02:17:45,182 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 02:17:45,182 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-06-19 02:17:45,182 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 02:17:45,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-06-19 02:17:45.27, foo, 2016-06-19 02:17:45.27, foo, 0}
2016-06-19 02:17:45,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-06-19 02:17:45.271, foo, 2016-06-19 02:17:45.271, foo, 0}
2016-06-19 02:17:45,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-06-19 02:17:45.272, foo, 2016-06-19 02:17:45.272, foo, 0}
2016-06-19 02:17:45,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-06-19 02:17:45.273, foo, 2016-06-19 02:17:45.273, foo, 0}
2016-06-19 02:17:45,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-06-19 02:17:45.274, foo, 2016-06-19 02:17:45.274, foo, 0}
2016-06-19 02:17:45,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-06-19 02:17:45.274, foo, 2016-06-19 02:17:45.274, foo, 0}
2016-06-19 02:17:45,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-06-19 02:17:45.275, foo, 2016-06-19 02:17:45.275, foo, 0}
2016-06-19 02:17:45,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-06-19 02:17:45.275, foo, 2016-06-19 02:17:45.275, foo, 0}
2016-06-19 02:17:45,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-06-19 02:17:45.276, foo, 2016-06-19 02:17:45.276, foo, 0}
2016-06-19 02:17:45,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-06-19 02:17:45.277, foo, 2016-06-19 02:17:45.277, foo, 0}
2016-06-19 02:17:45,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-06-19 02:17:45.278, foo, 2016-06-19 02:17:45.278, foo, 0}
2016-06-19 02:17:45,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-06-19 02:17:45.279, foo, 2016-06-19 02:17:45.279, foo, 0}
2016-06-19 02:17:45,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-06-19 02:17:45.279, foo, 2016-06-19 02:17:45.279, foo, 0}
2016-06-19 02:17:45,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-06-19 02:17:45.28, foo, 2016-06-19 02:17:45.28, foo, 0}
2016-06-19 02:17:45,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-06-19 02:17:45.281, foo, 2016-06-19 02:17:45.281, foo, 0}
2016-06-19 02:17:45,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-06-19 02:17:45.283, foo, 2016-06-19 02:17:45.283, foo, 0}
2016-06-19 02:17:45,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-06-19 02:17:45.284, foo, 2016-06-19 02:17:45.284, foo, 0}
2016-06-19 02:17:45,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-06-19 02:17:45.285, foo, 2016-06-19 02:17:45.285, foo, 0}
2016-06-19 02:17:45,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-06-19 02:17:45.286, foo, 2016-06-19 02:17:45.286, foo, 0}
2016-06-19 02:17:45,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-06-19 02:17:45.287, foo, 2016-06-19 02:17:45.287, foo, 0}
2016-06-19 02:17:45,313 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-06-19 02:17:45,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-06-19 02:17:45.314, foo, 2016-06-19 02:17:45.314, foo, 0}
2016-06-19 02:17:45,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-06-19 02:17:45.316, foo, 2016-06-19 02:17:45.316, foo, 0}
2016-06-19 02:17:45,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-06-19 02:17:45.317, foo, 2016-06-19 02:17:45.317, foo, 0}
2016-06-19 02:17:45,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-06-19 02:17:45.319, foo, 2016-06-19 02:17:45.319, foo, 0}
2016-06-19 02:17:45,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-06-19 02:17:45.32, foo, 2016-06-19 02:17:45.32, foo, 0}
2016-06-19 02:17:45,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-06-19 02:17:45.325, foo, 2016-06-19 02:17:45.325, foo, 0}
2016-06-19 02:17:45,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-06-19 02:17:45.326, foo, 2016-06-19 02:17:45.326, foo, 0}
2016-06-19 02:17:45,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-06-19 02:17:45.327, foo, 2016-06-19 02:17:45.327, foo, 0}
2016-06-19 02:17:45,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-06-19 02:17:45.328, foo, 2016-06-19 02:17:45.328, foo, 0}
2016-06-19 02:17:45,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-06-19 02:17:45.329, foo, 2016-06-19 02:17:45.329, foo, 0}
2016-06-19 02:17:45,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-06-19 02:17:45.331, foo, 2016-06-19 02:17:45.331, foo, 0}
2016-06-19 02:17:45,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-06-19 02:17:45.333, foo, 2016-06-19 02:17:45.333, foo, 0}
2016-06-19 02:17:45,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-06-19 02:17:45.336, foo, 2016-06-19 02:17:45.336, foo, 0}
2016-06-19 02:17:45,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-06-19 02:17:45.337, foo, 2016-06-19 02:17:45.337, foo, 0}
2016-06-19 02:17:45,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-06-19 02:17:45.338, foo, 2016-06-19 02:17:45.338, foo, 0}
2016-06-19 02:17:45,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-06-19 02:17:45.339, foo, 2016-06-19 02:17:45.339, foo, 0}
2016-06-19 02:17:45,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-06-19 02:17:45.34, foo, 2016-06-19 02:17:45.34, foo, 0}
2016-06-19 02:17:45,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-06-19 02:17:45.341, foo, 2016-06-19 02:17:45.341, foo, 0}
2016-06-19 02:17:45,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-06-19 02:17:45.343, foo, 2016-06-19 02:17:45.343, foo, 0}
2016-06-19 02:17:45,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-06-19 02:17:45.345, foo, 2016-06-19 02:17:45.345, foo, 0}
2016-06-19 02:17:45,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-06-19 02:17:45.347, foo, 2016-06-19 02:17:45.347, foo, 0}
2016-06-19 02:17:45,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-06-19 02:17:45.348, foo, 2016-06-19 02:17:45.348, foo, 0}
2016-06-19 02:17:45,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-06-19 02:17:45.349, foo, 2016-06-19 02:17:45.349, foo, 0}
2016-06-19 02:17:45,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-06-19 02:17:45.35, foo, 2016-06-19 02:17:45.35, foo, 0}
2016-06-19 02:17:45,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-06-19 02:17:45.351, foo, 2016-06-19 02:17:45.351, foo, 0}
2016-06-19 02:17:45,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-06-19 02:17:45.353, foo, 2016-06-19 02:17:45.353, foo, 0}
2016-06-19 02:17:45,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-06-19 02:17:45.355, foo, 2016-06-19 02:17:45.355, foo, 0}
2016-06-19 02:17:45,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-06-19 02:17:45.356, foo, 2016-06-19 02:17:45.356, foo, 0}
2016-06-19 02:17:45,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-06-19 02:17:45.357, foo, 2016-06-19 02:17:45.357, foo, 0}
2016-06-19 02:17:45,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-06-19 02:17:45.359, foo, 2016-06-19 02:17:45.359, foo, 0}
2016-06-19 02:17:45,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-06-19 02:17:45.362, foo, 2016-06-19 02:17:45.362, foo, 0}
2016-06-19 02:17:45,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 02:17:45.363, foo, 2016-06-19 02:17:45.363, foo, 0}
2016-06-19 02:17:45,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 02:17:45.368, foo, 2016-06-19 02:17:45.368, foo, 0}
2016-06-19 02:17:45,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:17:45.369, foo, 2016-06-19 02:17:45.369, foo, 0}
2016-06-19 02:17:45,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 02:17:45.37, foo, 2016-06-19 02:17:45.37, foo, 0}
2016-06-19 02:17:45,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:17:45.371, foo, 2016-06-19 02:17:45.371, foo, 0}
2016-06-19 02:17:45,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-06-19 02:17:45.372, foo, 2016-06-19 02:17:45.372, foo, 0}
2016-06-19 02:17:45,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 02:17:45.374, foo, 2016-06-19 02:17:45.374, foo, 0}
2016-06-19 02:17:45,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 02:17:45.375, foo, 2016-06-19 02:17:45.375, foo, 0}
2016-06-19 02:17:45,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-06-19 02:17:45.377, foo, 2016-06-19 02:17:45.377, foo, 0}
2016-06-19 02:17:45,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-06-19 02:17:45.378, foo, 2016-06-19 02:17:45.378, foo, 0}
2016-06-19 02:17:45,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-06-19 02:17:45.379, foo, 2016-06-19 02:17:45.379, foo, 0}
2016-06-19 02:17:45,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 02:17:45.381, foo, 2016-06-19 02:17:45.381, foo, 0}
2016-06-19 02:17:45,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 02:17:45.382, foo, 2016-06-19 02:17:45.382, foo, 0}
2016-06-19 02:17:45,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:17:45.383, foo, 2016-06-19 02:17:45.383, foo, 0}
2016-06-19 02:17:45,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 02:17:45.384, foo, 2016-06-19 02:17:45.384, foo, 0}
2016-06-19 02:17:45,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:17:45.385, foo, 2016-06-19 02:17:45.385, foo, 0}
2016-06-19 02:17:45,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-06-19 02:17:45.387, foo, 2016-06-19 02:17:45.387, foo, 0}
2016-06-19 02:17:45,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 02:17:45.388, foo, 2016-06-19 02:17:45.388, foo, 0}
2016-06-19 02:17:45,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 02:17:45.389, foo, 2016-06-19 02:17:45.389, foo, 0}
2016-06-19 02:17:45,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-06-19 02:17:45.39, foo, 2016-06-19 02:17:45.39, foo, 0}
2016-06-19 02:17:45,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-06-19 02:17:45.392, foo, 2016-06-19 02:17:45.392, foo, 0}
2016-06-19 02:17:45,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-06-19 02:17:45.393, foo, 2016-06-19 02:17:45.393, foo, 0}
2016-06-19 02:17:45,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-06-19 02:17:45.395, foo, 2016-06-19 02:17:45.395, foo, 0}
2016-06-19 02:17:45,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-06-19 02:17:45.403, foo, 2016-06-19 02:17:45.403, foo, 0}
2016-06-19 02:17:45,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-06-19 02:17:45.404, foo, 2016-06-19 02:17:45.404, foo, 0}
2016-06-19 02:17:45,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-06-19 02:17:45.405, foo, 2016-06-19 02:17:45.405, foo, 0}
2016-06-19 02:17:45,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-06-19 02:17:45.407, foo, 2016-06-19 02:17:45.407, foo, 0}
2016-06-19 02:17:45,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-06-19 02:17:45.408, foo, 2016-06-19 02:17:45.408, foo, 0}
2016-06-19 02:17:45,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-06-19 02:17:45.409, foo, 2016-06-19 02:17:45.409, foo, 0}
2016-06-19 02:17:45,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-06-19 02:17:45.41, foo, 2016-06-19 02:17:45.41, foo, 0}
2016-06-19 02:17:45,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-06-19 02:17:45.411, foo, 2016-06-19 02:17:45.411, foo, 0}
2016-06-19 02:17:45,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-06-19 02:17:45.414, foo, 2016-06-19 02:17:45.414, foo, 0}
2016-06-19 02:17:45,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-06-19 02:17:45.417, foo, 2016-06-19 02:17:45.417, foo, 0}
2016-06-19 02:17:45,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-06-19 02:17:45.419, foo, 2016-06-19 02:17:45.419, foo, 0}
2016-06-19 02:17:45,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-06-19 02:17:45.421, foo, 2016-06-19 02:17:45.421, foo, 0}
2016-06-19 02:17:45,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-06-19 02:17:45.422, foo, 2016-06-19 02:17:45.422, foo, 0}
2016-06-19 02:17:45,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-06-19 02:17:45.423, foo, 2016-06-19 02:17:45.423, foo, 0}
2016-06-19 02:17:45,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-06-19 02:17:45.424, foo, 2016-06-19 02:17:45.424, foo, 0}
2016-06-19 02:17:45,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-06-19 02:17:45.425, foo, 2016-06-19 02:17:45.425, foo, 0}
2016-06-19 02:17:45,478 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-06-19 02:17:45,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-06-19 02:17:45.479, foo, 2016-06-19 02:17:45.479, foo}
2016-06-19 02:17:45,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-06-19 02:17:45.481, foo, 2016-06-19 02:17:45.481, foo}
2016-06-19 02:17:45,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-06-19 02:17:45.482, foo, 2016-06-19 02:17:45.482, foo}
2016-06-19 02:17:45,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-06-19 02:17:45.483, foo, 2016-06-19 02:17:45.483, foo}
2016-06-19 02:17:45,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-06-19 02:17:45.484, foo, 2016-06-19 02:17:45.484, foo}
2016-06-19 02:17:45,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-06-19 02:17:45.485, foo, 2016-06-19 02:17:45.485, foo}
2016-06-19 02:17:45,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-06-19 02:17:45.486, foo, 2016-06-19 02:17:45.486, foo}
2016-06-19 02:17:45,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-06-19 02:17:45.487, foo, 2016-06-19 02:17:45.487, foo}
2016-06-19 02:17:45,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-06-19 02:17:45.489, foo, 2016-06-19 02:17:45.489, foo}
2016-06-19 02:17:45,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-06-19 02:17:45.49, foo, 2016-06-19 02:17:45.49, foo}
2016-06-19 02:17:45,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-06-19 02:17:45.491, foo, 2016-06-19 02:17:45.491, foo}
2016-06-19 02:17:45,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-06-19 02:17:45.493, foo, 2016-06-19 02:17:45.493, foo}
2016-06-19 02:17:45,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-06-19 02:17:45.494, foo, 2016-06-19 02:17:45.494, foo}
2016-06-19 02:17:45,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-06-19 02:17:45.495, foo, 2016-06-19 02:17:45.495, foo}
2016-06-19 02:17:45,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-06-19 02:17:45.496, foo, 2016-06-19 02:17:45.496, foo}
2016-06-19 02:17:45,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-06-19 02:17:45.497, foo, 2016-06-19 02:17:45.497, foo}
2016-06-19 02:17:45,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-06-19 02:17:45.498, foo, 2016-06-19 02:17:45.498, foo}
2016-06-19 02:17:45,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-06-19 02:17:45.499, foo, 2016-06-19 02:17:45.499, foo}
2016-06-19 02:17:45,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-06-19 02:17:45.501, foo, 2016-06-19 02:17:45.501, foo}
2016-06-19 02:17:45,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-06-19 02:17:45.502, foo, 2016-06-19 02:17:45.502, foo}
2016-06-19 02:17:45,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-06-19 02:17:45.503, foo, 2016-06-19 02:17:45.503, foo}
2016-06-19 02:17:45,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-06-19 02:17:45.503, foo, 2016-06-19 02:17:45.503, foo}
2016-06-19 02:17:45,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-06-19 02:17:45.505, foo, 2016-06-19 02:17:45.505, foo}
2016-06-19 02:17:45,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-06-19 02:17:45.506, foo, 2016-06-19 02:17:45.506, foo}
2016-06-19 02:17:45,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-06-19 02:17:45.507, foo, 2016-06-19 02:17:45.507, foo}
2016-06-19 02:17:45,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 02:17:45.508, foo, 2016-06-19 02:17:45.508, foo}
2016-06-19 02:17:45,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-06-19 02:17:45.51, foo, 2016-06-19 02:17:45.51, foo}
2016-06-19 02:17:45,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-06-19 02:17:45.51, foo, 2016-06-19 02:17:45.51, foo}
2016-06-19 02:17:45,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-06-19 02:17:45.511, foo, 2016-06-19 02:17:45.511, foo}
2016-06-19 02:17:45,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:17:45.512, foo, 2016-06-19 02:17:45.512, foo}
2016-06-19 02:17:45,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:17:45.512, foo, 2016-06-19 02:17:45.512, foo}
2016-06-19 02:17:45,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 02:17:45.515, foo, 2016-06-19 02:17:45.515, foo}
2016-06-19 02:17:45,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-06-19 02:17:45.517, foo, 2016-06-19 02:17:45.517, foo}
2016-06-19 02:17:45,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-06-19 02:17:45.518, foo, 2016-06-19 02:17:45.518, foo}
2016-06-19 02:17:45,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-06-19 02:17:45.519, foo, 2016-06-19 02:17:45.519, foo}
2016-06-19 02:17:45,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-06-19 02:17:45.52, foo, 2016-06-19 02:17:45.52, foo}
2016-06-19 02:17:45,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-06-19 02:17:45.521, foo, 2016-06-19 02:17:45.521, foo}
2016-06-19 02:17:45,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-06-19 02:17:45.522, foo, 2016-06-19 02:17:45.522, foo}
2016-06-19 02:17:45,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-06-19 02:17:45.524, foo, 2016-06-19 02:17:45.524, foo}
2016-06-19 02:17:45,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-06-19 02:17:45.525, foo, 2016-06-19 02:17:45.525, foo}
2016-06-19 02:17:45,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-06-19 02:17:45.526, foo, 2016-06-19 02:17:45.526, foo}
2016-06-19 02:17:45,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-06-19 02:17:45.526, foo, 2016-06-19 02:17:45.526, foo}
2016-06-19 02:17:45,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-06-19 02:17:45.527, foo, 2016-06-19 02:17:45.527, foo}
2016-06-19 02:17:45,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-06-19 02:17:45.528, foo, 2016-06-19 02:17:45.528, foo}
2016-06-19 02:17:45,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-06-19 02:17:45.529, foo, 2016-06-19 02:17:45.529, foo}
2016-06-19 02:17:45,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-06-19 02:17:45.537, foo, 2016-06-19 02:17:45.537, foo}
2016-06-19 02:17:45,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-06-19 02:17:45.538, foo, 2016-06-19 02:17:45.538, foo}
2016-06-19 02:17:45,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-06-19 02:17:45.539, foo, 2016-06-19 02:17:45.539, foo}
2016-06-19 02:17:45,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-06-19 02:17:45.54, foo, 2016-06-19 02:17:45.54, foo}
2016-06-19 02:17:45,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-06-19 02:17:45.541, foo, 2016-06-19 02:17:45.541, foo}
2016-06-19 02:17:45,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-06-19 02:17:45.542, foo, 2016-06-19 02:17:45.542, foo}
2016-06-19 02:17:45,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-06-19 02:17:45.543, foo, 2016-06-19 02:17:45.543, foo}
2016-06-19 02:17:45,545 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-06-19 02:17:45.545, foo, 2016-06-19 02:17:45.545, foo}
2016-06-19 02:17:45,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-06-19 02:17:45.546, foo, 2016-06-19 02:17:45.546, foo}
2016-06-19 02:17:45,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-06-19 02:17:45.547, foo, 2016-06-19 02:17:45.547, foo}
2016-06-19 02:17:45,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-06-19 02:17:45.548, foo, 2016-06-19 02:17:45.548, foo}
2016-06-19 02:17:45,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-06-19 02:17:45.555, foo, 2016-06-19 02:17:45.555, foo}
2016-06-19 02:17:45,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-06-19 02:17:45.557, foo, 2016-06-19 02:17:45.557, foo}
2016-06-19 02:17:45,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 02:17:45.558, foo, 2016-06-19 02:17:45.558, foo}
2016-06-19 02:17:45,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-06-19 02:17:45.566, foo, 2016-06-19 02:17:45.567, foo}
2016-06-19 02:17:45,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-06-19 02:17:45.568, foo, 2016-06-19 02:17:45.568, foo}
2016-06-19 02:17:45,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-06-19 02:17:45.569, foo, 2016-06-19 02:17:45.569, foo}
2016-06-19 02:17:45,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-06-19 02:17:45.571, foo, 2016-06-19 02:17:45.571, foo}
2016-06-19 02:17:45,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-06-19 02:17:45.588, foo, 2016-06-19 02:17:45.588, foo}
2016-06-19 02:17:45,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-06-19 02:17:45.59, foo, 2016-06-19 02:17:45.59, foo}
2016-06-19 02:17:45,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-06-19 02:17:45.59, foo, 2016-06-19 02:17:45.59, foo}
2016-06-19 02:17:45,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-06-19 02:17:45.591, foo, 2016-06-19 02:17:45.591, foo}
2016-06-19 02:17:45,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-06-19 02:17:45.591, foo, 2016-06-19 02:17:45.591, foo}
2016-06-19 02:17:45,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-06-19 02:17:45.592, foo, 2016-06-19 02:17:45.592, foo}
2016-06-19 02:17:45,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-06-19 02:17:45.592, foo, 2016-06-19 02:17:45.592, foo}
2016-06-19 02:17:45,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-06-19 02:17:45.593, foo, 2016-06-19 02:17:45.593, foo}
2016-06-19 02:17:45,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-06-19 02:17:45.596, foo, 2016-06-19 02:17:45.596, foo}
2016-06-19 02:17:45,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-06-19 02:17:45.597, foo, 2016-06-19 02:17:45.597, foo}
2016-06-19 02:17:45,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-06-19 02:17:45.598, foo, 2016-06-19 02:17:45.598, foo}
2016-06-19 02:17:45,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-06-19 02:17:45.598, foo, 2016-06-19 02:17:45.598, foo}
2016-06-19 02:17:45,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-06-19 02:17:45.599, foo, 2016-06-19 02:17:45.599, foo}
2016-06-19 02:17:45,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-06-19 02:17:45.6, foo, 2016-06-19 02:17:45.6, foo}
2016-06-19 02:17:45,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-06-19 02:17:45.601, foo, 2016-06-19 02:17:45.601, foo}
2016-06-19 02:17:45,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-06-19 02:17:45.602, foo, 2016-06-19 02:17:45.602, foo}
2016-06-19 02:17:45,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-06-19 02:17:45.603, foo, 2016-06-19 02:17:45.603, foo}
2016-06-19 02:17:45,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-06-19 02:17:45.604, foo, 2016-06-19 02:17:45.604, foo}
2016-06-19 02:17:45,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-06-19 02:17:45.606, foo, 2016-06-19 02:17:45.606, foo}
2016-06-19 02:17:45,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:17:45.607, foo, 2016-06-19 02:17:45.607, foo}
2016-06-19 02:17:45,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:17:45.608, foo, 2016-06-19 02:17:45.608, foo}
2016-06-19 02:17:45,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:17:45.609, foo, 2016-06-19 02:17:45.609, foo}
2016-06-19 02:17:45,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 02:17:45.61, foo, 2016-06-19 02:17:45.61, foo}
2016-06-19 02:17:45,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-06-19 02:17:45.611, foo, 2016-06-19 02:17:45.611, foo}
2016-06-19 02:17:45,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-06-19 02:17:45.614, foo, 2016-06-19 02:17:45.614, foo}
2016-06-19 02:17:45,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-06-19 02:17:45.621, foo, 2016-06-19 02:17:45.621, foo}
2016-06-19 02:17:45,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-06-19 02:17:45.622, foo, 2016-06-19 02:17:45.622, foo}
2016-06-19 02:17:45,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-06-19 02:17:45.623, foo, 2016-06-19 02:17:45.623, foo}
2016-06-19 02:17:45,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-06-19 02:17:45.624, foo, 2016-06-19 02:17:45.624, foo}
2016-06-19 02:17:45,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-06-19 02:17:45.625, foo, 2016-06-19 02:17:45.625, foo}
2016-06-19 02:17:45,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-06-19 02:17:45.625, foo, 2016-06-19 02:17:45.625, foo}
2016-06-19 02:17:45,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-06-19 02:17:45.627, foo, 2016-06-19 02:17:45.627, foo}
2016-06-19 02:17:45,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-06-19 02:17:45.628, foo, 2016-06-19 02:17:45.628, foo}
2016-06-19 02:17:45,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-06-19 02:17:45.629, foo, 2016-06-19 02:17:45.629, foo}
2016-06-19 02:17:45,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-06-19 02:17:45.63, foo, 2016-06-19 02:17:45.63, foo}
2016-06-19 02:17:45,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-06-19 02:17:45.631, foo, 2016-06-19 02:17:45.631, foo}
2016-06-19 02:17:45,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-06-19 02:17:45.633, foo, 2016-06-19 02:17:45.633, foo}
2016-06-19 02:17:45,705 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-06-19 02:17:45,706 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-06-19 02:17:45,721 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:45,732 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:17:45,742 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:17:45,746 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:17:45,750 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:17:45,753 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:17:45,756 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:17:45,769 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 02:17:45,772 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 02:17:45,775 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-06-19 02:17:45,780 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-06-19 02:17:45,782 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-06-19 02:17:45,788 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-06-19 02:17:45,789 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-06-19 02:17:45,789 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-06-19 02:17:45,789 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-06-19 02:17:45,790 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-06-19 02:17:45,790 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-06-19 02:17:45,805 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-06-19 02:17:45,807 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-06-19 02:17:45,812 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-06-19 02:17:45,814 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-06-19 02:17:45,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-06-19 02:17:45,817 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-06-19 02:17:45,818 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-06-19 02:17:45,819 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 02:17:45,828 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m06s119ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=42 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-19 02:17:46,807 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-06-19 02:17:46,812 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-06-19 02:17:46,812 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-06-19 02:17:46,813 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-06-19 02:17:46,813 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-06-19 02:17:46,845 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:46,846 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:46,847 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:46,847 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:46,906 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-06-19 02:17:46,906 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-06-19 02:17:46,907 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-06-19 02:17:46,927 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:17:47,080 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-06-19 02:17:47,088 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 02:17:47,656 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 02:17:47,657 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 02:17:47,658 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-06-19 02:17:47,661 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 02:17:47,661 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:47,661 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 02:17:47,676 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-06-19 02:17:47,680 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-06-19 02:17:47,700 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-06-19 02:17:47,700 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-06-19 02:17:47,700 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-06-19 02:17:47,701 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-06-19 02:17:47,759 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-06-19 02:17:47,777 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-06-19 02:17:47,791 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-06-19 02:17:47,805 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-06-19 02:17:47,824 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-06-19 02:17:47,836 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-06-19 02:17:47,851 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-06-19 02:17:47,867 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-06-19 02:17:47,878 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-06-19 02:17:47,887 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-06-19 02:17:47,903 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-06-19 02:17:47,915 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-06-19 02:17:47,925 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-06-19 02:17:47,935 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-06-19 02:17:47,943 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-06-19 02:17:47,944 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-06-19 02:17:47,944 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-06-19 02:17:47,944 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-06-19 02:17:47,944 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-06-19 02:17:47,946 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-06-19 02:17:47,950 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-06-19 02:17:47,950 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-06-19 02:17:47,950 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-06-19 02:17:47,990 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-06-19 02:17:47,992 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:17:48,068 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-06-19 02:17:48,069 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 02:17:48,078 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s292ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-06-19 02:17:48,958 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-06-19 02:17:48,963 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-06-19 02:17:48,964 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-06-19 02:17:48,964 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-06-19 02:17:48,964 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-06-19 02:17:49,001 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:49,001 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:49,001 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:49,002 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:49,005 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-06-19 02:17:49,005 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-06-19 02:17:49,006 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-06-19 02:17:49,006 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-06-19 02:17:49,006 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-06-19 02:17:49,007 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-06-19 02:17:49,063 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:17:49,178 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-06-19 02:17:49,357 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-06-19 02:17:49,364 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 02:17:49,365 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 02:17:49,366 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 02:17:49,367 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 02:17:49,368 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 02:17:49,369 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 02:17:49,371 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 02:17:49,371 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 02:17:49,374 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 02:17:49,378 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:17:49,379 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 02:17:49,380 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 02:17:49,380 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 02:17:49,381 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:17:49,381 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 02:17:49,381 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 02:17:49,382 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 02:17:49,393 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:49,745 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:17:49,749 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:17:49,752 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:17:49,754 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:17:49,758 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:17:49,761 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:17:49,767 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-06-19 02:17:49,768 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-06-19 02:17:50,175 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:17:50,217 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s274ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-06-19 02:17:52,963 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-06-19 02:17:52,966 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-06-19 02:17:52,967 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-06-19 02:17:52,967 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-06-19 02:17:52,967 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-06-19 02:17:52,990 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:52,990 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:52,991 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:52,991 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:53,005 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-06-19 02:17:53,005 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-06-19 02:17:53,042 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:17:53,119 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-06-19 02:17:53,378 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-06-19 02:17:53,383 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 02:17:53,384 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 02:17:53,385 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 02:17:53,386 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 02:17:53,387 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 02:17:53,388 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 02:17:53,391 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 02:17:53,391 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 02:17:53,393 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 02:17:53,401 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:17:53,401 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 02:17:53,402 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 02:17:53,402 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 02:17:53,403 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 02:17:53,403 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 02:17:53,403 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 02:17:53,403 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 02:17:53,412 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:53,743 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:17:53,747 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:17:53,750 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:17:53,753 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:17:53,759 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:17:53,762 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:17:53,777 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-06-19 02:17:53,777 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-06-19 02:17:53,779 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-06-19 02:17:53,779 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-06-19 02:17:53,779 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-06-19 02:17:53,780 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-06-19 02:17:53,780 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-06-19 02:17:53,781 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-06-19 02:17:53,781 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-06-19 02:17:53,782 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-06-19 02:17:53,798 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-06-19 02:17:53,799 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-06-19 02:17:53,864 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-06-19 02:17:53,867 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-06-19 02:17:53,884 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-06-19 02:17:53,889 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-06-19 02:17:53,908 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-06-19 02:17:53,913 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-06-19 02:17:53,921 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-06-19 02:17:53,926 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-06-19 02:17:53,932 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-06-19 02:17:53,936 [main] INFO  (Database#info():2711) - }
2016-06-19 02:17:53,936 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-06-19 02:17:53,937 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-06-19 02:17:53,960 [main] INFO  (Database#info():2711) - }
2016-06-19 02:17:53,970 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-06-19 02:17:54,018 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 02:17:54,019 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-06-19 02:17:54,020 [main] INFO  (Database#info():2711) -     parse('member');
2016-06-19 02:17:54,553 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-06-19 02:17:54,831 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-06-19 02:17:55,033 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-06-19 02:17:55,207 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-06-19 02:17:55,393 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-06-19 02:17:55,583 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-06-19 02:17:55,784 [main] INFO  (Database#info():2711) -     parse('product');
2016-06-19 02:17:56,015 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-06-19 02:17:56,181 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-06-19 02:17:56,308 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-06-19 02:17:56,515 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-06-19 02:17:56,645 [main] INFO  (Database#info():2711) -     parse('region');
2016-06-19 02:17:56,757 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-06-19 02:17:56,898 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-06-19 02:17:57,035 [main] INFO  (Database#info():2711) - }
2016-06-19 02:17:57,035 [main] INFO  (Database#info():2711) -  
2016-06-19 02:17:57,062 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:17:57,090 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s132ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-06-19 02:17:57,898 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-06-19 02:17:57,900 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-06-19 02:17:57,900 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-06-19 02:17:57,900 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-06-19 02:17:57,901 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-06-19 02:17:57,923 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:57,923 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:57,923 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:57,924 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:57,949 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 02:17:57,959 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s069ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-06-19 02:17:58,695 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-19 02:17:58,699 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-19 02:17:58,700 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-19 02:17:58,700 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-19 02:17:58,700 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-19 02:17:58,717 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 02:17:58,717 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 02:17:58,718 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 02:17:58,718 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 02:17:58,735 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-19 02:17:58,736 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-19 02:17:58,745 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 02:17:58,838 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 02:17:58,872 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-19 02:17:58,873 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-19 02:17:58,873 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-19 02:17:58,873 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-19 02:17:58,873 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-19 02:17:58,873 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-19 02:17:58,874 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-19 02:17:58,874 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-19 02:17:58,880 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-19 02:17:59,069 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 02:17:59,402 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 02:17:59,405 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 02:17:59,408 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 02:17:59,410 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 02:17:59,413 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 02:17:59,416 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 02:17:59,427 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-19 02:17:59,430 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-19 02:17:59,442 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 02:17:59,442 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-19 02:17:59,444 [main] INFO  (Database#info():2711) - }
2016-06-19 02:17:59,455 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2016-06-19 02:17:59,465 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 02:17:59,475 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s796ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-19 17:12:25,327 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-06-19 17:12:25,332 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-06-19 17:12:25,332 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-06-19 17:12:25,337 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-06-19 17:12:25,338 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-06-19 17:12:25,340 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-06-19 17:12:26,968 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 17:12:26,968 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 17:12:26,969 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 17:12:26,969 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 17:12:26,984 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 17:12:27,222 [main] INFO  (DfReplaceSchemaTask#setupLazyConnection():143) - ...Being a lazy connection: Failed to connect: url=jdbc:mysql://localhost:4...
2016-06-19 17:12:27,237 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-06-19 17:12:27,237 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-06-19 17:12:27,238 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-06-19 17:12:27,238 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-06-19 17:12:27,239 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-06-19 17:12:27,240 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-06-19 17:12:27,240 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():236) - *Passed because it's a lazy connection
2016-06-19 17:12:27,242 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-06-19 17:12:27,242 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-06-19 17:12:27,242 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-06-19 17:12:27,243 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-06-19 17:12:27,243 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-06-19 17:12:27,243 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-06-19 17:12:27,248 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-06-19 17:12:27,252 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-06-19 17:12:27,253 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-06-19 17:12:27,254 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-06-19 17:12:27,262 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.
* * * * * * * * * */
java.lang.IllegalStateException: Failed to connect: url=jdbc:mysql://localhost:43376 info={user=root, password=}
	at org.dbflute.properties.DfAbstractHelperProperties.createConnection(DfAbstractHelperProperties.java:692)
	at org.dbflute.properties.DfReplaceSchemaProperties.createAdditionalUserConnection(DfReplaceSchemaProperties.java:521)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess$1.dispatch(DfCreateSchemaProcess.java:296)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.dispatch(DfSqlFileRunnerExecute.java:89)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:58)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.createSchema(DfCreateSchemaProcess.java:274)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.execute(DfCreateSchemaProcess.java:143)
	at org.dbflute.task.DfReplaceSchemaTask.createSchema(DfReplaceSchemaTask.java:261)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:246)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1036)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:338)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2232)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2265)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2064)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:790)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:395)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:325)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.dbflute.properties.DfAbstractHelperProperties.createConnection(DfAbstractHelperProperties.java:687)
	... 34 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:243)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:297)
	... 49 more
2016-06-19 17:12:27,286 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s984ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$


_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-19 17:13:06,567 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-06-19 17:13:06,574 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-06-19 17:13:06,574 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-06-19 17:13:06,579 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-06-19 17:13:06,579 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-06-19 17:13:06,581 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-06-19 17:13:07,989 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 17:13:07,989 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 17:13:07,990 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 17:13:07,990 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 17:13:07,999 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 17:13:08,433 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 17:13:08,434 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 17:13:08,450 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-06-19 17:13:08,451 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-06-19 17:13:08,451 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-06-19 17:13:08,454 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-06-19 17:13:08,454 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-06-19 17:13:08,455 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-06-19 17:13:08,476 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 17:13:08,476 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 17:13:08,477 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 17:13:08,523 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-06-19 17:13:08,531 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-06-19 17:13:08,539 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-06-19 17:13:08,545 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-06-19 17:13:08,555 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-06-19 17:13:08,578 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-06-19 17:13:08,602 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-06-19 17:13:08,617 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-06-19 17:13:08,632 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-06-19 17:13:08,645 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-06-19 17:13:08,662 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-06-19 17:13:08,685 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-06-19 17:13:08,708 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-06-19 17:13:08,722 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-06-19 17:13:08,747 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-06-19 17:13:08,762 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-06-19 17:13:08,786 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-06-19 17:13:08,805 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-06-19 17:13:08,825 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-06-19 17:13:08,845 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-06-19 17:13:08,862 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-06-19 17:13:08,886 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-06-19 17:13:08,908 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-06-19 17:13:08,912 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-06-19 17:13:08,917 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-06-19 17:13:08,922 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-06-19 17:13:08,926 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-06-19 17:13:08,930 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-06-19 17:13:08,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-06-19 17:13:08,937 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-06-19 17:13:08,943 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-06-19 17:13:08,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-06-19 17:13:08,949 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-06-19 17:13:08,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-06-19 17:13:08,960 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-06-19 17:13:08,964 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-06-19 17:13:08,969 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-06-19 17:13:09,006 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-06-19 17:13:09,007 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-06-19 17:13:09,007 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-06-19 17:13:09,007 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-06-19 17:13:09,008 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-06-19 17:13:09,008 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-06-19 17:13:09,014 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-06-19 17:13:09,019 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-06-19 17:13:09,020 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-06-19 17:13:09,022 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-06-19 17:13:09,037 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-06-19 17:13:09,038 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-06-19 17:13:09,039 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-06-19 17:13:09,039 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-06-19 17:13:09,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-06-19 17:13:09,045 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-06-19 17:13:09,046 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-06-19 17:13:09,046 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-06-19 17:13:09,047 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-06-19 17:13:09,047 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-06-19 17:13:09,054 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-06-19 17:13:09,084 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-06-19 17:13:09,096 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-06-19 17:13:09,123 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-06-19 17:13:09,142 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-06-19 17:13:09,158 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-06-19 17:13:09,167 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-06-19 17:13:09,181 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-06-19 17:13:09,195 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-06-19 17:13:09,212 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-06-19 17:13:09,224 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-06-19 17:13:09,235 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-06-19 17:13:09,246 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-06-19 17:13:09,259 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-06-19 17:13:09,271 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-06-19 17:13:09,284 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 17:13:09,300 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,319 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-06-19 17:13:09,343 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 17:13:09,368 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,389 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,410 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-06-19 17:13:09,431 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,463 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,488 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-06-19 17:13:09,510 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 17:13:09,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-06-19 17:13:09,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-06-19 17:13:09,590 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 17:13:09,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-06-19 17:13:09,635 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 17:13:09,664 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-06-19 17:13:09,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-06-19 17:13:09,708 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-06-19 17:13:09,726 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-06-19 17:13:09,743 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-06-19 17:13:09,763 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-06-19 17:13:09,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-06-19 17:13:09,805 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-06-19 17:13:09,825 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-06-19 17:13:09,844 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-06-19 17:13:09,845 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=42 failure=0 (in 2 files)
2016-06-19 17:13:09,845 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-06-19 17:13:09,962 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-06-19 17:13:09,963 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-06-19 17:13:09,963 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-06-19 17:13:09,963 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-06-19 17:13:09,964 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-06-19 17:13:09,964 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-06-19 17:13:09,998 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 17:13:09,999 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-06-19 17:13:09,999 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 17:13:10,327 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 17:13:10,327 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 17:13:10,328 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 17:13:10,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-06-19 17:13:10,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-06-19 17:13:10,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-06-19 17:13:10,491 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-06-19 17:13:10,499 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-06-19 17:13:10,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-06-19 17:13:10,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-06-19 17:13:10,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-06-19 17:13:10,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-06-19 17:13:10,516 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-06-19 17:13:10,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-06-19 17:13:10,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-06-19 17:13:10,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-06-19 17:13:10,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-06-19 17:13:10,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-06-19 17:13:10,530 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-06-19 17:13:10,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-06-19 17:13:10,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-06-19 17:13:10,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-06-19 17:13:10,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-06-19 17:13:10,541 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-06-19 17:13:10,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-06-19 17:13:10,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-06-19 17:13:10,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-06-19 17:13:10,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-06-19 17:13:10,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-06-19 17:13:10,553 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-06-19 17:13:10,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-06-19 17:13:10,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-06-19 17:13:10,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-06-19 17:13:10,560 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-06-19 17:13:10,563 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 17:13:10,563 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-06-19 17:13:10,564 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 17:13:10,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-06-19 17:13:10.644, foo, 2016-06-19 17:13:10.644, foo, 0}
2016-06-19 17:13:10,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-06-19 17:13:10.649, foo, 2016-06-19 17:13:10.649, foo, 0}
2016-06-19 17:13:10,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-06-19 17:13:10.65, foo, 2016-06-19 17:13:10.65, foo, 0}
2016-06-19 17:13:10,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-06-19 17:13:10.651, foo, 2016-06-19 17:13:10.651, foo, 0}
2016-06-19 17:13:10,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-06-19 17:13:10.653, foo, 2016-06-19 17:13:10.653, foo, 0}
2016-06-19 17:13:10,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-06-19 17:13:10.655, foo, 2016-06-19 17:13:10.655, foo, 0}
2016-06-19 17:13:10,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-06-19 17:13:10.658, foo, 2016-06-19 17:13:10.658, foo, 0}
2016-06-19 17:13:10,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-06-19 17:13:10.66, foo, 2016-06-19 17:13:10.66, foo, 0}
2016-06-19 17:13:10,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-06-19 17:13:10.661, foo, 2016-06-19 17:13:10.661, foo, 0}
2016-06-19 17:13:10,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-06-19 17:13:10.664, foo, 2016-06-19 17:13:10.664, foo, 0}
2016-06-19 17:13:10,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-06-19 17:13:10.665, foo, 2016-06-19 17:13:10.665, foo, 0}
2016-06-19 17:13:10,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-06-19 17:13:10.668, foo, 2016-06-19 17:13:10.668, foo, 0}
2016-06-19 17:13:10,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-06-19 17:13:10.67, foo, 2016-06-19 17:13:10.67, foo, 0}
2016-06-19 17:13:10,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-06-19 17:13:10.673, foo, 2016-06-19 17:13:10.673, foo, 0}
2016-06-19 17:13:10,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-06-19 17:13:10.675, foo, 2016-06-19 17:13:10.675, foo, 0}
2016-06-19 17:13:10,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-06-19 17:13:10.677, foo, 2016-06-19 17:13:10.677, foo, 0}
2016-06-19 17:13:10,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-06-19 17:13:10.679, foo, 2016-06-19 17:13:10.679, foo, 0}
2016-06-19 17:13:10,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-06-19 17:13:10.683, foo, 2016-06-19 17:13:10.683, foo, 0}
2016-06-19 17:13:10,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-06-19 17:13:10.685, foo, 2016-06-19 17:13:10.685, foo, 0}
2016-06-19 17:13:10,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-06-19 17:13:10.687, foo, 2016-06-19 17:13:10.687, foo, 0}
2016-06-19 17:13:10,713 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-06-19 17:13:10,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-06-19 17:13:10.713, foo, 2016-06-19 17:13:10.713, foo, 0}
2016-06-19 17:13:10,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-06-19 17:13:10.716, foo, 2016-06-19 17:13:10.716, foo, 0}
2016-06-19 17:13:10,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-06-19 17:13:10.72, foo, 2016-06-19 17:13:10.721, foo, 0}
2016-06-19 17:13:10,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-06-19 17:13:10.725, foo, 2016-06-19 17:13:10.725, foo, 0}
2016-06-19 17:13:10,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-06-19 17:13:10.727, foo, 2016-06-19 17:13:10.727, foo, 0}
2016-06-19 17:13:10,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-06-19 17:13:10.739, foo, 2016-06-19 17:13:10.739, foo, 0}
2016-06-19 17:13:10,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-06-19 17:13:10.743, foo, 2016-06-19 17:13:10.743, foo, 0}
2016-06-19 17:13:10,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-06-19 17:13:10.746, foo, 2016-06-19 17:13:10.746, foo, 0}
2016-06-19 17:13:10,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-06-19 17:13:10.749, foo, 2016-06-19 17:13:10.749, foo, 0}
2016-06-19 17:13:10,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-06-19 17:13:10.751, foo, 2016-06-19 17:13:10.751, foo, 0}
2016-06-19 17:13:10,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-06-19 17:13:10.754, foo, 2016-06-19 17:13:10.754, foo, 0}
2016-06-19 17:13:10,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-06-19 17:13:10.757, foo, 2016-06-19 17:13:10.757, foo, 0}
2016-06-19 17:13:10,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-06-19 17:13:10.758, foo, 2016-06-19 17:13:10.758, foo, 0}
2016-06-19 17:13:10,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-06-19 17:13:10.76, foo, 2016-06-19 17:13:10.76, foo, 0}
2016-06-19 17:13:10,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-06-19 17:13:10.765, foo, 2016-06-19 17:13:10.765, foo, 0}
2016-06-19 17:13:10,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-06-19 17:13:10.767, foo, 2016-06-19 17:13:10.767, foo, 0}
2016-06-19 17:13:10,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-06-19 17:13:10.77, foo, 2016-06-19 17:13:10.77, foo, 0}
2016-06-19 17:13:10,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-06-19 17:13:10.773, foo, 2016-06-19 17:13:10.773, foo, 0}
2016-06-19 17:13:10,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-06-19 17:13:10.775, foo, 2016-06-19 17:13:10.775, foo, 0}
2016-06-19 17:13:10,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-06-19 17:13:10.778, foo, 2016-06-19 17:13:10.778, foo, 0}
2016-06-19 17:13:10,798 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-06-19 17:13:10,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-06-19 17:13:10,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-06-19 17:13:10,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-06-19 17:13:10,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-06-19 17:13:10,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-06-19 17:13:10,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-06-19 17:13:10,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-06-19 17:13:10,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-06-19 17:13:10,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-06-19 17:13:10,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-06-19 17:13:10,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-06-19 17:13:10,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-06-19 17:13:10,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-06-19 17:13:10,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-06-19 17:13:10,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-06-19 17:13:10,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-06-19 17:13:10,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-06-19 17:13:10,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-06-19 17:13:10,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-06-19 17:13:10,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-06-19 17:13:10,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-06-19 17:13:10,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-06-19 17:13:10,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-06-19 17:13:10,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-06-19 17:13:10,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-06-19 17:13:10,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-06-19 17:13:10,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-06-19 17:13:10,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-06-19 17:13:10,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-06-19 17:13:10,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-06-19 17:13:10,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-06-19 17:13:10,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-06-19 17:13:10,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-06-19 17:13:10,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-06-19 17:13:10,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-06-19 17:13:10,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-06-19 17:13:10,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-06-19 17:13:10,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-06-19 17:13:10,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-06-19 17:13:10,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-06-19 17:13:10,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-06-19 17:13:10,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-06-19 17:13:10,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-06-19 17:13:10,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-06-19 17:13:10,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-06-19 17:13:10,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-06-19 17:13:10,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-06-19 17:13:10,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-06-19 17:13:10,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-06-19 17:13:10,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-06-19 17:13:10,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-06-19 17:13:10,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-06-19 17:13:10,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-06-19 17:13:10,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-06-19 17:13:10,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-06-19 17:13:10,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-06-19 17:13:10,899 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-06-19 17:13:10,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-06-19 17:13:10.9, foo, 2016-06-19 17:13:10.9, foo, 0}
2016-06-19 17:13:10,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-06-19 17:13:10.902, foo, 2016-06-19 17:13:10.902, foo, 0}
2016-06-19 17:13:10,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-06-19 17:13:10.903, foo, 2016-06-19 17:13:10.903, foo, 0}
2016-06-19 17:13:10,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-06-19 17:13:10.904, foo, 2016-06-19 17:13:10.904, foo, 0}
2016-06-19 17:13:10,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-06-19 17:13:10.904, foo, 2016-06-19 17:13:10.905, foo, 0}
2016-06-19 17:13:10,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-06-19 17:13:10.905, foo, 2016-06-19 17:13:10.905, foo, 0}
2016-06-19 17:13:10,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-06-19 17:13:10.906, foo, 2016-06-19 17:13:10.906, foo, 0}
2016-06-19 17:13:10,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-06-19 17:13:10.907, foo, 2016-06-19 17:13:10.907, foo, 0}
2016-06-19 17:13:10,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-06-19 17:13:10.908, foo, 2016-06-19 17:13:10.908, foo, 0}
2016-06-19 17:13:10,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-06-19 17:13:10.909, foo, 2016-06-19 17:13:10.909, foo, 0}
2016-06-19 17:13:10,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-06-19 17:13:10.909, foo, 2016-06-19 17:13:10.91, foo, 0}
2016-06-19 17:13:10,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-06-19 17:13:10.91, foo, 2016-06-19 17:13:10.91, foo, 0}
2016-06-19 17:13:10,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-06-19 17:13:10.912, foo, 2016-06-19 17:13:10.912, foo, 0}
2016-06-19 17:13:10,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-06-19 17:13:10.913, foo, 2016-06-19 17:13:10.913, foo, 0}
2016-06-19 17:13:10,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-06-19 17:13:10.914, foo, 2016-06-19 17:13:10.914, foo, 0}
2016-06-19 17:13:10,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-06-19 17:13:10.915, foo, 2016-06-19 17:13:10.915, foo, 0}
2016-06-19 17:13:10,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-06-19 17:13:10.916, foo, 2016-06-19 17:13:10.916, foo, 0}
2016-06-19 17:13:10,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-06-19 17:13:10.917, foo, 2016-06-19 17:13:10.917, foo, 0}
2016-06-19 17:13:10,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-06-19 17:13:10.918, foo, 2016-06-19 17:13:10.918, foo, 0}
2016-06-19 17:13:10,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-06-19 17:13:10.918, foo, 2016-06-19 17:13:10.918, foo, 0}
2016-06-19 17:13:10,938 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-06-19 17:13:10,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-06-19 17:13:10.939, foo, 2016-06-19 17:13:10.939, foo, 0}
2016-06-19 17:13:10,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-06-19 17:13:10.941, foo, 2016-06-19 17:13:10.941, foo, 0}
2016-06-19 17:13:10,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-06-19 17:13:10.942, foo, 2016-06-19 17:13:10.942, foo, 0}
2016-06-19 17:13:10,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-06-19 17:13:10.943, foo, 2016-06-19 17:13:10.943, foo, 0}
2016-06-19 17:13:10,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-06-19 17:13:10.943, foo, 2016-06-19 17:13:10.943, foo, 0}
2016-06-19 17:13:10,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-06-19 17:13:10.944, foo, 2016-06-19 17:13:10.944, foo, 0}
2016-06-19 17:13:10,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-06-19 17:13:10.945, foo, 2016-06-19 17:13:10.945, foo, 0}
2016-06-19 17:13:10,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-06-19 17:13:10.946, foo, 2016-06-19 17:13:10.946, foo, 0}
2016-06-19 17:13:10,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-06-19 17:13:10.947, foo, 2016-06-19 17:13:10.947, foo, 0}
2016-06-19 17:13:10,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-06-19 17:13:10.948, foo, 2016-06-19 17:13:10.948, foo, 0}
2016-06-19 17:13:10,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-06-19 17:13:10.948, foo, 2016-06-19 17:13:10.948, foo, 0}
2016-06-19 17:13:10,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-06-19 17:13:10.949, foo, 2016-06-19 17:13:10.949, foo, 0}
2016-06-19 17:13:10,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-06-19 17:13:10.95, foo, 2016-06-19 17:13:10.95, foo, 0}
2016-06-19 17:13:10,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-06-19 17:13:10.951, foo, 2016-06-19 17:13:10.951, foo, 0}
2016-06-19 17:13:10,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-06-19 17:13:10.952, foo, 2016-06-19 17:13:10.952, foo, 0}
2016-06-19 17:13:10,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-06-19 17:13:10.953, foo, 2016-06-19 17:13:10.953, foo, 0}
2016-06-19 17:13:10,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-06-19 17:13:10.953, foo, 2016-06-19 17:13:10.953, foo, 0}
2016-06-19 17:13:10,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-06-19 17:13:10.954, foo, 2016-06-19 17:13:10.954, foo, 0}
2016-06-19 17:13:10,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-06-19 17:13:10.955, foo, 2016-06-19 17:13:10.955, foo, 0}
2016-06-19 17:13:10,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-06-19 17:13:10.955, foo, 2016-06-19 17:13:10.955, foo, 0}
2016-06-19 17:13:10,977 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-06-19 17:13:10,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-06-19 17:13:10.978, foo, 2016-06-19 17:13:10.978, foo}
2016-06-19 17:13:10,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-06-19 17:13:10.98, foo, 2016-06-19 17:13:10.98, foo}
2016-06-19 17:13:10,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-06-19 17:13:10.981, foo, 2016-06-19 17:13:10.981, foo}
2016-06-19 17:13:10,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-06-19 17:13:10.982, foo, 2016-06-19 17:13:10.982, foo}
2016-06-19 17:13:10,992 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-06-19 17:13:10,993 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 17:13:10,994 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-06-19 17:13:10,994 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 17:13:11,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-06-19 17:13:11.066, foo, 2016-06-19 17:13:11.066, foo, 0}
2016-06-19 17:13:11,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-06-19 17:13:11.068, foo, 2016-06-19 17:13:11.068, foo, 0}
2016-06-19 17:13:11,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-06-19 17:13:11.069, foo, 2016-06-19 17:13:11.069, foo, 0}
2016-06-19 17:13:11,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-06-19 17:13:11.07, foo, 2016-06-19 17:13:11.07, foo, 0}
2016-06-19 17:13:11,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-06-19 17:13:11.071, foo, 2016-06-19 17:13:11.071, foo, 0}
2016-06-19 17:13:11,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-06-19 17:13:11.072, foo, 2016-06-19 17:13:11.072, foo, 0}
2016-06-19 17:13:11,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-06-19 17:13:11.073, foo, 2016-06-19 17:13:11.073, foo, 0}
2016-06-19 17:13:11,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-06-19 17:13:11.075, foo, 2016-06-19 17:13:11.075, foo, 0}
2016-06-19 17:13:11,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-06-19 17:13:11.075, foo, 2016-06-19 17:13:11.075, foo, 0}
2016-06-19 17:13:11,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-06-19 17:13:11.076, foo, 2016-06-19 17:13:11.076, foo, 0}
2016-06-19 17:13:11,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-06-19 17:13:11.077, foo, 2016-06-19 17:13:11.077, foo, 0}
2016-06-19 17:13:11,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-06-19 17:13:11.077, foo, 2016-06-19 17:13:11.077, foo, 0}
2016-06-19 17:13:11,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-06-19 17:13:11.078, foo, 2016-06-19 17:13:11.078, foo, 0}
2016-06-19 17:13:11,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-06-19 17:13:11.079, foo, 2016-06-19 17:13:11.079, foo, 0}
2016-06-19 17:13:11,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-06-19 17:13:11.079, foo, 2016-06-19 17:13:11.079, foo, 0}
2016-06-19 17:13:11,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-06-19 17:13:11.08, foo, 2016-06-19 17:13:11.08, foo, 0}
2016-06-19 17:13:11,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-06-19 17:13:11.08, foo, 2016-06-19 17:13:11.08, foo, 0}
2016-06-19 17:13:11,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-06-19 17:13:11.081, foo, 2016-06-19 17:13:11.081, foo, 0}
2016-06-19 17:13:11,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-06-19 17:13:11.082, foo, 2016-06-19 17:13:11.082, foo, 0}
2016-06-19 17:13:11,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-06-19 17:13:11.083, foo, 2016-06-19 17:13:11.083, foo, 0}
2016-06-19 17:13:11,101 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-06-19 17:13:11,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-06-19 17:13:11.102, foo, 2016-06-19 17:13:11.102, foo, 0}
2016-06-19 17:13:11,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-06-19 17:13:11.104, foo, 2016-06-19 17:13:11.104, foo, 0}
2016-06-19 17:13:11,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-06-19 17:13:11.105, foo, 2016-06-19 17:13:11.105, foo, 0}
2016-06-19 17:13:11,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-06-19 17:13:11.106, foo, 2016-06-19 17:13:11.106, foo, 0}
2016-06-19 17:13:11,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-06-19 17:13:11.107, foo, 2016-06-19 17:13:11.107, foo, 0}
2016-06-19 17:13:11,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-06-19 17:13:11.108, foo, 2016-06-19 17:13:11.108, foo, 0}
2016-06-19 17:13:11,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-06-19 17:13:11.109, foo, 2016-06-19 17:13:11.109, foo, 0}
2016-06-19 17:13:11,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-06-19 17:13:11.11, foo, 2016-06-19 17:13:11.11, foo, 0}
2016-06-19 17:13:11,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-06-19 17:13:11.112, foo, 2016-06-19 17:13:11.112, foo, 0}
2016-06-19 17:13:11,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-06-19 17:13:11.113, foo, 2016-06-19 17:13:11.113, foo, 0}
2016-06-19 17:13:11,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-06-19 17:13:11.114, foo, 2016-06-19 17:13:11.114, foo, 0}
2016-06-19 17:13:11,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-06-19 17:13:11.115, foo, 2016-06-19 17:13:11.115, foo, 0}
2016-06-19 17:13:11,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-06-19 17:13:11.116, foo, 2016-06-19 17:13:11.116, foo, 0}
2016-06-19 17:13:11,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-06-19 17:13:11.117, foo, 2016-06-19 17:13:11.117, foo, 0}
2016-06-19 17:13:11,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-06-19 17:13:11.118, foo, 2016-06-19 17:13:11.118, foo, 0}
2016-06-19 17:13:11,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-06-19 17:13:11.123, foo, 2016-06-19 17:13:11.123, foo, 0}
2016-06-19 17:13:11,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-06-19 17:13:11.128, foo, 2016-06-19 17:13:11.128, foo, 0}
2016-06-19 17:13:11,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-06-19 17:13:11.129, foo, 2016-06-19 17:13:11.129, foo, 0}
2016-06-19 17:13:11,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-06-19 17:13:11.13, foo, 2016-06-19 17:13:11.13, foo, 0}
2016-06-19 17:13:11,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-06-19 17:13:11.13, foo, 2016-06-19 17:13:11.13, foo, 0}
2016-06-19 17:13:11,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-06-19 17:13:11.131, foo, 2016-06-19 17:13:11.131, foo, 0}
2016-06-19 17:13:11,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-06-19 17:13:11.132, foo, 2016-06-19 17:13:11.132, foo, 0}
2016-06-19 17:13:11,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-06-19 17:13:11.133, foo, 2016-06-19 17:13:11.133, foo, 0}
2016-06-19 17:13:11,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-06-19 17:13:11.134, foo, 2016-06-19 17:13:11.134, foo, 0}
2016-06-19 17:13:11,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-06-19 17:13:11.135, foo, 2016-06-19 17:13:11.135, foo, 0}
2016-06-19 17:13:11,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-06-19 17:13:11.136, foo, 2016-06-19 17:13:11.136, foo, 0}
2016-06-19 17:13:11,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-06-19 17:13:11.136, foo, 2016-06-19 17:13:11.136, foo, 0}
2016-06-19 17:13:11,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-06-19 17:13:11.137, foo, 2016-06-19 17:13:11.137, foo, 0}
2016-06-19 17:13:11,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-06-19 17:13:11.138, foo, 2016-06-19 17:13:11.138, foo, 0}
2016-06-19 17:13:11,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-06-19 17:13:11.138, foo, 2016-06-19 17:13:11.138, foo, 0}
2016-06-19 17:13:11,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-06-19 17:13:11.142, foo, 2016-06-19 17:13:11.142, foo, 0}
2016-06-19 17:13:11,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 17:13:11.143, foo, 2016-06-19 17:13:11.143, foo, 0}
2016-06-19 17:13:11,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 17:13:11.145, foo, 2016-06-19 17:13:11.145, foo, 0}
2016-06-19 17:13:11,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 17:13:11.146, foo, 2016-06-19 17:13:11.146, foo, 0}
2016-06-19 17:13:11,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 17:13:11.147, foo, 2016-06-19 17:13:11.147, foo, 0}
2016-06-19 17:13:11,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 17:13:11.148, foo, 2016-06-19 17:13:11.148, foo, 0}
2016-06-19 17:13:11,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-06-19 17:13:11.149, foo, 2016-06-19 17:13:11.149, foo, 0}
2016-06-19 17:13:11,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 17:13:11.15, foo, 2016-06-19 17:13:11.15, foo, 0}
2016-06-19 17:13:11,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 17:13:11.151, foo, 2016-06-19 17:13:11.151, foo, 0}
2016-06-19 17:13:11,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-06-19 17:13:11.152, foo, 2016-06-19 17:13:11.152, foo, 0}
2016-06-19 17:13:11,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-06-19 17:13:11.153, foo, 2016-06-19 17:13:11.153, foo, 0}
2016-06-19 17:13:11,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-06-19 17:13:11.153, foo, 2016-06-19 17:13:11.153, foo, 0}
2016-06-19 17:13:11,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 17:13:11.154, foo, 2016-06-19 17:13:11.154, foo, 0}
2016-06-19 17:13:11,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 17:13:11.157, foo, 2016-06-19 17:13:11.157, foo, 0}
2016-06-19 17:13:11,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 17:13:11.158, foo, 2016-06-19 17:13:11.158, foo, 0}
2016-06-19 17:13:11,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 17:13:11.158, foo, 2016-06-19 17:13:11.158, foo, 0}
2016-06-19 17:13:11,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 17:13:11.16, foo, 2016-06-19 17:13:11.16, foo, 0}
2016-06-19 17:13:11,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-06-19 17:13:11.161, foo, 2016-06-19 17:13:11.161, foo, 0}
2016-06-19 17:13:11,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 17:13:11.162, foo, 2016-06-19 17:13:11.162, foo, 0}
2016-06-19 17:13:11,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 17:13:11.163, foo, 2016-06-19 17:13:11.163, foo, 0}
2016-06-19 17:13:11,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-06-19 17:13:11.164, foo, 2016-06-19 17:13:11.164, foo, 0}
2016-06-19 17:13:11,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-06-19 17:13:11.166, foo, 2016-06-19 17:13:11.166, foo, 0}
2016-06-19 17:13:11,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-06-19 17:13:11.167, foo, 2016-06-19 17:13:11.167, foo, 0}
2016-06-19 17:13:11,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-06-19 17:13:11.168, foo, 2016-06-19 17:13:11.168, foo, 0}
2016-06-19 17:13:11,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-06-19 17:13:11.169, foo, 2016-06-19 17:13:11.169, foo, 0}
2016-06-19 17:13:11,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-06-19 17:13:11.17, foo, 2016-06-19 17:13:11.17, foo, 0}
2016-06-19 17:13:11,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-06-19 17:13:11.179, foo, 2016-06-19 17:13:11.179, foo, 0}
2016-06-19 17:13:11,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-06-19 17:13:11.18, foo, 2016-06-19 17:13:11.18, foo, 0}
2016-06-19 17:13:11,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-06-19 17:13:11.182, foo, 2016-06-19 17:13:11.182, foo, 0}
2016-06-19 17:13:11,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-06-19 17:13:11.183, foo, 2016-06-19 17:13:11.183, foo, 0}
2016-06-19 17:13:11,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-06-19 17:13:11.184, foo, 2016-06-19 17:13:11.184, foo, 0}
2016-06-19 17:13:11,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-06-19 17:13:11.185, foo, 2016-06-19 17:13:11.185, foo, 0}
2016-06-19 17:13:11,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-06-19 17:13:11.187, foo, 2016-06-19 17:13:11.187, foo, 0}
2016-06-19 17:13:11,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-06-19 17:13:11.188, foo, 2016-06-19 17:13:11.188, foo, 0}
2016-06-19 17:13:11,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-06-19 17:13:11.189, foo, 2016-06-19 17:13:11.189, foo, 0}
2016-06-19 17:13:11,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-06-19 17:13:11.19, foo, 2016-06-19 17:13:11.19, foo, 0}
2016-06-19 17:13:11,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-06-19 17:13:11.191, foo, 2016-06-19 17:13:11.191, foo, 0}
2016-06-19 17:13:11,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-06-19 17:13:11.193, foo, 2016-06-19 17:13:11.193, foo, 0}
2016-06-19 17:13:11,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-06-19 17:13:11.194, foo, 2016-06-19 17:13:11.194, foo, 0}
2016-06-19 17:13:11,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-06-19 17:13:11.195, foo, 2016-06-19 17:13:11.195, foo, 0}
2016-06-19 17:13:11,252 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-06-19 17:13:11,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-06-19 17:13:11.254, foo, 2016-06-19 17:13:11.254, foo}
2016-06-19 17:13:11,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-06-19 17:13:11.255, foo, 2016-06-19 17:13:11.255, foo}
2016-06-19 17:13:11,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-06-19 17:13:11.256, foo, 2016-06-19 17:13:11.256, foo}
2016-06-19 17:13:11,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-06-19 17:13:11.257, foo, 2016-06-19 17:13:11.257, foo}
2016-06-19 17:13:11,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-06-19 17:13:11.258, foo, 2016-06-19 17:13:11.258, foo}
2016-06-19 17:13:11,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-06-19 17:13:11.259, foo, 2016-06-19 17:13:11.259, foo}
2016-06-19 17:13:11,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-06-19 17:13:11.26, foo, 2016-06-19 17:13:11.261, foo}
2016-06-19 17:13:11,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-06-19 17:13:11.262, foo, 2016-06-19 17:13:11.262, foo}
2016-06-19 17:13:11,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-06-19 17:13:11.264, foo, 2016-06-19 17:13:11.264, foo}
2016-06-19 17:13:11,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-06-19 17:13:11.265, foo, 2016-06-19 17:13:11.265, foo}
2016-06-19 17:13:11,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-06-19 17:13:11.266, foo, 2016-06-19 17:13:11.266, foo}
2016-06-19 17:13:11,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-06-19 17:13:11.268, foo, 2016-06-19 17:13:11.268, foo}
2016-06-19 17:13:11,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-06-19 17:13:11.268, foo, 2016-06-19 17:13:11.268, foo}
2016-06-19 17:13:11,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-06-19 17:13:11.269, foo, 2016-06-19 17:13:11.269, foo}
2016-06-19 17:13:11,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-06-19 17:13:11.27, foo, 2016-06-19 17:13:11.27, foo}
2016-06-19 17:13:11,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-06-19 17:13:11.271, foo, 2016-06-19 17:13:11.271, foo}
2016-06-19 17:13:11,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-06-19 17:13:11.272, foo, 2016-06-19 17:13:11.272, foo}
2016-06-19 17:13:11,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-06-19 17:13:11.273, foo, 2016-06-19 17:13:11.273, foo}
2016-06-19 17:13:11,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-06-19 17:13:11.274, foo, 2016-06-19 17:13:11.274, foo}
2016-06-19 17:13:11,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-06-19 17:13:11.275, foo, 2016-06-19 17:13:11.275, foo}
2016-06-19 17:13:11,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-06-19 17:13:11.277, foo, 2016-06-19 17:13:11.277, foo}
2016-06-19 17:13:11,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-06-19 17:13:11.278, foo, 2016-06-19 17:13:11.278, foo}
2016-06-19 17:13:11,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-06-19 17:13:11.278, foo, 2016-06-19 17:13:11.278, foo}
2016-06-19 17:13:11,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-06-19 17:13:11.279, foo, 2016-06-19 17:13:11.279, foo}
2016-06-19 17:13:11,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-06-19 17:13:11.28, foo, 2016-06-19 17:13:11.28, foo}
2016-06-19 17:13:11,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 17:13:11.281, foo, 2016-06-19 17:13:11.281, foo}
2016-06-19 17:13:11,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-06-19 17:13:11.283, foo, 2016-06-19 17:13:11.283, foo}
2016-06-19 17:13:11,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-06-19 17:13:11.284, foo, 2016-06-19 17:13:11.284, foo}
2016-06-19 17:13:11,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-06-19 17:13:11.285, foo, 2016-06-19 17:13:11.285, foo}
2016-06-19 17:13:11,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 17:13:11.286, foo, 2016-06-19 17:13:11.286, foo}
2016-06-19 17:13:11,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 17:13:11.293, foo, 2016-06-19 17:13:11.293, foo}
2016-06-19 17:13:11,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 17:13:11.294, foo, 2016-06-19 17:13:11.295, foo}
2016-06-19 17:13:11,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-06-19 17:13:11.295, foo, 2016-06-19 17:13:11.295, foo}
2016-06-19 17:13:11,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-06-19 17:13:11.296, foo, 2016-06-19 17:13:11.296, foo}
2016-06-19 17:13:11,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-06-19 17:13:11.297, foo, 2016-06-19 17:13:11.297, foo}
2016-06-19 17:13:11,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-06-19 17:13:11.298, foo, 2016-06-19 17:13:11.298, foo}
2016-06-19 17:13:11,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-06-19 17:13:11.311, foo, 2016-06-19 17:13:11.311, foo}
2016-06-19 17:13:11,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-06-19 17:13:11.312, foo, 2016-06-19 17:13:11.312, foo}
2016-06-19 17:13:11,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-06-19 17:13:11.313, foo, 2016-06-19 17:13:11.313, foo}
2016-06-19 17:13:11,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-06-19 17:13:11.314, foo, 2016-06-19 17:13:11.314, foo}
2016-06-19 17:13:11,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-06-19 17:13:11.315, foo, 2016-06-19 17:13:11.315, foo}
2016-06-19 17:13:11,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-06-19 17:13:11.317, foo, 2016-06-19 17:13:11.317, foo}
2016-06-19 17:13:11,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-06-19 17:13:11.318, foo, 2016-06-19 17:13:11.318, foo}
2016-06-19 17:13:11,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-06-19 17:13:11.318, foo, 2016-06-19 17:13:11.318, foo}
2016-06-19 17:13:11,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-06-19 17:13:11.319, foo, 2016-06-19 17:13:11.319, foo}
2016-06-19 17:13:11,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-06-19 17:13:11.319, foo, 2016-06-19 17:13:11.319, foo}
2016-06-19 17:13:11,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-06-19 17:13:11.32, foo, 2016-06-19 17:13:11.32, foo}
2016-06-19 17:13:11,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-06-19 17:13:11.322, foo, 2016-06-19 17:13:11.322, foo}
2016-06-19 17:13:11,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-06-19 17:13:11.331, foo, 2016-06-19 17:13:11.331, foo}
2016-06-19 17:13:11,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-06-19 17:13:11.332, foo, 2016-06-19 17:13:11.332, foo}
2016-06-19 17:13:11,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-06-19 17:13:11.346, foo, 2016-06-19 17:13:11.346, foo}
2016-06-19 17:13:11,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-06-19 17:13:11.348, foo, 2016-06-19 17:13:11.348, foo}
2016-06-19 17:13:11,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-06-19 17:13:11.349, foo, 2016-06-19 17:13:11.349, foo}
2016-06-19 17:13:11,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-06-19 17:13:11.35, foo, 2016-06-19 17:13:11.35, foo}
2016-06-19 17:13:11,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-06-19 17:13:11.351, foo, 2016-06-19 17:13:11.351, foo}
2016-06-19 17:13:11,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-06-19 17:13:11.352, foo, 2016-06-19 17:13:11.352, foo}
2016-06-19 17:13:11,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-06-19 17:13:11.353, foo, 2016-06-19 17:13:11.353, foo}
2016-06-19 17:13:11,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-06-19 17:13:11.354, foo, 2016-06-19 17:13:11.354, foo}
2016-06-19 17:13:11,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 17:13:11.355, foo, 2016-06-19 17:13:11.355, foo}
2016-06-19 17:13:11,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-06-19 17:13:11.356, foo, 2016-06-19 17:13:11.356, foo}
2016-06-19 17:13:11,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-06-19 17:13:11.358, foo, 2016-06-19 17:13:11.358, foo}
2016-06-19 17:13:11,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-06-19 17:13:11.36, foo, 2016-06-19 17:13:11.36, foo}
2016-06-19 17:13:11,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-06-19 17:13:11.361, foo, 2016-06-19 17:13:11.361, foo}
2016-06-19 17:13:11,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-06-19 17:13:11.362, foo, 2016-06-19 17:13:11.362, foo}
2016-06-19 17:13:11,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-06-19 17:13:11.364, foo, 2016-06-19 17:13:11.364, foo}
2016-06-19 17:13:11,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-06-19 17:13:11.365, foo, 2016-06-19 17:13:11.365, foo}
2016-06-19 17:13:11,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-06-19 17:13:11.366, foo, 2016-06-19 17:13:11.366, foo}
2016-06-19 17:13:11,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-06-19 17:13:11.367, foo, 2016-06-19 17:13:11.367, foo}
2016-06-19 17:13:11,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-06-19 17:13:11.368, foo, 2016-06-19 17:13:11.368, foo}
2016-06-19 17:13:11,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-06-19 17:13:11.369, foo, 2016-06-19 17:13:11.369, foo}
2016-06-19 17:13:11,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-06-19 17:13:11.37, foo, 2016-06-19 17:13:11.37, foo}
2016-06-19 17:13:11,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-06-19 17:13:11.371, foo, 2016-06-19 17:13:11.371, foo}
2016-06-19 17:13:11,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-06-19 17:13:11.372, foo, 2016-06-19 17:13:11.372, foo}
2016-06-19 17:13:11,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-06-19 17:13:11.373, foo, 2016-06-19 17:13:11.373, foo}
2016-06-19 17:13:11,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-06-19 17:13:11.374, foo, 2016-06-19 17:13:11.374, foo}
2016-06-19 17:13:11,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-06-19 17:13:11.375, foo, 2016-06-19 17:13:11.375, foo}
2016-06-19 17:13:11,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-06-19 17:13:11.376, foo, 2016-06-19 17:13:11.376, foo}
2016-06-19 17:13:11,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-06-19 17:13:11.377, foo, 2016-06-19 17:13:11.377, foo}
2016-06-19 17:13:11,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-06-19 17:13:11.378, foo, 2016-06-19 17:13:11.378, foo}
2016-06-19 17:13:11,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-06-19 17:13:11.379, foo, 2016-06-19 17:13:11.379, foo}
2016-06-19 17:13:11,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-06-19 17:13:11.38, foo, 2016-06-19 17:13:11.38, foo}
2016-06-19 17:13:11,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-06-19 17:13:11.381, foo, 2016-06-19 17:13:11.381, foo}
2016-06-19 17:13:11,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 17:13:11.382, foo, 2016-06-19 17:13:11.382, foo}
2016-06-19 17:13:11,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 17:13:11.383, foo, 2016-06-19 17:13:11.383, foo}
2016-06-19 17:13:11,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 17:13:11.384, foo, 2016-06-19 17:13:11.384, foo}
2016-06-19 17:13:11,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 17:13:11.385, foo, 2016-06-19 17:13:11.385, foo}
2016-06-19 17:13:11,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-06-19 17:13:11.386, foo, 2016-06-19 17:13:11.386, foo}
2016-06-19 17:13:11,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-06-19 17:13:11.387, foo, 2016-06-19 17:13:11.387, foo}
2016-06-19 17:13:11,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-06-19 17:13:11.388, foo, 2016-06-19 17:13:11.388, foo}
2016-06-19 17:13:11,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-06-19 17:13:11.389, foo, 2016-06-19 17:13:11.389, foo}
2016-06-19 17:13:11,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-06-19 17:13:11.391, foo, 2016-06-19 17:13:11.391, foo}
2016-06-19 17:13:11,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-06-19 17:13:11.393, foo, 2016-06-19 17:13:11.393, foo}
2016-06-19 17:13:11,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-06-19 17:13:11.393, foo, 2016-06-19 17:13:11.393, foo}
2016-06-19 17:13:11,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-06-19 17:13:11.394, foo, 2016-06-19 17:13:11.394, foo}
2016-06-19 17:13:11,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-06-19 17:13:11.395, foo, 2016-06-19 17:13:11.395, foo}
2016-06-19 17:13:11,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-06-19 17:13:11.396, foo, 2016-06-19 17:13:11.396, foo}
2016-06-19 17:13:11,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-06-19 17:13:11.396, foo, 2016-06-19 17:13:11.396, foo}
2016-06-19 17:13:11,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-06-19 17:13:11.397, foo, 2016-06-19 17:13:11.397, foo}
2016-06-19 17:13:11,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-06-19 17:13:11.398, foo, 2016-06-19 17:13:11.398, foo}
2016-06-19 17:13:11,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-06-19 17:13:11.399, foo, 2016-06-19 17:13:11.399, foo}
2016-06-19 17:13:11,482 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-06-19 17:13:11,482 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-06-19 17:13:11,499 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 17:13:11,511 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 17:13:11,521 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 17:13:11,524 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 17:13:11,527 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 17:13:11,529 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 17:13:11,538 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 17:13:11,549 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 17:13:11,552 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 17:13:11,555 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-06-19 17:13:11,559 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-06-19 17:13:11,561 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-06-19 17:13:11,567 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-06-19 17:13:11,567 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-06-19 17:13:11,568 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-06-19 17:13:11,568 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-06-19 17:13:11,568 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-06-19 17:13:11,568 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-06-19 17:13:11,578 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-06-19 17:13:11,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-06-19 17:13:11,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-06-19 17:13:11,590 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-06-19 17:13:11,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-06-19 17:13:11,595 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-06-19 17:13:11,597 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-06-19 17:13:11,598 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 17:13:11,605 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s058ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=42 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-19 22:38:37,513 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-06-19 22:38:37,525 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-06-19 22:38:37,526 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-06-19 22:38:37,531 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-06-19 22:38:37,532 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-06-19 22:38:37,534 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-06-19 22:38:39,764 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:39,765 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:39,765 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:39,766 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:39,777 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 22:38:40,296 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 22:38:40,296 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 22:38:40,322 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-06-19 22:38:40,322 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-06-19 22:38:40,323 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-06-19 22:38:40,325 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-06-19 22:38:40,325 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-06-19 22:38:40,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-06-19 22:38:40,352 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 22:38:40,352 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:40,353 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 22:38:40,430 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-06-19 22:38:40,437 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-06-19 22:38:40,443 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-06-19 22:38:40,449 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-06-19 22:38:40,459 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-06-19 22:38:40,482 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-06-19 22:38:40,509 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-06-19 22:38:40,529 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-06-19 22:38:40,551 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-06-19 22:38:40,575 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-06-19 22:38:40,592 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-06-19 22:38:40,613 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-06-19 22:38:40,633 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-06-19 22:38:40,650 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-06-19 22:38:40,677 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-06-19 22:38:40,691 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-06-19 22:38:40,715 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-06-19 22:38:40,731 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-06-19 22:38:40,753 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-06-19 22:38:40,775 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-06-19 22:38:40,792 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-06-19 22:38:40,816 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-06-19 22:38:40,836 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-06-19 22:38:40,839 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-06-19 22:38:40,844 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-06-19 22:38:40,848 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-06-19 22:38:40,851 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-06-19 22:38:40,855 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-06-19 22:38:40,858 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-06-19 22:38:40,862 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-06-19 22:38:40,866 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-06-19 22:38:40,871 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-06-19 22:38:40,874 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-06-19 22:38:40,879 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-06-19 22:38:40,882 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-06-19 22:38:40,885 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-06-19 22:38:40,888 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-06-19 22:38:40,925 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-06-19 22:38:40,925 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-06-19 22:38:40,926 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-06-19 22:38:40,926 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-06-19 22:38:40,926 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-06-19 22:38:40,927 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-06-19 22:38:40,931 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-06-19 22:38:40,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-06-19 22:38:40,936 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-06-19 22:38:40,937 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-06-19 22:38:40,950 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-06-19 22:38:40,950 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-06-19 22:38:40,951 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-06-19 22:38:40,952 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-06-19 22:38:40,957 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-06-19 22:38:40,965 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-06-19 22:38:40,966 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-06-19 22:38:40,966 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-06-19 22:38:40,967 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-06-19 22:38:40,967 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-06-19 22:38:40,976 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-06-19 22:38:40,994 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-06-19 22:38:41,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-06-19 22:38:41,021 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-06-19 22:38:41,034 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-06-19 22:38:41,050 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-06-19 22:38:41,068 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-06-19 22:38:41,172 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-06-19 22:38:41,191 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-06-19 22:38:41,207 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-06-19 22:38:41,218 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-06-19 22:38:41,230 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-06-19 22:38:41,240 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-06-19 22:38:41,255 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-06-19 22:38:41,267 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-06-19 22:38:41,281 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 22:38:41,303 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,329 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-06-19 22:38:41,363 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-19 22:38:41,390 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,420 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,448 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-06-19 22:38:41,468 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,487 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,506 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-06-19 22:38:41,527 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-19 22:38:41,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-06-19 22:38:41,583 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-06-19 22:38:41,611 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 22:38:41,638 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-06-19 22:38:41,659 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-19 22:38:41,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-06-19 22:38:41,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-06-19 22:38:41,722 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-06-19 22:38:41,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-06-19 22:38:41,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-06-19 22:38:41,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-06-19 22:38:41,802 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-06-19 22:38:41,822 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-06-19 22:38:41,845 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-06-19 22:38:41,862 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-06-19 22:38:41,863 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=42 failure=0 (in 2 files)
2016-06-19 22:38:41,863 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-06-19 22:38:42,017 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-06-19 22:38:42,017 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-06-19 22:38:42,017 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-06-19 22:38:42,018 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-06-19 22:38:42,018 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-06-19 22:38:42,019 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-06-19 22:38:42,056 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 22:38:42,056 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-06-19 22:38:42,057 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 22:38:42,377 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 22:38:42,378 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:42,378 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 22:38:42,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-06-19 22:38:42,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-06-19 22:38:42,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-06-19 22:38:42,468 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-06-19 22:38:42,478 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-06-19 22:38:42,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-06-19 22:38:42,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-06-19 22:38:42,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-06-19 22:38:42,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-06-19 22:38:42,486 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-06-19 22:38:42,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-06-19 22:38:42,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-06-19 22:38:42,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-06-19 22:38:42,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-06-19 22:38:42,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-06-19 22:38:42,494 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-06-19 22:38:42,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-06-19 22:38:42,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-06-19 22:38:42,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-06-19 22:38:42,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-06-19 22:38:42,504 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-06-19 22:38:42,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-06-19 22:38:42,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-06-19 22:38:42,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-06-19 22:38:42,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-06-19 22:38:42,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-06-19 22:38:42,516 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-06-19 22:38:42,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-06-19 22:38:42,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-06-19 22:38:42,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-06-19 22:38:42,525 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-06-19 22:38:42,528 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 22:38:42,528 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-06-19 22:38:42,529 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 22:38:42,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-06-19 22:38:42.617, foo, 2016-06-19 22:38:42.617, foo, 0}
2016-06-19 22:38:42,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-06-19 22:38:42.624, foo, 2016-06-19 22:38:42.624, foo, 0}
2016-06-19 22:38:42,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-06-19 22:38:42.626, foo, 2016-06-19 22:38:42.626, foo, 0}
2016-06-19 22:38:42,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-06-19 22:38:42.628, foo, 2016-06-19 22:38:42.628, foo, 0}
2016-06-19 22:38:42,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-06-19 22:38:42.63, foo, 2016-06-19 22:38:42.63, foo, 0}
2016-06-19 22:38:42,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-06-19 22:38:42.632, foo, 2016-06-19 22:38:42.632, foo, 0}
2016-06-19 22:38:42,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-06-19 22:38:42.635, foo, 2016-06-19 22:38:42.635, foo, 0}
2016-06-19 22:38:42,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-06-19 22:38:42.638, foo, 2016-06-19 22:38:42.638, foo, 0}
2016-06-19 22:38:42,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-06-19 22:38:42.64, foo, 2016-06-19 22:38:42.64, foo, 0}
2016-06-19 22:38:42,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-06-19 22:38:42.642, foo, 2016-06-19 22:38:42.642, foo, 0}
2016-06-19 22:38:42,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-06-19 22:38:42.644, foo, 2016-06-19 22:38:42.644, foo, 0}
2016-06-19 22:38:42,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-06-19 22:38:42.646, foo, 2016-06-19 22:38:42.646, foo, 0}
2016-06-19 22:38:42,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-06-19 22:38:42.648, foo, 2016-06-19 22:38:42.648, foo, 0}
2016-06-19 22:38:42,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-06-19 22:38:42.65, foo, 2016-06-19 22:38:42.65, foo, 0}
2016-06-19 22:38:42,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-06-19 22:38:42.653, foo, 2016-06-19 22:38:42.653, foo, 0}
2016-06-19 22:38:42,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-06-19 22:38:42.655, foo, 2016-06-19 22:38:42.656, foo, 0}
2016-06-19 22:38:42,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-06-19 22:38:42.657, foo, 2016-06-19 22:38:42.657, foo, 0}
2016-06-19 22:38:42,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-06-19 22:38:42.659, foo, 2016-06-19 22:38:42.659, foo, 0}
2016-06-19 22:38:42,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-06-19 22:38:42.661, foo, 2016-06-19 22:38:42.661, foo, 0}
2016-06-19 22:38:42,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-06-19 22:38:42.669, foo, 2016-06-19 22:38:42.669, foo, 0}
2016-06-19 22:38:42,692 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-06-19 22:38:42,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-06-19 22:38:42.693, foo, 2016-06-19 22:38:42.693, foo, 0}
2016-06-19 22:38:42,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-06-19 22:38:42.696, foo, 2016-06-19 22:38:42.696, foo, 0}
2016-06-19 22:38:42,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-06-19 22:38:42.698, foo, 2016-06-19 22:38:42.698, foo, 0}
2016-06-19 22:38:42,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-06-19 22:38:42.701, foo, 2016-06-19 22:38:42.701, foo, 0}
2016-06-19 22:38:42,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-06-19 22:38:42.703, foo, 2016-06-19 22:38:42.703, foo, 0}
2016-06-19 22:38:42,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-06-19 22:38:42.706, foo, 2016-06-19 22:38:42.706, foo, 0}
2016-06-19 22:38:42,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-06-19 22:38:42.708, foo, 2016-06-19 22:38:42.708, foo, 0}
2016-06-19 22:38:42,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-06-19 22:38:42.711, foo, 2016-06-19 22:38:42.711, foo, 0}
2016-06-19 22:38:42,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-06-19 22:38:42.716, foo, 2016-06-19 22:38:42.716, foo, 0}
2016-06-19 22:38:42,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-06-19 22:38:42.722, foo, 2016-06-19 22:38:42.722, foo, 0}
2016-06-19 22:38:42,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-06-19 22:38:42.725, foo, 2016-06-19 22:38:42.725, foo, 0}
2016-06-19 22:38:42,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-06-19 22:38:42.73, foo, 2016-06-19 22:38:42.73, foo, 0}
2016-06-19 22:38:42,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-06-19 22:38:42.732, foo, 2016-06-19 22:38:42.732, foo, 0}
2016-06-19 22:38:42,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-06-19 22:38:42.734, foo, 2016-06-19 22:38:42.734, foo, 0}
2016-06-19 22:38:42,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-06-19 22:38:42.736, foo, 2016-06-19 22:38:42.736, foo, 0}
2016-06-19 22:38:42,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-06-19 22:38:42.739, foo, 2016-06-19 22:38:42.739, foo, 0}
2016-06-19 22:38:42,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-06-19 22:38:42.741, foo, 2016-06-19 22:38:42.741, foo, 0}
2016-06-19 22:38:42,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-06-19 22:38:42.743, foo, 2016-06-19 22:38:42.743, foo, 0}
2016-06-19 22:38:42,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-06-19 22:38:42.749, foo, 2016-06-19 22:38:42.749, foo, 0}
2016-06-19 22:38:42,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-06-19 22:38:42.752, foo, 2016-06-19 22:38:42.752, foo, 0}
2016-06-19 22:38:42,768 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-06-19 22:38:42,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-06-19 22:38:42,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-06-19 22:38:42,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-06-19 22:38:42,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-06-19 22:38:42,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-06-19 22:38:42,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-06-19 22:38:42,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-06-19 22:38:42,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-06-19 22:38:42,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-06-19 22:38:42,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-06-19 22:38:42,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-06-19 22:38:42,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-06-19 22:38:42,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-06-19 22:38:42,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-06-19 22:38:42,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-06-19 22:38:42,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-06-19 22:38:42,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-06-19 22:38:42,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-06-19 22:38:42,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-06-19 22:38:42,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-06-19 22:38:42,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-06-19 22:38:42,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-06-19 22:38:42,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-06-19 22:38:42,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-06-19 22:38:42,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-06-19 22:38:42,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-06-19 22:38:42,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-06-19 22:38:42,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-06-19 22:38:42,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-06-19 22:38:42,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-06-19 22:38:42,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-06-19 22:38:42,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-06-19 22:38:42,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-06-19 22:38:42,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-06-19 22:38:42,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-06-19 22:38:42,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-06-19 22:38:42,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-06-19 22:38:42,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-06-19 22:38:42,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-06-19 22:38:42,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-06-19 22:38:42,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-06-19 22:38:42,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-06-19 22:38:42,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-06-19 22:38:42,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-06-19 22:38:42,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-06-19 22:38:42,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-06-19 22:38:42,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-06-19 22:38:42,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-06-19 22:38:42,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-06-19 22:38:42,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-06-19 22:38:42,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-06-19 22:38:42,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-06-19 22:38:42,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-06-19 22:38:42,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-06-19 22:38:42,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-06-19 22:38:42,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-06-19 22:38:42,865 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-06-19 22:38:42,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-06-19 22:38:42.866, foo, 2016-06-19 22:38:42.866, foo, 0}
2016-06-19 22:38:42,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-06-19 22:38:42.868, foo, 2016-06-19 22:38:42.868, foo, 0}
2016-06-19 22:38:42,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-06-19 22:38:42.869, foo, 2016-06-19 22:38:42.869, foo, 0}
2016-06-19 22:38:42,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-06-19 22:38:42.871, foo, 2016-06-19 22:38:42.871, foo, 0}
2016-06-19 22:38:42,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-06-19 22:38:42.871, foo, 2016-06-19 22:38:42.871, foo, 0}
2016-06-19 22:38:42,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-06-19 22:38:42.872, foo, 2016-06-19 22:38:42.872, foo, 0}
2016-06-19 22:38:42,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-06-19 22:38:42.873, foo, 2016-06-19 22:38:42.873, foo, 0}
2016-06-19 22:38:42,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-06-19 22:38:42.874, foo, 2016-06-19 22:38:42.874, foo, 0}
2016-06-19 22:38:42,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-06-19 22:38:42.875, foo, 2016-06-19 22:38:42.875, foo, 0}
2016-06-19 22:38:42,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-06-19 22:38:42.875, foo, 2016-06-19 22:38:42.875, foo, 0}
2016-06-19 22:38:42,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-06-19 22:38:42.876, foo, 2016-06-19 22:38:42.876, foo, 0}
2016-06-19 22:38:42,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-06-19 22:38:42.879, foo, 2016-06-19 22:38:42.879, foo, 0}
2016-06-19 22:38:42,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-06-19 22:38:42.88, foo, 2016-06-19 22:38:42.88, foo, 0}
2016-06-19 22:38:42,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-06-19 22:38:42.881, foo, 2016-06-19 22:38:42.881, foo, 0}
2016-06-19 22:38:42,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-06-19 22:38:42.882, foo, 2016-06-19 22:38:42.882, foo, 0}
2016-06-19 22:38:42,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-06-19 22:38:42.883, foo, 2016-06-19 22:38:42.883, foo, 0}
2016-06-19 22:38:42,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-06-19 22:38:42.883, foo, 2016-06-19 22:38:42.883, foo, 0}
2016-06-19 22:38:42,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-06-19 22:38:42.884, foo, 2016-06-19 22:38:42.884, foo, 0}
2016-06-19 22:38:42,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-06-19 22:38:42.885, foo, 2016-06-19 22:38:42.885, foo, 0}
2016-06-19 22:38:42,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-06-19 22:38:42.886, foo, 2016-06-19 22:38:42.886, foo, 0}
2016-06-19 22:38:42,905 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-06-19 22:38:42,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-06-19 22:38:42.906, foo, 2016-06-19 22:38:42.906, foo, 0}
2016-06-19 22:38:42,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-06-19 22:38:42.907, foo, 2016-06-19 22:38:42.907, foo, 0}
2016-06-19 22:38:42,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-06-19 22:38:42.908, foo, 2016-06-19 22:38:42.908, foo, 0}
2016-06-19 22:38:42,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-06-19 22:38:42.908, foo, 2016-06-19 22:38:42.908, foo, 0}
2016-06-19 22:38:42,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-06-19 22:38:42.909, foo, 2016-06-19 22:38:42.909, foo, 0}
2016-06-19 22:38:42,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-06-19 22:38:42.909, foo, 2016-06-19 22:38:42.909, foo, 0}
2016-06-19 22:38:42,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-06-19 22:38:42.91, foo, 2016-06-19 22:38:42.91, foo, 0}
2016-06-19 22:38:42,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-06-19 22:38:42.911, foo, 2016-06-19 22:38:42.911, foo, 0}
2016-06-19 22:38:42,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-06-19 22:38:42.912, foo, 2016-06-19 22:38:42.912, foo, 0}
2016-06-19 22:38:42,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-06-19 22:38:42.912, foo, 2016-06-19 22:38:42.912, foo, 0}
2016-06-19 22:38:42,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-06-19 22:38:42.913, foo, 2016-06-19 22:38:42.913, foo, 0}
2016-06-19 22:38:42,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-06-19 22:38:42.915, foo, 2016-06-19 22:38:42.915, foo, 0}
2016-06-19 22:38:42,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-06-19 22:38:42.915, foo, 2016-06-19 22:38:42.915, foo, 0}
2016-06-19 22:38:42,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-06-19 22:38:42.916, foo, 2016-06-19 22:38:42.916, foo, 0}
2016-06-19 22:38:42,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-06-19 22:38:42.918, foo, 2016-06-19 22:38:42.918, foo, 0}
2016-06-19 22:38:42,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-06-19 22:38:42.919, foo, 2016-06-19 22:38:42.919, foo, 0}
2016-06-19 22:38:42,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-06-19 22:38:42.919, foo, 2016-06-19 22:38:42.919, foo, 0}
2016-06-19 22:38:42,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-06-19 22:38:42.921, foo, 2016-06-19 22:38:42.921, foo, 0}
2016-06-19 22:38:42,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-06-19 22:38:42.921, foo, 2016-06-19 22:38:42.921, foo, 0}
2016-06-19 22:38:42,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-06-19 22:38:42.922, foo, 2016-06-19 22:38:42.922, foo, 0}
2016-06-19 22:38:42,943 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-06-19 22:38:42,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-06-19 22:38:42.944, foo, 2016-06-19 22:38:42.944, foo}
2016-06-19 22:38:42,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-06-19 22:38:42.945, foo, 2016-06-19 22:38:42.945, foo}
2016-06-19 22:38:42,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-06-19 22:38:42.946, foo, 2016-06-19 22:38:42.946, foo}
2016-06-19 22:38:42,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-06-19 22:38:42.946, foo, 2016-06-19 22:38:42.946, foo}
2016-06-19 22:38:42,953 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-06-19 22:38:42,953 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-19 22:38:42,953 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-06-19 22:38:42,954 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-19 22:38:43,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-06-19 22:38:43.027, foo, 2016-06-19 22:38:43.027, foo, 0}
2016-06-19 22:38:43,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-06-19 22:38:43.03, foo, 2016-06-19 22:38:43.03, foo, 0}
2016-06-19 22:38:43,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-06-19 22:38:43.031, foo, 2016-06-19 22:38:43.031, foo, 0}
2016-06-19 22:38:43,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-06-19 22:38:43.032, foo, 2016-06-19 22:38:43.032, foo, 0}
2016-06-19 22:38:43,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-06-19 22:38:43.033, foo, 2016-06-19 22:38:43.033, foo, 0}
2016-06-19 22:38:43,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-06-19 22:38:43.034, foo, 2016-06-19 22:38:43.034, foo, 0}
2016-06-19 22:38:43,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-06-19 22:38:43.035, foo, 2016-06-19 22:38:43.035, foo, 0}
2016-06-19 22:38:43,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-06-19 22:38:43.035, foo, 2016-06-19 22:38:43.035, foo, 0}
2016-06-19 22:38:43,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-06-19 22:38:43.036, foo, 2016-06-19 22:38:43.036, foo, 0}
2016-06-19 22:38:43,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-06-19 22:38:43.036, foo, 2016-06-19 22:38:43.036, foo, 0}
2016-06-19 22:38:43,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-06-19 22:38:43.037, foo, 2016-06-19 22:38:43.037, foo, 0}
2016-06-19 22:38:43,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-06-19 22:38:43.038, foo, 2016-06-19 22:38:43.038, foo, 0}
2016-06-19 22:38:43,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-06-19 22:38:43.038, foo, 2016-06-19 22:38:43.038, foo, 0}
2016-06-19 22:38:43,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-06-19 22:38:43.039, foo, 2016-06-19 22:38:43.039, foo, 0}
2016-06-19 22:38:43,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-06-19 22:38:43.039, foo, 2016-06-19 22:38:43.039, foo, 0}
2016-06-19 22:38:43,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-06-19 22:38:43.04, foo, 2016-06-19 22:38:43.04, foo, 0}
2016-06-19 22:38:43,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-06-19 22:38:43.04, foo, 2016-06-19 22:38:43.04, foo, 0}
2016-06-19 22:38:43,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-06-19 22:38:43.041, foo, 2016-06-19 22:38:43.041, foo, 0}
2016-06-19 22:38:43,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-06-19 22:38:43.043, foo, 2016-06-19 22:38:43.043, foo, 0}
2016-06-19 22:38:43,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-06-19 22:38:43.044, foo, 2016-06-19 22:38:43.044, foo, 0}
2016-06-19 22:38:43,058 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-06-19 22:38:43,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-06-19 22:38:43.059, foo, 2016-06-19 22:38:43.059, foo, 0}
2016-06-19 22:38:43,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-06-19 22:38:43.06, foo, 2016-06-19 22:38:43.06, foo, 0}
2016-06-19 22:38:43,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-06-19 22:38:43.061, foo, 2016-06-19 22:38:43.061, foo, 0}
2016-06-19 22:38:43,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-06-19 22:38:43.062, foo, 2016-06-19 22:38:43.062, foo, 0}
2016-06-19 22:38:43,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-06-19 22:38:43.063, foo, 2016-06-19 22:38:43.063, foo, 0}
2016-06-19 22:38:43,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-06-19 22:38:43.065, foo, 2016-06-19 22:38:43.065, foo, 0}
2016-06-19 22:38:43,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-06-19 22:38:43.066, foo, 2016-06-19 22:38:43.066, foo, 0}
2016-06-19 22:38:43,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-06-19 22:38:43.068, foo, 2016-06-19 22:38:43.068, foo, 0}
2016-06-19 22:38:43,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-06-19 22:38:43.069, foo, 2016-06-19 22:38:43.069, foo, 0}
2016-06-19 22:38:43,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-06-19 22:38:43.082, foo, 2016-06-19 22:38:43.082, foo, 0}
2016-06-19 22:38:43,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-06-19 22:38:43.083, foo, 2016-06-19 22:38:43.083, foo, 0}
2016-06-19 22:38:43,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-06-19 22:38:43.084, foo, 2016-06-19 22:38:43.084, foo, 0}
2016-06-19 22:38:43,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-06-19 22:38:43.086, foo, 2016-06-19 22:38:43.086, foo, 0}
2016-06-19 22:38:43,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-06-19 22:38:43.087, foo, 2016-06-19 22:38:43.087, foo, 0}
2016-06-19 22:38:43,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-06-19 22:38:43.09, foo, 2016-06-19 22:38:43.09, foo, 0}
2016-06-19 22:38:43,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-06-19 22:38:43.091, foo, 2016-06-19 22:38:43.091, foo, 0}
2016-06-19 22:38:43,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-06-19 22:38:43.108, foo, 2016-06-19 22:38:43.108, foo, 0}
2016-06-19 22:38:43,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-06-19 22:38:43.111, foo, 2016-06-19 22:38:43.111, foo, 0}
2016-06-19 22:38:43,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-06-19 22:38:43.124, foo, 2016-06-19 22:38:43.124, foo, 0}
2016-06-19 22:38:43,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-06-19 22:38:43.137, foo, 2016-06-19 22:38:43.137, foo, 0}
2016-06-19 22:38:43,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-06-19 22:38:43.139, foo, 2016-06-19 22:38:43.139, foo, 0}
2016-06-19 22:38:43,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-06-19 22:38:43.14, foo, 2016-06-19 22:38:43.14, foo, 0}
2016-06-19 22:38:43,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-06-19 22:38:43.141, foo, 2016-06-19 22:38:43.141, foo, 0}
2016-06-19 22:38:43,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-06-19 22:38:43.142, foo, 2016-06-19 22:38:43.142, foo, 0}
2016-06-19 22:38:43,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-06-19 22:38:43.143, foo, 2016-06-19 22:38:43.143, foo, 0}
2016-06-19 22:38:43,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-06-19 22:38:43.145, foo, 2016-06-19 22:38:43.145, foo, 0}
2016-06-19 22:38:43,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-06-19 22:38:43.146, foo, 2016-06-19 22:38:43.146, foo, 0}
2016-06-19 22:38:43,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-06-19 22:38:43.148, foo, 2016-06-19 22:38:43.148, foo, 0}
2016-06-19 22:38:43,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-06-19 22:38:43.15, foo, 2016-06-19 22:38:43.15, foo, 0}
2016-06-19 22:38:43,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-06-19 22:38:43.152, foo, 2016-06-19 22:38:43.152, foo, 0}
2016-06-19 22:38:43,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-06-19 22:38:43.153, foo, 2016-06-19 22:38:43.153, foo, 0}
2016-06-19 22:38:43,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 22:38:43.155, foo, 2016-06-19 22:38:43.155, foo, 0}
2016-06-19 22:38:43,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 22:38:43.156, foo, 2016-06-19 22:38:43.156, foo, 0}
2016-06-19 22:38:43,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 22:38:43.157, foo, 2016-06-19 22:38:43.157, foo, 0}
2016-06-19 22:38:43,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 22:38:43.159, foo, 2016-06-19 22:38:43.159, foo, 0}
2016-06-19 22:38:43,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 22:38:43.16, foo, 2016-06-19 22:38:43.16, foo, 0}
2016-06-19 22:38:43,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-06-19 22:38:43.161, foo, 2016-06-19 22:38:43.161, foo, 0}
2016-06-19 22:38:43,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 22:38:43.162, foo, 2016-06-19 22:38:43.162, foo, 0}
2016-06-19 22:38:43,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 22:38:43.162, foo, 2016-06-19 22:38:43.162, foo, 0}
2016-06-19 22:38:43,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-06-19 22:38:43.163, foo, 2016-06-19 22:38:43.163, foo, 0}
2016-06-19 22:38:43,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-06-19 22:38:43.164, foo, 2016-06-19 22:38:43.164, foo, 0}
2016-06-19 22:38:43,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-06-19 22:38:43.166, foo, 2016-06-19 22:38:43.166, foo, 0}
2016-06-19 22:38:43,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-19 22:38:43.168, foo, 2016-06-19 22:38:43.168, foo, 0}
2016-06-19 22:38:43,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-19 22:38:43.169, foo, 2016-06-19 22:38:43.169, foo, 0}
2016-06-19 22:38:43,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-19 22:38:43.171, foo, 2016-06-19 22:38:43.171, foo, 0}
2016-06-19 22:38:43,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-19 22:38:43.172, foo, 2016-06-19 22:38:43.172, foo, 0}
2016-06-19 22:38:43,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-19 22:38:43.173, foo, 2016-06-19 22:38:43.173, foo, 0}
2016-06-19 22:38:43,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-06-19 22:38:43.174, foo, 2016-06-19 22:38:43.174, foo, 0}
2016-06-19 22:38:43,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-19 22:38:43.176, foo, 2016-06-19 22:38:43.176, foo, 0}
2016-06-19 22:38:43,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-19 22:38:43.177, foo, 2016-06-19 22:38:43.177, foo, 0}
2016-06-19 22:38:43,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-06-19 22:38:43.178, foo, 2016-06-19 22:38:43.178, foo, 0}
2016-06-19 22:38:43,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-06-19 22:38:43.18, foo, 2016-06-19 22:38:43.18, foo, 0}
2016-06-19 22:38:43,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-06-19 22:38:43.181, foo, 2016-06-19 22:38:43.181, foo, 0}
2016-06-19 22:38:43,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-06-19 22:38:43.182, foo, 2016-06-19 22:38:43.182, foo, 0}
2016-06-19 22:38:43,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-06-19 22:38:43.183, foo, 2016-06-19 22:38:43.183, foo, 0}
2016-06-19 22:38:43,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-06-19 22:38:43.184, foo, 2016-06-19 22:38:43.184, foo, 0}
2016-06-19 22:38:43,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-06-19 22:38:43.185, foo, 2016-06-19 22:38:43.185, foo, 0}
2016-06-19 22:38:43,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-06-19 22:38:43.197, foo, 2016-06-19 22:38:43.197, foo, 0}
2016-06-19 22:38:43,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-06-19 22:38:43.198, foo, 2016-06-19 22:38:43.198, foo, 0}
2016-06-19 22:38:43,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-06-19 22:38:43.199, foo, 2016-06-19 22:38:43.199, foo, 0}
2016-06-19 22:38:43,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-06-19 22:38:43.201, foo, 2016-06-19 22:38:43.201, foo, 0}
2016-06-19 22:38:43,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-06-19 22:38:43.202, foo, 2016-06-19 22:38:43.202, foo, 0}
2016-06-19 22:38:43,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-06-19 22:38:43.203, foo, 2016-06-19 22:38:43.203, foo, 0}
2016-06-19 22:38:43,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-06-19 22:38:43.203, foo, 2016-06-19 22:38:43.203, foo, 0}
2016-06-19 22:38:43,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-06-19 22:38:43.206, foo, 2016-06-19 22:38:43.206, foo, 0}
2016-06-19 22:38:43,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-06-19 22:38:43.207, foo, 2016-06-19 22:38:43.207, foo, 0}
2016-06-19 22:38:43,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-06-19 22:38:43.209, foo, 2016-06-19 22:38:43.209, foo, 0}
2016-06-19 22:38:43,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-06-19 22:38:43.211, foo, 2016-06-19 22:38:43.211, foo, 0}
2016-06-19 22:38:43,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-06-19 22:38:43.212, foo, 2016-06-19 22:38:43.213, foo, 0}
2016-06-19 22:38:43,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-06-19 22:38:43.218, foo, 2016-06-19 22:38:43.218, foo, 0}
2016-06-19 22:38:43,277 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-06-19 22:38:43,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-06-19 22:38:43.278, foo, 2016-06-19 22:38:43.278, foo}
2016-06-19 22:38:43,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-06-19 22:38:43.279, foo, 2016-06-19 22:38:43.279, foo}
2016-06-19 22:38:43,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-06-19 22:38:43.28, foo, 2016-06-19 22:38:43.28, foo}
2016-06-19 22:38:43,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-06-19 22:38:43.281, foo, 2016-06-19 22:38:43.281, foo}
2016-06-19 22:38:43,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-06-19 22:38:43.281, foo, 2016-06-19 22:38:43.281, foo}
2016-06-19 22:38:43,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-06-19 22:38:43.282, foo, 2016-06-19 22:38:43.282, foo}
2016-06-19 22:38:43,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-06-19 22:38:43.283, foo, 2016-06-19 22:38:43.283, foo}
2016-06-19 22:38:43,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-06-19 22:38:43.286, foo, 2016-06-19 22:38:43.286, foo}
2016-06-19 22:38:43,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-06-19 22:38:43.287, foo, 2016-06-19 22:38:43.287, foo}
2016-06-19 22:38:43,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-06-19 22:38:43.289, foo, 2016-06-19 22:38:43.289, foo}
2016-06-19 22:38:43,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-06-19 22:38:43.29, foo, 2016-06-19 22:38:43.29, foo}
2016-06-19 22:38:43,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-06-19 22:38:43.291, foo, 2016-06-19 22:38:43.291, foo}
2016-06-19 22:38:43,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-06-19 22:38:43.292, foo, 2016-06-19 22:38:43.292, foo}
2016-06-19 22:38:43,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-06-19 22:38:43.293, foo, 2016-06-19 22:38:43.293, foo}
2016-06-19 22:38:43,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-06-19 22:38:43.295, foo, 2016-06-19 22:38:43.295, foo}
2016-06-19 22:38:43,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-06-19 22:38:43.296, foo, 2016-06-19 22:38:43.296, foo}
2016-06-19 22:38:43,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-06-19 22:38:43.296, foo, 2016-06-19 22:38:43.296, foo}
2016-06-19 22:38:43,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-06-19 22:38:43.297, foo, 2016-06-19 22:38:43.297, foo}
2016-06-19 22:38:43,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-06-19 22:38:43.298, foo, 2016-06-19 22:38:43.298, foo}
2016-06-19 22:38:43,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-06-19 22:38:43.299, foo, 2016-06-19 22:38:43.299, foo}
2016-06-19 22:38:43,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-06-19 22:38:43.301, foo, 2016-06-19 22:38:43.301, foo}
2016-06-19 22:38:43,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-06-19 22:38:43.302, foo, 2016-06-19 22:38:43.302, foo}
2016-06-19 22:38:43,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-06-19 22:38:43.303, foo, 2016-06-19 22:38:43.303, foo}
2016-06-19 22:38:43,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-06-19 22:38:43.303, foo, 2016-06-19 22:38:43.303, foo}
2016-06-19 22:38:43,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-06-19 22:38:43.304, foo, 2016-06-19 22:38:43.304, foo}
2016-06-19 22:38:43,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 22:38:43.305, foo, 2016-06-19 22:38:43.305, foo}
2016-06-19 22:38:43,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-06-19 22:38:43.306, foo, 2016-06-19 22:38:43.306, foo}
2016-06-19 22:38:43,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-06-19 22:38:43.306, foo, 2016-06-19 22:38:43.306, foo}
2016-06-19 22:38:43,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-06-19 22:38:43.307, foo, 2016-06-19 22:38:43.307, foo}
2016-06-19 22:38:43,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 22:38:43.307, foo, 2016-06-19 22:38:43.307, foo}
2016-06-19 22:38:43,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 22:38:43.31, foo, 2016-06-19 22:38:43.31, foo}
2016-06-19 22:38:43,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-19 22:38:43.312, foo, 2016-06-19 22:38:43.312, foo}
2016-06-19 22:38:43,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-06-19 22:38:43.313, foo, 2016-06-19 22:38:43.313, foo}
2016-06-19 22:38:43,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-06-19 22:38:43.314, foo, 2016-06-19 22:38:43.314, foo}
2016-06-19 22:38:43,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-06-19 22:38:43.315, foo, 2016-06-19 22:38:43.315, foo}
2016-06-19 22:38:43,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-06-19 22:38:43.316, foo, 2016-06-19 22:38:43.316, foo}
2016-06-19 22:38:43,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-06-19 22:38:43.317, foo, 2016-06-19 22:38:43.317, foo}
2016-06-19 22:38:43,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-06-19 22:38:43.326, foo, 2016-06-19 22:38:43.326, foo}
2016-06-19 22:38:43,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-06-19 22:38:43.327, foo, 2016-06-19 22:38:43.327, foo}
2016-06-19 22:38:43,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-06-19 22:38:43.328, foo, 2016-06-19 22:38:43.328, foo}
2016-06-19 22:38:43,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-06-19 22:38:43.329, foo, 2016-06-19 22:38:43.329, foo}
2016-06-19 22:38:43,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-06-19 22:38:43.33, foo, 2016-06-19 22:38:43.33, foo}
2016-06-19 22:38:43,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-06-19 22:38:43.332, foo, 2016-06-19 22:38:43.332, foo}
2016-06-19 22:38:43,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-06-19 22:38:43.334, foo, 2016-06-19 22:38:43.334, foo}
2016-06-19 22:38:43,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-06-19 22:38:43.335, foo, 2016-06-19 22:38:43.335, foo}
2016-06-19 22:38:43,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-06-19 22:38:43.336, foo, 2016-06-19 22:38:43.336, foo}
2016-06-19 22:38:43,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-06-19 22:38:43.337, foo, 2016-06-19 22:38:43.337, foo}
2016-06-19 22:38:43,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-06-19 22:38:43.338, foo, 2016-06-19 22:38:43.338, foo}
2016-06-19 22:38:43,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-06-19 22:38:43.339, foo, 2016-06-19 22:38:43.339, foo}
2016-06-19 22:38:43,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-06-19 22:38:43.34, foo, 2016-06-19 22:38:43.34, foo}
2016-06-19 22:38:43,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-06-19 22:38:43.341, foo, 2016-06-19 22:38:43.341, foo}
2016-06-19 22:38:43,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-06-19 22:38:43.342, foo, 2016-06-19 22:38:43.342, foo}
2016-06-19 22:38:43,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-06-19 22:38:43.343, foo, 2016-06-19 22:38:43.343, foo}
2016-06-19 22:38:43,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-06-19 22:38:43.345, foo, 2016-06-19 22:38:43.345, foo}
2016-06-19 22:38:43,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-06-19 22:38:43.346, foo, 2016-06-19 22:38:43.346, foo}
2016-06-19 22:38:43,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-06-19 22:38:43.348, foo, 2016-06-19 22:38:43.348, foo}
2016-06-19 22:38:43,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-06-19 22:38:43.351, foo, 2016-06-19 22:38:43.351, foo}
2016-06-19 22:38:43,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-06-19 22:38:43.352, foo, 2016-06-19 22:38:43.352, foo}
2016-06-19 22:38:43,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-06-19 22:38:43.353, foo, 2016-06-19 22:38:43.353, foo}
2016-06-19 22:38:43,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-06-19 22:38:43.355, foo, 2016-06-19 22:38:43.355, foo}
2016-06-19 22:38:43,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-06-19 22:38:43.356, foo, 2016-06-19 22:38:43.356, foo}
2016-06-19 22:38:43,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-06-19 22:38:43.357, foo, 2016-06-19 22:38:43.357, foo}
2016-06-19 22:38:43,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-06-19 22:38:43.358, foo, 2016-06-19 22:38:43.358, foo}
2016-06-19 22:38:43,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-06-19 22:38:43.359, foo, 2016-06-19 22:38:43.359, foo}
2016-06-19 22:38:43,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-06-19 22:38:43.36, foo, 2016-06-19 22:38:43.36, foo}
2016-06-19 22:38:43,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-06-19 22:38:43.361, foo, 2016-06-19 22:38:43.361, foo}
2016-06-19 22:38:43,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-06-19 22:38:43.362, foo, 2016-06-19 22:38:43.362, foo}
2016-06-19 22:38:43,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-06-19 22:38:43.363, foo, 2016-06-19 22:38:43.363, foo}
2016-06-19 22:38:43,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-06-19 22:38:43.364, foo, 2016-06-19 22:38:43.364, foo}
2016-06-19 22:38:43,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-06-19 22:38:43.365, foo, 2016-06-19 22:38:43.365, foo}
2016-06-19 22:38:43,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-06-19 22:38:43.366, foo, 2016-06-19 22:38:43.366, foo}
2016-06-19 22:38:43,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-06-19 22:38:43.367, foo, 2016-06-19 22:38:43.367, foo}
2016-06-19 22:38:43,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-06-19 22:38:43.369, foo, 2016-06-19 22:38:43.369, foo}
2016-06-19 22:38:43,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-06-19 22:38:43.37, foo, 2016-06-19 22:38:43.37, foo}
2016-06-19 22:38:43,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-06-19 22:38:43.378, foo, 2016-06-19 22:38:43.378, foo}
2016-06-19 22:38:43,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-06-19 22:38:43.379, foo, 2016-06-19 22:38:43.379, foo}
2016-06-19 22:38:43,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-06-19 22:38:43.38, foo, 2016-06-19 22:38:43.38, foo}
2016-06-19 22:38:43,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-06-19 22:38:43.391, foo, 2016-06-19 22:38:43.391, foo}
2016-06-19 22:38:43,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-06-19 22:38:43.392, foo, 2016-06-19 22:38:43.392, foo}
2016-06-19 22:38:43,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-06-19 22:38:43.393, foo, 2016-06-19 22:38:43.393, foo}
2016-06-19 22:38:43,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-06-19 22:38:43.394, foo, 2016-06-19 22:38:43.394, foo}
2016-06-19 22:38:43,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-06-19 22:38:43.397, foo, 2016-06-19 22:38:43.397, foo}
2016-06-19 22:38:43,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 22:38:43.399, foo, 2016-06-19 22:38:43.399, foo}
2016-06-19 22:38:43,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 22:38:43.401, foo, 2016-06-19 22:38:43.401, foo}
2016-06-19 22:38:43,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 22:38:43.402, foo, 2016-06-19 22:38:43.402, foo}
2016-06-19 22:38:43,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-19 22:38:43.403, foo, 2016-06-19 22:38:43.403, foo}
2016-06-19 22:38:43,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-06-19 22:38:43.404, foo, 2016-06-19 22:38:43.404, foo}
2016-06-19 22:38:43,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-06-19 22:38:43.405, foo, 2016-06-19 22:38:43.405, foo}
2016-06-19 22:38:43,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-06-19 22:38:43.406, foo, 2016-06-19 22:38:43.406, foo}
2016-06-19 22:38:43,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-06-19 22:38:43.407, foo, 2016-06-19 22:38:43.407, foo}
2016-06-19 22:38:43,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-06-19 22:38:43.408, foo, 2016-06-19 22:38:43.408, foo}
2016-06-19 22:38:43,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-06-19 22:38:43.409, foo, 2016-06-19 22:38:43.409, foo}
2016-06-19 22:38:43,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-06-19 22:38:43.409, foo, 2016-06-19 22:38:43.409, foo}
2016-06-19 22:38:43,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-06-19 22:38:43.41, foo, 2016-06-19 22:38:43.41, foo}
2016-06-19 22:38:43,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-06-19 22:38:43.41, foo, 2016-06-19 22:38:43.41, foo}
2016-06-19 22:38:43,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-06-19 22:38:43.411, foo, 2016-06-19 22:38:43.411, foo}
2016-06-19 22:38:43,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-06-19 22:38:43.411, foo, 2016-06-19 22:38:43.411, foo}
2016-06-19 22:38:43,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-06-19 22:38:43.412, foo, 2016-06-19 22:38:43.412, foo}
2016-06-19 22:38:43,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-06-19 22:38:43.413, foo, 2016-06-19 22:38:43.413, foo}
2016-06-19 22:38:43,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-06-19 22:38:43.414, foo, 2016-06-19 22:38:43.414, foo}
2016-06-19 22:38:43,476 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-06-19 22:38:43,477 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-06-19 22:38:43,495 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:43,507 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 22:38:43,517 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 22:38:43,520 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 22:38:43,523 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 22:38:43,526 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 22:38:43,533 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 22:38:43,544 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 22:38:43,547 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-19 22:38:43,551 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-06-19 22:38:43,556 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-06-19 22:38:43,558 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-06-19 22:38:43,564 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-06-19 22:38:43,564 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-06-19 22:38:43,564 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-06-19 22:38:43,564 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-06-19 22:38:43,564 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-06-19 22:38:43,565 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-06-19 22:38:43,573 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-06-19 22:38:43,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-06-19 22:38:43,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-06-19 22:38:43,584 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-06-19 22:38:43,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-06-19 22:38:43,588 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-06-19 22:38:43,589 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-06-19 22:38:43,590 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 22:38:43,595 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m06s115ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=42 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-19 22:38:44,588 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-06-19 22:38:44,593 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-06-19 22:38:44,594 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-06-19 22:38:44,594 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-06-19 22:38:44,595 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-06-19 22:38:44,630 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:44,630 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:44,636 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:44,637 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:44,727 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-06-19 22:38:44,728 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-06-19 22:38:44,729 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-06-19 22:38:44,748 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 22:38:44,902 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-06-19 22:38:44,908 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-19 22:38:45,413 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-19 22:38:45,414 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-19 22:38:45,415 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-06-19 22:38:45,417 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-19 22:38:45,418 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:45,418 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-19 22:38:45,436 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-06-19 22:38:45,440 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-06-19 22:38:45,460 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-06-19 22:38:45,461 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-06-19 22:38:45,461 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-06-19 22:38:45,461 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-06-19 22:38:45,522 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-06-19 22:38:45,540 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-06-19 22:38:45,555 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-06-19 22:38:45,568 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-06-19 22:38:45,583 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-06-19 22:38:45,594 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-06-19 22:38:45,607 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-06-19 22:38:45,621 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-06-19 22:38:45,632 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-06-19 22:38:45,641 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-06-19 22:38:45,656 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-06-19 22:38:45,668 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-06-19 22:38:45,677 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-06-19 22:38:45,686 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-06-19 22:38:45,695 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-06-19 22:38:45,695 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-06-19 22:38:45,696 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-06-19 22:38:45,696 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-06-19 22:38:45,696 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-06-19 22:38:45,700 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-06-19 22:38:45,705 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-06-19 22:38:45,706 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-06-19 22:38:45,706 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-06-19 22:38:45,755 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-06-19 22:38:45,757 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 22:38:45,832 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-06-19 22:38:45,832 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-19 22:38:45,843 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s271ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-06-19 22:38:46,746 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-06-19 22:38:46,748 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-06-19 22:38:46,749 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-06-19 22:38:46,749 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-06-19 22:38:46,750 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-06-19 22:38:46,776 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:46,777 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:46,777 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:46,777 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:46,780 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-06-19 22:38:46,780 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-06-19 22:38:46,781 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-06-19 22:38:46,781 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-06-19 22:38:46,781 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-06-19 22:38:46,781 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-06-19 22:38:46,860 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 22:38:46,979 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-06-19 22:38:47,196 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-06-19 22:38:47,204 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 22:38:47,205 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 22:38:47,207 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 22:38:47,208 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 22:38:47,208 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 22:38:47,209 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 22:38:47,212 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 22:38:47,212 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 22:38:47,215 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 22:38:47,219 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 22:38:47,220 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 22:38:47,220 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 22:38:47,220 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 22:38:47,221 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 22:38:47,221 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 22:38:47,221 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 22:38:47,222 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 22:38:47,230 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:47,562 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 22:38:47,565 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 22:38:47,568 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 22:38:47,570 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 22:38:47,574 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 22:38:47,577 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 22:38:47,584 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-06-19 22:38:47,584 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-06-19 22:38:48,015 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 22:38:48,108 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s386ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-06-19 22:38:50,669 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-06-19 22:38:50,672 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-06-19 22:38:50,672 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-06-19 22:38:50,672 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-06-19 22:38:50,673 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-06-19 22:38:50,698 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:50,698 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:50,699 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:50,699 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:50,715 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-06-19 22:38:50,715 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-06-19 22:38:50,755 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 22:38:50,826 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-06-19 22:38:51,048 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-06-19 22:38:51,053 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-19 22:38:51,053 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-19 22:38:51,055 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-19 22:38:51,056 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-19 22:38:51,057 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-19 22:38:51,060 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-19 22:38:51,063 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-19 22:38:51,064 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-19 22:38:51,067 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-19 22:38:51,076 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 22:38:51,077 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-19 22:38:51,077 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-19 22:38:51,078 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-19 22:38:51,078 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-19 22:38:51,079 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-19 22:38:51,079 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-19 22:38:51,080 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-19 22:38:51,090 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:51,423 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 22:38:51,427 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 22:38:51,431 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 22:38:51,434 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 22:38:51,439 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 22:38:51,442 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 22:38:51,457 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-06-19 22:38:51,457 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-06-19 22:38:51,458 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-06-19 22:38:51,458 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-06-19 22:38:51,459 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-06-19 22:38:51,459 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-06-19 22:38:51,459 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-06-19 22:38:51,460 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-06-19 22:38:51,460 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-06-19 22:38:51,460 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-06-19 22:38:51,477 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-06-19 22:38:51,478 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-06-19 22:38:51,540 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-06-19 22:38:51,546 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-06-19 22:38:51,563 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-06-19 22:38:51,569 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-06-19 22:38:51,596 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-06-19 22:38:51,618 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-06-19 22:38:51,629 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-06-19 22:38:51,647 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-06-19 22:38:51,655 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-06-19 22:38:51,659 [main] INFO  (Database#info():2711) - }
2016-06-19 22:38:51,660 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-06-19 22:38:51,662 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-06-19 22:38:51,681 [main] INFO  (Database#info():2711) - }
2016-06-19 22:38:51,690 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-06-19 22:38:51,727 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 22:38:51,728 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-06-19 22:38:51,729 [main] INFO  (Database#info():2711) -     parse('member');
2016-06-19 22:38:52,282 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-06-19 22:38:52,570 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-06-19 22:38:52,792 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-06-19 22:38:52,978 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-06-19 22:38:53,212 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-06-19 22:38:53,404 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-06-19 22:38:53,598 [main] INFO  (Database#info():2711) -     parse('product');
2016-06-19 22:38:53,821 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-06-19 22:38:53,990 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-06-19 22:38:54,098 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-06-19 22:38:54,302 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-06-19 22:38:54,447 [main] INFO  (Database#info():2711) -     parse('region');
2016-06-19 22:38:54,568 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-06-19 22:38:54,715 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-06-19 22:38:54,836 [main] INFO  (Database#info():2711) - }
2016-06-19 22:38:54,836 [main] INFO  (Database#info():2711) -  
2016-06-19 22:38:54,869 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 22:38:54,891 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s231ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-06-19 22:38:56,788 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-06-19 22:38:56,792 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-06-19 22:38:56,792 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-06-19 22:38:56,792 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-06-19 22:38:56,793 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-06-19 22:38:56,835 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:56,836 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:56,837 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:56,838 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:56,883 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 22:38:56,910 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s134ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-06-19 22:38:58,128 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-19 22:38:58,130 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-19 22:38:58,131 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-19 22:38:58,131 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-19 22:38:58,131 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-19 22:38:58,155 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-19 22:38:58,155 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-19 22:38:58,156 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-19 22:38:58,156 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-19 22:38:58,172 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-19 22:38:58,172 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-19 22:38:58,179 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-19 22:38:58,293 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=0 (in 0 files)
2016-06-19 22:38:58,321 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-19 22:38:58,322 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-19 22:38:58,322 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-19 22:38:58,322 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-19 22:38:58,323 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-19 22:38:58,323 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-19 22:38:58,323 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-19 22:38:58,323 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-19 22:38:58,326 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-19 22:38:58,510 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-19 22:38:58,827 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-19 22:38:58,830 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-19 22:38:58,833 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-19 22:38:58,836 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-19 22:38:58,841 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-19 22:38:58,843 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-19 22:38:58,854 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-19 22:38:58,856 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-19 22:38:58,866 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-19 22:38:58,866 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-19 22:38:58,869 [main] INFO  (Database#info():2711) - }
2016-06-19 22:38:58,896 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2016-06-19 22:38:58,905 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-19 22:38:58,915 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s799ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-25 15:07:49,122 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-25 15:07:49,126 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-25 15:07:49,126 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-25 15:07:49,127 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-25 15:07:49,127 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-25 15:07:49,171 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 15:07:49,172 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 15:07:49,183 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 15:07:49,184 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 15:07:49,205 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-25 15:07:49,206 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-25 15:07:49,224 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 15:07:49,353 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-25 15:07:49,364 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 15:07:49,840 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 15:07:49,840 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 15:07:49,847 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
         mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and   mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and   stat.MEMBER_STATUS_NAME = /*pmb.memberStatusCode:cls(MemberStatus)*/'FML'
       /*END*/
/*END*/
2016-06-25 15:07:49,996 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-25 15:07:49,997 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=1 failure=0 (in 1 files)
2016-06-25 15:07:50,061 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-25 15:07:50,062 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-25 15:07:50,062 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-25 15:07:50,063 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-25 15:07:50,064 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-25 15:07:50,088 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI
2016-06-25 15:07:50,090 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-25 15:07:50,090 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-25 15:07:50,090 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-25 15:07:50,092 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix
  String memberStatusCode:cls(MemberStatus)
2016-06-25 15:07:50,115 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-25 15:07:50,333 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 15:07:50,344 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 15:07:50,351 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 15:07:50,358 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 15:07:50,365 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 15:07:50,377 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 15:07:50,389 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 15:07:50,409 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-25 15:07:50,413 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-25 15:07:50,432 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-25 15:07:50,433 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-25 15:07:50,589 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-06-25 15:07:50,601 [main] INFO  (Database#info():2711) - }
2016-06-25 15:07:50,605 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-06-25 15:07:50,614 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-06-25 15:07:50,670 [main] INFO  (Database#info():2711) - }
2016-06-25 15:07:50,702 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 1

  MemberBhv_selectOutsideMember.sql
- - - - - - - - - -/
2016-06-25 15:07:50,715 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 15:07:50,775 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 15:07:50,786 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s679ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-25 21:19:51,764 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-06-25 21:19:51,771 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-06-25 21:19:51,771 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-06-25 21:19:51,779 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-06-25 21:19:51,780 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-06-25 21:19:51,782 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-06-25 21:19:53,668 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:19:53,668 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:19:53,669 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:19:53,669 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:19:53,678 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 21:19:54,125 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 21:19:54,126 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 21:19:54,149 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-06-25 21:19:54,150 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-06-25 21:19:54,150 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-06-25 21:19:54,152 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-06-25 21:19:54,153 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-06-25 21:19:54,153 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-06-25 21:19:54,179 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-25 21:19:54,180 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:19:54,181 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-25 21:19:54,249 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-06-25 21:19:54,262 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-06-25 21:19:54,271 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-06-25 21:19:54,282 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-06-25 21:19:54,294 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-06-25 21:19:54,322 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-06-25 21:19:54,359 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-06-25 21:19:54,404 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-06-25 21:19:54,428 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-06-25 21:19:54,441 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-06-25 21:19:54,458 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-06-25 21:19:54,471 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-06-25 21:19:54,490 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-06-25 21:19:54,508 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-06-25 21:19:54,535 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-06-25 21:19:54,558 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-06-25 21:19:54,572 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-06-25 21:19:54,588 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-06-25 21:19:54,600 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-06-25 21:19:54,621 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-06-25 21:19:54,638 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-06-25 21:19:54,660 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-06-25 21:19:54,687 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-06-25 21:19:54,692 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-06-25 21:19:54,696 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-06-25 21:19:54,701 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-06-25 21:19:54,706 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-06-25 21:19:54,709 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-06-25 21:19:54,718 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-06-25 21:19:54,721 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-06-25 21:19:54,726 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-06-25 21:19:54,730 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-06-25 21:19:54,734 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-06-25 21:19:54,740 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-06-25 21:19:54,744 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-06-25 21:19:54,750 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-06-25 21:19:54,754 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-06-25 21:19:54,792 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-06-25 21:19:54,793 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-06-25 21:19:54,793 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-06-25 21:19:54,794 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-06-25 21:19:54,794 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-06-25 21:19:54,794 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-06-25 21:19:54,799 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-06-25 21:19:54,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-06-25 21:19:54,804 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-06-25 21:19:54,805 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-06-25 21:19:54,818 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-06-25 21:19:54,819 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-06-25 21:19:54,820 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-06-25 21:19:54,821 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-06-25 21:19:54,828 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-06-25 21:19:54,837 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-06-25 21:19:54,837 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-06-25 21:19:54,838 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-06-25 21:19:54,838 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-06-25 21:19:54,839 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-06-25 21:19:54,846 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-06-25 21:19:54,946 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-06-25 21:19:54,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-06-25 21:19:54,974 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-06-25 21:19:54,987 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-06-25 21:19:54,998 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-06-25 21:19:55,055 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-06-25 21:19:55,071 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-06-25 21:19:55,082 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-06-25 21:19:55,137 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-06-25 21:19:55,147 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-06-25 21:19:55,158 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-06-25 21:19:55,169 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-06-25 21:19:55,215 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-06-25 21:19:55,228 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-06-25 21:19:55,239 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-25 21:19:55,257 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,275 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-06-25 21:19:55,298 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-06-25 21:19:55,325 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,350 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,379 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-06-25 21:19:55,410 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,437 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-06-25 21:19:55,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-06-25 21:19:55,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-06-25 21:19:55,520 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-06-25 21:19:55,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-25 21:19:55,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-06-25 21:19:55,610 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-06-25 21:19:55,635 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-06-25 21:19:55,652 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-06-25 21:19:55,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-06-25 21:19:55,689 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-06-25 21:19:55,713 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-06-25 21:19:55,730 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-06-25 21:19:55,751 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-06-25 21:19:55,770 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-06-25 21:19:55,790 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-06-25 21:19:55,813 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-06-25 21:19:55,814 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=42 failure=0 (in 2 files)
2016-06-25 21:19:55,814 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-06-25 21:19:55,928 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-06-25 21:19:55,928 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-06-25 21:19:55,928 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-06-25 21:19:55,929 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-06-25 21:19:55,929 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-06-25 21:19:55,929 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-06-25 21:19:55,959 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-25 21:19:55,959 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-06-25 21:19:55,960 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-25 21:19:56,294 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-25 21:19:56,295 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:19:56,295 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-25 21:19:56,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-06-25 21:19:56,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-06-25 21:19:56,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-06-25 21:19:56,395 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-06-25 21:19:56,400 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-06-25 21:19:56,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-06-25 21:19:56,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-06-25 21:19:56,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-06-25 21:19:56,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-06-25 21:19:56,408 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-06-25 21:19:56,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-06-25 21:19:56,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-06-25 21:19:56,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-06-25 21:19:56,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-06-25 21:19:56,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-06-25 21:19:56,417 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-06-25 21:19:56,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-06-25 21:19:56,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-06-25 21:19:56,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-06-25 21:19:56,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-06-25 21:19:56,433 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-06-25 21:19:56,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-06-25 21:19:56,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-06-25 21:19:56,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-06-25 21:19:56,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-06-25 21:19:56,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-06-25 21:19:56,450 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-06-25 21:19:56,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-06-25 21:19:56,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-06-25 21:19:56,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-06-25 21:19:56,462 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-06-25 21:19:56,465 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-25 21:19:56,466 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-06-25 21:19:56,466 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-25 21:19:56,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-06-25 21:19:56.551, foo, 2016-06-25 21:19:56.551, foo, 0}
2016-06-25 21:19:56,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-06-25 21:19:56.557, foo, 2016-06-25 21:19:56.557, foo, 0}
2016-06-25 21:19:56,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-06-25 21:19:56.565, foo, 2016-06-25 21:19:56.565, foo, 0}
2016-06-25 21:19:56,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-06-25 21:19:56.568, foo, 2016-06-25 21:19:56.568, foo, 0}
2016-06-25 21:19:56,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-06-25 21:19:56.571, foo, 2016-06-25 21:19:56.571, foo, 0}
2016-06-25 21:19:56,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-06-25 21:19:56.573, foo, 2016-06-25 21:19:56.573, foo, 0}
2016-06-25 21:19:56,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-06-25 21:19:56.576, foo, 2016-06-25 21:19:56.576, foo, 0}
2016-06-25 21:19:56,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-06-25 21:19:56.58, foo, 2016-06-25 21:19:56.58, foo, 0}
2016-06-25 21:19:56,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-06-25 21:19:56.582, foo, 2016-06-25 21:19:56.582, foo, 0}
2016-06-25 21:19:56,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-06-25 21:19:56.586, foo, 2016-06-25 21:19:56.586, foo, 0}
2016-06-25 21:19:56,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-06-25 21:19:56.59, foo, 2016-06-25 21:19:56.59, foo, 0}
2016-06-25 21:19:56,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-06-25 21:19:56.596, foo, 2016-06-25 21:19:56.596, foo, 0}
2016-06-25 21:19:56,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-06-25 21:19:56.599, foo, 2016-06-25 21:19:56.599, foo, 0}
2016-06-25 21:19:56,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-06-25 21:19:56.602, foo, 2016-06-25 21:19:56.602, foo, 0}
2016-06-25 21:19:56,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-06-25 21:19:56.605, foo, 2016-06-25 21:19:56.605, foo, 0}
2016-06-25 21:19:56,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-06-25 21:19:56.607, foo, 2016-06-25 21:19:56.607, foo, 0}
2016-06-25 21:19:56,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-06-25 21:19:56.609, foo, 2016-06-25 21:19:56.609, foo, 0}
2016-06-25 21:19:56,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-06-25 21:19:56.613, foo, 2016-06-25 21:19:56.613, foo, 0}
2016-06-25 21:19:56,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-06-25 21:19:56.615, foo, 2016-06-25 21:19:56.615, foo, 0}
2016-06-25 21:19:56,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-06-25 21:19:56.618, foo, 2016-06-25 21:19:56.618, foo, 0}
2016-06-25 21:19:56,644 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-06-25 21:19:56,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-06-25 21:19:56.645, foo, 2016-06-25 21:19:56.645, foo, 0}
2016-06-25 21:19:56,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-06-25 21:19:56.648, foo, 2016-06-25 21:19:56.648, foo, 0}
2016-06-25 21:19:56,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-06-25 21:19:56.651, foo, 2016-06-25 21:19:56.651, foo, 0}
2016-06-25 21:19:56,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-06-25 21:19:56.654, foo, 2016-06-25 21:19:56.654, foo, 0}
2016-06-25 21:19:56,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-06-25 21:19:56.656, foo, 2016-06-25 21:19:56.656, foo, 0}
2016-06-25 21:19:56,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-06-25 21:19:56.659, foo, 2016-06-25 21:19:56.659, foo, 0}
2016-06-25 21:19:56,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-06-25 21:19:56.664, foo, 2016-06-25 21:19:56.664, foo, 0}
2016-06-25 21:19:56,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-06-25 21:19:56.667, foo, 2016-06-25 21:19:56.667, foo, 0}
2016-06-25 21:19:56,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-06-25 21:19:56.67, foo, 2016-06-25 21:19:56.67, foo, 0}
2016-06-25 21:19:56,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-06-25 21:19:56.674, foo, 2016-06-25 21:19:56.674, foo, 0}
2016-06-25 21:19:56,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-06-25 21:19:56.677, foo, 2016-06-25 21:19:56.677, foo, 0}
2016-06-25 21:19:56,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-06-25 21:19:56.68, foo, 2016-06-25 21:19:56.68, foo, 0}
2016-06-25 21:19:56,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-06-25 21:19:56.684, foo, 2016-06-25 21:19:56.684, foo, 0}
2016-06-25 21:19:56,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-06-25 21:19:56.686, foo, 2016-06-25 21:19:56.686, foo, 0}
2016-06-25 21:19:56,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-06-25 21:19:56.689, foo, 2016-06-25 21:19:56.689, foo, 0}
2016-06-25 21:19:56,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-06-25 21:19:56.692, foo, 2016-06-25 21:19:56.692, foo, 0}
2016-06-25 21:19:56,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-06-25 21:19:56.699, foo, 2016-06-25 21:19:56.699, foo, 0}
2016-06-25 21:19:56,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-06-25 21:19:56.703, foo, 2016-06-25 21:19:56.703, foo, 0}
2016-06-25 21:19:56,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-06-25 21:19:56.706, foo, 2016-06-25 21:19:56.706, foo, 0}
2016-06-25 21:19:56,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-06-25 21:19:56.708, foo, 2016-06-25 21:19:56.708, foo, 0}
2016-06-25 21:19:56,733 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-06-25 21:19:56,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-06-25 21:19:56,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-06-25 21:19:56,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-06-25 21:19:56,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-06-25 21:19:56,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-06-25 21:19:56,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-06-25 21:19:56,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-06-25 21:19:56,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-06-25 21:19:56,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-06-25 21:19:56,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-06-25 21:19:56,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-06-25 21:19:56,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-06-25 21:19:56,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-06-25 21:19:56,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-06-25 21:19:56,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-06-25 21:19:56,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-06-25 21:19:56,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-06-25 21:19:56,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-06-25 21:19:56,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-06-25 21:19:56,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-06-25 21:19:56,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-06-25 21:19:56,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-06-25 21:19:56,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-06-25 21:19:56,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-06-25 21:19:56,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-06-25 21:19:56,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-06-25 21:19:56,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-06-25 21:19:56,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-06-25 21:19:56,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-06-25 21:19:56,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-06-25 21:19:56,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-06-25 21:19:56,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-06-25 21:19:56,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-06-25 21:19:56,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-06-25 21:19:56,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-06-25 21:19:56,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-06-25 21:19:56,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-06-25 21:19:56,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-06-25 21:19:56,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-06-25 21:19:56,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-06-25 21:19:56,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-06-25 21:19:56,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-06-25 21:19:56,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-06-25 21:19:56,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-06-25 21:19:56,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-06-25 21:19:56,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-06-25 21:19:56,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-06-25 21:19:56,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-06-25 21:19:56,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-06-25 21:19:56,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-06-25 21:19:56,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-06-25 21:19:56,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-06-25 21:19:56,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-06-25 21:19:56,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-06-25 21:19:56,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-06-25 21:19:56,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-06-25 21:19:56,853 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-06-25 21:19:56,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-06-25 21:19:56.854, foo, 2016-06-25 21:19:56.854, foo, 0}
2016-06-25 21:19:56,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-06-25 21:19:56.855, foo, 2016-06-25 21:19:56.856, foo, 0}
2016-06-25 21:19:56,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-06-25 21:19:56.857, foo, 2016-06-25 21:19:56.857, foo, 0}
2016-06-25 21:19:56,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-06-25 21:19:56.858, foo, 2016-06-25 21:19:56.858, foo, 0}
2016-06-25 21:19:56,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-06-25 21:19:56.859, foo, 2016-06-25 21:19:56.859, foo, 0}
2016-06-25 21:19:56,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-06-25 21:19:56.86, foo, 2016-06-25 21:19:56.86, foo, 0}
2016-06-25 21:19:56,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-06-25 21:19:56.861, foo, 2016-06-25 21:19:56.861, foo, 0}
2016-06-25 21:19:56,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-06-25 21:19:56.862, foo, 2016-06-25 21:19:56.862, foo, 0}
2016-06-25 21:19:56,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-06-25 21:19:56.863, foo, 2016-06-25 21:19:56.863, foo, 0}
2016-06-25 21:19:56,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-06-25 21:19:56.864, foo, 2016-06-25 21:19:56.864, foo, 0}
2016-06-25 21:19:56,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-06-25 21:19:56.864, foo, 2016-06-25 21:19:56.864, foo, 0}
2016-06-25 21:19:56,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-06-25 21:19:56.865, foo, 2016-06-25 21:19:56.865, foo, 0}
2016-06-25 21:19:56,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-06-25 21:19:56.866, foo, 2016-06-25 21:19:56.866, foo, 0}
2016-06-25 21:19:56,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-06-25 21:19:56.867, foo, 2016-06-25 21:19:56.867, foo, 0}
2016-06-25 21:19:56,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-06-25 21:19:56.869, foo, 2016-06-25 21:19:56.869, foo, 0}
2016-06-25 21:19:56,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-06-25 21:19:56.871, foo, 2016-06-25 21:19:56.871, foo, 0}
2016-06-25 21:19:56,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-06-25 21:19:56.872, foo, 2016-06-25 21:19:56.872, foo, 0}
2016-06-25 21:19:56,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-06-25 21:19:56.873, foo, 2016-06-25 21:19:56.873, foo, 0}
2016-06-25 21:19:56,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-06-25 21:19:56.877, foo, 2016-06-25 21:19:56.877, foo, 0}
2016-06-25 21:19:56,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-06-25 21:19:56.878, foo, 2016-06-25 21:19:56.878, foo, 0}
2016-06-25 21:19:56,906 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-06-25 21:19:56,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-06-25 21:19:56.908, foo, 2016-06-25 21:19:56.908, foo, 0}
2016-06-25 21:19:56,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-06-25 21:19:56.909, foo, 2016-06-25 21:19:56.909, foo, 0}
2016-06-25 21:19:56,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-06-25 21:19:56.91, foo, 2016-06-25 21:19:56.91, foo, 0}
2016-06-25 21:19:56,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-06-25 21:19:56.911, foo, 2016-06-25 21:19:56.911, foo, 0}
2016-06-25 21:19:56,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-06-25 21:19:56.912, foo, 2016-06-25 21:19:56.912, foo, 0}
2016-06-25 21:19:56,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-06-25 21:19:56.912, foo, 2016-06-25 21:19:56.912, foo, 0}
2016-06-25 21:19:56,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-06-25 21:19:56.913, foo, 2016-06-25 21:19:56.913, foo, 0}
2016-06-25 21:19:56,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-06-25 21:19:56.914, foo, 2016-06-25 21:19:56.914, foo, 0}
2016-06-25 21:19:56,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-06-25 21:19:56.915, foo, 2016-06-25 21:19:56.915, foo, 0}
2016-06-25 21:19:56,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-06-25 21:19:56.916, foo, 2016-06-25 21:19:56.916, foo, 0}
2016-06-25 21:19:56,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-06-25 21:19:56.916, foo, 2016-06-25 21:19:56.916, foo, 0}
2016-06-25 21:19:56,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-06-25 21:19:56.917, foo, 2016-06-25 21:19:56.917, foo, 0}
2016-06-25 21:19:56,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-06-25 21:19:56.918, foo, 2016-06-25 21:19:56.918, foo, 0}
2016-06-25 21:19:56,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-06-25 21:19:56.919, foo, 2016-06-25 21:19:56.919, foo, 0}
2016-06-25 21:19:56,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-06-25 21:19:56.92, foo, 2016-06-25 21:19:56.92, foo, 0}
2016-06-25 21:19:56,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-06-25 21:19:56.921, foo, 2016-06-25 21:19:56.921, foo, 0}
2016-06-25 21:19:56,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-06-25 21:19:56.922, foo, 2016-06-25 21:19:56.922, foo, 0}
2016-06-25 21:19:56,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-06-25 21:19:56.922, foo, 2016-06-25 21:19:56.922, foo, 0}
2016-06-25 21:19:56,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-06-25 21:19:56.923, foo, 2016-06-25 21:19:56.923, foo, 0}
2016-06-25 21:19:56,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-06-25 21:19:56.924, foo, 2016-06-25 21:19:56.924, foo, 0}
2016-06-25 21:19:56,944 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-06-25 21:19:56,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-06-25 21:19:56.946, foo, 2016-06-25 21:19:56.946, foo}
2016-06-25 21:19:56,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-06-25 21:19:56.949, foo, 2016-06-25 21:19:56.949, foo}
2016-06-25 21:19:56,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-06-25 21:19:56.951, foo, 2016-06-25 21:19:56.951, foo}
2016-06-25 21:19:56,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-06-25 21:19:56.952, foo, 2016-06-25 21:19:56.952, foo}
2016-06-25 21:19:56,957 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-06-25 21:19:56,958 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-06-25 21:19:56,958 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-06-25 21:19:56,958 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-06-25 21:19:57,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-06-25 21:19:57.039, foo, 2016-06-25 21:19:57.039, foo, 0}
2016-06-25 21:19:57,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-06-25 21:19:57.041, foo, 2016-06-25 21:19:57.041, foo, 0}
2016-06-25 21:19:57,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-06-25 21:19:57.042, foo, 2016-06-25 21:19:57.042, foo, 0}
2016-06-25 21:19:57,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-06-25 21:19:57.043, foo, 2016-06-25 21:19:57.043, foo, 0}
2016-06-25 21:19:57,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-06-25 21:19:57.043, foo, 2016-06-25 21:19:57.043, foo, 0}
2016-06-25 21:19:57,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-06-25 21:19:57.044, foo, 2016-06-25 21:19:57.044, foo, 0}
2016-06-25 21:19:57,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-06-25 21:19:57.045, foo, 2016-06-25 21:19:57.045, foo, 0}
2016-06-25 21:19:57,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-06-25 21:19:57.046, foo, 2016-06-25 21:19:57.046, foo, 0}
2016-06-25 21:19:57,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-06-25 21:19:57.046, foo, 2016-06-25 21:19:57.046, foo, 0}
2016-06-25 21:19:57,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-06-25 21:19:57.047, foo, 2016-06-25 21:19:57.047, foo, 0}
2016-06-25 21:19:57,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-06-25 21:19:57.049, foo, 2016-06-25 21:19:57.049, foo, 0}
2016-06-25 21:19:57,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-06-25 21:19:57.05, foo, 2016-06-25 21:19:57.05, foo, 0}
2016-06-25 21:19:57,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-06-25 21:19:57.051, foo, 2016-06-25 21:19:57.051, foo, 0}
2016-06-25 21:19:57,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-06-25 21:19:57.057, foo, 2016-06-25 21:19:57.057, foo, 0}
2016-06-25 21:19:57,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-06-25 21:19:57.066, foo, 2016-06-25 21:19:57.066, foo, 0}
2016-06-25 21:19:57,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-06-25 21:19:57.067, foo, 2016-06-25 21:19:57.067, foo, 0}
2016-06-25 21:19:57,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-06-25 21:19:57.067, foo, 2016-06-25 21:19:57.068, foo, 0}
2016-06-25 21:19:57,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-06-25 21:19:57.068, foo, 2016-06-25 21:19:57.068, foo, 0}
2016-06-25 21:19:57,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-06-25 21:19:57.069, foo, 2016-06-25 21:19:57.069, foo, 0}
2016-06-25 21:19:57,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-06-25 21:19:57.07, foo, 2016-06-25 21:19:57.07, foo, 0}
2016-06-25 21:19:57,096 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-06-25 21:19:57,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-06-25 21:19:57.097, foo, 2016-06-25 21:19:57.097, foo, 0}
2016-06-25 21:19:57,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-06-25 21:19:57.099, foo, 2016-06-25 21:19:57.099, foo, 0}
2016-06-25 21:19:57,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-06-25 21:19:57.103, foo, 2016-06-25 21:19:57.103, foo, 0}
2016-06-25 21:19:57,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-06-25 21:19:57.105, foo, 2016-06-25 21:19:57.105, foo, 0}
2016-06-25 21:19:57,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-06-25 21:19:57.106, foo, 2016-06-25 21:19:57.106, foo, 0}
2016-06-25 21:19:57,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-06-25 21:19:57.107, foo, 2016-06-25 21:19:57.107, foo, 0}
2016-06-25 21:19:57,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-06-25 21:19:57.11, foo, 2016-06-25 21:19:57.11, foo, 0}
2016-06-25 21:19:57,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-06-25 21:19:57.113, foo, 2016-06-25 21:19:57.113, foo, 0}
2016-06-25 21:19:57,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-06-25 21:19:57.115, foo, 2016-06-25 21:19:57.115, foo, 0}
2016-06-25 21:19:57,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-06-25 21:19:57.116, foo, 2016-06-25 21:19:57.116, foo, 0}
2016-06-25 21:19:57,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-06-25 21:19:57.118, foo, 2016-06-25 21:19:57.118, foo, 0}
2016-06-25 21:19:57,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-06-25 21:19:57.119, foo, 2016-06-25 21:19:57.119, foo, 0}
2016-06-25 21:19:57,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-06-25 21:19:57.121, foo, 2016-06-25 21:19:57.121, foo, 0}
2016-06-25 21:19:57,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-06-25 21:19:57.122, foo, 2016-06-25 21:19:57.122, foo, 0}
2016-06-25 21:19:57,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-06-25 21:19:57.123, foo, 2016-06-25 21:19:57.123, foo, 0}
2016-06-25 21:19:57,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-06-25 21:19:57.125, foo, 2016-06-25 21:19:57.125, foo, 0}
2016-06-25 21:19:57,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-06-25 21:19:57.126, foo, 2016-06-25 21:19:57.126, foo, 0}
2016-06-25 21:19:57,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-06-25 21:19:57.131, foo, 2016-06-25 21:19:57.131, foo, 0}
2016-06-25 21:19:57,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-06-25 21:19:57.134, foo, 2016-06-25 21:19:57.134, foo, 0}
2016-06-25 21:19:57,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-06-25 21:19:57.137, foo, 2016-06-25 21:19:57.137, foo, 0}
2016-06-25 21:19:57,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-06-25 21:19:57.138, foo, 2016-06-25 21:19:57.138, foo, 0}
2016-06-25 21:19:57,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-06-25 21:19:57.14, foo, 2016-06-25 21:19:57.14, foo, 0}
2016-06-25 21:19:57,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-06-25 21:19:57.142, foo, 2016-06-25 21:19:57.142, foo, 0}
2016-06-25 21:19:57,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-06-25 21:19:57.145, foo, 2016-06-25 21:19:57.145, foo, 0}
2016-06-25 21:19:57,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-06-25 21:19:57.147, foo, 2016-06-25 21:19:57.147, foo, 0}
2016-06-25 21:19:57,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-06-25 21:19:57.148, foo, 2016-06-25 21:19:57.148, foo, 0}
2016-06-25 21:19:57,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-06-25 21:19:57.15, foo, 2016-06-25 21:19:57.15, foo, 0}
2016-06-25 21:19:57,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-06-25 21:19:57.153, foo, 2016-06-25 21:19:57.153, foo, 0}
2016-06-25 21:19:57,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-06-25 21:19:57.154, foo, 2016-06-25 21:19:57.154, foo, 0}
2016-06-25 21:19:57,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-06-25 21:19:57.156, foo, 2016-06-25 21:19:57.156, foo, 0}
2016-06-25 21:19:57,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-06-25 21:19:57.161, foo, 2016-06-25 21:19:57.161, foo, 0}
2016-06-25 21:19:57,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-25 21:19:57.163, foo, 2016-06-25 21:19:57.163, foo, 0}
2016-06-25 21:19:57,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-25 21:19:57.164, foo, 2016-06-25 21:19:57.164, foo, 0}
2016-06-25 21:19:57,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-25 21:19:57.166, foo, 2016-06-25 21:19:57.166, foo, 0}
2016-06-25 21:19:57,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-25 21:19:57.167, foo, 2016-06-25 21:19:57.167, foo, 0}
2016-06-25 21:19:57,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-25 21:19:57.168, foo, 2016-06-25 21:19:57.168, foo, 0}
2016-06-25 21:19:57,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-06-25 21:19:57.17, foo, 2016-06-25 21:19:57.17, foo, 0}
2016-06-25 21:19:57,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-25 21:19:57.171, foo, 2016-06-25 21:19:57.171, foo, 0}
2016-06-25 21:19:57,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-25 21:19:57.172, foo, 2016-06-25 21:19:57.172, foo, 0}
2016-06-25 21:19:57,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-06-25 21:19:57.173, foo, 2016-06-25 21:19:57.173, foo, 0}
2016-06-25 21:19:57,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-06-25 21:19:57.174, foo, 2016-06-25 21:19:57.174, foo, 0}
2016-06-25 21:19:57,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-06-25 21:19:57.176, foo, 2016-06-25 21:19:57.176, foo, 0}
2016-06-25 21:19:57,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-06-25 21:19:57.177, foo, 2016-06-25 21:19:57.177, foo, 0}
2016-06-25 21:19:57,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-06-25 21:19:57.178, foo, 2016-06-25 21:19:57.178, foo, 0}
2016-06-25 21:19:57,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-06-25 21:19:57.181, foo, 2016-06-25 21:19:57.181, foo, 0}
2016-06-25 21:19:57,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-06-25 21:19:57.183, foo, 2016-06-25 21:19:57.183, foo, 0}
2016-06-25 21:19:57,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-06-25 21:19:57.185, foo, 2016-06-25 21:19:57.185, foo, 0}
2016-06-25 21:19:57,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-06-25 21:19:57.187, foo, 2016-06-25 21:19:57.187, foo, 0}
2016-06-25 21:19:57,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-06-25 21:19:57.188, foo, 2016-06-25 21:19:57.188, foo, 0}
2016-06-25 21:19:57,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-06-25 21:19:57.189, foo, 2016-06-25 21:19:57.189, foo, 0}
2016-06-25 21:19:57,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-06-25 21:19:57.19, foo, 2016-06-25 21:19:57.19, foo, 0}
2016-06-25 21:19:57,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-06-25 21:19:57.191, foo, 2016-06-25 21:19:57.191, foo, 0}
2016-06-25 21:19:57,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-06-25 21:19:57.192, foo, 2016-06-25 21:19:57.192, foo, 0}
2016-06-25 21:19:57,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-06-25 21:19:57.194, foo, 2016-06-25 21:19:57.194, foo, 0}
2016-06-25 21:19:57,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-06-25 21:19:57.195, foo, 2016-06-25 21:19:57.195, foo, 0}
2016-06-25 21:19:57,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-06-25 21:19:57.197, foo, 2016-06-25 21:19:57.197, foo, 0}
2016-06-25 21:19:57,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-06-25 21:19:57.198, foo, 2016-06-25 21:19:57.198, foo, 0}
2016-06-25 21:19:57,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-06-25 21:19:57.2, foo, 2016-06-25 21:19:57.2, foo, 0}
2016-06-25 21:19:57,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-06-25 21:19:57.201, foo, 2016-06-25 21:19:57.201, foo, 0}
2016-06-25 21:19:57,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-06-25 21:19:57.203, foo, 2016-06-25 21:19:57.203, foo, 0}
2016-06-25 21:19:57,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-06-25 21:19:57.205, foo, 2016-06-25 21:19:57.205, foo, 0}
2016-06-25 21:19:57,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-06-25 21:19:57.207, foo, 2016-06-25 21:19:57.207, foo, 0}
2016-06-25 21:19:57,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-06-25 21:19:57.209, foo, 2016-06-25 21:19:57.209, foo, 0}
2016-06-25 21:19:57,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-06-25 21:19:57.21, foo, 2016-06-25 21:19:57.21, foo, 0}
2016-06-25 21:19:57,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-06-25 21:19:57.211, foo, 2016-06-25 21:19:57.211, foo, 0}
2016-06-25 21:19:57,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-06-25 21:19:57.213, foo, 2016-06-25 21:19:57.213, foo, 0}
2016-06-25 21:19:57,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-06-25 21:19:57.214, foo, 2016-06-25 21:19:57.214, foo, 0}
2016-06-25 21:19:57,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-06-25 21:19:57.216, foo, 2016-06-25 21:19:57.216, foo, 0}
2016-06-25 21:19:57,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-06-25 21:19:57.217, foo, 2016-06-25 21:19:57.217, foo, 0}
2016-06-25 21:19:57,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-06-25 21:19:57.218, foo, 2016-06-25 21:19:57.218, foo, 0}
2016-06-25 21:19:57,277 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-06-25 21:19:57,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-06-25 21:19:57.278, foo, 2016-06-25 21:19:57.278, foo}
2016-06-25 21:19:57,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-06-25 21:19:57.28, foo, 2016-06-25 21:19:57.28, foo}
2016-06-25 21:19:57,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-06-25 21:19:57.281, foo, 2016-06-25 21:19:57.281, foo}
2016-06-25 21:19:57,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-06-25 21:19:57.282, foo, 2016-06-25 21:19:57.282, foo}
2016-06-25 21:19:57,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-06-25 21:19:57.283, foo, 2016-06-25 21:19:57.283, foo}
2016-06-25 21:19:57,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-06-25 21:19:57.284, foo, 2016-06-25 21:19:57.284, foo}
2016-06-25 21:19:57,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-06-25 21:19:57.286, foo, 2016-06-25 21:19:57.286, foo}
2016-06-25 21:19:57,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-06-25 21:19:57.287, foo, 2016-06-25 21:19:57.287, foo}
2016-06-25 21:19:57,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-06-25 21:19:57.288, foo, 2016-06-25 21:19:57.288, foo}
2016-06-25 21:19:57,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-06-25 21:19:57.29, foo, 2016-06-25 21:19:57.29, foo}
2016-06-25 21:19:57,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-06-25 21:19:57.291, foo, 2016-06-25 21:19:57.291, foo}
2016-06-25 21:19:57,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-06-25 21:19:57.292, foo, 2016-06-25 21:19:57.292, foo}
2016-06-25 21:19:57,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-06-25 21:19:57.293, foo, 2016-06-25 21:19:57.293, foo}
2016-06-25 21:19:57,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-06-25 21:19:57.295, foo, 2016-06-25 21:19:57.295, foo}
2016-06-25 21:19:57,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-06-25 21:19:57.296, foo, 2016-06-25 21:19:57.296, foo}
2016-06-25 21:19:57,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-06-25 21:19:57.297, foo, 2016-06-25 21:19:57.297, foo}
2016-06-25 21:19:57,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-06-25 21:19:57.298, foo, 2016-06-25 21:19:57.298, foo}
2016-06-25 21:19:57,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-06-25 21:19:57.299, foo, 2016-06-25 21:19:57.299, foo}
2016-06-25 21:19:57,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-06-25 21:19:57.3, foo, 2016-06-25 21:19:57.3, foo}
2016-06-25 21:19:57,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-06-25 21:19:57.301, foo, 2016-06-25 21:19:57.301, foo}
2016-06-25 21:19:57,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-06-25 21:19:57.302, foo, 2016-06-25 21:19:57.302, foo}
2016-06-25 21:19:57,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-06-25 21:19:57.303, foo, 2016-06-25 21:19:57.303, foo}
2016-06-25 21:19:57,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-06-25 21:19:57.304, foo, 2016-06-25 21:19:57.304, foo}
2016-06-25 21:19:57,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-06-25 21:19:57.305, foo, 2016-06-25 21:19:57.305, foo}
2016-06-25 21:19:57,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-06-25 21:19:57.307, foo, 2016-06-25 21:19:57.307, foo}
2016-06-25 21:19:57,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-06-25 21:19:57.308, foo, 2016-06-25 21:19:57.308, foo}
2016-06-25 21:19:57,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-06-25 21:19:57.31, foo, 2016-06-25 21:19:57.31, foo}
2016-06-25 21:19:57,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-06-25 21:19:57.311, foo, 2016-06-25 21:19:57.311, foo}
2016-06-25 21:19:57,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-06-25 21:19:57.313, foo, 2016-06-25 21:19:57.313, foo}
2016-06-25 21:19:57,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-25 21:19:57.314, foo, 2016-06-25 21:19:57.314, foo}
2016-06-25 21:19:57,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-25 21:19:57.315, foo, 2016-06-25 21:19:57.315, foo}
2016-06-25 21:19:57,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-06-25 21:19:57.317, foo, 2016-06-25 21:19:57.317, foo}
2016-06-25 21:19:57,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-06-25 21:19:57.318, foo, 2016-06-25 21:19:57.318, foo}
2016-06-25 21:19:57,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-06-25 21:19:57.32, foo, 2016-06-25 21:19:57.32, foo}
2016-06-25 21:19:57,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-06-25 21:19:57.321, foo, 2016-06-25 21:19:57.321, foo}
2016-06-25 21:19:57,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-06-25 21:19:57.322, foo, 2016-06-25 21:19:57.322, foo}
2016-06-25 21:19:57,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-06-25 21:19:57.323, foo, 2016-06-25 21:19:57.323, foo}
2016-06-25 21:19:57,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-06-25 21:19:57.324, foo, 2016-06-25 21:19:57.324, foo}
2016-06-25 21:19:57,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-06-25 21:19:57.325, foo, 2016-06-25 21:19:57.325, foo}
2016-06-25 21:19:57,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-06-25 21:19:57.326, foo, 2016-06-25 21:19:57.326, foo}
2016-06-25 21:19:57,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-06-25 21:19:57.327, foo, 2016-06-25 21:19:57.327, foo}
2016-06-25 21:19:57,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-06-25 21:19:57.328, foo, 2016-06-25 21:19:57.328, foo}
2016-06-25 21:19:57,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-06-25 21:19:57.329, foo, 2016-06-25 21:19:57.329, foo}
2016-06-25 21:19:57,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-06-25 21:19:57.33, foo, 2016-06-25 21:19:57.33, foo}
2016-06-25 21:19:57,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-06-25 21:19:57.331, foo, 2016-06-25 21:19:57.331, foo}
2016-06-25 21:19:57,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-06-25 21:19:57.332, foo, 2016-06-25 21:19:57.332, foo}
2016-06-25 21:19:57,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-06-25 21:19:57.333, foo, 2016-06-25 21:19:57.333, foo}
2016-06-25 21:19:57,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-06-25 21:19:57.334, foo, 2016-06-25 21:19:57.334, foo}
2016-06-25 21:19:57,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-06-25 21:19:57.335, foo, 2016-06-25 21:19:57.335, foo}
2016-06-25 21:19:57,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-06-25 21:19:57.336, foo, 2016-06-25 21:19:57.336, foo}
2016-06-25 21:19:57,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-06-25 21:19:57.337, foo, 2016-06-25 21:19:57.337, foo}
2016-06-25 21:19:57,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-06-25 21:19:57.338, foo, 2016-06-25 21:19:57.338, foo}
2016-06-25 21:19:57,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-06-25 21:19:57.344, foo, 2016-06-25 21:19:57.344, foo}
2016-06-25 21:19:57,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-06-25 21:19:57.347, foo, 2016-06-25 21:19:57.347, foo}
2016-06-25 21:19:57,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-06-25 21:19:57.348, foo, 2016-06-25 21:19:57.348, foo}
2016-06-25 21:19:57,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-06-25 21:19:57.349, foo, 2016-06-25 21:19:57.349, foo}
2016-06-25 21:19:57,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-06-25 21:19:57.35, foo, 2016-06-25 21:19:57.35, foo}
2016-06-25 21:19:57,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-06-25 21:19:57.351, foo, 2016-06-25 21:19:57.351, foo}
2016-06-25 21:19:57,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-06-25 21:19:57.351, foo, 2016-06-25 21:19:57.351, foo}
2016-06-25 21:19:57,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-06-25 21:19:57.352, foo, 2016-06-25 21:19:57.352, foo}
2016-06-25 21:19:57,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-06-25 21:19:57.355, foo, 2016-06-25 21:19:57.355, foo}
2016-06-25 21:19:57,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-06-25 21:19:57.356, foo, 2016-06-25 21:19:57.356, foo}
2016-06-25 21:19:57,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-06-25 21:19:57.357, foo, 2016-06-25 21:19:57.357, foo}
2016-06-25 21:19:57,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-06-25 21:19:57.359, foo, 2016-06-25 21:19:57.359, foo}
2016-06-25 21:19:57,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-06-25 21:19:57.36, foo, 2016-06-25 21:19:57.36, foo}
2016-06-25 21:19:57,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-06-25 21:19:57.361, foo, 2016-06-25 21:19:57.361, foo}
2016-06-25 21:19:57,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-06-25 21:19:57.363, foo, 2016-06-25 21:19:57.363, foo}
2016-06-25 21:19:57,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-06-25 21:19:57.365, foo, 2016-06-25 21:19:57.365, foo}
2016-06-25 21:19:57,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-06-25 21:19:57.371, foo, 2016-06-25 21:19:57.371, foo}
2016-06-25 21:19:57,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-06-25 21:19:57.373, foo, 2016-06-25 21:19:57.373, foo}
2016-06-25 21:19:57,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-06-25 21:19:57.374, foo, 2016-06-25 21:19:57.374, foo}
2016-06-25 21:19:57,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-06-25 21:19:57.376, foo, 2016-06-25 21:19:57.376, foo}
2016-06-25 21:19:57,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-06-25 21:19:57.378, foo, 2016-06-25 21:19:57.378, foo}
2016-06-25 21:19:57,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-06-25 21:19:57.381, foo, 2016-06-25 21:19:57.381, foo}
2016-06-25 21:19:57,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-06-25 21:19:57.383, foo, 2016-06-25 21:19:57.383, foo}
2016-06-25 21:19:57,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-06-25 21:19:57.385, foo, 2016-06-25 21:19:57.385, foo}
2016-06-25 21:19:57,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-06-25 21:19:57.386, foo, 2016-06-25 21:19:57.386, foo}
2016-06-25 21:19:57,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-06-25 21:19:57.388, foo, 2016-06-25 21:19:57.388, foo}
2016-06-25 21:19:57,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-06-25 21:19:57.391, foo, 2016-06-25 21:19:57.391, foo}
2016-06-25 21:19:57,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-06-25 21:19:57.395, foo, 2016-06-25 21:19:57.395, foo}
2016-06-25 21:19:57,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-06-25 21:19:57.399, foo, 2016-06-25 21:19:57.399, foo}
2016-06-25 21:19:57,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-06-25 21:19:57.407, foo, 2016-06-25 21:19:57.407, foo}
2016-06-25 21:19:57,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-25 21:19:57.409, foo, 2016-06-25 21:19:57.409, foo}
2016-06-25 21:19:57,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-25 21:19:57.41, foo, 2016-06-25 21:19:57.41, foo}
2016-06-25 21:19:57,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-25 21:19:57.412, foo, 2016-06-25 21:19:57.412, foo}
2016-06-25 21:19:57,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-06-25 21:19:57.414, foo, 2016-06-25 21:19:57.414, foo}
2016-06-25 21:19:57,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-06-25 21:19:57.415, foo, 2016-06-25 21:19:57.415, foo}
2016-06-25 21:19:57,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-06-25 21:19:57.43, foo, 2016-06-25 21:19:57.43, foo}
2016-06-25 21:19:57,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-06-25 21:19:57.439, foo, 2016-06-25 21:19:57.439, foo}
2016-06-25 21:19:57,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-06-25 21:19:57.445, foo, 2016-06-25 21:19:57.445, foo}
2016-06-25 21:19:57,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-06-25 21:19:57.446, foo, 2016-06-25 21:19:57.446, foo}
2016-06-25 21:19:57,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-06-25 21:19:57.448, foo, 2016-06-25 21:19:57.448, foo}
2016-06-25 21:19:57,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-06-25 21:19:57.449, foo, 2016-06-25 21:19:57.449, foo}
2016-06-25 21:19:57,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-06-25 21:19:57.45, foo, 2016-06-25 21:19:57.45, foo}
2016-06-25 21:19:57,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-06-25 21:19:57.451, foo, 2016-06-25 21:19:57.451, foo}
2016-06-25 21:19:57,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-06-25 21:19:57.452, foo, 2016-06-25 21:19:57.452, foo}
2016-06-25 21:19:57,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-06-25 21:19:57.452, foo, 2016-06-25 21:19:57.452, foo}
2016-06-25 21:19:57,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-06-25 21:19:57.453, foo, 2016-06-25 21:19:57.453, foo}
2016-06-25 21:19:57,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-06-25 21:19:57.454, foo, 2016-06-25 21:19:57.454, foo}
2016-06-25 21:19:57,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-06-25 21:19:57.455, foo, 2016-06-25 21:19:57.455, foo}
2016-06-25 21:19:57,531 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-06-25 21:19:57,532 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-06-25 21:19:57,545 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:19:57,556 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 21:19:57,566 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 21:19:57,572 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 21:19:57,576 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 21:19:57,579 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 21:19:57,583 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 21:19:57,595 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-25 21:19:57,604 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-06-25 21:19:57,608 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-06-25 21:19:57,612 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-06-25 21:19:57,614 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-06-25 21:19:57,621 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-06-25 21:19:57,622 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-06-25 21:19:57,622 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-06-25 21:19:57,622 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-06-25 21:19:57,622 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-06-25 21:19:57,623 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-06-25 21:19:57,631 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-06-25 21:19:57,633 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-06-25 21:19:57,643 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-06-25 21:19:57,645 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-06-25 21:19:57,649 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-06-25 21:19:57,655 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-06-25 21:19:57,656 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-06-25 21:19:57,657 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 21:19:57,662 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s926ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=42 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-06-25 21:19:58,606 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-06-25 21:19:58,610 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-06-25 21:19:58,610 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-06-25 21:19:58,611 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-06-25 21:19:58,611 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-06-25 21:19:58,655 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:19:58,655 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:19:58,656 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:19:58,656 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:19:58,738 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-06-25 21:19:58,739 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-06-25 21:19:58,739 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-06-25 21:19:58,759 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 21:19:58,932 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-06-25 21:19:58,937 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 21:19:59,563 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 21:19:59,564 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 21:19:59,566 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-06-25 21:19:59,568 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-06-25 21:19:59,568 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:19:59,568 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-06-25 21:19:59,586 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-06-25 21:19:59,589 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-06-25 21:19:59,617 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-06-25 21:19:59,618 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-06-25 21:19:59,618 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-06-25 21:19:59,619 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-06-25 21:19:59,683 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-06-25 21:19:59,715 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-06-25 21:19:59,750 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-06-25 21:19:59,767 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-06-25 21:19:59,783 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-06-25 21:19:59,796 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-06-25 21:19:59,810 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-06-25 21:19:59,828 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-06-25 21:19:59,840 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-06-25 21:19:59,849 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-06-25 21:19:59,862 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-06-25 21:19:59,878 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-06-25 21:19:59,887 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-06-25 21:19:59,896 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-06-25 21:19:59,906 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-06-25 21:19:59,907 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-06-25 21:19:59,907 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-06-25 21:19:59,908 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-06-25 21:19:59,908 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-06-25 21:19:59,911 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-06-25 21:19:59,917 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-06-25 21:19:59,918 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-06-25 21:19:59,918 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-06-25 21:19:59,979 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-06-25 21:19:59,982 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 21:20:00,077 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-06-25 21:20:00,077 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 21:20:00,086 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s499ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-06-25 21:20:01,098 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-06-25 21:20:01,102 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-06-25 21:20:01,103 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-06-25 21:20:01,104 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-06-25 21:20:01,104 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-06-25 21:20:01,137 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:20:01,137 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:20:01,137 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:20:01,138 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:20:01,140 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-06-25 21:20:01,141 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-06-25 21:20:01,141 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-06-25 21:20:01,142 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-06-25 21:20:01,142 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-06-25 21:20:01,143 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-06-25 21:20:01,200 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 21:20:01,326 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-06-25 21:20:01,546 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-06-25 21:20:01,556 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-25 21:20:01,558 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-25 21:20:01,562 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-25 21:20:01,563 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-25 21:20:01,564 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-25 21:20:01,565 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-25 21:20:01,569 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-25 21:20:01,569 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-25 21:20:01,572 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-25 21:20:01,579 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-25 21:20:01,579 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-25 21:20:01,580 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-25 21:20:01,580 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-25 21:20:01,581 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-25 21:20:01,581 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-25 21:20:01,582 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-25 21:20:01,582 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-25 21:20:01,605 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:20:02,049 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 21:20:02,054 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 21:20:02,058 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 21:20:02,062 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 21:20:02,069 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 21:20:02,074 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 21:20:02,083 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-06-25 21:20:02,083 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-06-25 21:20:02,537 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 21:20:02,567 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s486ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-06-25 21:20:05,360 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-06-25 21:20:05,363 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-06-25 21:20:05,363 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-06-25 21:20:05,364 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-06-25 21:20:05,364 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-06-25 21:20:05,419 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:20:05,419 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:20:05,420 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:20:05,420 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:20:05,440 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-06-25 21:20:05,441 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-06-25 21:20:05,482 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 21:20:05,558 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-06-25 21:20:05,782 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-06-25 21:20:05,788 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-06-25 21:20:05,788 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-06-25 21:20:05,789 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-06-25 21:20:05,791 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-06-25 21:20:05,791 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-06-25 21:20:05,793 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-06-25 21:20:05,796 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-06-25 21:20:05,797 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-06-25 21:20:05,800 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-06-25 21:20:05,811 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-25 21:20:05,812 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-06-25 21:20:05,813 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-06-25 21:20:05,814 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-06-25 21:20:05,814 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-06-25 21:20:05,814 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-06-25 21:20:05,815 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-06-25 21:20:05,815 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-06-25 21:20:05,823 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:20:06,148 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 21:20:06,153 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 21:20:06,156 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 21:20:06,159 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 21:20:06,166 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 21:20:06,170 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 21:20:06,188 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-06-25 21:20:06,189 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-06-25 21:20:06,189 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-06-25 21:20:06,189 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-06-25 21:20:06,190 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-06-25 21:20:06,190 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-06-25 21:20:06,190 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-06-25 21:20:06,191 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-06-25 21:20:06,191 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-06-25 21:20:06,192 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-06-25 21:20:06,206 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-06-25 21:20:06,209 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-06-25 21:20:06,263 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-06-25 21:20:06,267 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-06-25 21:20:06,287 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-06-25 21:20:06,294 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-06-25 21:20:06,315 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-06-25 21:20:06,345 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-06-25 21:20:06,352 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-06-25 21:20:06,365 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-06-25 21:20:06,374 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-06-25 21:20:06,380 [main] INFO  (Database#info():2711) - }
2016-06-25 21:20:06,380 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-06-25 21:20:06,381 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-06-25 21:20:06,403 [main] INFO  (Database#info():2711) - }
2016-06-25 21:20:06,412 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-06-25 21:20:06,459 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-25 21:20:06,461 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-06-25 21:20:06,462 [main] INFO  (Database#info():2711) -     parse('member');
2016-06-25 21:20:07,029 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-06-25 21:20:07,316 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-06-25 21:20:07,543 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-06-25 21:20:07,727 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-06-25 21:20:07,916 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-06-25 21:20:08,116 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-06-25 21:20:08,307 [main] INFO  (Database#info():2711) -     parse('product');
2016-06-25 21:20:08,514 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-06-25 21:20:08,684 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-06-25 21:20:08,812 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-06-25 21:20:09,011 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-06-25 21:20:09,147 [main] INFO  (Database#info():2711) -     parse('region');
2016-06-25 21:20:09,261 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-06-25 21:20:09,429 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-06-25 21:20:09,563 [main] INFO  (Database#info():2711) - }
2016-06-25 21:20:09,563 [main] INFO  (Database#info():2711) -  
2016-06-25 21:20:09,617 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 21:20:09,646 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s279ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-06-25 21:20:10,523 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-06-25 21:20:10,525 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-06-25 21:20:10,525 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-06-25 21:20:10,526 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-06-25 21:20:10,526 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-06-25 21:20:10,544 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:20:10,545 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:20:10,545 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:20:10,545 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:20:10,578 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-25 21:20:10,583 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 21:20:10,902 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 21:20:10,902 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 21:20:10,933 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
         mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and   mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and   stat.MEMBER_STATUS_NAME = /*pmb.memberStatusCode:cls(MemberStatus)*/'FML'
       /*END*/
/*END*/
2016-06-25 21:20:10,938 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-06-25 21:20:10,939 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=1 failure=0 (in 1 files)
2016-06-25 21:20:10,939 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 21:20:10,946 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s434ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql

   o: OK (1)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-06-25 21:20:11,708 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-25 21:20:11,710 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-25 21:20:11,711 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-25 21:20:11,711 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-25 21:20:11,712 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-25 21:20:11,736 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 21:20:11,736 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 21:20:11,736 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 21:20:11,736 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 21:20:11,747 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-25 21:20:11,748 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-25 21:20:11,758 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 21:20:11,860 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-25 21:20:11,865 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 21:20:12,192 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 21:20:12,192 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 21:20:12,195 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
         mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and   mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and   stat.MEMBER_STATUS_NAME = /*pmb.memberStatusCode:cls(MemberStatus)*/'FML'
       /*END*/
/*END*/
2016-06-25 21:20:12,241 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-25 21:20:12,241 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=1 failure=0 (in 1 files)
2016-06-25 21:20:12,275 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-25 21:20:12,275 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-25 21:20:12,275 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-25 21:20:12,276 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-25 21:20:12,276 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-25 21:20:12,293 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI
2016-06-25 21:20:12,293 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-25 21:20:12,294 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-25 21:20:12,294 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-25 21:20:12,295 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix
  String memberStatusCode:cls(MemberStatus)
2016-06-25 21:20:12,298 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-25 21:20:12,478 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 21:20:12,486 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 21:20:12,490 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 21:20:12,493 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 21:20:12,496 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 21:20:12,502 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 21:20:12,505 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 21:20:12,521 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-25 21:20:12,527 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-25 21:20:12,540 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-25 21:20:12,541 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-25 21:20:12,683 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-06-25 21:20:12,686 [main] INFO  (Database#info():2711) - }
2016-06-25 21:20:12,688 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-06-25 21:20:12,693 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-06-25 21:20:12,759 [main] INFO  (Database#info():2711) - }
2016-06-25 21:20:12,780 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 1

  MemberBhv_selectOutsideMember.sql
- - - - - - - - - -/
2016-06-25 21:20:12,788 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 21:20:12,792 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 21:20:12,801 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s099ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-25 22:12:36,447 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-25 22:12:36,451 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-25 22:12:36,451 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-25 22:12:36,452 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-25 22:12:36,452 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-25 22:12:36,478 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 22:12:36,486 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 22:12:36,487 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 22:12:36,487 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 22:12:36,505 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-25 22:12:36,505 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-25 22:12:36,518 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 22:12:36,631 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-25 22:12:36,641 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 22:12:37,080 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 22:12:37,081 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 22:12:37,087 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
         mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and   mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and   stat.MEMBER_STATUS_NAME = /*pmb.memberStatusCode:ref(MEMBER)*/'FML'
       /*END*/
/*END*/
2016-06-25 22:12:37,185 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-25 22:12:37,186 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=1 failure=0 (in 1 files)
2016-06-25 22:12:37,231 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-25 22:12:37,232 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-25 22:12:37,232 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-25 22:12:37,233 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-25 22:12:37,234 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-25 22:12:37,250 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI
2016-06-25 22:12:37,253 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-25 22:12:37,253 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-25 22:12:37,254 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-25 22:12:37,256 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix
  String memberStatusCode:ref(MEMBER)
2016-06-25 22:12:37,280 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-25 22:12:37,490 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 22:12:37,502 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 22:12:37,509 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 22:12:37,512 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 22:12:37,516 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 22:12:37,521 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 22:12:37,524 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 22:12:37,546 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-25 22:12:37,550 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-25 22:12:37,569 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-25 22:12:37,570 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-25 22:12:37,698 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-06-25 22:12:37,705 [main] INFO  (Database#info():2711) - }
2016-06-25 22:12:37,708 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-06-25 22:12:37,716 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-06-25 22:12:37,777 [main] INFO  (Database#info():2711) - }
2016-06-25 22:12:37,816 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 1

  MemberBhv_selectOutsideMember.sql
- - - - - - - - - -/
2016-06-25 22:12:37,833 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 22:12:37,850 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 22:12:37,869 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s427ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-25 22:14:07,734 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-25 22:14:07,737 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-25 22:14:07,737 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-25 22:14:07,738 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-25 22:14:07,738 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-25 22:14:07,766 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-25 22:14:07,775 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-25 22:14:07,775 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-25 22:14:07,776 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-25 22:14:07,789 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-25 22:14:07,790 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-25 22:14:07,803 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-25 22:14:07,914 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-25 22:14:07,925 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-25 22:14:08,341 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-25 22:14:08,341 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-25 22:14:08,347 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML'
       /*END*/
/*END*/
2016-06-25 22:14:08,428 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-25 22:14:08,429 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=1 failure=0 (in 1 files)
2016-06-25 22:14:08,475 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-25 22:14:08,476 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-25 22:14:08,476 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-25 22:14:08,476 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-25 22:14:08,477 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-25 22:14:08,493 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI
2016-06-25 22:14:08,494 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-25 22:14:08,495 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-25 22:14:08,495 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-25 22:14:08,496 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix
  String memberStatusCode:ref(MEMBER)
2016-06-25 22:14:08,524 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-25 22:14:08,772 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-25 22:14:08,784 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-25 22:14:08,790 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-25 22:14:08,794 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-25 22:14:08,797 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-25 22:14:08,801 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-25 22:14:08,805 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-25 22:14:08,823 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-25 22:14:08,828 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-25 22:14:08,844 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-25 22:14:08,845 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-25 22:14:08,962 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-06-25 22:14:08,969 [main] INFO  (Database#info():2711) - }
2016-06-25 22:14:08,971 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-06-25 22:14:08,977 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-06-25 22:14:09,027 [main] INFO  (Database#info():2711) - }
2016-06-25 22:14:09,059 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 1

  MemberBhv_selectOutsideMember.sql
- - - - - - - - - -/
2016-06-25 22:14:09,073 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-25 22:14:09,094 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-25 22:14:09,103 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s384ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-27 00:07:40,628 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-27 00:07:40,632 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-27 00:07:40,632 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-27 00:07:40,633 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-27 00:07:40,633 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-27 00:07:40,665 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-27 00:07:40,665 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-27 00:07:40,673 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-27 00:07:40,674 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-27 00:07:40,692 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-27 00:07:40,692 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-27 00:07:40,709 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-27 00:07:40,829 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-27 00:07:40,840 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-27 00:07:41,269 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-27 00:07:41,270 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-27 00:07:41,276 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML'
       /*END*/
/*END*/
2016-06-27 00:07:41,399 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-27 00:07:41,399 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-06-27 00:07:41,401 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL ページング検索

 [df:description]
  SQL 
  (Manual)ページング検索すること
   o 基本は "初めての外だしSQL" のSQLと同じで...
   o 会員ステータスの等値条件は要らない
   o 会員サービスのサービスポイント数の大なり条件を追加
   結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
   そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!
/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.isJoinForCount()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%'
       /*END*/
      /*IF pmb.servicePointGreaterThan != null*/
   and serv.SERVICE_POINT_COUNT > /*pmb.servicePointGreaterThan*/0 -- // サービスポイント数の下限値
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-06-27 00:07:41,413 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'Sql2Entity'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.SQLFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute the SQL!

[SQL File]
../src/main/resources/org/docksidestage/handson/dbflute/exbhv/MemberBhv_selectPartOfMember.sql

[Executed SQL]
/*
 [df:title]
  SQL ページング検索

 [df:description]
  SQL 
  (Manual)ページング検索すること
   o 基本は "初めての外だしSQL" のSQLと同じで...
   o 会員ステータスの等値条件は要らない
   o 会員サービスのサービスポイント数の大なり条件を追加
   結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
   そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!
/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.isJoinForCount()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%'
       /*END*/
      /*IF pmb.servicePointGreaterThan != null*/
   and serv.SERVICE_POINT_COUNT > /*pmb.servicePointGreaterThan*/0 -- // サービスポイント数の下限値
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/

[SQLState]
42S22

[ErrorCode]
1054

[SQLException]
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
Unknown column 'serv.SERVICE_POINT_COUNT' in 'where clause'
* * * * * * * * * */
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.throwSQLFailureException(DfSqlFileRunnerBase.java:587)
	at org.dbflute.logic.sql2entity.analyzer.DfOutsideSqlAnalyzer.execSQL(DfOutsideSqlAnalyzer.java:148)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.task.DfSql2EntityTask.doExecute(DfSql2EntityTask.java:149)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'serv.SERVICE_POINT_COUNT' in 'where clause'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2526)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.StatementImpl.executeQuery(StatementImpl.java:1446)
	at org.dbflute.logic.sql2entity.analyzer.DfOutsideSqlAnalyzer.execSQL(DfOutsideSqlAnalyzer.java:122)
	... 24 more
2016-06-27 00:07:41,429 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-27 00:07:41,444 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s830ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-06-27 00:09:34,743 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-06-27 00:09:34,750 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-06-27 00:09:34,750 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-06-27 00:09:34,750 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-06-27 00:09:34,751 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-06-27 00:09:34,780 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-06-27 00:09:34,781 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-06-27 00:09:34,781 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-06-27 00:09:34,790 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-06-27 00:09:34,805 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-06-27 00:09:34,805 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-06-27 00:09:34,820 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-06-27 00:09:34,959 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-06-27 00:09:34,970 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-06-27 00:09:35,380 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-06-27 00:09:35,381 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-06-27 00:09:35,388 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL 初めての外だしSQL

 [df:description]
  SQL 
     会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
     会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
     それぞれ条件値がない場合は条件自体が無効になるように
     全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%'
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML'
       /*END*/
/*END*/
2016-06-27 00:09:35,482 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-27 00:09:35,483 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-06-27 00:09:35,484 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL ページング検索

 [df:description]
  SQL 
  (Manual)ページング検索すること
   o 基本は "初めての外だしSQL" のSQLと同じで...
   o 会員ステータスの等値条件は要らない
   o 会員サービスのサービスポイント数の大なり条件を追加
   結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
   そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!
/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.isJoinForCount()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%'
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI > /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-06-27 00:09:35,505 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-06-27 00:09:35,505 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=2 failure=0 (in 2 files)
2016-06-27 00:09:35,581 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-06-27 00:09:35,581 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-06-27 00:09:35,583 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-06-27 00:09:35,583 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-06-27 00:09:35,583 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-06-27 00:09:35,605 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI
2016-06-27 00:09:35,610 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-06-27 00:09:35,611 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-06-27 00:09:35,611 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-06-27 00:09:35,616 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix
  String memberStatusCode:ref(MEMBER)

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likeContain
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値)
2016-06-27 00:09:35,627 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-06-27 00:09:35,873 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-06-27 00:09:35,888 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-06-27 00:09:35,893 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-06-27 00:09:35,898 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-06-27 00:09:35,902 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-06-27 00:09:35,908 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-06-27 00:09:35,916 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-06-27 00:09:35,943 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-06-27 00:09:35,950 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-06-27 00:09:35,975 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-06-27 00:09:35,976 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-06-27 00:09:36,098 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-06-27 00:09:36,174 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-06-27 00:09:36,178 [main] INFO  (Database#info():2711) - }
2016-06-27 00:09:36,180 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-06-27 00:09:36,186 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-06-27 00:09:36,237 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-06-27 00:09:36,269 [main] INFO  (Database#info():2711) - }
2016-06-27 00:09:36,306 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 2

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
- - - - - - - - - -/
2016-06-27 00:09:36,316 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-06-27 00:09:36,375 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-06-27 00:09:36,382 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s656ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-02 15:39:58,268 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-02 15:39:58,272 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-02 15:39:58,273 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-02 15:39:58,273 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-02 15:39:58,273 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-02 15:39:58,303 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-02 15:39:58,303 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-02 15:39:58,311 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-02 15:39:58,311 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-02 15:39:58,332 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-02 15:39:58,333 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-02 15:39:58,351 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-02 15:39:58,490 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-02 15:39:58,502 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-02 15:39:59,021 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-02 15:39:59,021 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-02 15:39:59,029 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-02 15:39:59,191 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 15:39:59,191 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-02 15:39:59,193 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 15:39:59,215 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 15:39:59,216 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPurchaseMonthSummary.sql
2016-07-02 15:39:59,218 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイントが高いかどうか(Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 15:39:59,265 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 15:39:59,266 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=3 failure=0 (in 3 files)
2016-07-02 15:39:59,340 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-02 15:39:59,341 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-02 15:39:59,342 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-02 15:39:59,342 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-02 15:39:59,343 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-02 15:39:59,360 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-02 15:39:59,365 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-02 15:39:59,365 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-02 15:39:59,365 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-02 15:39:59,368 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイントが高いかどうか(Null Allowed))
2016-07-02 15:39:59,379 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-02 15:39:59,623 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-02 15:39:59,633 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-02 15:39:59,637 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-02 15:39:59,643 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-02 15:39:59,648 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-02 15:39:59,655 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-02 15:39:59,661 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-02 15:39:59,680 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-02 15:39:59,684 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-02 15:39:59,707 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-02 15:39:59,708 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-02 15:39:59,859 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-02 15:39:59,928 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-02 15:39:59,982 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-02 15:39:59,983 [main] INFO  (Database#info():2711) - }
2016-07-02 15:39:59,985 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-02 15:39:59,995 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-02 15:40:00,039 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-02 15:40:00,076 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-02 15:40:00,101 [main] INFO  (Database#info():2711) - }
2016-07-02 15:40:00,149 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 3

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  MemberBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-02 15:40:00,180 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-02 15:40:00,227 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-02 15:40:00,244 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s984ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-02 16:36:12,491 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-02 16:36:12,496 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-02 16:36:12,497 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-02 16:36:12,497 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-02 16:36:12,498 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-02 16:36:12,529 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-02 16:36:12,530 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-02 16:36:12,531 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-02 16:36:12,531 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-02 16:36:12,545 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-02 16:36:12,546 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-02 16:36:12,560 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-02 16:36:12,677 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-02 16:36:12,688 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-02 16:36:13,109 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-02 16:36:13,109 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-02 16:36:13,116 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-02 16:36:13,215 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:36:13,215 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-02 16:36:13,217 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 16:36:13,241 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:36:13,242 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPurchaseMonthSummary.sql
2016-07-02 16:36:13,246 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月      -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格　-- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 16:36:13,281 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:36:13,282 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=3 failure=0 (in 3 files)
2016-07-02 16:36:13,358 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-02 16:36:13,358 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-02 16:36:13,359 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-02 16:36:13,359 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-02 16:36:13,359 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-02 16:36:13,380 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格　 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-02 16:36:13,387 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-02 16:36:13,387 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-02 16:36:13,387 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-02 16:36:13,392 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))
2016-07-02 16:36:13,409 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-02 16:36:13,668 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-02 16:36:13,678 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-02 16:36:13,683 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-02 16:36:13,686 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-02 16:36:13,690 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-02 16:36:13,695 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-02 16:36:13,699 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-02 16:36:13,718 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-02 16:36:13,723 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-02 16:36:13,743 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-02 16:36:13,744 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-02 16:36:13,904 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-02 16:36:13,979 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-02 16:36:14,044 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-02 16:36:14,045 [main] INFO  (Database#info():2711) - }
2016-07-02 16:36:14,046 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-02 16:36:14,053 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-02 16:36:14,102 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-02 16:36:14,142 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-02 16:36:14,166 [main] INFO  (Database#info():2711) - }
2016-07-02 16:36:14,209 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 3

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  MemberBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-02 16:36:14,219 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-02 16:36:14,241 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-02 16:36:14,252 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s775ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-02 16:38:26,063 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-02 16:38:26,067 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-02 16:38:26,067 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-02 16:38:26,068 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-02 16:38:26,068 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-02 16:38:26,092 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-02 16:38:26,093 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-02 16:38:26,094 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-02 16:38:26,101 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-02 16:38:26,121 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-02 16:38:26,122 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-02 16:38:26,135 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-02 16:38:26,249 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-02 16:38:26,260 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-02 16:38:26,679 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-02 16:38:26,679 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-02 16:38:26,685 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-02 16:38:26,794 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:38:26,795 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-02 16:38:26,797 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 16:38:26,825 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:38:26,825 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPurchaseMonthSummary.sql
2016-07-02 16:38:26,829 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 16:38:26,875 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 16:38:26,876 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=3 failure=0 (in 3 files)
2016-07-02 16:38:26,959 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-02 16:38:26,961 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-02 16:38:26,965 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-02 16:38:26,966 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-02 16:38:26,967 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-02 16:38:26,993 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-02 16:38:26,994 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-02 16:38:26,995 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-02 16:38:26,996 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-02 16:38:26,998 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))
2016-07-02 16:38:27,025 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-02 16:38:27,240 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-02 16:38:27,252 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-02 16:38:27,256 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-02 16:38:27,260 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-02 16:38:27,263 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-02 16:38:27,267 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-02 16:38:27,270 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-02 16:38:27,286 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-02 16:38:27,295 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-02 16:38:27,315 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-02 16:38:27,316 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-02 16:38:27,471 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-02 16:38:27,540 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-02 16:38:27,616 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-02 16:38:27,617 [main] INFO  (Database#info():2711) - }
2016-07-02 16:38:27,619 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-02 16:38:27,629 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-02 16:38:27,682 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-02 16:38:27,710 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-02 16:38:27,736 [main] INFO  (Database#info():2711) - }
2016-07-02 16:38:27,775 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 3

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  MemberBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-02 16:38:27,784 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-02 16:38:27,799 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-02 16:38:27,807 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s757ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-02 17:08:49,232 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-02 17:08:49,238 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-02 17:08:49,239 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-02 17:08:49,239 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-02 17:08:49,239 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-02 17:08:49,268 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-02 17:08:49,278 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-02 17:08:49,279 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-02 17:08:49,279 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-02 17:08:49,294 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-02 17:08:49,295 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-02 17:08:49,314 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-02 17:08:49,438 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-02 17:08:49,447 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-02 17:08:49,849 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-02 17:08:49,850 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-02 17:08:49,856 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-02 17:08:49,960 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:08:49,960 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-02 17:08:49,962 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 17:08:49,989 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:08:49,990 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPurchaseMonthSummary.sql
2016-07-02 17:08:49,994 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 17:08:50,019 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:08:50,019 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-02 17:08:50,021 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-02 17:08:50,057 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:08:50,058 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-02 17:08:50,131 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-02 17:08:50,131 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-02 17:08:50,132 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-02 17:08:50,132 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-02 17:08:50,132 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-02 17:08:50,152 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-02 17:08:50,156 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-02 17:08:50,156 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-02 17:08:50,156 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-02 17:08:50,157 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))
2016-07-02 17:08:50,169 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-02 17:08:50,414 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-02 17:08:50,424 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-02 17:08:50,428 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-02 17:08:50,432 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-02 17:08:50,436 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-02 17:08:50,441 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-02 17:08:50,445 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-02 17:08:50,475 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-02 17:08:50,479 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-02 17:08:50,498 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-02 17:08:50,500 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-02 17:08:50,657 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-02 17:08:50,759 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-02 17:08:50,838 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-02 17:08:50,959 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-02 17:08:51,038 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-02 17:08:51,041 [main] INFO  (Database#info():2711) - }
2016-07-02 17:08:51,043 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-02 17:08:51,050 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-02 17:08:51,092 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-02 17:08:51,124 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-02 17:08:51,150 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-02 17:08:51,176 [main] INFO  (Database#info():2711) - }
2016-07-02 17:08:51,226 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  MemberBhv_selectPurchaseMonthSummary.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
- - - - - - - - - -/
2016-07-02 17:08:51,240 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-02 17:08:51,257 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-02 17:08:51,266 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s048ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-02 17:16:27,760 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-02 17:16:27,765 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-02 17:16:27,765 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-02 17:16:27,765 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-02 17:16:27,766 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-02 17:16:27,795 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-02 17:16:27,796 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-02 17:16:27,797 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-02 17:16:27,808 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-02 17:16:27,824 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-02 17:16:27,824 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-02 17:16:27,842 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-02 17:16:27,960 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-02 17:16:27,971 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-02 17:16:28,386 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-02 17:16:28,387 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-02 17:16:28,392 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-02 17:16:28,508 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:16:28,508 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-02 17:16:28,510 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 17:16:28,531 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:16:28,532 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-02 17:16:28,536 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-02 17:16:28,554 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:16:28,555 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-02 17:16:28,557 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
  SQL title here.

 [df:description]
  SQL Description here.

*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-02 17:16:28,589 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-02 17:16:28,589 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-02 17:16:28,662 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-02 17:16:28,663 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-02 17:16:28,663 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-02 17:16:28,663 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-02 17:16:28,664 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-02 17:16:28,686 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-02 17:16:28,689 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-02 17:16:28,690 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-02 17:16:28,690 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-02 17:16:28,692 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))
2016-07-02 17:16:28,703 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-02 17:16:28,929 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-02 17:16:28,941 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-02 17:16:28,945 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-02 17:16:28,948 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-02 17:16:28,951 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-02 17:16:28,956 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-02 17:16:28,960 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-02 17:16:28,979 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-02 17:16:28,983 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-02 17:16:28,999 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-02 17:16:29,000 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-02 17:16:29,161 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-02 17:16:29,238 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-02 17:16:29,252 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-02 17:16:29,316 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-02 17:16:29,378 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-02 17:16:29,379 [main] INFO  (Database#info():2711) - }
2016-07-02 17:16:29,381 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-02 17:16:29,386 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-02 17:16:29,434 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-02 17:16:29,455 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-02 17:16:29,477 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-02 17:16:29,501 [main] INFO  (Database#info():2711) - }
2016-07-02 17:16:29,547 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-02 17:16:29,559 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-02 17:16:29,578 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-02 17:16:29,586 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s838ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 19:46:38,502 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 19:46:38,506 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 19:46:38,506 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 19:46:38,507 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 19:46:38,507 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 19:46:38,564 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:46:38,565 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:46:38,565 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:46:38,566 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:46:38,617 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 19:46:38,617 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 19:46:38,618 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 19:46:38,630 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:46:38,797 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 19:46:38,805 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:46:39,366 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:46:39,368 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:46:39,370 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 19:46:39,373 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 19:46:39,374 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:46:39,374 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 19:46:39,403 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 19:46:39,422 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 19:46:39,455 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 19:46:39,455 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:46:39,456 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 19:46:39,456 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 19:46:39,536 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 19:46:39,557 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 19:46:39,576 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 19:46:39,592 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 19:46:39,609 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 19:46:39,621 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 19:46:39,637 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 19:46:39,658 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 19:46:39,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 19:46:39,686 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 19:46:39,707 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 19:46:39,738 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 19:46:39,750 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 19:46:39,762 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 19:46:39,773 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 19:46:39,774 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 19:46:39,774 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 19:46:39,775 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 19:46:39,775 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 19:46:39,780 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 19:46:39,786 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 19:46:39,786 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 19:46:39,787 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 19:46:39,846 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 19:46:39,848 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:46:39,927 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 19:46:39,928 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:46:39,947 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s465ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 19:46:40,919 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 19:46:40,921 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 19:46:40,921 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 19:46:40,922 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 19:46:40,922 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 19:46:40,951 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:46:40,951 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:46:40,951 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:46:40,952 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:46:40,954 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 19:46:40,954 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 19:46:40,955 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 19:46:40,955 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 19:46:40,956 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 19:46:40,957 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 19:46:41,002 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:46:41,105 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 19:46:41,304 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 19:46:41,316 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:46:41,317 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:46:41,319 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:46:41,321 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:46:41,321 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:46:41,323 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:46:41,326 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:46:41,326 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:46:41,330 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:46:41,336 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:46:41,337 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:46:41,338 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:46:41,338 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:46:41,339 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:46:41,339 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:46:41,339 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:46:41,340 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:46:41,357 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:46:41,719 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:46:41,727 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:46:41,732 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:46:41,737 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:46:41,744 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:46:41,754 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:46:41,766 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 19:46:41,767 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 19:46:42,273 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 19:46:42,273 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 19:46:42,289 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:46:42,303 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:46:42,304 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:46:42,349 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:46:42,353 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:46:42,378 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=0
2016-07-04 19:46:42,382 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=0
2016-07-04 19:46:42,398 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:46:42,421 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:46:42,426 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s519ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 19:46:45,046 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 19:46:45,050 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 19:46:45,051 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 19:46:45,051 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 19:46:45,052 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 19:46:45,083 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:46:45,084 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:46:45,084 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:46:45,085 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:46:45,106 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 19:46:45,106 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 19:46:45,150 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:46:45,242 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 19:46:45,525 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 19:46:45,529 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:46:45,530 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:46:45,532 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:46:45,534 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:46:45,534 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:46:45,536 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:46:45,539 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:46:45,540 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:46:45,543 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:46:45,556 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:46:45,556 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:46:45,557 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:46:45,557 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:46:45,558 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:46:45,559 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:46:45,559 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:46:45,559 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:46:45,573 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:46:45,951 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:46:45,954 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:46:45,957 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:46:45,959 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:46:45,963 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:46:45,966 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:46:45,980 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 19:46:45,981 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 19:46:45,981 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 19:46:45,982 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 19:46:45,982 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 19:46:45,982 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 19:46:45,982 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 19:46:45,983 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 19:46:45,983 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 19:46:45,983 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 19:46:45,997 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 19:46:45,998 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 19:46:46,045 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 19:46:46,049 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 19:46:46,066 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 19:46:46,083 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 19:46:46,102 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 19:46:46,121 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 19:46:46,129 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 19:46:46,137 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 19:46:46,145 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 19:46:46,150 [main] INFO  (Database#info():2711) - }
2016-07-04 19:46:46,151 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 19:46:46,152 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 19:46:46,174 [main] INFO  (Database#info():2711) - }
2016-07-04 19:46:46,182 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 19:46:46,227 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:46:46,228 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 19:46:46,230 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 19:46:46,787 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 19:46:47,051 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 19:46:47,264 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 19:46:47,449 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 19:46:47,640 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 19:46:47,809 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 19:46:47,982 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 19:46:48,196 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 19:46:48,362 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 19:46:48,492 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 19:46:48,681 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 19:46:48,809 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 19:46:48,915 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 19:46:49,067 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 19:46:49,173 [main] INFO  (Database#info():2711) - }
2016-07-04 19:46:49,174 [main] INFO  (Database#info():2711) -  
2016-07-04 19:46:49,231 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:46:49,241 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s213ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 19:46:50,284 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 19:46:50,288 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 19:46:50,288 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 19:46:50,288 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 19:46:50,289 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 19:46:50,307 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:46:50,308 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:46:50,308 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:46:50,308 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:46:50,339 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:46:50,344 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:46:50,659 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:46:50,659 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:46:50,698 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:46:50,702 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:46:50,703 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:46:50,706 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:46:50,710 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:46:50,711 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:46:50,713 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:46:50,726 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:46:50,727 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:46:50,728 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_NAME)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:46:50,732 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:46:50,733 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:46:50,733 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:46:50,742 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s466ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 19:46:51,456 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 19:46:51,460 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 19:46:51,460 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 19:46:51,460 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 19:46:51,460 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 19:46:51,479 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:46:51,479 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:46:51,479 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:46:51,480 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:46:51,493 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 19:46:51,493 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 19:46:51,498 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:46:51,604 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:46:51,613 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:46:51,931 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:46:51,932 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:46:51,935 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:46:51,994 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:46:51,995 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:46:51,996 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:46:52,003 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:46:52,004 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:46:52,005 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:46:52,012 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:46:52,013 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:46:52,014 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_NAME)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:46:52,031 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:46:52,032 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:46:52,038 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 19:46:52,039 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 19:46:52,062 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:46:52,065 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:46:52,065 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=0
2016-07-04 19:46:52,066 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=0
2016-07-04 19:46:52,095 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 19:46:52,096 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:46:52,096 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 19:46:52,096 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 19:46:52,120 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 19:46:52,121 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 19:46:52,121 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 19:46:52,121 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 19:46:52,122 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 19:46:52,132 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)
2016-07-04 19:46:52,133 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 19:46:52,133 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 19:46:52,133 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 19:46:52,134 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))
2016-07-04 19:46:52,137 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 19:46:52,310 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:46:52,317 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:46:52,320 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:46:52,323 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:46:52,325 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:46:52,329 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:46:52,331 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:46:52,342 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 19:46:52,345 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 19:46:52,350 [main] INFO  (DfOldClassHandler#info():1033) -     delete('BsSpReturnResultSetNotParamResult1');
2016-07-04 19:46:52,351 [main] INFO  (DfOldClassHandler#info():1033) -     delete('BsSpReturnResultSetNotParamResult2');
2016-07-04 19:46:52,354 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpReturnResultSetNotParamResult1Dbm');
2016-07-04 19:46:52,355 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpReturnResultSetNotParamResult2Dbm');
2016-07-04 19:46:52,359 [main] INFO  (DfOldClassHandler#info():1033) -     delete('BsSpInOutParameterPmb');
2016-07-04 19:46:52,360 [main] INFO  (DfOldClassHandler#info():1033) -     delete('BsSpReturnResultSetPmb');
2016-07-04 19:46:52,361 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpReturnResultSetNotParamResult1');
2016-07-04 19:46:52,362 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpReturnResultSetNotParamResult2');
2016-07-04 19:46:52,366 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpInOutParameterPmb');
2016-07-04 19:46:52,366 [main] INFO  (DfOldClassHandler#info():1033) -     delete('SpReturnResultSetPmb');
2016-07-04 19:46:52,367 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:46:52,367 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 19:46:52,494 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 19:46:52,552 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 19:46:52,566 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 19:46:52,629 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 19:46:52,686 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 19:46:52,687 [main] INFO  (Database#info():2711) - }
2016-07-04 19:46:52,689 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 19:46:52,694 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 19:46:52,730 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 19:46:52,751 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 19:46:52,769 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 19:46:52,790 [main] INFO  (Database#info():2711) - }
2016-07-04 19:46:52,824 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 19:46:52,831 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:46:52,835 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:46:52,843 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s394ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 19:48:01,401 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-04 19:48:01,406 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-04 19:48:01,407 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-04 19:48:01,413 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-04 19:48:01,413 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-04 19:48:01,416 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-04 19:48:03,081 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:03,082 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:03,082 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:03,083 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:03,093 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:48:03,514 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:48:03,514 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:48:03,541 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-04 19:48:03,541 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-04 19:48:03,542 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-04 19:48:03,544 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-04 19:48:03,545 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-04 19:48:03,545 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-04 19:48:03,569 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 19:48:03,570 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:03,571 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 19:48:03,615 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-04 19:48:03,622 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-04 19:48:03,628 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-04 19:48:03,635 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-04 19:48:03,647 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-04 19:48:03,665 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-04 19:48:03,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-04 19:48:03,718 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-04 19:48:03,731 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-04 19:48:03,753 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-04 19:48:03,770 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-04 19:48:03,794 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-04 19:48:03,814 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-04 19:48:03,830 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-04 19:48:03,845 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-04 19:48:03,863 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-04 19:48:03,883 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-04 19:48:03,901 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-04 19:48:03,913 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-04 19:48:03,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-04 19:48:03,951 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-04 19:48:03,972 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-04 19:48:03,996 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-04 19:48:04,001 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-04 19:48:04,005 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-04 19:48:04,009 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-04 19:48:04,013 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-04 19:48:04,016 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-04 19:48:04,020 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-04 19:48:04,023 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-04 19:48:04,028 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-04 19:48:04,032 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-04 19:48:04,036 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-04 19:48:04,041 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-04 19:48:04,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-04 19:48:04,048 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-04 19:48:04,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-04 19:48:04,083 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-04 19:48:04,083 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-04 19:48:04,084 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-04 19:48:04,084 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-04 19:48:04,085 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-04 19:48:04,085 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-04 19:48:04,090 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-04 19:48:04,159 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-04 19:48:04,161 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-04 19:48:04,163 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-04 19:48:04,175 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-04 19:48:04,175 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-04 19:48:04,176 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-04 19:48:04,177 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-04 19:48:04,182 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-04 19:48:04,187 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 19:48:04,188 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-04 19:48:04,188 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-04 19:48:04,188 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-04 19:48:04,189 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-04 19:48:04,194 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-04 19:48:04,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-04 19:48:04,270 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-04 19:48:04,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-04 19:48:04,322 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-04 19:48:04,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-04 19:48:04,345 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-04 19:48:04,380 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-04 19:48:04,391 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-04 19:48:04,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-04 19:48:04,436 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-04 19:48:04,447 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-04 19:48:04,459 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-04 19:48:04,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-04 19:48:04,486 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-04 19:48:04,498 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 19:48:04,531 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-04 19:48:04,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 19:48:04,596 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,635 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-04 19:48:04,654 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,674 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,693 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-04 19:48:04,714 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 19:48:04,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-04 19:48:04,769 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-04 19:48:04,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 19:48:04,816 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-04 19:48:04,839 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 19:48:04,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-04 19:48:04,883 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-04 19:48:04,901 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-04 19:48:04,919 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-04 19:48:04,942 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-04 19:48:04,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-04 19:48:04,980 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-04 19:48:05,001 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-04 19:48:05,019 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-04 19:48:05,040 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-04 19:48:05,040 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-04 19:48:05,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-04 19:48:05,047 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-04 19:48:05,049 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 19:48:05,050 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-04 19:48:05,050 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-04 19:48:05,164 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-04 19:48:05,165 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-04 19:48:05,165 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-04 19:48:05,165 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-04 19:48:05,166 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-04 19:48:05,166 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-04 19:48:05,198 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 19:48:05,198 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-04 19:48:05,199 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 19:48:05,520 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 19:48:05,520 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:05,521 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 19:48:05,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-04 19:48:05,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-04 19:48:05,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-04 19:48:05,599 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-04 19:48:05,605 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-04 19:48:05,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-04 19:48:05,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-04 19:48:05,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-04 19:48:05,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-04 19:48:05,622 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-04 19:48:05,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-04 19:48:05,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-04 19:48:05,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-04 19:48:05,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-04 19:48:05,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-04 19:48:05,633 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-04 19:48:05,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-04 19:48:05,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-04 19:48:05,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-04 19:48:05,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-04 19:48:05,653 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-04 19:48:05,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-04 19:48:05,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-04 19:48:05,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-04 19:48:05,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-04 19:48:05,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-04 19:48:05,663 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-04 19:48:05,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-04 19:48:05,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-04 19:48:05,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-04 19:48:05,670 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-04 19:48:05,673 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 19:48:05,674 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-04 19:48:05,674 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 19:48:05,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-04 19:48:05.749, foo, 2016-07-04 19:48:05.749, foo, 0}
2016-07-04 19:48:05,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-04 19:48:05.756, foo, 2016-07-04 19:48:05.756, foo, 0}
2016-07-04 19:48:05,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-04 19:48:05.758, foo, 2016-07-04 19:48:05.758, foo, 0}
2016-07-04 19:48:05,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-04 19:48:05.76, foo, 2016-07-04 19:48:05.76, foo, 0}
2016-07-04 19:48:05,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-04 19:48:05.763, foo, 2016-07-04 19:48:05.763, foo, 0}
2016-07-04 19:48:05,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-04 19:48:05.764, foo, 2016-07-04 19:48:05.764, foo, 0}
2016-07-04 19:48:05,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-04 19:48:05.767, foo, 2016-07-04 19:48:05.767, foo, 0}
2016-07-04 19:48:05,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-04 19:48:05.769, foo, 2016-07-04 19:48:05.769, foo, 0}
2016-07-04 19:48:05,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-04 19:48:05.77, foo, 2016-07-04 19:48:05.77, foo, 0}
2016-07-04 19:48:05,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-04 19:48:05.773, foo, 2016-07-04 19:48:05.773, foo, 0}
2016-07-04 19:48:05,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-04 19:48:05.774, foo, 2016-07-04 19:48:05.774, foo, 0}
2016-07-04 19:48:05,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-04 19:48:05.777, foo, 2016-07-04 19:48:05.777, foo, 0}
2016-07-04 19:48:05,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-04 19:48:05.778, foo, 2016-07-04 19:48:05.778, foo, 0}
2016-07-04 19:48:05,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-04 19:48:05.781, foo, 2016-07-04 19:48:05.781, foo, 0}
2016-07-04 19:48:05,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-04 19:48:05.786, foo, 2016-07-04 19:48:05.786, foo, 0}
2016-07-04 19:48:05,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-04 19:48:05.788, foo, 2016-07-04 19:48:05.788, foo, 0}
2016-07-04 19:48:05,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-04 19:48:05.791, foo, 2016-07-04 19:48:05.791, foo, 0}
2016-07-04 19:48:05,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-04 19:48:05.793, foo, 2016-07-04 19:48:05.793, foo, 0}
2016-07-04 19:48:05,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-04 19:48:05.795, foo, 2016-07-04 19:48:05.795, foo, 0}
2016-07-04 19:48:05,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-04 19:48:05.798, foo, 2016-07-04 19:48:05.798, foo, 0}
2016-07-04 19:48:05,819 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-04 19:48:05,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-04 19:48:05.82, foo, 2016-07-04 19:48:05.82, foo, 0}
2016-07-04 19:48:05,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-04 19:48:05.823, foo, 2016-07-04 19:48:05.823, foo, 0}
2016-07-04 19:48:05,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-04 19:48:05.825, foo, 2016-07-04 19:48:05.825, foo, 0}
2016-07-04 19:48:05,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-04 19:48:05.828, foo, 2016-07-04 19:48:05.828, foo, 0}
2016-07-04 19:48:05,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-04 19:48:05.831, foo, 2016-07-04 19:48:05.831, foo, 0}
2016-07-04 19:48:05,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-04 19:48:05.834, foo, 2016-07-04 19:48:05.834, foo, 0}
2016-07-04 19:48:05,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-04 19:48:05.837, foo, 2016-07-04 19:48:05.837, foo, 0}
2016-07-04 19:48:05,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-04 19:48:05.839, foo, 2016-07-04 19:48:05.839, foo, 0}
2016-07-04 19:48:05,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-04 19:48:05.842, foo, 2016-07-04 19:48:05.842, foo, 0}
2016-07-04 19:48:05,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-04 19:48:05.844, foo, 2016-07-04 19:48:05.844, foo, 0}
2016-07-04 19:48:05,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-04 19:48:05.847, foo, 2016-07-04 19:48:05.847, foo, 0}
2016-07-04 19:48:05,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-04 19:48:05.85, foo, 2016-07-04 19:48:05.85, foo, 0}
2016-07-04 19:48:05,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-04 19:48:05.853, foo, 2016-07-04 19:48:05.853, foo, 0}
2016-07-04 19:48:05,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-04 19:48:05.856, foo, 2016-07-04 19:48:05.856, foo, 0}
2016-07-04 19:48:05,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-04 19:48:05.858, foo, 2016-07-04 19:48:05.858, foo, 0}
2016-07-04 19:48:05,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-04 19:48:05.861, foo, 2016-07-04 19:48:05.861, foo, 0}
2016-07-04 19:48:05,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-04 19:48:05.863, foo, 2016-07-04 19:48:05.863, foo, 0}
2016-07-04 19:48:05,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-04 19:48:05.866, foo, 2016-07-04 19:48:05.866, foo, 0}
2016-07-04 19:48:05,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-04 19:48:05.869, foo, 2016-07-04 19:48:05.869, foo, 0}
2016-07-04 19:48:05,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-04 19:48:05.871, foo, 2016-07-04 19:48:05.871, foo, 0}
2016-07-04 19:48:05,890 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-04 19:48:05,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-04 19:48:05,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-04 19:48:05,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-04 19:48:05,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-04 19:48:05,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-04 19:48:05,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-04 19:48:05,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-04 19:48:05,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-04 19:48:05,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-04 19:48:05,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-04 19:48:05,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-04 19:48:05,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-04 19:48:05,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-04 19:48:05,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-04 19:48:05,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-04 19:48:05,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-04 19:48:05,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-04 19:48:05,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-04 19:48:05,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-04 19:48:05,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-04 19:48:05,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-04 19:48:05,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-04 19:48:05,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-04 19:48:05,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-04 19:48:05,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-04 19:48:05,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-04 19:48:05,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-04 19:48:05,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-04 19:48:05,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-04 19:48:05,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-04 19:48:05,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-04 19:48:05,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-04 19:48:05,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-04 19:48:05,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-04 19:48:05,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-04 19:48:05,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-04 19:48:05,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-04 19:48:05,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-04 19:48:05,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-04 19:48:05,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-04 19:48:05,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-04 19:48:05,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-04 19:48:05,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-04 19:48:05,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-04 19:48:05,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-04 19:48:05,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-04 19:48:05,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-04 19:48:05,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-04 19:48:05,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-04 19:48:05,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-04 19:48:05,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-04 19:48:05,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-04 19:48:05,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-04 19:48:05,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-04 19:48:05,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-04 19:48:05,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-04 19:48:05,990 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-04 19:48:05,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-04 19:48:05.991, foo, 2016-07-04 19:48:05.991, foo, 0}
2016-07-04 19:48:05,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-04 19:48:05.992, foo, 2016-07-04 19:48:05.992, foo, 0}
2016-07-04 19:48:05,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-04 19:48:05.993, foo, 2016-07-04 19:48:05.993, foo, 0}
2016-07-04 19:48:05,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-04 19:48:05.994, foo, 2016-07-04 19:48:05.994, foo, 0}
2016-07-04 19:48:05,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-04 19:48:05.995, foo, 2016-07-04 19:48:05.995, foo, 0}
2016-07-04 19:48:05,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-04 19:48:05.995, foo, 2016-07-04 19:48:05.995, foo, 0}
2016-07-04 19:48:05,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-04 19:48:05.997, foo, 2016-07-04 19:48:05.997, foo, 0}
2016-07-04 19:48:05,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-04 19:48:05.997, foo, 2016-07-04 19:48:05.997, foo, 0}
2016-07-04 19:48:05,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-04 19:48:05.999, foo, 2016-07-04 19:48:05.999, foo, 0}
2016-07-04 19:48:05,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-04 19:48:05.999, foo, 2016-07-04 19:48:05.999, foo, 0}
2016-07-04 19:48:06,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-04 19:48:06.0, foo, 2016-07-04 19:48:06.0, foo, 0}
2016-07-04 19:48:06,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-04 19:48:06.001, foo, 2016-07-04 19:48:06.001, foo, 0}
2016-07-04 19:48:06,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-04 19:48:06.002, foo, 2016-07-04 19:48:06.002, foo, 0}
2016-07-04 19:48:06,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-04 19:48:06.003, foo, 2016-07-04 19:48:06.003, foo, 0}
2016-07-04 19:48:06,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-04 19:48:06.004, foo, 2016-07-04 19:48:06.004, foo, 0}
2016-07-04 19:48:06,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-04 19:48:06.004, foo, 2016-07-04 19:48:06.004, foo, 0}
2016-07-04 19:48:06,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-04 19:48:06.008, foo, 2016-07-04 19:48:06.008, foo, 0}
2016-07-04 19:48:06,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-04 19:48:06.01, foo, 2016-07-04 19:48:06.01, foo, 0}
2016-07-04 19:48:06,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-04 19:48:06.011, foo, 2016-07-04 19:48:06.011, foo, 0}
2016-07-04 19:48:06,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-04 19:48:06.012, foo, 2016-07-04 19:48:06.012, foo, 0}
2016-07-04 19:48:06,034 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-04 19:48:06,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-04 19:48:06.035, foo, 2016-07-04 19:48:06.035, foo, 0}
2016-07-04 19:48:06,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-04 19:48:06.036, foo, 2016-07-04 19:48:06.036, foo, 0}
2016-07-04 19:48:06,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-04 19:48:06.037, foo, 2016-07-04 19:48:06.037, foo, 0}
2016-07-04 19:48:06,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-04 19:48:06.038, foo, 2016-07-04 19:48:06.038, foo, 0}
2016-07-04 19:48:06,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-04 19:48:06.038, foo, 2016-07-04 19:48:06.038, foo, 0}
2016-07-04 19:48:06,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-04 19:48:06.039, foo, 2016-07-04 19:48:06.039, foo, 0}
2016-07-04 19:48:06,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-04 19:48:06.04, foo, 2016-07-04 19:48:06.04, foo, 0}
2016-07-04 19:48:06,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-04 19:48:06.041, foo, 2016-07-04 19:48:06.041, foo, 0}
2016-07-04 19:48:06,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-04 19:48:06.042, foo, 2016-07-04 19:48:06.042, foo, 0}
2016-07-04 19:48:06,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-04 19:48:06.043, foo, 2016-07-04 19:48:06.043, foo, 0}
2016-07-04 19:48:06,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-04 19:48:06.043, foo, 2016-07-04 19:48:06.043, foo, 0}
2016-07-04 19:48:06,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-04 19:48:06.044, foo, 2016-07-04 19:48:06.044, foo, 0}
2016-07-04 19:48:06,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-04 19:48:06.044, foo, 2016-07-04 19:48:06.044, foo, 0}
2016-07-04 19:48:06,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-04 19:48:06.045, foo, 2016-07-04 19:48:06.045, foo, 0}
2016-07-04 19:48:06,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-04 19:48:06.046, foo, 2016-07-04 19:48:06.046, foo, 0}
2016-07-04 19:48:06,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-04 19:48:06.046, foo, 2016-07-04 19:48:06.046, foo, 0}
2016-07-04 19:48:06,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-04 19:48:06.054, foo, 2016-07-04 19:48:06.054, foo, 0}
2016-07-04 19:48:06,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-04 19:48:06.054, foo, 2016-07-04 19:48:06.054, foo, 0}
2016-07-04 19:48:06,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-04 19:48:06.055, foo, 2016-07-04 19:48:06.055, foo, 0}
2016-07-04 19:48:06,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-04 19:48:06.056, foo, 2016-07-04 19:48:06.056, foo, 0}
2016-07-04 19:48:06,071 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-04 19:48:06,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-04 19:48:06.072, foo, 2016-07-04 19:48:06.072, foo}
2016-07-04 19:48:06,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-04 19:48:06.074, foo, 2016-07-04 19:48:06.074, foo}
2016-07-04 19:48:06,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-04 19:48:06.075, foo, 2016-07-04 19:48:06.075, foo}
2016-07-04 19:48:06,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-04 19:48:06.076, foo, 2016-07-04 19:48:06.076, foo}
2016-07-04 19:48:06,082 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-04 19:48:06,082 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 19:48:06,083 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-04 19:48:06,083 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 19:48:06,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-04 19:48:06.159, foo, 2016-07-04 19:48:06.159, foo, 0}
2016-07-04 19:48:06,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-04 19:48:06.161, foo, 2016-07-04 19:48:06.161, foo, 0}
2016-07-04 19:48:06,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-04 19:48:06.163, foo, 2016-07-04 19:48:06.163, foo, 0}
2016-07-04 19:48:06,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-04 19:48:06.164, foo, 2016-07-04 19:48:06.164, foo, 0}
2016-07-04 19:48:06,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-04 19:48:06.166, foo, 2016-07-04 19:48:06.166, foo, 0}
2016-07-04 19:48:06,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-04 19:48:06.167, foo, 2016-07-04 19:48:06.167, foo, 0}
2016-07-04 19:48:06,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-04 19:48:06.167, foo, 2016-07-04 19:48:06.167, foo, 0}
2016-07-04 19:48:06,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-04 19:48:06.168, foo, 2016-07-04 19:48:06.168, foo, 0}
2016-07-04 19:48:06,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-04 19:48:06.169, foo, 2016-07-04 19:48:06.169, foo, 0}
2016-07-04 19:48:06,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-04 19:48:06.17, foo, 2016-07-04 19:48:06.17, foo, 0}
2016-07-04 19:48:06,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-04 19:48:06.171, foo, 2016-07-04 19:48:06.171, foo, 0}
2016-07-04 19:48:06,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-04 19:48:06.179, foo, 2016-07-04 19:48:06.179, foo, 0}
2016-07-04 19:48:06,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-04 19:48:06.18, foo, 2016-07-04 19:48:06.18, foo, 0}
2016-07-04 19:48:06,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-04 19:48:06.181, foo, 2016-07-04 19:48:06.181, foo, 0}
2016-07-04 19:48:06,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-04 19:48:06.182, foo, 2016-07-04 19:48:06.182, foo, 0}
2016-07-04 19:48:06,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-04 19:48:06.183, foo, 2016-07-04 19:48:06.183, foo, 0}
2016-07-04 19:48:06,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-04 19:48:06.183, foo, 2016-07-04 19:48:06.183, foo, 0}
2016-07-04 19:48:06,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-04 19:48:06.184, foo, 2016-07-04 19:48:06.184, foo, 0}
2016-07-04 19:48:06,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-04 19:48:06.185, foo, 2016-07-04 19:48:06.185, foo, 0}
2016-07-04 19:48:06,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-04 19:48:06.186, foo, 2016-07-04 19:48:06.186, foo, 0}
2016-07-04 19:48:06,212 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-04 19:48:06,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-04 19:48:06.214, foo, 2016-07-04 19:48:06.214, foo, 0}
2016-07-04 19:48:06,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-04 19:48:06.216, foo, 2016-07-04 19:48:06.216, foo, 0}
2016-07-04 19:48:06,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-04 19:48:06.218, foo, 2016-07-04 19:48:06.218, foo, 0}
2016-07-04 19:48:06,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-04 19:48:06.22, foo, 2016-07-04 19:48:06.22, foo, 0}
2016-07-04 19:48:06,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-04 19:48:06.222, foo, 2016-07-04 19:48:06.222, foo, 0}
2016-07-04 19:48:06,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-04 19:48:06.224, foo, 2016-07-04 19:48:06.224, foo, 0}
2016-07-04 19:48:06,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-04 19:48:06.225, foo, 2016-07-04 19:48:06.225, foo, 0}
2016-07-04 19:48:06,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-04 19:48:06.228, foo, 2016-07-04 19:48:06.228, foo, 0}
2016-07-04 19:48:06,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-04 19:48:06.231, foo, 2016-07-04 19:48:06.231, foo, 0}
2016-07-04 19:48:06,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-04 19:48:06.233, foo, 2016-07-04 19:48:06.233, foo, 0}
2016-07-04 19:48:06,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-04 19:48:06.235, foo, 2016-07-04 19:48:06.235, foo, 0}
2016-07-04 19:48:06,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-04 19:48:06.237, foo, 2016-07-04 19:48:06.237, foo, 0}
2016-07-04 19:48:06,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-04 19:48:06.238, foo, 2016-07-04 19:48:06.238, foo, 0}
2016-07-04 19:48:06,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-04 19:48:06.248, foo, 2016-07-04 19:48:06.248, foo, 0}
2016-07-04 19:48:06,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-04 19:48:06.25, foo, 2016-07-04 19:48:06.25, foo, 0}
2016-07-04 19:48:06,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-04 19:48:06.251, foo, 2016-07-04 19:48:06.251, foo, 0}
2016-07-04 19:48:06,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-04 19:48:06.254, foo, 2016-07-04 19:48:06.254, foo, 0}
2016-07-04 19:48:06,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-04 19:48:06.255, foo, 2016-07-04 19:48:06.255, foo, 0}
2016-07-04 19:48:06,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-04 19:48:06.257, foo, 2016-07-04 19:48:06.257, foo, 0}
2016-07-04 19:48:06,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-04 19:48:06.259, foo, 2016-07-04 19:48:06.259, foo, 0}
2016-07-04 19:48:06,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-04 19:48:06.262, foo, 2016-07-04 19:48:06.262, foo, 0}
2016-07-04 19:48:06,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-04 19:48:06.265, foo, 2016-07-04 19:48:06.265, foo, 0}
2016-07-04 19:48:06,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-04 19:48:06.266, foo, 2016-07-04 19:48:06.266, foo, 0}
2016-07-04 19:48:06,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-04 19:48:06.268, foo, 2016-07-04 19:48:06.268, foo, 0}
2016-07-04 19:48:06,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-04 19:48:06.27, foo, 2016-07-04 19:48:06.27, foo, 0}
2016-07-04 19:48:06,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-04 19:48:06.273, foo, 2016-07-04 19:48:06.273, foo, 0}
2016-07-04 19:48:06,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-04 19:48:06.274, foo, 2016-07-04 19:48:06.274, foo, 0}
2016-07-04 19:48:06,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-04 19:48:06.276, foo, 2016-07-04 19:48:06.276, foo, 0}
2016-07-04 19:48:06,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-04 19:48:06.277, foo, 2016-07-04 19:48:06.277, foo, 0}
2016-07-04 19:48:06,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-04 19:48:06.278, foo, 2016-07-04 19:48:06.278, foo, 0}
2016-07-04 19:48:06,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-04 19:48:06.279, foo, 2016-07-04 19:48:06.279, foo, 0}
2016-07-04 19:48:06,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 19:48:06.282, foo, 2016-07-04 19:48:06.282, foo, 0}
2016-07-04 19:48:06,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 19:48:06.284, foo, 2016-07-04 19:48:06.284, foo, 0}
2016-07-04 19:48:06,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 19:48:06.286, foo, 2016-07-04 19:48:06.286, foo, 0}
2016-07-04 19:48:06,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 19:48:06.287, foo, 2016-07-04 19:48:06.287, foo, 0}
2016-07-04 19:48:06,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 19:48:06.288, foo, 2016-07-04 19:48:06.288, foo, 0}
2016-07-04 19:48:06,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-04 19:48:06.289, foo, 2016-07-04 19:48:06.289, foo, 0}
2016-07-04 19:48:06,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 19:48:06.291, foo, 2016-07-04 19:48:06.291, foo, 0}
2016-07-04 19:48:06,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 19:48:06.292, foo, 2016-07-04 19:48:06.292, foo, 0}
2016-07-04 19:48:06,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-04 19:48:06.293, foo, 2016-07-04 19:48:06.293, foo, 0}
2016-07-04 19:48:06,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-04 19:48:06.296, foo, 2016-07-04 19:48:06.296, foo, 0}
2016-07-04 19:48:06,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-04 19:48:06.298, foo, 2016-07-04 19:48:06.298, foo, 0}
2016-07-04 19:48:06,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 19:48:06.299, foo, 2016-07-04 19:48:06.299, foo, 0}
2016-07-04 19:48:06,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 19:48:06.3, foo, 2016-07-04 19:48:06.3, foo, 0}
2016-07-04 19:48:06,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 19:48:06.301, foo, 2016-07-04 19:48:06.301, foo, 0}
2016-07-04 19:48:06,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 19:48:06.303, foo, 2016-07-04 19:48:06.303, foo, 0}
2016-07-04 19:48:06,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 19:48:06.307, foo, 2016-07-04 19:48:06.307, foo, 0}
2016-07-04 19:48:06,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-04 19:48:06.309, foo, 2016-07-04 19:48:06.309, foo, 0}
2016-07-04 19:48:06,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 19:48:06.311, foo, 2016-07-04 19:48:06.311, foo, 0}
2016-07-04 19:48:06,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 19:48:06.314, foo, 2016-07-04 19:48:06.314, foo, 0}
2016-07-04 19:48:06,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-04 19:48:06.315, foo, 2016-07-04 19:48:06.315, foo, 0}
2016-07-04 19:48:06,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-04 19:48:06.316, foo, 2016-07-04 19:48:06.316, foo, 0}
2016-07-04 19:48:06,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-04 19:48:06.318, foo, 2016-07-04 19:48:06.318, foo, 0}
2016-07-04 19:48:06,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-04 19:48:06.319, foo, 2016-07-04 19:48:06.319, foo, 0}
2016-07-04 19:48:06,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-04 19:48:06.321, foo, 2016-07-04 19:48:06.321, foo, 0}
2016-07-04 19:48:06,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-04 19:48:06.322, foo, 2016-07-04 19:48:06.322, foo, 0}
2016-07-04 19:48:06,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-04 19:48:06.324, foo, 2016-07-04 19:48:06.324, foo, 0}
2016-07-04 19:48:06,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-04 19:48:06.325, foo, 2016-07-04 19:48:06.325, foo, 0}
2016-07-04 19:48:06,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-04 19:48:06.327, foo, 2016-07-04 19:48:06.327, foo, 0}
2016-07-04 19:48:06,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-04 19:48:06.33, foo, 2016-07-04 19:48:06.33, foo, 0}
2016-07-04 19:48:06,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-04 19:48:06.331, foo, 2016-07-04 19:48:06.331, foo, 0}
2016-07-04 19:48:06,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-04 19:48:06.332, foo, 2016-07-04 19:48:06.332, foo, 0}
2016-07-04 19:48:06,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-04 19:48:06.334, foo, 2016-07-04 19:48:06.334, foo, 0}
2016-07-04 19:48:06,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-04 19:48:06.335, foo, 2016-07-04 19:48:06.335, foo, 0}
2016-07-04 19:48:06,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-04 19:48:06.336, foo, 2016-07-04 19:48:06.336, foo, 0}
2016-07-04 19:48:06,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-04 19:48:06.337, foo, 2016-07-04 19:48:06.337, foo, 0}
2016-07-04 19:48:06,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-04 19:48:06.338, foo, 2016-07-04 19:48:06.338, foo, 0}
2016-07-04 19:48:06,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-04 19:48:06.339, foo, 2016-07-04 19:48:06.34, foo, 0}
2016-07-04 19:48:06,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-04 19:48:06.346, foo, 2016-07-04 19:48:06.346, foo, 0}
2016-07-04 19:48:06,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-04 19:48:06.349, foo, 2016-07-04 19:48:06.349, foo, 0}
2016-07-04 19:48:06,406 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-04 19:48:06,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-04 19:48:06.407, foo, 2016-07-04 19:48:06.407, foo}
2016-07-04 19:48:06,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-04 19:48:06.409, foo, 2016-07-04 19:48:06.409, foo}
2016-07-04 19:48:06,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-04 19:48:06.41, foo, 2016-07-04 19:48:06.41, foo}
2016-07-04 19:48:06,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-04 19:48:06.411, foo, 2016-07-04 19:48:06.411, foo}
2016-07-04 19:48:06,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-04 19:48:06.412, foo, 2016-07-04 19:48:06.412, foo}
2016-07-04 19:48:06,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-04 19:48:06.413, foo, 2016-07-04 19:48:06.413, foo}
2016-07-04 19:48:06,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-04 19:48:06.415, foo, 2016-07-04 19:48:06.415, foo}
2016-07-04 19:48:06,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-04 19:48:06.416, foo, 2016-07-04 19:48:06.416, foo}
2016-07-04 19:48:06,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-04 19:48:06.416, foo, 2016-07-04 19:48:06.416, foo}
2016-07-04 19:48:06,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-04 19:48:06.417, foo, 2016-07-04 19:48:06.417, foo}
2016-07-04 19:48:06,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-04 19:48:06.418, foo, 2016-07-04 19:48:06.418, foo}
2016-07-04 19:48:06,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-04 19:48:06.42, foo, 2016-07-04 19:48:06.42, foo}
2016-07-04 19:48:06,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-04 19:48:06.42, foo, 2016-07-04 19:48:06.42, foo}
2016-07-04 19:48:06,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-04 19:48:06.421, foo, 2016-07-04 19:48:06.421, foo}
2016-07-04 19:48:06,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-04 19:48:06.422, foo, 2016-07-04 19:48:06.422, foo}
2016-07-04 19:48:06,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-04 19:48:06.423, foo, 2016-07-04 19:48:06.423, foo}
2016-07-04 19:48:06,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-04 19:48:06.424, foo, 2016-07-04 19:48:06.424, foo}
2016-07-04 19:48:06,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-04 19:48:06.425, foo, 2016-07-04 19:48:06.425, foo}
2016-07-04 19:48:06,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-04 19:48:06.425, foo, 2016-07-04 19:48:06.425, foo}
2016-07-04 19:48:06,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-04 19:48:06.426, foo, 2016-07-04 19:48:06.426, foo}
2016-07-04 19:48:06,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-04 19:48:06.427, foo, 2016-07-04 19:48:06.427, foo}
2016-07-04 19:48:06,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-04 19:48:06.428, foo, 2016-07-04 19:48:06.428, foo}
2016-07-04 19:48:06,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-04 19:48:06.429, foo, 2016-07-04 19:48:06.429, foo}
2016-07-04 19:48:06,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-04 19:48:06.43, foo, 2016-07-04 19:48:06.43, foo}
2016-07-04 19:48:06,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-04 19:48:06.431, foo, 2016-07-04 19:48:06.431, foo}
2016-07-04 19:48:06,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 19:48:06.432, foo, 2016-07-04 19:48:06.432, foo}
2016-07-04 19:48:06,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-04 19:48:06.433, foo, 2016-07-04 19:48:06.433, foo}
2016-07-04 19:48:06,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-04 19:48:06.434, foo, 2016-07-04 19:48:06.434, foo}
2016-07-04 19:48:06,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-04 19:48:06.435, foo, 2016-07-04 19:48:06.435, foo}
2016-07-04 19:48:06,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 19:48:06.436, foo, 2016-07-04 19:48:06.436, foo}
2016-07-04 19:48:06,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 19:48:06.437, foo, 2016-07-04 19:48:06.437, foo}
2016-07-04 19:48:06,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 19:48:06.438, foo, 2016-07-04 19:48:06.438, foo}
2016-07-04 19:48:06,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-04 19:48:06.439, foo, 2016-07-04 19:48:06.439, foo}
2016-07-04 19:48:06,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-04 19:48:06.441, foo, 2016-07-04 19:48:06.441, foo}
2016-07-04 19:48:06,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-04 19:48:06.442, foo, 2016-07-04 19:48:06.442, foo}
2016-07-04 19:48:06,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-04 19:48:06.443, foo, 2016-07-04 19:48:06.443, foo}
2016-07-04 19:48:06,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-04 19:48:06.444, foo, 2016-07-04 19:48:06.444, foo}
2016-07-04 19:48:06,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-04 19:48:06.445, foo, 2016-07-04 19:48:06.445, foo}
2016-07-04 19:48:06,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-04 19:48:06.446, foo, 2016-07-04 19:48:06.446, foo}
2016-07-04 19:48:06,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-04 19:48:06.448, foo, 2016-07-04 19:48:06.448, foo}
2016-07-04 19:48:06,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-04 19:48:06.449, foo, 2016-07-04 19:48:06.449, foo}
2016-07-04 19:48:06,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-04 19:48:06.45, foo, 2016-07-04 19:48:06.45, foo}
2016-07-04 19:48:06,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-04 19:48:06.451, foo, 2016-07-04 19:48:06.451, foo}
2016-07-04 19:48:06,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-04 19:48:06.471, foo, 2016-07-04 19:48:06.471, foo}
2016-07-04 19:48:06,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-04 19:48:06.472, foo, 2016-07-04 19:48:06.472, foo}
2016-07-04 19:48:06,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-04 19:48:06.473, foo, 2016-07-04 19:48:06.473, foo}
2016-07-04 19:48:06,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-04 19:48:06.474, foo, 2016-07-04 19:48:06.474, foo}
2016-07-04 19:48:06,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-04 19:48:06.475, foo, 2016-07-04 19:48:06.475, foo}
2016-07-04 19:48:06,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-04 19:48:06.476, foo, 2016-07-04 19:48:06.476, foo}
2016-07-04 19:48:06,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-04 19:48:06.477, foo, 2016-07-04 19:48:06.477, foo}
2016-07-04 19:48:06,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-04 19:48:06.479, foo, 2016-07-04 19:48:06.479, foo}
2016-07-04 19:48:06,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-04 19:48:06.48, foo, 2016-07-04 19:48:06.481, foo}
2016-07-04 19:48:06,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-04 19:48:06.482, foo, 2016-07-04 19:48:06.482, foo}
2016-07-04 19:48:06,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-04 19:48:06.483, foo, 2016-07-04 19:48:06.483, foo}
2016-07-04 19:48:06,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-04 19:48:06.484, foo, 2016-07-04 19:48:06.484, foo}
2016-07-04 19:48:06,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-04 19:48:06.486, foo, 2016-07-04 19:48:06.486, foo}
2016-07-04 19:48:06,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-04 19:48:06.487, foo, 2016-07-04 19:48:06.487, foo}
2016-07-04 19:48:06,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-04 19:48:06.488, foo, 2016-07-04 19:48:06.488, foo}
2016-07-04 19:48:06,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 19:48:06.489, foo, 2016-07-04 19:48:06.489, foo}
2016-07-04 19:48:06,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-04 19:48:06.49, foo, 2016-07-04 19:48:06.49, foo}
2016-07-04 19:48:06,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-04 19:48:06.491, foo, 2016-07-04 19:48:06.491, foo}
2016-07-04 19:48:06,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-04 19:48:06.492, foo, 2016-07-04 19:48:06.492, foo}
2016-07-04 19:48:06,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-04 19:48:06.493, foo, 2016-07-04 19:48:06.493, foo}
2016-07-04 19:48:06,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-04 19:48:06.494, foo, 2016-07-04 19:48:06.494, foo}
2016-07-04 19:48:06,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-04 19:48:06.495, foo, 2016-07-04 19:48:06.495, foo}
2016-07-04 19:48:06,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-04 19:48:06.496, foo, 2016-07-04 19:48:06.496, foo}
2016-07-04 19:48:06,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-04 19:48:06.498, foo, 2016-07-04 19:48:06.498, foo}
2016-07-04 19:48:06,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-04 19:48:06.499, foo, 2016-07-04 19:48:06.499, foo}
2016-07-04 19:48:06,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-04 19:48:06.499, foo, 2016-07-04 19:48:06.499, foo}
2016-07-04 19:48:06,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-04 19:48:06.5, foo, 2016-07-04 19:48:06.5, foo}
2016-07-04 19:48:06,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-04 19:48:06.501, foo, 2016-07-04 19:48:06.501, foo}
2016-07-04 19:48:06,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-04 19:48:06.501, foo, 2016-07-04 19:48:06.501, foo}
2016-07-04 19:48:06,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-04 19:48:06.502, foo, 2016-07-04 19:48:06.502, foo}
2016-07-04 19:48:06,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-04 19:48:06.503, foo, 2016-07-04 19:48:06.503, foo}
2016-07-04 19:48:06,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-04 19:48:06.504, foo, 2016-07-04 19:48:06.504, foo}
2016-07-04 19:48:06,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-04 19:48:06.505, foo, 2016-07-04 19:48:06.505, foo}
2016-07-04 19:48:06,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-04 19:48:06.506, foo, 2016-07-04 19:48:06.506, foo}
2016-07-04 19:48:06,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-04 19:48:06.507, foo, 2016-07-04 19:48:06.507, foo}
2016-07-04 19:48:06,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-04 19:48:06.508, foo, 2016-07-04 19:48:06.508, foo}
2016-07-04 19:48:06,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-04 19:48:06.509, foo, 2016-07-04 19:48:06.509, foo}
2016-07-04 19:48:06,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-04 19:48:06.51, foo, 2016-07-04 19:48:06.51, foo}
2016-07-04 19:48:06,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-04 19:48:06.511, foo, 2016-07-04 19:48:06.511, foo}
2016-07-04 19:48:06,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 19:48:06.512, foo, 2016-07-04 19:48:06.512, foo}
2016-07-04 19:48:06,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 19:48:06.512, foo, 2016-07-04 19:48:06.512, foo}
2016-07-04 19:48:06,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 19:48:06.514, foo, 2016-07-04 19:48:06.514, foo}
2016-07-04 19:48:06,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 19:48:06.514, foo, 2016-07-04 19:48:06.514, foo}
2016-07-04 19:48:06,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-04 19:48:06.515, foo, 2016-07-04 19:48:06.515, foo}
2016-07-04 19:48:06,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-04 19:48:06.516, foo, 2016-07-04 19:48:06.516, foo}
2016-07-04 19:48:06,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-04 19:48:06.516, foo, 2016-07-04 19:48:06.516, foo}
2016-07-04 19:48:06,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-04 19:48:06.517, foo, 2016-07-04 19:48:06.517, foo}
2016-07-04 19:48:06,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-04 19:48:06.518, foo, 2016-07-04 19:48:06.518, foo}
2016-07-04 19:48:06,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-04 19:48:06.518, foo, 2016-07-04 19:48:06.518, foo}
2016-07-04 19:48:06,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-04 19:48:06.519, foo, 2016-07-04 19:48:06.519, foo}
2016-07-04 19:48:06,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-04 19:48:06.52, foo, 2016-07-04 19:48:06.52, foo}
2016-07-04 19:48:06,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-04 19:48:06.52, foo, 2016-07-04 19:48:06.52, foo}
2016-07-04 19:48:06,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-04 19:48:06.521, foo, 2016-07-04 19:48:06.521, foo}
2016-07-04 19:48:06,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-04 19:48:06.522, foo, 2016-07-04 19:48:06.522, foo}
2016-07-04 19:48:06,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-04 19:48:06.522, foo, 2016-07-04 19:48:06.522, foo}
2016-07-04 19:48:06,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-04 19:48:06.523, foo, 2016-07-04 19:48:06.523, foo}
2016-07-04 19:48:06,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-04 19:48:06.524, foo, 2016-07-04 19:48:06.524, foo}
2016-07-04 19:48:06,595 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-04 19:48:06,597 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-04 19:48:06,613 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:06,624 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:48:06,632 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:48:06,636 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:48:06,639 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:48:06,642 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:48:06,645 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:48:06,655 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 19:48:06,658 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 19:48:06,662 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-04 19:48:06,666 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-04 19:48:06,668 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-04 19:48:06,675 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-04 19:48:06,675 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-04 19:48:06,675 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-04 19:48:06,675 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-04 19:48:06,676 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-04 19:48:06,676 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-04 19:48:06,685 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-04 19:48:06,686 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-04 19:48:06,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-04 19:48:06,692 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-04 19:48:06,693 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-04 19:48:06,695 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-04 19:48:06,696 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-04 19:48:06,698 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:48:06,702 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s329ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-04 19:48:07,632 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 19:48:07,634 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 19:48:07,635 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 19:48:07,635 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 19:48:07,636 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 19:48:07,664 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:07,664 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:07,665 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:07,665 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:07,719 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 19:48:07,719 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 19:48:07,720 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 19:48:07,734 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:48:07,896 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 19:48:07,901 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:48:08,465 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:48:08,465 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:48:08,467 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 19:48:08,469 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 19:48:08,469 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:08,469 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 19:48:08,487 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 19:48:08,491 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 19:48:08,511 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 19:48:08,512 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:48:08,512 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 19:48:08,513 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 19:48:08,571 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 19:48:08,587 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 19:48:08,600 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 19:48:08,613 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 19:48:08,627 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 19:48:08,639 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 19:48:08,652 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 19:48:08,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 19:48:08,693 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 19:48:08,701 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 19:48:08,716 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 19:48:08,727 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 19:48:08,734 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 19:48:08,743 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 19:48:08,752 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 19:48:08,753 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 19:48:08,753 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 19:48:08,753 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 19:48:08,754 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 19:48:08,755 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 19:48:08,760 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 19:48:08,761 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 19:48:08,761 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 19:48:08,809 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 19:48:08,812 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:48:08,929 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 19:48:08,930 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:48:08,943 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s328ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 19:48:09,901 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 19:48:09,905 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 19:48:09,905 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 19:48:09,905 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 19:48:09,906 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 19:48:09,933 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:09,933 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:09,934 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:09,934 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:09,936 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 19:48:09,937 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 19:48:09,937 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 19:48:09,937 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 19:48:09,938 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 19:48:09,938 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 19:48:09,997 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:48:10,106 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 19:48:10,277 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 19:48:10,284 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:48:10,285 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:48:10,286 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:48:10,288 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:48:10,288 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:48:10,289 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:48:10,291 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:48:10,292 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:48:10,294 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:48:10,298 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:48:10,299 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:48:10,299 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:48:10,300 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:48:10,300 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:48:10,301 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:48:10,301 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:48:10,301 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:48:10,313 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:10,648 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:48:10,651 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:48:10,654 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:48:10,656 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:48:10,660 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:48:10,663 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:48:10,670 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 19:48:10,670 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 19:48:11,135 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 19:48:11,135 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 19:48:11,145 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:48:11,158 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:48:11,158 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:48:11,222 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:48:11,227 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:48:11,228 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 19:48:11,229 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 19:48:11,229 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 19:48:11,230 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 19:48:11,245 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:48:11,259 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:48:11,263 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s378ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 19:48:13,844 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 19:48:13,847 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 19:48:13,847 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 19:48:13,847 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 19:48:13,848 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 19:48:13,869 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:13,869 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:13,869 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:13,869 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:13,886 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 19:48:13,886 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 19:48:13,920 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:48:14,006 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 19:48:14,323 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 19:48:14,327 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:48:14,328 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:48:14,329 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:48:14,331 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:48:14,331 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:48:14,332 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:48:14,335 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:48:14,335 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:48:14,337 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:48:14,350 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:48:14,351 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:48:14,351 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:48:14,351 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:48:14,352 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:48:14,352 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:48:14,352 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:48:14,353 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:48:14,363 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:14,715 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:48:14,719 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:48:14,722 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:48:14,725 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:48:14,729 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:48:14,733 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:48:14,747 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 19:48:14,748 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 19:48:14,748 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 19:48:14,749 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 19:48:14,749 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 19:48:14,750 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 19:48:14,750 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 19:48:14,750 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 19:48:14,752 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 19:48:14,752 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 19:48:14,767 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 19:48:14,770 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 19:48:14,822 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 19:48:14,826 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 19:48:14,854 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 19:48:14,859 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 19:48:14,886 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 19:48:14,910 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 19:48:14,917 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 19:48:14,925 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 19:48:14,931 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 19:48:14,934 [main] INFO  (Database#info():2711) - }
2016-07-04 19:48:14,934 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 19:48:14,935 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 19:48:14,953 [main] INFO  (Database#info():2711) - }
2016-07-04 19:48:14,959 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 19:48:15,002 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:48:15,005 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 19:48:15,006 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 19:48:15,644 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 19:48:15,921 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 19:48:16,175 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 19:48:16,352 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 19:48:16,564 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 19:48:16,810 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 19:48:17,016 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 19:48:17,236 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 19:48:17,417 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 19:48:17,559 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 19:48:17,776 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 19:48:17,934 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 19:48:18,078 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 19:48:18,257 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 19:48:18,438 [main] INFO  (Database#info():2711) - }
2016-07-04 19:48:18,439 [main] INFO  (Database#info():2711) -  
2016-07-04 19:48:18,515 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:48:18,553 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s709ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 19:48:19,415 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 19:48:19,417 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 19:48:19,417 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 19:48:19,417 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 19:48:19,418 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 19:48:19,439 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:19,440 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:19,441 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:19,441 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:19,471 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:48:19,477 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:48:19,817 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:48:19,817 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:48:19,848 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:48:19,853 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:48:19,853 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:48:19,856 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:48:19,859 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:48:19,859 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:48:19,861 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:48:19,865 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:48:19,865 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:48:19,867 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_NAME)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:48:19,872 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:48:19,873 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:48:19,873 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:48:19,883 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s479ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 19:48:20,665 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 19:48:20,668 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 19:48:20,669 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 19:48:20,669 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 19:48:20,669 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 19:48:20,688 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:48:20,689 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:48:20,689 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:48:20,690 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:48:20,701 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 19:48:20,701 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 19:48:20,708 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:48:20,798 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:48:20,803 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:48:21,138 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:48:21,139 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:48:21,141 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:48:21,194 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:48:21,194 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:48:21,195 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:48:21,205 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:48:21,206 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:48:21,208 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:48:21,221 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:48:21,222 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:48:21,223 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_NAME)
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:48:21,230 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:48:21,231 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:48:21,237 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 19:48:21,238 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 19:48:21,293 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:48:21,297 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:48:21,298 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 19:48:21,298 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 19:48:21,299 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 19:48:21,299 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 19:48:21,324 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 19:48:21,353 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 19:48:21,366 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 19:48:21,366 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:48:21,367 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 19:48:21,368 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 19:48:21,369 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 19:48:21,372 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 19:48:21,377 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 19:48:21,379 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 19:48:21,380 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 19:48:21,380 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 19:48:21,381 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 19:48:21,381 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 19:48:21,419 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 19:48:21,420 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 19:48:21,420 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 19:48:21,420 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 19:48:21,421 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 19:48:21,436 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 19:48:21,437 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 19:48:21,437 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 19:48:21,437 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 19:48:21,439 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 19:48:21,456 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 19:48:21,652 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:48:21,660 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:48:21,663 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:48:21,665 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:48:21,667 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:48:21,669 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:48:21,671 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:48:21,684 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 19:48:21,687 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 19:48:21,702 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:48:21,702 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 19:48:21,836 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 19:48:21,902 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 19:48:21,919 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 19:48:21,971 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 19:48:22,062 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 19:48:22,114 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 19:48:22,164 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 19:48:22,168 [main] INFO  (Database#info():2711) - }
2016-07-04 19:48:22,170 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 19:48:22,174 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 19:48:22,206 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 19:48:22,228 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 19:48:22,249 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 19:48:22,265 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 19:48:22,289 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 19:48:22,306 [main] INFO  (Database#info():2711) - }
2016-07-04 19:48:22,349 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 19:48:22,358 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:48:22,362 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:48:22,370 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s711ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 19:51:48,683 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 19:51:48,687 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 19:51:48,687 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 19:51:48,688 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 19:51:48,688 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 19:51:48,727 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:51:48,727 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:51:48,728 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:51:48,728 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:51:48,768 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 19:51:48,768 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 19:51:48,768 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 19:51:48,782 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:51:48,933 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 19:51:48,942 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:51:49,507 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:51:49,510 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:51:49,512 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 19:51:49,515 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 19:51:49,515 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:51:49,516 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 19:51:49,544 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 19:51:49,549 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 19:51:49,577 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 19:51:49,577 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:51:49,578 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 19:51:49,578 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 19:51:49,644 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 19:51:49,664 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 19:51:49,682 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 19:51:49,698 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 19:51:49,714 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 19:51:49,725 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 19:51:49,743 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 19:51:49,759 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 19:51:49,771 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 19:51:49,783 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 19:51:49,804 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 19:51:49,820 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 19:51:49,833 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 19:51:49,848 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 19:51:49,859 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 19:51:49,860 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 19:51:49,860 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 19:51:49,861 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 19:51:49,861 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 19:51:49,863 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 19:51:49,869 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 19:51:49,869 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 19:51:49,870 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 19:51:49,925 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 19:51:50,025 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:51:50,111 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 19:51:50,112 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:51:50,123 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s455ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 19:51:51,152 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 19:51:51,156 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 19:51:51,156 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 19:51:51,157 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 19:51:51,157 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 19:51:51,191 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:51:51,192 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:51:51,192 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:51:51,192 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:51:51,196 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 19:51:51,196 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 19:51:51,196 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 19:51:51,197 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 19:51:51,197 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 19:51:51,198 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 19:51:51,246 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:51:51,381 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 19:51:51,585 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 19:51:51,600 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:51:51,601 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:51:51,603 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:51:51,605 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:51:51,605 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:51:51,607 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:51:51,609 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:51:51,610 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:51:51,614 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:51:51,622 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:51:51,623 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:51:51,623 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:51:51,624 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:51:51,624 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:51:51,625 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:51:51,625 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:51:51,626 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:51:51,639 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:51:52,066 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:51:52,073 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:51:52,076 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:51:52,080 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:51:52,086 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:51:52,090 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:51:52,104 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 19:51:52,105 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 19:51:52,659 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 19:51:52,660 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 19:51:52,667 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:51:52,680 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:51:52,681 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:51:52,777 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:51:52,783 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:51:52,785 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 19:51:52,785 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 19:51:52,786 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 19:51:52,787 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 19:51:52,803 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:51:52,819 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:51:52,825 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s698ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 19:51:55,611 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 19:51:55,614 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 19:51:55,614 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 19:51:55,615 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 19:51:55,615 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 19:51:55,645 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:51:55,645 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:51:55,646 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:51:55,647 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:51:55,669 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 19:51:55,669 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 19:51:55,718 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:51:55,806 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 19:51:56,086 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 19:51:56,090 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 19:51:56,091 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 19:51:56,093 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 19:51:56,095 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 19:51:56,096 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 19:51:56,101 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 19:51:56,105 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 19:51:56,105 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 19:51:56,108 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 19:51:56,120 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:51:56,121 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 19:51:56,121 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 19:51:56,122 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 19:51:56,122 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 19:51:56,123 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 19:51:56,123 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 19:51:56,124 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 19:51:56,138 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:51:56,564 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:51:56,568 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:51:56,571 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:51:56,573 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:51:56,578 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:51:56,582 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:51:56,605 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 19:51:56,606 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 19:51:56,607 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 19:51:56,607 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 19:51:56,608 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 19:51:56,608 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 19:51:56,608 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 19:51:56,609 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 19:51:56,609 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 19:51:56,609 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 19:51:56,625 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 19:51:56,626 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 19:51:56,724 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 19:51:56,727 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 19:51:56,777 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 19:51:56,786 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 19:51:56,814 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 19:51:56,838 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 19:51:56,844 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 19:51:56,855 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 19:51:56,869 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 19:51:56,872 [main] INFO  (Database#info():2711) - }
2016-07-04 19:51:56,872 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 19:51:56,873 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 19:51:56,887 [main] INFO  (Database#info():2711) - }
2016-07-04 19:51:56,894 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 19:51:56,927 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:51:56,929 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 19:51:56,930 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 19:51:57,474 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 19:51:57,743 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 19:51:57,945 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 19:51:58,133 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 19:51:58,341 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 19:51:58,523 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 19:51:58,758 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 19:51:59,016 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 19:51:59,187 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 19:51:59,342 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 19:51:59,536 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 19:51:59,666 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 19:51:59,791 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 19:51:59,931 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 19:52:00,079 [main] INFO  (Database#info():2711) - }
2016-07-04 19:52:00,080 [main] INFO  (Database#info():2711) -  
2016-07-04 19:52:00,130 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:52:00,142 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s553ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 19:52:01,181 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 19:52:01,185 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 19:52:01,186 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 19:52:01,186 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 19:52:01,186 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 19:52:01,206 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:52:01,207 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:52:01,207 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:52:01,207 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:52:01,234 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:52:01,239 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:52:01,565 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:52:01,566 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:52:01,595 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:52:01,602 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:52:01,603 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:52:01,605 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:52:01,608 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:52:01,609 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:52:01,611 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:52:01,617 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:52:01,619 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:52:01,621 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:52:01,634 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 19:52:01,634 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:52:01,635 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:52:01,643 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s472ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 19:52:02,326 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 19:52:02,329 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 19:52:02,329 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 19:52:02,329 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 19:52:02,329 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 19:52:02,347 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 19:52:02,348 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 19:52:02,348 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 19:52:02,348 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 19:52:02,359 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 19:52:02,360 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 19:52:02,367 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 19:52:02,466 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 19:52:02,474 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 19:52:02,791 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 19:52:02,791 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 19:52:02,795 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 19:52:02,854 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:52:02,855 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 19:52:02,856 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:52:02,867 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:52:02,868 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 19:52:02,870 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 19:52:02,879 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:52:02,880 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 19:52:02,881 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 19:52:02,890 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 19:52:02,890 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 19:52:02,900 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 19:52:02,901 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 19:52:02,964 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 19:52:02,969 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 19:52:02,970 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 19:52:02,971 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 19:52:02,971 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 19:52:02,971 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 19:52:03,006 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 19:52:03,034 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 19:52:03,045 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 19:52:03,045 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 19:52:03,045 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 19:52:03,046 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 19:52:03,047 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 19:52:03,047 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 19:52:03,048 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 19:52:03,048 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 19:52:03,049 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 19:52:03,049 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 19:52:03,050 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 19:52:03,050 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 19:52:03,090 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 19:52:03,091 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 19:52:03,091 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 19:52:03,091 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 19:52:03,092 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 19:52:03,109 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 19:52:03,110 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 19:52:03,111 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 19:52:03,111 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 19:52:03,112 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 19:52:03,117 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 19:52:03,323 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 19:52:03,335 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 19:52:03,340 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 19:52:03,344 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 19:52:03,346 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 19:52:03,349 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 19:52:03,352 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 19:52:03,368 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 19:52:03,371 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 19:52:03,388 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 19:52:03,388 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 19:52:03,564 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 19:52:03,677 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 19:52:03,693 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 19:52:03,770 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 19:52:03,840 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 19:52:03,897 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 19:52:03,945 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 19:52:03,945 [main] INFO  (Database#info():2711) - }
2016-07-04 19:52:03,947 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 19:52:03,950 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 19:52:03,980 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 19:52:04,002 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 19:52:04,020 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 19:52:04,038 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 19:52:04,057 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 19:52:04,074 [main] INFO  (Database#info():2711) - }
2016-07-04 19:52:04,109 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 19:52:04,119 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 19:52:04,126 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 19:52:04,142 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s824ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:01:19,492 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:01:19,496 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:01:19,497 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:01:19,497 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:01:19,498 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:01:19,535 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:01:19,536 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:01:19,537 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:01:19,537 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:01:19,580 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:01:19,581 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:01:19,581 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:01:19,595 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:01:19,739 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:01:19,750 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:01:20,292 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:01:20,295 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:01:20,297 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:01:20,299 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:01:20,300 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:01:20,300 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:01:20,326 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:01:20,331 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:01:20,354 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:01:20,355 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:01:20,355 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:01:20,356 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:01:20,421 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:01:20,444 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:01:20,473 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:01:20,503 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:01:20,538 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:01:20,558 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:01:20,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:01:20,624 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:01:20,644 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:01:20,656 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:01:20,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:01:20,690 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:01:20,701 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:01:20,723 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:01:20,736 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:01:20,737 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:01:20,738 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:01:20,738 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:01:20,738 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:01:20,740 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:01:20,744 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:01:20,745 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:01:20,745 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:01:20,797 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:01:20,896 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:01:20,971 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:01:20,971 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:01:20,982 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s512ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:01:21,862 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:01:21,866 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:01:21,866 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:01:21,866 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:01:21,867 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:01:21,896 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:01:21,897 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:01:21,898 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:01:21,898 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:01:21,900 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:01:21,901 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:01:21,901 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:01:21,902 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:01:21,902 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:01:21,902 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:01:21,949 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:01:22,049 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:01:22,220 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:01:22,229 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:01:22,230 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:01:22,232 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:01:22,233 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:01:22,234 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:01:22,235 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:01:22,238 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:01:22,238 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:01:22,241 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:01:22,247 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:01:22,248 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:01:22,248 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:01:22,249 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:01:22,249 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:01:22,250 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:01:22,250 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:01:22,250 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:01:22,259 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:01:22,617 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:01:22,623 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:01:22,627 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:01:22,630 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:01:22,636 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:01:22,640 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:01:22,651 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:01:22,651 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:01:23,121 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:01:23,121 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:01:23,132 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:01:23,146 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:01:23,147 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:01:23,247 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:01:23,254 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:01:23,255 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:01:23,256 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:01:23,256 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:01:23,257 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:01:23,267 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:01:23,278 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:01:23,283 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s435ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:01:25,935 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:01:25,938 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:01:25,939 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:01:25,939 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:01:25,939 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:01:25,971 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:01:25,972 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:01:25,972 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:01:25,973 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:01:25,996 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:01:25,997 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:01:26,045 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:01:26,142 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:01:26,434 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:01:26,439 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:01:26,440 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:01:26,442 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:01:26,443 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:01:26,444 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:01:26,446 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:01:26,450 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:01:26,451 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:01:26,455 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:01:26,467 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:01:26,468 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:01:26,468 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:01:26,469 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:01:26,470 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:01:26,471 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:01:26,471 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:01:26,472 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:01:26,483 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:01:26,852 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:01:26,856 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:01:26,859 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:01:26,862 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:01:26,867 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:01:26,870 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:01:26,885 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:01:26,885 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:01:26,886 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:01:26,887 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:01:26,887 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:01:26,887 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:01:26,888 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:01:26,888 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:01:26,888 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:01:26,889 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:01:26,904 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:01:26,906 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:01:26,952 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:01:26,956 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:01:26,973 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:01:26,978 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:01:26,998 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:01:27,017 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:01:27,025 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:01:27,033 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:01:27,039 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:01:27,043 [main] INFO  (Database#info():2711) - }
2016-07-04 20:01:27,043 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:01:27,044 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:01:27,061 [main] INFO  (Database#info():2711) - }
2016-07-04 20:01:27,068 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:01:27,112 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:01:27,114 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:01:27,115 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:01:27,650 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:01:27,911 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:01:28,110 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:01:28,282 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:01:28,501 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:01:28,673 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:01:28,847 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:01:29,052 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:01:29,197 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:01:29,348 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:01:29,532 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:01:29,666 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:01:29,769 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:01:29,906 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:01:30,029 [main] INFO  (Database#info():2711) - }
2016-07-04 20:01:30,029 [main] INFO  (Database#info():2711) -  
2016-07-04 20:01:30,070 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:01:30,081 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s164ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:01:31,047 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:01:31,049 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:01:31,050 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:01:31,050 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:01:31,050 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:01:31,070 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:01:31,070 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:01:31,070 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:01:31,071 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:01:31,098 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:01:31,103 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:01:31,426 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:01:31,426 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:01:31,456 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:01:31,463 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:01:31,463 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:01:31,466 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:01:31,470 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:01:31,470 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:01:31,471 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:01:31,475 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:01:31,476 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:01:31,477 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:01:31,481 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:01:31,481 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:01:31,482 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:01:31,490 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s453ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:01:32,206 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:01:32,208 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:01:32,208 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:01:32,208 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:01:32,209 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:01:32,230 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:01:32,230 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:01:32,231 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:01:32,231 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:01:32,244 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:01:32,245 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:01:32,251 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:01:32,360 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:01:32,368 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:01:32,692 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:01:32,693 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:01:32,696 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:01:32,758 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:01:32,759 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:01:32,760 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:01:32,767 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:01:32,768 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:01:32,769 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:01:32,775 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:01:32,776 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:01:32,777 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:01:32,787 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:01:32,788 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:01:32,795 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:01:32,796 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:01:32,848 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:01:32,852 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:01:32,853 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:01:32,853 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:01:32,854 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:01:32,854 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:01:32,877 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:01:32,903 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:01:32,913 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:01:32,913 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:01:32,914 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:01:32,915 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:01:32,915 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:01:32,916 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:01:32,916 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:01:32,916 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:01:32,917 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:01:32,918 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:01:32,918 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:01:32,918 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:01:32,941 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:01:32,942 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:01:32,942 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:01:32,942 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:01:32,943 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:01:32,954 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:01:32,956 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:01:32,956 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:01:32,956 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:01:32,957 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:01:32,960 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:01:33,135 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:01:33,143 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:01:33,145 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:01:33,148 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:01:33,150 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:01:33,153 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:01:33,155 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:01:33,167 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:01:33,170 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:01:33,188 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:01:33,188 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:01:33,313 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:01:33,369 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:01:33,382 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:01:33,436 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:01:33,493 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:01:33,536 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:01:33,575 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:01:33,576 [main] INFO  (Database#info():2711) - }
2016-07-04 20:01:33,578 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:01:33,587 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:01:33,624 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:01:33,645 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:01:33,666 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:01:33,690 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:01:33,710 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:01:33,730 [main] INFO  (Database#info():2711) - }
2016-07-04 20:01:33,765 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:01:33,774 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:01:33,778 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:01:33,785 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s589ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:02:14,140 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-04 20:02:14,145 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-04 20:02:14,146 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-04 20:02:14,152 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-04 20:02:14,153 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-04 20:02:14,155 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-04 20:02:16,171 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:16,171 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:16,172 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:16,172 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:16,185 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:02:16,632 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:02:16,633 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:02:16,651 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-04 20:02:16,651 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-04 20:02:16,652 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-04 20:02:16,654 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-04 20:02:16,655 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-04 20:02:16,656 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-04 20:02:16,671 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:02:16,672 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:16,673 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:02:16,804 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-04 20:02:16,810 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-04 20:02:16,815 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-04 20:02:16,822 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-04 20:02:16,829 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-04 20:02:16,842 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-04 20:02:16,863 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-04 20:02:16,884 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-04 20:02:16,902 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-04 20:02:16,923 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-04 20:02:16,940 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-04 20:02:16,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-04 20:02:16,993 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-04 20:02:17,011 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-04 20:02:17,035 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-04 20:02:17,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-04 20:02:17,073 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-04 20:02:17,091 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-04 20:02:17,114 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-04 20:02:17,135 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-04 20:02:17,151 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-04 20:02:17,173 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-04 20:02:17,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-04 20:02:17,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-04 20:02:17,205 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-04 20:02:17,208 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-04 20:02:17,212 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-04 20:02:17,215 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-04 20:02:17,219 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-04 20:02:17,223 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-04 20:02:17,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-04 20:02:17,229 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-04 20:02:17,233 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-04 20:02:17,237 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-04 20:02:17,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-04 20:02:17,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-04 20:02:17,246 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-04 20:02:17,369 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-04 20:02:17,372 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-04 20:02:17,375 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-04 20:02:17,376 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-04 20:02:17,376 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-04 20:02:17,376 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-04 20:02:17,377 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-04 20:02:17,377 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-04 20:02:17,382 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-04 20:02:17,386 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-04 20:02:17,387 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-04 20:02:17,388 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-04 20:02:17,399 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-04 20:02:17,399 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-04 20:02:17,401 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-04 20:02:17,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-04 20:02:17,404 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-04 20:02:17,407 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:02:17,407 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-04 20:02:17,407 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-04 20:02:17,408 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-04 20:02:17,408 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-04 20:02:17,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-04 20:02:17,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-04 20:02:17,473 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-04 20:02:17,507 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-04 20:02:17,545 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-04 20:02:17,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-04 20:02:17,604 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-04 20:02:17,634 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-04 20:02:17,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-04 20:02:17,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-04 20:02:17,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-04 20:02:17,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-04 20:02:17,733 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-04 20:02:17,746 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-04 20:02:17,759 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-04 20:02:17,771 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:02:17,789 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,808 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-04 20:02:17,829 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:02:17,848 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,869 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,887 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-04 20:02:17,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,928 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,946 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-04 20:02:17,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:02:17,990 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-04 20:02:18,023 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-04 20:02:18,049 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:02:18,068 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-04 20:02:18,091 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:02:18,109 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-04 20:02:18,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-04 20:02:18,142 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-04 20:02:18,162 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-04 20:02:18,184 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-04 20:02:18,203 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-04 20:02:18,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-04 20:02:18,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-04 20:02:18,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-04 20:02:18,284 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-04 20:02:18,285 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-04 20:02:18,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-04 20:02:18,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-04 20:02:18,289 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:02:18,290 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-04 20:02:18,290 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-04 20:02:18,397 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-04 20:02:18,398 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-04 20:02:18,398 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-04 20:02:18,398 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-04 20:02:18,399 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-04 20:02:18,399 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-04 20:02:18,423 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:02:18,424 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-04 20:02:18,424 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:02:18,683 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:02:18,683 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:18,683 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:02:18,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-04 20:02:18,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-04 20:02:18,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-04 20:02:18,760 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-04 20:02:18,769 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-04 20:02:18,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-04 20:02:18,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-04 20:02:18,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-04 20:02:18,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-04 20:02:18,778 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-04 20:02:18,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-04 20:02:18,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-04 20:02:18,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-04 20:02:18,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-04 20:02:18,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-04 20:02:18,792 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-04 20:02:18,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-04 20:02:18,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-04 20:02:18,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-04 20:02:18,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-04 20:02:18,800 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-04 20:02:18,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-04 20:02:18,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-04 20:02:18,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-04 20:02:18,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-04 20:02:18,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-04 20:02:18,810 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-04 20:02:18,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-04 20:02:18,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-04 20:02:18,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-04 20:02:18,816 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-04 20:02:18,819 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:02:18,819 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-04 20:02:18,820 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:02:18,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-04 20:02:18.89, foo, 2016-07-04 20:02:18.89, foo, 0}
2016-07-04 20:02:18,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-04 20:02:18.896, foo, 2016-07-04 20:02:18.896, foo, 0}
2016-07-04 20:02:18,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-04 20:02:18.898, foo, 2016-07-04 20:02:18.898, foo, 0}
2016-07-04 20:02:18,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-04 20:02:18.9, foo, 2016-07-04 20:02:18.9, foo, 0}
2016-07-04 20:02:18,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-04 20:02:18.902, foo, 2016-07-04 20:02:18.902, foo, 0}
2016-07-04 20:02:18,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-04 20:02:18.904, foo, 2016-07-04 20:02:18.904, foo, 0}
2016-07-04 20:02:18,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:02:18.907, foo, 2016-07-04 20:02:18.907, foo, 0}
2016-07-04 20:02:18,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-04 20:02:18.909, foo, 2016-07-04 20:02:18.909, foo, 0}
2016-07-04 20:02:18,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-04 20:02:18.911, foo, 2016-07-04 20:02:18.911, foo, 0}
2016-07-04 20:02:18,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-04 20:02:18.917, foo, 2016-07-04 20:02:18.917, foo, 0}
2016-07-04 20:02:18,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-04 20:02:18.918, foo, 2016-07-04 20:02:18.918, foo, 0}
2016-07-04 20:02:18,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-04 20:02:18.923, foo, 2016-07-04 20:02:18.923, foo, 0}
2016-07-04 20:02:18,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-04 20:02:18.925, foo, 2016-07-04 20:02:18.925, foo, 0}
2016-07-04 20:02:18,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-04 20:02:18.929, foo, 2016-07-04 20:02:18.929, foo, 0}
2016-07-04 20:02:18,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-04 20:02:18.932, foo, 2016-07-04 20:02:18.932, foo, 0}
2016-07-04 20:02:18,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-04 20:02:18.934, foo, 2016-07-04 20:02:18.934, foo, 0}
2016-07-04 20:02:18,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:02:18.936, foo, 2016-07-04 20:02:18.936, foo, 0}
2016-07-04 20:02:18,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-04 20:02:18.938, foo, 2016-07-04 20:02:18.938, foo, 0}
2016-07-04 20:02:18,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-04 20:02:18.941, foo, 2016-07-04 20:02:18.941, foo, 0}
2016-07-04 20:02:18,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-04 20:02:18.943, foo, 2016-07-04 20:02:18.943, foo, 0}
2016-07-04 20:02:18,973 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-04 20:02:18,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-04 20:02:18.975, foo, 2016-07-04 20:02:18.975, foo, 0}
2016-07-04 20:02:18,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-04 20:02:18.978, foo, 2016-07-04 20:02:18.978, foo, 0}
2016-07-04 20:02:18,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-04 20:02:18.981, foo, 2016-07-04 20:02:18.981, foo, 0}
2016-07-04 20:02:18,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-04 20:02:18.984, foo, 2016-07-04 20:02:18.984, foo, 0}
2016-07-04 20:02:18,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-04 20:02:18.987, foo, 2016-07-04 20:02:18.987, foo, 0}
2016-07-04 20:02:18,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-04 20:02:18.991, foo, 2016-07-04 20:02:18.991, foo, 0}
2016-07-04 20:02:18,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-04 20:02:18.995, foo, 2016-07-04 20:02:18.995, foo, 0}
2016-07-04 20:02:19,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-04 20:02:19.0, foo, 2016-07-04 20:02:19.0, foo, 0}
2016-07-04 20:02:19,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-04 20:02:19.002, foo, 2016-07-04 20:02:19.002, foo, 0}
2016-07-04 20:02:19,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-04 20:02:19.005, foo, 2016-07-04 20:02:19.005, foo, 0}
2016-07-04 20:02:19,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-04 20:02:19.008, foo, 2016-07-04 20:02:19.008, foo, 0}
2016-07-04 20:02:19,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-04 20:02:19.01, foo, 2016-07-04 20:02:19.01, foo, 0}
2016-07-04 20:02:19,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-04 20:02:19.011, foo, 2016-07-04 20:02:19.011, foo, 0}
2016-07-04 20:02:19,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-04 20:02:19.014, foo, 2016-07-04 20:02:19.014, foo, 0}
2016-07-04 20:02:19,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-04 20:02:19.016, foo, 2016-07-04 20:02:19.016, foo, 0}
2016-07-04 20:02:19,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-04 20:02:19.019, foo, 2016-07-04 20:02:19.019, foo, 0}
2016-07-04 20:02:19,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-04 20:02:19.022, foo, 2016-07-04 20:02:19.022, foo, 0}
2016-07-04 20:02:19,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-04 20:02:19.024, foo, 2016-07-04 20:02:19.024, foo, 0}
2016-07-04 20:02:19,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-04 20:02:19.026, foo, 2016-07-04 20:02:19.026, foo, 0}
2016-07-04 20:02:19,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-04 20:02:19.028, foo, 2016-07-04 20:02:19.028, foo, 0}
2016-07-04 20:02:19,043 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-04 20:02:19,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:02:19,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-04 20:02:19,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-04 20:02:19,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-04 20:02:19,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-04 20:02:19,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-04 20:02:19,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-04 20:02:19,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-04 20:02:19,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-04 20:02:19,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-04 20:02:19,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-04 20:02:19,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-04 20:02:19,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:02:19,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-04 20:02:19,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-04 20:02:19,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-04 20:02:19,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-04 20:02:19,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-04 20:02:19,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-04 20:02:19,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-04 20:02:19,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-04 20:02:19,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-04 20:02:19,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-04 20:02:19,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-04 20:02:19,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-04 20:02:19,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-04 20:02:19,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-04 20:02:19,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-04 20:02:19,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-04 20:02:19,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-04 20:02:19,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-04 20:02:19,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-04 20:02:19,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-04 20:02:19,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-04 20:02:19,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-04 20:02:19,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-04 20:02:19,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-04 20:02:19,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-04 20:02:19,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-04 20:02:19,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-04 20:02:19,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-04 20:02:19,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-04 20:02:19,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-04 20:02:19,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-04 20:02:19,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-04 20:02:19,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-04 20:02:19,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-04 20:02:19,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-04 20:02:19,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-04 20:02:19,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-04 20:02:19,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-04 20:02:19,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-04 20:02:19,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-04 20:02:19,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-04 20:02:19,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-04 20:02:19,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-04 20:02:19,138 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-04 20:02:19,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-04 20:02:19.138, foo, 2016-07-04 20:02:19.139, foo, 0}
2016-07-04 20:02:19,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-04 20:02:19.14, foo, 2016-07-04 20:02:19.14, foo, 0}
2016-07-04 20:02:19,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-04 20:02:19.141, foo, 2016-07-04 20:02:19.141, foo, 0}
2016-07-04 20:02:19,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-04 20:02:19.141, foo, 2016-07-04 20:02:19.141, foo, 0}
2016-07-04 20:02:19,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-04 20:02:19.142, foo, 2016-07-04 20:02:19.142, foo, 0}
2016-07-04 20:02:19,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-04 20:02:19.143, foo, 2016-07-04 20:02:19.143, foo, 0}
2016-07-04 20:02:19,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-04 20:02:19.143, foo, 2016-07-04 20:02:19.144, foo, 0}
2016-07-04 20:02:19,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-04 20:02:19.144, foo, 2016-07-04 20:02:19.144, foo, 0}
2016-07-04 20:02:19,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-04 20:02:19.145, foo, 2016-07-04 20:02:19.145, foo, 0}
2016-07-04 20:02:19,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-04 20:02:19.147, foo, 2016-07-04 20:02:19.147, foo, 0}
2016-07-04 20:02:19,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-04 20:02:19.148, foo, 2016-07-04 20:02:19.148, foo, 0}
2016-07-04 20:02:19,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-04 20:02:19.148, foo, 2016-07-04 20:02:19.148, foo, 0}
2016-07-04 20:02:19,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-04 20:02:19.149, foo, 2016-07-04 20:02:19.149, foo, 0}
2016-07-04 20:02:19,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-04 20:02:19.15, foo, 2016-07-04 20:02:19.15, foo, 0}
2016-07-04 20:02:19,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-04 20:02:19.151, foo, 2016-07-04 20:02:19.151, foo, 0}
2016-07-04 20:02:19,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-04 20:02:19.152, foo, 2016-07-04 20:02:19.152, foo, 0}
2016-07-04 20:02:19,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-04 20:02:19.152, foo, 2016-07-04 20:02:19.152, foo, 0}
2016-07-04 20:02:19,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-04 20:02:19.153, foo, 2016-07-04 20:02:19.153, foo, 0}
2016-07-04 20:02:19,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-04 20:02:19.155, foo, 2016-07-04 20:02:19.155, foo, 0}
2016-07-04 20:02:19,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-04 20:02:19.156, foo, 2016-07-04 20:02:19.156, foo, 0}
2016-07-04 20:02:19,178 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-04 20:02:19,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-04 20:02:19.18, foo, 2016-07-04 20:02:19.18, foo, 0}
2016-07-04 20:02:19,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-04 20:02:19.182, foo, 2016-07-04 20:02:19.182, foo, 0}
2016-07-04 20:02:19,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-04 20:02:19.183, foo, 2016-07-04 20:02:19.183, foo, 0}
2016-07-04 20:02:19,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-04 20:02:19.184, foo, 2016-07-04 20:02:19.184, foo, 0}
2016-07-04 20:02:19,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-04 20:02:19.185, foo, 2016-07-04 20:02:19.185, foo, 0}
2016-07-04 20:02:19,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-04 20:02:19.186, foo, 2016-07-04 20:02:19.186, foo, 0}
2016-07-04 20:02:19,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-04 20:02:19.187, foo, 2016-07-04 20:02:19.187, foo, 0}
2016-07-04 20:02:19,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-04 20:02:19.188, foo, 2016-07-04 20:02:19.188, foo, 0}
2016-07-04 20:02:19,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-04 20:02:19.188, foo, 2016-07-04 20:02:19.188, foo, 0}
2016-07-04 20:02:19,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-04 20:02:19.189, foo, 2016-07-04 20:02:19.189, foo, 0}
2016-07-04 20:02:19,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-04 20:02:19.191, foo, 2016-07-04 20:02:19.191, foo, 0}
2016-07-04 20:02:19,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-04 20:02:19.192, foo, 2016-07-04 20:02:19.192, foo, 0}
2016-07-04 20:02:19,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-04 20:02:19.193, foo, 2016-07-04 20:02:19.193, foo, 0}
2016-07-04 20:02:19,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-04 20:02:19.194, foo, 2016-07-04 20:02:19.194, foo, 0}
2016-07-04 20:02:19,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-04 20:02:19.2, foo, 2016-07-04 20:02:19.2, foo, 0}
2016-07-04 20:02:19,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-04 20:02:19.2, foo, 2016-07-04 20:02:19.2, foo, 0}
2016-07-04 20:02:19,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-04 20:02:19.201, foo, 2016-07-04 20:02:19.201, foo, 0}
2016-07-04 20:02:19,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-04 20:02:19.201, foo, 2016-07-04 20:02:19.201, foo, 0}
2016-07-04 20:02:19,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-04 20:02:19.202, foo, 2016-07-04 20:02:19.202, foo, 0}
2016-07-04 20:02:19,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-04 20:02:19.203, foo, 2016-07-04 20:02:19.203, foo, 0}
2016-07-04 20:02:19,218 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-04 20:02:19,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-04 20:02:19.219, foo, 2016-07-04 20:02:19.219, foo}
2016-07-04 20:02:19,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-04 20:02:19.221, foo, 2016-07-04 20:02:19.221, foo}
2016-07-04 20:02:19,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-04 20:02:19.223, foo, 2016-07-04 20:02:19.223, foo}
2016-07-04 20:02:19,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-04 20:02:19.224, foo, 2016-07-04 20:02:19.224, foo}
2016-07-04 20:02:19,229 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-04 20:02:19,230 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:02:19,230 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-04 20:02:19,231 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:02:19,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-04 20:02:19.302, foo, 2016-07-04 20:02:19.302, foo, 0}
2016-07-04 20:02:19,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-04 20:02:19.305, foo, 2016-07-04 20:02:19.305, foo, 0}
2016-07-04 20:02:19,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-04 20:02:19.306, foo, 2016-07-04 20:02:19.306, foo, 0}
2016-07-04 20:02:19,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-04 20:02:19.307, foo, 2016-07-04 20:02:19.307, foo, 0}
2016-07-04 20:02:19,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-04 20:02:19.308, foo, 2016-07-04 20:02:19.308, foo, 0}
2016-07-04 20:02:19,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-04 20:02:19.309, foo, 2016-07-04 20:02:19.309, foo, 0}
2016-07-04 20:02:19,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-04 20:02:19.311, foo, 2016-07-04 20:02:19.311, foo, 0}
2016-07-04 20:02:19,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-04 20:02:19.312, foo, 2016-07-04 20:02:19.312, foo, 0}
2016-07-04 20:02:19,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-04 20:02:19.314, foo, 2016-07-04 20:02:19.314, foo, 0}
2016-07-04 20:02:19,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-04 20:02:19.322, foo, 2016-07-04 20:02:19.322, foo, 0}
2016-07-04 20:02:19,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-04 20:02:19.324, foo, 2016-07-04 20:02:19.324, foo, 0}
2016-07-04 20:02:19,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-04 20:02:19.325, foo, 2016-07-04 20:02:19.325, foo, 0}
2016-07-04 20:02:19,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-04 20:02:19.326, foo, 2016-07-04 20:02:19.326, foo, 0}
2016-07-04 20:02:19,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-04 20:02:19.327, foo, 2016-07-04 20:02:19.327, foo, 0}
2016-07-04 20:02:19,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-04 20:02:19.331, foo, 2016-07-04 20:02:19.331, foo, 0}
2016-07-04 20:02:19,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-04 20:02:19.333, foo, 2016-07-04 20:02:19.333, foo, 0}
2016-07-04 20:02:19,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-04 20:02:19.334, foo, 2016-07-04 20:02:19.334, foo, 0}
2016-07-04 20:02:19,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-04 20:02:19.335, foo, 2016-07-04 20:02:19.335, foo, 0}
2016-07-04 20:02:19,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-04 20:02:19.337, foo, 2016-07-04 20:02:19.337, foo, 0}
2016-07-04 20:02:19,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-04 20:02:19.338, foo, 2016-07-04 20:02:19.338, foo, 0}
2016-07-04 20:02:19,365 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-04 20:02:19,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-04 20:02:19.366, foo, 2016-07-04 20:02:19.366, foo, 0}
2016-07-04 20:02:19,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-04 20:02:19.368, foo, 2016-07-04 20:02:19.368, foo, 0}
2016-07-04 20:02:19,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-04 20:02:19.37, foo, 2016-07-04 20:02:19.37, foo, 0}
2016-07-04 20:02:19,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-04 20:02:19.372, foo, 2016-07-04 20:02:19.372, foo, 0}
2016-07-04 20:02:19,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-04 20:02:19.374, foo, 2016-07-04 20:02:19.374, foo, 0}
2016-07-04 20:02:19,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-04 20:02:19.376, foo, 2016-07-04 20:02:19.376, foo, 0}
2016-07-04 20:02:19,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-04 20:02:19.386, foo, 2016-07-04 20:02:19.386, foo, 0}
2016-07-04 20:02:19,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-04 20:02:19.39, foo, 2016-07-04 20:02:19.39, foo, 0}
2016-07-04 20:02:19,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-04 20:02:19.391, foo, 2016-07-04 20:02:19.391, foo, 0}
2016-07-04 20:02:19,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-04 20:02:19.392, foo, 2016-07-04 20:02:19.392, foo, 0}
2016-07-04 20:02:19,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-04 20:02:19.394, foo, 2016-07-04 20:02:19.394, foo, 0}
2016-07-04 20:02:19,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-04 20:02:19.396, foo, 2016-07-04 20:02:19.396, foo, 0}
2016-07-04 20:02:19,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-04 20:02:19.4, foo, 2016-07-04 20:02:19.4, foo, 0}
2016-07-04 20:02:19,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-04 20:02:19.401, foo, 2016-07-04 20:02:19.401, foo, 0}
2016-07-04 20:02:19,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-04 20:02:19.402, foo, 2016-07-04 20:02:19.402, foo, 0}
2016-07-04 20:02:19,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-04 20:02:19.403, foo, 2016-07-04 20:02:19.403, foo, 0}
2016-07-04 20:02:19,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-04 20:02:19.405, foo, 2016-07-04 20:02:19.405, foo, 0}
2016-07-04 20:02:19,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-04 20:02:19.406, foo, 2016-07-04 20:02:19.406, foo, 0}
2016-07-04 20:02:19,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-04 20:02:19.407, foo, 2016-07-04 20:02:19.407, foo, 0}
2016-07-04 20:02:19,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-04 20:02:19.408, foo, 2016-07-04 20:02:19.408, foo, 0}
2016-07-04 20:02:19,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-04 20:02:19.41, foo, 2016-07-04 20:02:19.41, foo, 0}
2016-07-04 20:02:19,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-04 20:02:19.411, foo, 2016-07-04 20:02:19.411, foo, 0}
2016-07-04 20:02:19,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-04 20:02:19.411, foo, 2016-07-04 20:02:19.411, foo, 0}
2016-07-04 20:02:19,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-04 20:02:19.412, foo, 2016-07-04 20:02:19.412, foo, 0}
2016-07-04 20:02:19,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-04 20:02:19.414, foo, 2016-07-04 20:02:19.414, foo, 0}
2016-07-04 20:02:19,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-04 20:02:19.416, foo, 2016-07-04 20:02:19.416, foo, 0}
2016-07-04 20:02:19,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-04 20:02:19.417, foo, 2016-07-04 20:02:19.417, foo, 0}
2016-07-04 20:02:19,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-04 20:02:19.417, foo, 2016-07-04 20:02:19.417, foo, 0}
2016-07-04 20:02:19,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-04 20:02:19.418, foo, 2016-07-04 20:02:19.418, foo, 0}
2016-07-04 20:02:19,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-04 20:02:19.419, foo, 2016-07-04 20:02:19.419, foo, 0}
2016-07-04 20:02:19,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-04 20:02:19.42, foo, 2016-07-04 20:02:19.42, foo, 0}
2016-07-04 20:02:19,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:02:19.42, foo, 2016-07-04 20:02:19.42, foo, 0}
2016-07-04 20:02:19,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:02:19.423, foo, 2016-07-04 20:02:19.423, foo, 0}
2016-07-04 20:02:19,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:02:19.424, foo, 2016-07-04 20:02:19.424, foo, 0}
2016-07-04 20:02:19,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:02:19.425, foo, 2016-07-04 20:02:19.425, foo, 0}
2016-07-04 20:02:19,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:02:19.426, foo, 2016-07-04 20:02:19.426, foo, 0}
2016-07-04 20:02:19,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-04 20:02:19.427, foo, 2016-07-04 20:02:19.427, foo, 0}
2016-07-04 20:02:19,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:02:19.428, foo, 2016-07-04 20:02:19.428, foo, 0}
2016-07-04 20:02:19,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:02:19.43, foo, 2016-07-04 20:02:19.43, foo, 0}
2016-07-04 20:02:19,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-04 20:02:19.432, foo, 2016-07-04 20:02:19.432, foo, 0}
2016-07-04 20:02:19,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-04 20:02:19.433, foo, 2016-07-04 20:02:19.433, foo, 0}
2016-07-04 20:02:19,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-04 20:02:19.434, foo, 2016-07-04 20:02:19.434, foo, 0}
2016-07-04 20:02:19,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:02:19.435, foo, 2016-07-04 20:02:19.435, foo, 0}
2016-07-04 20:02:19,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:02:19.436, foo, 2016-07-04 20:02:19.436, foo, 0}
2016-07-04 20:02:19,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:02:19.437, foo, 2016-07-04 20:02:19.437, foo, 0}
2016-07-04 20:02:19,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:02:19.438, foo, 2016-07-04 20:02:19.438, foo, 0}
2016-07-04 20:02:19,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:02:19.439, foo, 2016-07-04 20:02:19.439, foo, 0}
2016-07-04 20:02:19,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-04 20:02:19.44, foo, 2016-07-04 20:02:19.44, foo, 0}
2016-07-04 20:02:19,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:02:19.441, foo, 2016-07-04 20:02:19.441, foo, 0}
2016-07-04 20:02:19,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:02:19.442, foo, 2016-07-04 20:02:19.442, foo, 0}
2016-07-04 20:02:19,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-04 20:02:19.444, foo, 2016-07-04 20:02:19.444, foo, 0}
2016-07-04 20:02:19,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-04 20:02:19.445, foo, 2016-07-04 20:02:19.445, foo, 0}
2016-07-04 20:02:19,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-04 20:02:19.447, foo, 2016-07-04 20:02:19.447, foo, 0}
2016-07-04 20:02:19,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-04 20:02:19.448, foo, 2016-07-04 20:02:19.448, foo, 0}
2016-07-04 20:02:19,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:02:19.449, foo, 2016-07-04 20:02:19.449, foo, 0}
2016-07-04 20:02:19,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-04 20:02:19.45, foo, 2016-07-04 20:02:19.45, foo, 0}
2016-07-04 20:02:19,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:02:19.453, foo, 2016-07-04 20:02:19.453, foo, 0}
2016-07-04 20:02:19,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-04 20:02:19.456, foo, 2016-07-04 20:02:19.456, foo, 0}
2016-07-04 20:02:19,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-04 20:02:19.457, foo, 2016-07-04 20:02:19.457, foo, 0}
2016-07-04 20:02:19,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-04 20:02:19.459, foo, 2016-07-04 20:02:19.459, foo, 0}
2016-07-04 20:02:19,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-04 20:02:19.46, foo, 2016-07-04 20:02:19.46, foo, 0}
2016-07-04 20:02:19,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-04 20:02:19.461, foo, 2016-07-04 20:02:19.461, foo, 0}
2016-07-04 20:02:19,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-04 20:02:19.462, foo, 2016-07-04 20:02:19.462, foo, 0}
2016-07-04 20:02:19,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-04 20:02:19.464, foo, 2016-07-04 20:02:19.464, foo, 0}
2016-07-04 20:02:19,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-04 20:02:19.466, foo, 2016-07-04 20:02:19.466, foo, 0}
2016-07-04 20:02:19,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-04 20:02:19.468, foo, 2016-07-04 20:02:19.468, foo, 0}
2016-07-04 20:02:19,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-04 20:02:19.469, foo, 2016-07-04 20:02:19.469, foo, 0}
2016-07-04 20:02:19,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-04 20:02:19.471, foo, 2016-07-04 20:02:19.471, foo, 0}
2016-07-04 20:02:19,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-04 20:02:19.472, foo, 2016-07-04 20:02:19.472, foo, 0}
2016-07-04 20:02:19,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-04 20:02:19.474, foo, 2016-07-04 20:02:19.474, foo, 0}
2016-07-04 20:02:19,534 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-04 20:02:19,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-04 20:02:19.535, foo, 2016-07-04 20:02:19.535, foo}
2016-07-04 20:02:19,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-04 20:02:19.538, foo, 2016-07-04 20:02:19.538, foo}
2016-07-04 20:02:19,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-04 20:02:19.539, foo, 2016-07-04 20:02:19.539, foo}
2016-07-04 20:02:19,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-04 20:02:19.541, foo, 2016-07-04 20:02:19.541, foo}
2016-07-04 20:02:19,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-04 20:02:19.542, foo, 2016-07-04 20:02:19.542, foo}
2016-07-04 20:02:19,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-04 20:02:19.543, foo, 2016-07-04 20:02:19.543, foo}
2016-07-04 20:02:19,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-04 20:02:19.544, foo, 2016-07-04 20:02:19.544, foo}
2016-07-04 20:02:19,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-04 20:02:19.546, foo, 2016-07-04 20:02:19.546, foo}
2016-07-04 20:02:19,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-04 20:02:19.547, foo, 2016-07-04 20:02:19.547, foo}
2016-07-04 20:02:19,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-04 20:02:19.549, foo, 2016-07-04 20:02:19.549, foo}
2016-07-04 20:02:19,550 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-04 20:02:19.55, foo, 2016-07-04 20:02:19.55, foo}
2016-07-04 20:02:19,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-04 20:02:19.552, foo, 2016-07-04 20:02:19.552, foo}
2016-07-04 20:02:19,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-04 20:02:19.553, foo, 2016-07-04 20:02:19.553, foo}
2016-07-04 20:02:19,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-04 20:02:19.555, foo, 2016-07-04 20:02:19.555, foo}
2016-07-04 20:02:19,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-04 20:02:19.556, foo, 2016-07-04 20:02:19.556, foo}
2016-07-04 20:02:19,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-04 20:02:19.558, foo, 2016-07-04 20:02:19.558, foo}
2016-07-04 20:02:19,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-04 20:02:19.559, foo, 2016-07-04 20:02:19.559, foo}
2016-07-04 20:02:19,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-04 20:02:19.56, foo, 2016-07-04 20:02:19.561, foo}
2016-07-04 20:02:19,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-04 20:02:19.562, foo, 2016-07-04 20:02:19.562, foo}
2016-07-04 20:02:19,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-04 20:02:19.565, foo, 2016-07-04 20:02:19.565, foo}
2016-07-04 20:02:19,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-04 20:02:19.566, foo, 2016-07-04 20:02:19.566, foo}
2016-07-04 20:02:19,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-04 20:02:19.567, foo, 2016-07-04 20:02:19.567, foo}
2016-07-04 20:02:19,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-04 20:02:19.568, foo, 2016-07-04 20:02:19.568, foo}
2016-07-04 20:02:19,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-04 20:02:19.57, foo, 2016-07-04 20:02:19.57, foo}
2016-07-04 20:02:19,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-04 20:02:19.571, foo, 2016-07-04 20:02:19.571, foo}
2016-07-04 20:02:19,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:02:19.572, foo, 2016-07-04 20:02:19.572, foo}
2016-07-04 20:02:19,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-04 20:02:19.573, foo, 2016-07-04 20:02:19.573, foo}
2016-07-04 20:02:19,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-04 20:02:19.575, foo, 2016-07-04 20:02:19.575, foo}
2016-07-04 20:02:19,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-04 20:02:19.576, foo, 2016-07-04 20:02:19.576, foo}
2016-07-04 20:02:19,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:02:19.588, foo, 2016-07-04 20:02:19.588, foo}
2016-07-04 20:02:19,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:02:19.596, foo, 2016-07-04 20:02:19.596, foo}
2016-07-04 20:02:19,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:02:19.597, foo, 2016-07-04 20:02:19.597, foo}
2016-07-04 20:02:19,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-04 20:02:19.598, foo, 2016-07-04 20:02:19.598, foo}
2016-07-04 20:02:19,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-04 20:02:19.6, foo, 2016-07-04 20:02:19.6, foo}
2016-07-04 20:02:19,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-04 20:02:19.6, foo, 2016-07-04 20:02:19.6, foo}
2016-07-04 20:02:19,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-04 20:02:19.601, foo, 2016-07-04 20:02:19.601, foo}
2016-07-04 20:02:19,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-04 20:02:19.602, foo, 2016-07-04 20:02:19.602, foo}
2016-07-04 20:02:19,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-04 20:02:19.603, foo, 2016-07-04 20:02:19.603, foo}
2016-07-04 20:02:19,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-04 20:02:19.605, foo, 2016-07-04 20:02:19.605, foo}
2016-07-04 20:02:19,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-04 20:02:19.606, foo, 2016-07-04 20:02:19.606, foo}
2016-07-04 20:02:19,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-04 20:02:19.607, foo, 2016-07-04 20:02:19.607, foo}
2016-07-04 20:02:19,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-04 20:02:19.608, foo, 2016-07-04 20:02:19.608, foo}
2016-07-04 20:02:19,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-04 20:02:19.609, foo, 2016-07-04 20:02:19.609, foo}
2016-07-04 20:02:19,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-04 20:02:19.611, foo, 2016-07-04 20:02:19.611, foo}
2016-07-04 20:02:19,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-04 20:02:19.612, foo, 2016-07-04 20:02:19.612, foo}
2016-07-04 20:02:19,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-04 20:02:19.613, foo, 2016-07-04 20:02:19.613, foo}
2016-07-04 20:02:19,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-04 20:02:19.614, foo, 2016-07-04 20:02:19.614, foo}
2016-07-04 20:02:19,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-04 20:02:19.616, foo, 2016-07-04 20:02:19.616, foo}
2016-07-04 20:02:19,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-04 20:02:19.617, foo, 2016-07-04 20:02:19.617, foo}
2016-07-04 20:02:19,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-04 20:02:19.618, foo, 2016-07-04 20:02:19.618, foo}
2016-07-04 20:02:19,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-04 20:02:19.619, foo, 2016-07-04 20:02:19.619, foo}
2016-07-04 20:02:19,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-04 20:02:19.62, foo, 2016-07-04 20:02:19.62, foo}
2016-07-04 20:02:19,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-04 20:02:19.622, foo, 2016-07-04 20:02:19.622, foo}
2016-07-04 20:02:19,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-04 20:02:19.624, foo, 2016-07-04 20:02:19.624, foo}
2016-07-04 20:02:19,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-04 20:02:19.625, foo, 2016-07-04 20:02:19.625, foo}
2016-07-04 20:02:19,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-04 20:02:19.626, foo, 2016-07-04 20:02:19.626, foo}
2016-07-04 20:02:19,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-04 20:02:19.627, foo, 2016-07-04 20:02:19.627, foo}
2016-07-04 20:02:19,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-04 20:02:19.629, foo, 2016-07-04 20:02:19.629, foo}
2016-07-04 20:02:19,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:02:19.63, foo, 2016-07-04 20:02:19.63, foo}
2016-07-04 20:02:19,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-04 20:02:19.632, foo, 2016-07-04 20:02:19.632, foo}
2016-07-04 20:02:19,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-04 20:02:19.633, foo, 2016-07-04 20:02:19.633, foo}
2016-07-04 20:02:19,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-04 20:02:19.634, foo, 2016-07-04 20:02:19.634, foo}
2016-07-04 20:02:19,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-04 20:02:19.635, foo, 2016-07-04 20:02:19.635, foo}
2016-07-04 20:02:19,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-04 20:02:19.636, foo, 2016-07-04 20:02:19.636, foo}
2016-07-04 20:02:19,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:02:19.637, foo, 2016-07-04 20:02:19.637, foo}
2016-07-04 20:02:19,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-04 20:02:19.638, foo, 2016-07-04 20:02:19.638, foo}
2016-07-04 20:02:19,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-04 20:02:19.639, foo, 2016-07-04 20:02:19.639, foo}
2016-07-04 20:02:19,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-04 20:02:19.64, foo, 2016-07-04 20:02:19.64, foo}
2016-07-04 20:02:19,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-04 20:02:19.641, foo, 2016-07-04 20:02:19.641, foo}
2016-07-04 20:02:19,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-04 20:02:19.642, foo, 2016-07-04 20:02:19.642, foo}
2016-07-04 20:02:19,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-04 20:02:19.642, foo, 2016-07-04 20:02:19.642, foo}
2016-07-04 20:02:19,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-04 20:02:19.643, foo, 2016-07-04 20:02:19.643, foo}
2016-07-04 20:02:19,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-04 20:02:19.644, foo, 2016-07-04 20:02:19.644, foo}
2016-07-04 20:02:19,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-04 20:02:19.645, foo, 2016-07-04 20:02:19.645, foo}
2016-07-04 20:02:19,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-04 20:02:19.646, foo, 2016-07-04 20:02:19.646, foo}
2016-07-04 20:02:19,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-04 20:02:19.647, foo, 2016-07-04 20:02:19.647, foo}
2016-07-04 20:02:19,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-04 20:02:19.648, foo, 2016-07-04 20:02:19.648, foo}
2016-07-04 20:02:19,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-04 20:02:19.649, foo, 2016-07-04 20:02:19.649, foo}
2016-07-04 20:02:19,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-04 20:02:19.65, foo, 2016-07-04 20:02:19.65, foo}
2016-07-04 20:02:19,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-04 20:02:19.651, foo, 2016-07-04 20:02:19.651, foo}
2016-07-04 20:02:19,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-04 20:02:19.652, foo, 2016-07-04 20:02:19.652, foo}
2016-07-04 20:02:19,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-04 20:02:19.653, foo, 2016-07-04 20:02:19.653, foo}
2016-07-04 20:02:19,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:02:19.655, foo, 2016-07-04 20:02:19.655, foo}
2016-07-04 20:02:19,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:02:19.656, foo, 2016-07-04 20:02:19.656, foo}
2016-07-04 20:02:19,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:02:19.657, foo, 2016-07-04 20:02:19.657, foo}
2016-07-04 20:02:19,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:02:19.658, foo, 2016-07-04 20:02:19.658, foo}
2016-07-04 20:02:19,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-04 20:02:19.659, foo, 2016-07-04 20:02:19.659, foo}
2016-07-04 20:02:19,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:02:19.661, foo, 2016-07-04 20:02:19.661, foo}
2016-07-04 20:02:19,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-04 20:02:19.662, foo, 2016-07-04 20:02:19.662, foo}
2016-07-04 20:02:19,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-04 20:02:19.663, foo, 2016-07-04 20:02:19.663, foo}
2016-07-04 20:02:19,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-04 20:02:19.665, foo, 2016-07-04 20:02:19.665, foo}
2016-07-04 20:02:19,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-04 20:02:19.667, foo, 2016-07-04 20:02:19.667, foo}
2016-07-04 20:02:19,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-04 20:02:19.668, foo, 2016-07-04 20:02:19.668, foo}
2016-07-04 20:02:19,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-04 20:02:19.669, foo, 2016-07-04 20:02:19.669, foo}
2016-07-04 20:02:19,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-04 20:02:19.669, foo, 2016-07-04 20:02:19.669, foo}
2016-07-04 20:02:19,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-04 20:02:19.67, foo, 2016-07-04 20:02:19.67, foo}
2016-07-04 20:02:19,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-04 20:02:19.671, foo, 2016-07-04 20:02:19.671, foo}
2016-07-04 20:02:19,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-04 20:02:19.672, foo, 2016-07-04 20:02:19.672, foo}
2016-07-04 20:02:19,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-04 20:02:19.673, foo, 2016-07-04 20:02:19.673, foo}
2016-07-04 20:02:19,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-04 20:02:19.674, foo, 2016-07-04 20:02:19.674, foo}
2016-07-04 20:02:19,729 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-04 20:02:19,729 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-04 20:02:19,742 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:19,750 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:02:19,758 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:02:19,761 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:02:19,764 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:02:19,767 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:02:19,771 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:02:19,781 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:02:19,783 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:02:19,787 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-04 20:02:19,790 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-04 20:02:19,792 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-04 20:02:19,797 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-04 20:02:19,798 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-04 20:02:19,798 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-04 20:02:19,799 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-04 20:02:19,799 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-04 20:02:19,799 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-04 20:02:19,806 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-04 20:02:19,807 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-04 20:02:19,810 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-04 20:02:19,812 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-04 20:02:19,813 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-04 20:02:19,816 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-04 20:02:19,816 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-04 20:02:19,818 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:02:19,821 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s706ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-04 20:02:20,727 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:02:20,730 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:02:20,730 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:02:20,730 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:02:20,731 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:02:20,766 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:20,767 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:20,768 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:20,768 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:20,818 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:02:20,818 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:02:20,818 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:02:20,830 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:02:20,981 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:02:20,987 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:02:21,575 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:02:21,576 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:02:21,578 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:02:21,580 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:02:21,580 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:21,580 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:02:21,598 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:02:21,604 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:02:21,624 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:02:21,624 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:02:21,624 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:02:21,625 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:02:21,681 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:02:21,699 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:02:21,716 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:02:21,731 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:02:21,747 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:02:21,757 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:02:21,769 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:02:21,783 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:02:21,793 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:02:21,801 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:02:21,823 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:02:21,838 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:02:21,847 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:02:21,858 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:02:21,867 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:02:21,867 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:02:21,868 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:02:21,868 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:02:21,868 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:02:21,870 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:02:21,874 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:02:21,874 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:02:21,875 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:02:21,921 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:02:21,924 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:02:22,012 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:02:22,013 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:02:22,023 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s311ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:02:22,961 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:02:22,964 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:02:22,965 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:02:22,965 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:02:22,966 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:02:22,994 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:22,995 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:22,995 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:22,995 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:22,997 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:02:22,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:02:22,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:02:22,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:02:22,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:02:22,999 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:02:23,049 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:02:23,168 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:02:23,361 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:02:23,370 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:02:23,370 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:02:23,372 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:02:23,373 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:02:23,374 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:02:23,375 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:02:23,377 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:02:23,378 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:02:23,380 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:02:23,387 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:02:23,387 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:02:23,388 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:02:23,388 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:02:23,388 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:02:23,389 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:02:23,389 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:02:23,389 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:02:23,400 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:23,723 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:02:23,727 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:02:23,729 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:02:23,732 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:02:23,736 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:02:23,739 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:02:23,745 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:02:23,746 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:02:24,183 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:02:24,183 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:02:24,193 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:02:24,206 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:02:24,206 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:02:24,284 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:02:24,290 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:02:24,291 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:02:24,292 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:02:24,293 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:02:24,293 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:02:24,305 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:02:24,321 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:02:24,326 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s384ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:02:26,810 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:02:26,814 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:02:26,814 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:02:26,814 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:02:26,814 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:02:26,835 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:26,836 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:26,837 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:26,837 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:26,851 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:02:26,852 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:02:26,884 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:02:26,961 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:02:27,218 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:02:27,222 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:02:27,223 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:02:27,224 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:02:27,225 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:02:27,225 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:02:27,227 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:02:27,230 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:02:27,230 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:02:27,232 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:02:27,240 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:02:27,240 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:02:27,241 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:02:27,241 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:02:27,242 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:02:27,242 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:02:27,243 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:02:27,243 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:02:27,254 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:27,577 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:02:27,581 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:02:27,584 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:02:27,587 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:02:27,591 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:02:27,595 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:02:27,605 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:02:27,605 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:02:27,605 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:02:27,606 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:02:27,606 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:02:27,606 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:02:27,607 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:02:27,607 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:02:27,607 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:02:27,608 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:02:27,624 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:02:27,626 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:02:27,674 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:02:27,677 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:02:27,694 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:02:27,699 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:02:27,718 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:02:27,738 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:02:27,744 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:02:27,752 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:02:27,761 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:02:27,764 [main] INFO  (Database#info():2711) - }
2016-07-04 20:02:27,765 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:02:27,766 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:02:27,783 [main] INFO  (Database#info():2711) - }
2016-07-04 20:02:27,791 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:02:27,835 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:02:27,836 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:02:27,837 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:02:28,374 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:02:28,637 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:02:28,840 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:02:29,016 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:02:29,200 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:02:29,392 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:02:29,575 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:02:29,766 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:02:29,922 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:02:30,064 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:02:30,258 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:02:30,403 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:02:30,518 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:02:30,645 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:02:30,763 [main] INFO  (Database#info():2711) - }
2016-07-04 20:02:30,763 [main] INFO  (Database#info():2711) -  
2016-07-04 20:02:30,825 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:02:30,880 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s070ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:02:31,737 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:02:31,739 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:02:31,740 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:02:31,740 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:02:31,740 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:02:31,758 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:31,759 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:31,759 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:31,759 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:31,786 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:02:31,792 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:02:32,112 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:02:32,113 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:02:32,147 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:02:32,151 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:02:32,151 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:02:32,154 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:02:32,168 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:02:32,169 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:02:32,171 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:02:32,175 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:02:32,175 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:02:32,177 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:02:32,181 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:02:32,181 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:02:32,182 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:02:32,191 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s462ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:02:32,916 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:02:32,918 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:02:32,919 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:02:32,919 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:02:32,919 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:02:32,938 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:02:32,939 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:02:32,939 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:02:32,939 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:02:32,953 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:02:32,953 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:02:32,959 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:02:33,044 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:02:33,052 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:02:33,372 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:02:33,372 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:02:33,375 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:02:33,426 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:02:33,426 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:02:33,427 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:02:33,435 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:02:33,436 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:02:33,438 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:02:33,446 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:02:33,447 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:02:33,448 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(mem.MEMBER_ID)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:02:33,467 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:02:33,468 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:02:33,475 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:02:33,475 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:02:33,527 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:02:33,531 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:02:33,531 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:02:33,532 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:02:33,532 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:02:33,533 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:02:33,561 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:02:33,584 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:02:33,593 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:02:33,593 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:02:33,594 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:02:33,594 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:02:33,595 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:02:33,595 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:02:33,596 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:02:33,596 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:02:33,597 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:02:33,597 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:02:33,597 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:02:33,597 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:02:33,623 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:02:33,624 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:02:33,624 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:02:33,624 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:02:33,624 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:02:33,636 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:02:33,637 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:02:33,637 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:02:33,637 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:02:33,638 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:02:33,641 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:02:33,809 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:02:33,817 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:02:33,820 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:02:33,822 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:02:33,825 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:02:33,827 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:02:33,830 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:02:33,842 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:02:33,845 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:02:33,860 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:02:33,861 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:02:33,995 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:02:34,056 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:02:34,070 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:02:34,124 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:02:34,207 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:02:34,256 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:02:34,307 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:02:34,308 [main] INFO  (Database#info():2711) - }
2016-07-04 20:02:34,310 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:02:34,314 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:02:34,350 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:02:34,372 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:02:34,393 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:02:34,406 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:02:34,424 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:02:34,442 [main] INFO  (Database#info():2711) - }
2016-07-04 20:02:34,477 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:02:34,490 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:02:34,494 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:02:34,504 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s598ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:10:00,950 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:10:00,954 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:10:00,955 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:10:00,955 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:10:00,955 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:10:00,990 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:10:00,990 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:10:00,991 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:10:00,991 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:10:01,039 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:10:01,040 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:10:01,040 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:10:01,055 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:10:01,205 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:10:01,212 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:10:01,773 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:10:01,776 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:10:01,778 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:10:01,781 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:10:01,782 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:10:01,783 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:10:01,804 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:10:01,809 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:10:01,832 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:10:01,832 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:10:01,833 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:10:01,834 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:10:01,908 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:10:01,935 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:10:01,967 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:10:01,997 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:10:02,032 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:10:02,044 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:10:02,061 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:10:02,077 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:10:02,089 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:10:02,099 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:10:02,114 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:10:02,127 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:10:02,136 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:10:02,147 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:10:02,157 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:10:02,158 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:10:02,158 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:10:02,159 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:10:02,159 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:10:02,161 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:10:02,166 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:10:02,166 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:10:02,167 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:10:02,211 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:10:02,214 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:10:02,286 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:10:02,287 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:10:02,297 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s367ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:10:03,288 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:10:03,291 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:10:03,291 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:10:03,292 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:10:03,292 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:10:03,322 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:10:03,323 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:10:03,323 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:10:03,323 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:10:03,326 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:10:03,326 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:10:03,327 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:10:03,327 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:10:03,328 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:10:03,328 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:10:03,381 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:10:03,498 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:10:03,677 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:10:03,686 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:10:03,686 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:10:03,688 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:10:03,690 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:10:03,690 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:10:03,691 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:10:03,693 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:10:03,694 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:10:03,697 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:10:03,704 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:10:03,704 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:10:03,705 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:10:03,705 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:10:03,706 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:10:03,706 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:10:03,707 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:10:03,707 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:10:03,719 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:10:04,053 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:10:04,059 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:10:04,063 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:10:04,066 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:10:04,072 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:10:04,075 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:10:04,085 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:10:04,085 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:10:04,557 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:10:04,557 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:10:04,565 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:10:04,580 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:10:04,581 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:10:04,699 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:10:04,705 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:10:04,707 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:10:04,707 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:10:04,708 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:10:04,708 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:10:04,723 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:10:04,736 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:10:04,741 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s470ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:10:08,030 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:10:08,034 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:10:08,034 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:10:08,035 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:10:08,035 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:10:08,064 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:10:08,065 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:10:08,066 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:10:08,066 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:10:08,086 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:10:08,089 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:10:08,135 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:10:08,221 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:10:08,495 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:10:08,501 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:10:08,501 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:10:08,503 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:10:08,505 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:10:08,505 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:10:08,512 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:10:08,515 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:10:08,516 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:10:08,520 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:10:08,533 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:10:08,534 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:10:08,534 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:10:08,535 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:10:08,535 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:10:08,536 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:10:08,536 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:10:08,537 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:10:08,551 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:10:08,957 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:10:08,962 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:10:08,966 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:10:08,970 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:10:08,976 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:10:08,980 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:10:08,998 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:10:08,998 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:10:08,999 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:10:08,999 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:10:09,000 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:10:09,000 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:10:09,000 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:10:09,001 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:10:09,001 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:10:09,001 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:10:09,020 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:10:09,022 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:10:09,073 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:10:09,077 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:10:09,102 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:10:09,107 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:10:09,128 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:10:09,145 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:10:09,155 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:10:09,164 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:10:09,171 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:10:09,175 [main] INFO  (Database#info():2711) - }
2016-07-04 20:10:09,175 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:10:09,176 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:10:09,199 [main] INFO  (Database#info():2711) - }
2016-07-04 20:10:09,206 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:10:09,258 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:10:09,259 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:10:09,261 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:10:09,832 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:10:10,103 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:10:10,305 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:10:10,489 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:10:10,676 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:10:10,872 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:10:11,064 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:10:11,278 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:10:11,444 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:10:11,590 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:10:11,791 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:10:11,930 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:10:12,050 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:10:12,184 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:10:12,335 [main] INFO  (Database#info():2711) - }
2016-07-04 20:10:12,335 [main] INFO  (Database#info():2711) -  
2016-07-04 20:10:12,453 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:10:12,464 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s455ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:10:13,497 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:10:13,500 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:10:13,500 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:10:13,501 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:10:13,501 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:10:13,520 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:10:13,521 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:10:13,521 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:10:13,521 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:10:13,551 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:10:13,558 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:10:13,888 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:10:13,889 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:10:13,919 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:10:13,924 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:10:13,924 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:10:13,927 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:10:13,932 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:10:13,932 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:10:13,935 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:10:13,940 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:10:13,940 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:10:13,942 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:10:13,946 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:10:13,946 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:10:13,947 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:10:13,954 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s466ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:10:14,685 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:10:14,688 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:10:14,689 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:10:14,689 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:10:14,689 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:10:14,706 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:10:14,707 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:10:14,707 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:10:14,708 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:10:14,722 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:10:14,723 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:10:14,728 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:10:14,831 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:10:14,836 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:10:15,154 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:10:15,154 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:10:15,157 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:10:15,211 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:10:15,212 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:10:15,213 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:10:15,220 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:10:15,221 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:10:15,222 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:10:15,229 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:10:15,229 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:10:15,230 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*)
/*END*/ 
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:10:15,239 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:10:15,240 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:10:15,245 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:10:15,246 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:10:15,301 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:10:15,306 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:10:15,307 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:10:15,307 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:10:15,308 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:10:15,308 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:10:15,334 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:10:15,358 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:10:15,368 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:10:15,368 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:10:15,368 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:10:15,369 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:10:15,370 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:10:15,370 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:10:15,370 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:10:15,371 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:10:15,371 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:10:15,372 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:10:15,372 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:10:15,372 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:10:15,397 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:10:15,397 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:10:15,398 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:10:15,398 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:10:15,398 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:10:15,409 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:10:15,410 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:10:15,410 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:10:15,410 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:10:15,411 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:10:15,414 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:10:15,584 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:10:15,592 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:10:15,595 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:10:15,597 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:10:15,599 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:10:15,601 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:10:15,603 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:10:15,614 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:10:15,617 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:10:15,633 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:10:15,633 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:10:15,755 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:10:15,815 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:10:15,829 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:10:15,885 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:10:15,942 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:10:15,988 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:10:16,028 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:10:16,030 [main] INFO  (Database#info():2711) - }
2016-07-04 20:10:16,032 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:10:16,035 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:10:16,072 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:10:16,093 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:10:16,116 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:10:16,134 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:10:16,152 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:10:16,168 [main] INFO  (Database#info():2711) - }
2016-07-04 20:10:16,198 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:10:16,214 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:10:16,220 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:10:16,229 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s552ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:26:59,419 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-04 20:26:59,423 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-04 20:26:59,424 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-04 20:26:59,429 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-04 20:26:59,429 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-04 20:26:59,435 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-04 20:27:01,014 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:01,015 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:01,015 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:01,016 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:01,025 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:01,462 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:01,463 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:01,482 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-04 20:27:01,483 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-04 20:27:01,483 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-04 20:27:01,486 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-04 20:27:01,486 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-04 20:27:01,487 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-04 20:27:01,507 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:27:01,507 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:01,508 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:27:01,550 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-04 20:27:01,565 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-04 20:27:01,570 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-04 20:27:01,580 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-04 20:27:01,590 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-04 20:27:01,611 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-04 20:27:01,637 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-04 20:27:01,657 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-04 20:27:01,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-04 20:27:01,687 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-04 20:27:01,704 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-04 20:27:01,730 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-04 20:27:01,748 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-04 20:27:01,765 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-04 20:27:01,790 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-04 20:27:01,804 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-04 20:27:01,830 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-04 20:27:01,845 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-04 20:27:01,867 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-04 20:27:01,887 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-04 20:27:01,904 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-04 20:27:01,916 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-04 20:27:01,939 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-04 20:27:01,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-04 20:27:01,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-04 20:27:01,950 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-04 20:27:01,953 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-04 20:27:01,957 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-04 20:27:01,961 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-04 20:27:01,965 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-04 20:27:01,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-04 20:27:01,972 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-04 20:27:01,975 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-04 20:27:01,978 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-04 20:27:01,982 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-04 20:27:01,985 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-04 20:27:01,988 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-04 20:27:02,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-04 20:27:02,048 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-04 20:27:02,051 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-04 20:27:02,051 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-04 20:27:02,052 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-04 20:27:02,052 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-04 20:27:02,053 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-04 20:27:02,053 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-04 20:27:02,124 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-04 20:27:02,130 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-04 20:27:02,131 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-04 20:27:02,132 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-04 20:27:02,145 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-04 20:27:02,145 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-04 20:27:02,146 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-04 20:27:02,147 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-04 20:27:02,148 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-04 20:27:02,151 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:27:02,152 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-04 20:27:02,152 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-04 20:27:02,153 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-04 20:27:02,153 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-04 20:27:02,157 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-04 20:27:02,176 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-04 20:27:02,189 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-04 20:27:02,199 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-04 20:27:02,237 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-04 20:27:02,248 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-04 20:27:02,259 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-04 20:27:02,293 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-04 20:27:02,305 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-04 20:27:02,340 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-04 20:27:02,351 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-04 20:27:02,362 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-04 20:27:02,373 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-04 20:27:02,387 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-04 20:27:02,399 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-04 20:27:02,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:27:02,429 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-04 20:27:02,470 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:27:02,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,510 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,529 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-04 20:27:02,549 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,590 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-04 20:27:02,609 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:27:02,633 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-04 20:27:02,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-04 20:27:02,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:27:02,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-04 20:27:02,756 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:27:02,782 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-04 20:27:02,796 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-04 20:27:02,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-04 20:27:02,835 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-04 20:27:02,855 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-04 20:27:02,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-04 20:27:02,894 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-04 20:27:02,915 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-04 20:27:02,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-04 20:27:02,956 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-04 20:27:02,957 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-04 20:27:02,958 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-04 20:27:02,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-04 20:27:02,961 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:27:02,961 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-04 20:27:02,963 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-04 20:27:03,069 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-04 20:27:03,069 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-04 20:27:03,069 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-04 20:27:03,070 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-04 20:27:03,070 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-04 20:27:03,070 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-04 20:27:03,096 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:27:03,096 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-04 20:27:03,097 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:27:03,368 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:27:03,369 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:03,369 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:27:03,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-04 20:27:03,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-04 20:27:03,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-04 20:27:03,448 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-04 20:27:03,458 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-04 20:27:03,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-04 20:27:03,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-04 20:27:03,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-04 20:27:03,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-04 20:27:03,480 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-04 20:27:03,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-04 20:27:03,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-04 20:27:03,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-04 20:27:03,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-04 20:27:03,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-04 20:27:03,499 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-04 20:27:03,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-04 20:27:03,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-04 20:27:03,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-04 20:27:03,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-04 20:27:03,512 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-04 20:27:03,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-04 20:27:03,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-04 20:27:03,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-04 20:27:03,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-04 20:27:03,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-04 20:27:03,521 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-04 20:27:03,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-04 20:27:03,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-04 20:27:03,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-04 20:27:03,527 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-04 20:27:03,529 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:27:03,529 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-04 20:27:03,529 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:27:03,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-04 20:27:03.6, foo, 2016-07-04 20:27:03.6, foo, 0}
2016-07-04 20:27:03,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-04 20:27:03.606, foo, 2016-07-04 20:27:03.606, foo, 0}
2016-07-04 20:27:03,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-04 20:27:03.608, foo, 2016-07-04 20:27:03.608, foo, 0}
2016-07-04 20:27:03,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-04 20:27:03.61, foo, 2016-07-04 20:27:03.61, foo, 0}
2016-07-04 20:27:03,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-04 20:27:03.612, foo, 2016-07-04 20:27:03.612, foo, 0}
2016-07-04 20:27:03,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-04 20:27:03.614, foo, 2016-07-04 20:27:03.614, foo, 0}
2016-07-04 20:27:03,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:27:03.616, foo, 2016-07-04 20:27:03.616, foo, 0}
2016-07-04 20:27:03,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-04 20:27:03.618, foo, 2016-07-04 20:27:03.618, foo, 0}
2016-07-04 20:27:03,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-04 20:27:03.62, foo, 2016-07-04 20:27:03.62, foo, 0}
2016-07-04 20:27:03,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-04 20:27:03.623, foo, 2016-07-04 20:27:03.623, foo, 0}
2016-07-04 20:27:03,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-04 20:27:03.624, foo, 2016-07-04 20:27:03.624, foo, 0}
2016-07-04 20:27:03,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-04 20:27:03.627, foo, 2016-07-04 20:27:03.627, foo, 0}
2016-07-04 20:27:03,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-04 20:27:03.629, foo, 2016-07-04 20:27:03.629, foo, 0}
2016-07-04 20:27:03,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-04 20:27:03.632, foo, 2016-07-04 20:27:03.632, foo, 0}
2016-07-04 20:27:03,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-04 20:27:03.635, foo, 2016-07-04 20:27:03.635, foo, 0}
2016-07-04 20:27:03,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-04 20:27:03.637, foo, 2016-07-04 20:27:03.637, foo, 0}
2016-07-04 20:27:03,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:27:03.638, foo, 2016-07-04 20:27:03.638, foo, 0}
2016-07-04 20:27:03,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-04 20:27:03.64, foo, 2016-07-04 20:27:03.64, foo, 0}
2016-07-04 20:27:03,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-04 20:27:03.642, foo, 2016-07-04 20:27:03.642, foo, 0}
2016-07-04 20:27:03,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-04 20:27:03.645, foo, 2016-07-04 20:27:03.645, foo, 0}
2016-07-04 20:27:03,674 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-04 20:27:03,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-04 20:27:03.675, foo, 2016-07-04 20:27:03.675, foo, 0}
2016-07-04 20:27:03,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-04 20:27:03.678, foo, 2016-07-04 20:27:03.678, foo, 0}
2016-07-04 20:27:03,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-04 20:27:03.681, foo, 2016-07-04 20:27:03.681, foo, 0}
2016-07-04 20:27:03,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-04 20:27:03.683, foo, 2016-07-04 20:27:03.683, foo, 0}
2016-07-04 20:27:03,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-04 20:27:03.686, foo, 2016-07-04 20:27:03.686, foo, 0}
2016-07-04 20:27:03,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-04 20:27:03.694, foo, 2016-07-04 20:27:03.694, foo, 0}
2016-07-04 20:27:03,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-04 20:27:03.698, foo, 2016-07-04 20:27:03.698, foo, 0}
2016-07-04 20:27:03,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-04 20:27:03.7, foo, 2016-07-04 20:27:03.7, foo, 0}
2016-07-04 20:27:03,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-04 20:27:03.703, foo, 2016-07-04 20:27:03.703, foo, 0}
2016-07-04 20:27:03,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-04 20:27:03.705, foo, 2016-07-04 20:27:03.705, foo, 0}
2016-07-04 20:27:03,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-04 20:27:03.708, foo, 2016-07-04 20:27:03.708, foo, 0}
2016-07-04 20:27:03,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-04 20:27:03.71, foo, 2016-07-04 20:27:03.71, foo, 0}
2016-07-04 20:27:03,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-04 20:27:03.714, foo, 2016-07-04 20:27:03.714, foo, 0}
2016-07-04 20:27:03,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-04 20:27:03.716, foo, 2016-07-04 20:27:03.716, foo, 0}
2016-07-04 20:27:03,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-04 20:27:03.719, foo, 2016-07-04 20:27:03.719, foo, 0}
2016-07-04 20:27:03,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-04 20:27:03.722, foo, 2016-07-04 20:27:03.722, foo, 0}
2016-07-04 20:27:03,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-04 20:27:03.725, foo, 2016-07-04 20:27:03.725, foo, 0}
2016-07-04 20:27:03,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-04 20:27:03.727, foo, 2016-07-04 20:27:03.727, foo, 0}
2016-07-04 20:27:03,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-04 20:27:03.73, foo, 2016-07-04 20:27:03.73, foo, 0}
2016-07-04 20:27:03,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-04 20:27:03.733, foo, 2016-07-04 20:27:03.733, foo, 0}
2016-07-04 20:27:03,748 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-04 20:27:03,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:27:03,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-04 20:27:03,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-04 20:27:03,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-04 20:27:03,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-04 20:27:03,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-04 20:27:03,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-04 20:27:03,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-04 20:27:03,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-04 20:27:03,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-04 20:27:03,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-04 20:27:03,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-04 20:27:03,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:27:03,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-04 20:27:03,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-04 20:27:03,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-04 20:27:03,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-04 20:27:03,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-04 20:27:03,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-04 20:27:03,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-04 20:27:03,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-04 20:27:03,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-04 20:27:03,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-04 20:27:03,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-04 20:27:03,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-04 20:27:03,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-04 20:27:03,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-04 20:27:03,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-04 20:27:03,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-04 20:27:03,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-04 20:27:03,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-04 20:27:03,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-04 20:27:03,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-04 20:27:03,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-04 20:27:03,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-04 20:27:03,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-04 20:27:03,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-04 20:27:03,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-04 20:27:03,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-04 20:27:03,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-04 20:27:03,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-04 20:27:03,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-04 20:27:03,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-04 20:27:03,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-04 20:27:03,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-04 20:27:03,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-04 20:27:03,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-04 20:27:03,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-04 20:27:03,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-04 20:27:03,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-04 20:27:03,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-04 20:27:03,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-04 20:27:03,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-04 20:27:03,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-04 20:27:03,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-04 20:27:03,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-04 20:27:03,841 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-04 20:27:03,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-04 20:27:03.842, foo, 2016-07-04 20:27:03.842, foo, 0}
2016-07-04 20:27:03,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-04 20:27:03.843, foo, 2016-07-04 20:27:03.843, foo, 0}
2016-07-04 20:27:03,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-04 20:27:03.844, foo, 2016-07-04 20:27:03.844, foo, 0}
2016-07-04 20:27:03,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-04 20:27:03.844, foo, 2016-07-04 20:27:03.844, foo, 0}
2016-07-04 20:27:03,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-04 20:27:03.845, foo, 2016-07-04 20:27:03.845, foo, 0}
2016-07-04 20:27:03,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-04 20:27:03.846, foo, 2016-07-04 20:27:03.846, foo, 0}
2016-07-04 20:27:03,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-04 20:27:03.847, foo, 2016-07-04 20:27:03.847, foo, 0}
2016-07-04 20:27:03,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-04 20:27:03.847, foo, 2016-07-04 20:27:03.847, foo, 0}
2016-07-04 20:27:03,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-04 20:27:03.848, foo, 2016-07-04 20:27:03.848, foo, 0}
2016-07-04 20:27:03,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-04 20:27:03.849, foo, 2016-07-04 20:27:03.849, foo, 0}
2016-07-04 20:27:03,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-04 20:27:03.85, foo, 2016-07-04 20:27:03.85, foo, 0}
2016-07-04 20:27:03,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-04 20:27:03.85, foo, 2016-07-04 20:27:03.85, foo, 0}
2016-07-04 20:27:03,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-04 20:27:03.851, foo, 2016-07-04 20:27:03.851, foo, 0}
2016-07-04 20:27:03,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-04 20:27:03.851, foo, 2016-07-04 20:27:03.851, foo, 0}
2016-07-04 20:27:03,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-04 20:27:03.852, foo, 2016-07-04 20:27:03.852, foo, 0}
2016-07-04 20:27:03,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-04 20:27:03.853, foo, 2016-07-04 20:27:03.853, foo, 0}
2016-07-04 20:27:03,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-04 20:27:03.854, foo, 2016-07-04 20:27:03.854, foo, 0}
2016-07-04 20:27:03,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-04 20:27:03.855, foo, 2016-07-04 20:27:03.855, foo, 0}
2016-07-04 20:27:03,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-04 20:27:03.856, foo, 2016-07-04 20:27:03.856, foo, 0}
2016-07-04 20:27:03,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-04 20:27:03.857, foo, 2016-07-04 20:27:03.857, foo, 0}
2016-07-04 20:27:03,881 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-04 20:27:03,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-04 20:27:03.882, foo, 2016-07-04 20:27:03.882, foo, 0}
2016-07-04 20:27:03,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-04 20:27:03.884, foo, 2016-07-04 20:27:03.884, foo, 0}
2016-07-04 20:27:03,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-04 20:27:03.885, foo, 2016-07-04 20:27:03.885, foo, 0}
2016-07-04 20:27:03,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-04 20:27:03.886, foo, 2016-07-04 20:27:03.886, foo, 0}
2016-07-04 20:27:03,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-04 20:27:03.886, foo, 2016-07-04 20:27:03.886, foo, 0}
2016-07-04 20:27:03,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-04 20:27:03.887, foo, 2016-07-04 20:27:03.887, foo, 0}
2016-07-04 20:27:03,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-04 20:27:03.888, foo, 2016-07-04 20:27:03.888, foo, 0}
2016-07-04 20:27:03,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-04 20:27:03.889, foo, 2016-07-04 20:27:03.889, foo, 0}
2016-07-04 20:27:03,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-04 20:27:03.889, foo, 2016-07-04 20:27:03.889, foo, 0}
2016-07-04 20:27:03,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-04 20:27:03.89, foo, 2016-07-04 20:27:03.89, foo, 0}
2016-07-04 20:27:03,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-04 20:27:03.89, foo, 2016-07-04 20:27:03.89, foo, 0}
2016-07-04 20:27:03,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-04 20:27:03.891, foo, 2016-07-04 20:27:03.891, foo, 0}
2016-07-04 20:27:03,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-04 20:27:03.892, foo, 2016-07-04 20:27:03.892, foo, 0}
2016-07-04 20:27:03,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-04 20:27:03.893, foo, 2016-07-04 20:27:03.893, foo, 0}
2016-07-04 20:27:03,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-04 20:27:03.894, foo, 2016-07-04 20:27:03.894, foo, 0}
2016-07-04 20:27:03,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-04 20:27:03.894, foo, 2016-07-04 20:27:03.894, foo, 0}
2016-07-04 20:27:03,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-04 20:27:03.895, foo, 2016-07-04 20:27:03.895, foo, 0}
2016-07-04 20:27:03,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-04 20:27:03.896, foo, 2016-07-04 20:27:03.896, foo, 0}
2016-07-04 20:27:03,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-04 20:27:03.896, foo, 2016-07-04 20:27:03.896, foo, 0}
2016-07-04 20:27:03,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-04 20:27:03.898, foo, 2016-07-04 20:27:03.898, foo, 0}
2016-07-04 20:27:03,912 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-04 20:27:03,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-04 20:27:03.913, foo, 2016-07-04 20:27:03.913, foo}
2016-07-04 20:27:03,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-04 20:27:03.914, foo, 2016-07-04 20:27:03.914, foo}
2016-07-04 20:27:03,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-04 20:27:03.915, foo, 2016-07-04 20:27:03.915, foo}
2016-07-04 20:27:03,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-04 20:27:03.916, foo, 2016-07-04 20:27:03.916, foo}
2016-07-04 20:27:03,925 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-04 20:27:03,925 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:27:03,926 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-04 20:27:03,926 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:27:03,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-04 20:27:03.991, foo, 2016-07-04 20:27:03.991, foo, 0}
2016-07-04 20:27:03,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-04 20:27:03.993, foo, 2016-07-04 20:27:03.993, foo, 0}
2016-07-04 20:27:03,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-04 20:27:03.994, foo, 2016-07-04 20:27:03.994, foo, 0}
2016-07-04 20:27:03,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-04 20:27:03.995, foo, 2016-07-04 20:27:03.995, foo, 0}
2016-07-04 20:27:03,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-04 20:27:03.995, foo, 2016-07-04 20:27:03.995, foo, 0}
2016-07-04 20:27:03,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-04 20:27:03.996, foo, 2016-07-04 20:27:03.996, foo, 0}
2016-07-04 20:27:03,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-04 20:27:03.997, foo, 2016-07-04 20:27:03.997, foo, 0}
2016-07-04 20:27:03,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-04 20:27:03.998, foo, 2016-07-04 20:27:03.998, foo, 0}
2016-07-04 20:27:03,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-04 20:27:03.999, foo, 2016-07-04 20:27:03.999, foo, 0}
2016-07-04 20:27:04,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-04 20:27:04.0, foo, 2016-07-04 20:27:04.0, foo, 0}
2016-07-04 20:27:04,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-04 20:27:04.001, foo, 2016-07-04 20:27:04.001, foo, 0}
2016-07-04 20:27:04,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-04 20:27:04.002, foo, 2016-07-04 20:27:04.002, foo, 0}
2016-07-04 20:27:04,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-04 20:27:04.003, foo, 2016-07-04 20:27:04.003, foo, 0}
2016-07-04 20:27:04,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-04 20:27:04.004, foo, 2016-07-04 20:27:04.004, foo, 0}
2016-07-04 20:27:04,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-04 20:27:04.005, foo, 2016-07-04 20:27:04.005, foo, 0}
2016-07-04 20:27:04,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-04 20:27:04.005, foo, 2016-07-04 20:27:04.005, foo, 0}
2016-07-04 20:27:04,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-04 20:27:04.006, foo, 2016-07-04 20:27:04.006, foo, 0}
2016-07-04 20:27:04,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-04 20:27:04.007, foo, 2016-07-04 20:27:04.007, foo, 0}
2016-07-04 20:27:04,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-04 20:27:04.008, foo, 2016-07-04 20:27:04.008, foo, 0}
2016-07-04 20:27:04,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-04 20:27:04.009, foo, 2016-07-04 20:27:04.009, foo, 0}
2016-07-04 20:27:04,041 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-04 20:27:04,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-04 20:27:04.042, foo, 2016-07-04 20:27:04.042, foo, 0}
2016-07-04 20:27:04,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-04 20:27:04.044, foo, 2016-07-04 20:27:04.044, foo, 0}
2016-07-04 20:27:04,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-04 20:27:04.045, foo, 2016-07-04 20:27:04.045, foo, 0}
2016-07-04 20:27:04,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-04 20:27:04.046, foo, 2016-07-04 20:27:04.046, foo, 0}
2016-07-04 20:27:04,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-04 20:27:04.048, foo, 2016-07-04 20:27:04.048, foo, 0}
2016-07-04 20:27:04,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-04 20:27:04.05, foo, 2016-07-04 20:27:04.05, foo, 0}
2016-07-04 20:27:04,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-04 20:27:04.051, foo, 2016-07-04 20:27:04.051, foo, 0}
2016-07-04 20:27:04,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-04 20:27:04.052, foo, 2016-07-04 20:27:04.052, foo, 0}
2016-07-04 20:27:04,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-04 20:27:04.054, foo, 2016-07-04 20:27:04.054, foo, 0}
2016-07-04 20:27:04,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-04 20:27:04.055, foo, 2016-07-04 20:27:04.055, foo, 0}
2016-07-04 20:27:04,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-04 20:27:04.057, foo, 2016-07-04 20:27:04.057, foo, 0}
2016-07-04 20:27:04,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-04 20:27:04.06, foo, 2016-07-04 20:27:04.06, foo, 0}
2016-07-04 20:27:04,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-04 20:27:04.062, foo, 2016-07-04 20:27:04.062, foo, 0}
2016-07-04 20:27:04,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-04 20:27:04.063, foo, 2016-07-04 20:27:04.063, foo, 0}
2016-07-04 20:27:04,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-04 20:27:04.064, foo, 2016-07-04 20:27:04.064, foo, 0}
2016-07-04 20:27:04,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-04 20:27:04.066, foo, 2016-07-04 20:27:04.066, foo, 0}
2016-07-04 20:27:04,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-04 20:27:04.067, foo, 2016-07-04 20:27:04.067, foo, 0}
2016-07-04 20:27:04,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-04 20:27:04.069, foo, 2016-07-04 20:27:04.069, foo, 0}
2016-07-04 20:27:04,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-04 20:27:04.071, foo, 2016-07-04 20:27:04.071, foo, 0}
2016-07-04 20:27:04,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-04 20:27:04.072, foo, 2016-07-04 20:27:04.072, foo, 0}
2016-07-04 20:27:04,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-04 20:27:04.073, foo, 2016-07-04 20:27:04.073, foo, 0}
2016-07-04 20:27:04,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-04 20:27:04.074, foo, 2016-07-04 20:27:04.074, foo, 0}
2016-07-04 20:27:04,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-04 20:27:04.075, foo, 2016-07-04 20:27:04.075, foo, 0}
2016-07-04 20:27:04,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-04 20:27:04.076, foo, 2016-07-04 20:27:04.076, foo, 0}
2016-07-04 20:27:04,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-04 20:27:04.078, foo, 2016-07-04 20:27:04.078, foo, 0}
2016-07-04 20:27:04,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-04 20:27:04.079, foo, 2016-07-04 20:27:04.079, foo, 0}
2016-07-04 20:27:04,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-04 20:27:04.084, foo, 2016-07-04 20:27:04.084, foo, 0}
2016-07-04 20:27:04,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-04 20:27:04.085, foo, 2016-07-04 20:27:04.085, foo, 0}
2016-07-04 20:27:04,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-04 20:27:04.086, foo, 2016-07-04 20:27:04.086, foo, 0}
2016-07-04 20:27:04,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-04 20:27:04.087, foo, 2016-07-04 20:27:04.087, foo, 0}
2016-07-04 20:27:04,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-04 20:27:04.088, foo, 2016-07-04 20:27:04.088, foo, 0}
2016-07-04 20:27:04,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:27:04.09, foo, 2016-07-04 20:27:04.09, foo, 0}
2016-07-04 20:27:04,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:27:04.091, foo, 2016-07-04 20:27:04.091, foo, 0}
2016-07-04 20:27:04,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:27:04.093, foo, 2016-07-04 20:27:04.093, foo, 0}
2016-07-04 20:27:04,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:27:04.094, foo, 2016-07-04 20:27:04.094, foo, 0}
2016-07-04 20:27:04,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:27:04.095, foo, 2016-07-04 20:27:04.095, foo, 0}
2016-07-04 20:27:04,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-04 20:27:04.096, foo, 2016-07-04 20:27:04.096, foo, 0}
2016-07-04 20:27:04,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:27:04.098, foo, 2016-07-04 20:27:04.098, foo, 0}
2016-07-04 20:27:04,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:27:04.099, foo, 2016-07-04 20:27:04.099, foo, 0}
2016-07-04 20:27:04,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-04 20:27:04.101, foo, 2016-07-04 20:27:04.101, foo, 0}
2016-07-04 20:27:04,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-04 20:27:04.102, foo, 2016-07-04 20:27:04.102, foo, 0}
2016-07-04 20:27:04,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-04 20:27:04.103, foo, 2016-07-04 20:27:04.103, foo, 0}
2016-07-04 20:27:04,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:27:04.105, foo, 2016-07-04 20:27:04.105, foo, 0}
2016-07-04 20:27:04,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:27:04.106, foo, 2016-07-04 20:27:04.106, foo, 0}
2016-07-04 20:27:04,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:27:04.107, foo, 2016-07-04 20:27:04.107, foo, 0}
2016-07-04 20:27:04,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:27:04.109, foo, 2016-07-04 20:27:04.109, foo, 0}
2016-07-04 20:27:04,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:27:04.111, foo, 2016-07-04 20:27:04.111, foo, 0}
2016-07-04 20:27:04,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-04 20:27:04.112, foo, 2016-07-04 20:27:04.112, foo, 0}
2016-07-04 20:27:04,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:27:04.113, foo, 2016-07-04 20:27:04.113, foo, 0}
2016-07-04 20:27:04,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:27:04.114, foo, 2016-07-04 20:27:04.114, foo, 0}
2016-07-04 20:27:04,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-04 20:27:04.115, foo, 2016-07-04 20:27:04.115, foo, 0}
2016-07-04 20:27:04,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-04 20:27:04.117, foo, 2016-07-04 20:27:04.117, foo, 0}
2016-07-04 20:27:04,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-04 20:27:04.118, foo, 2016-07-04 20:27:04.118, foo, 0}
2016-07-04 20:27:04,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-04 20:27:04.119, foo, 2016-07-04 20:27:04.119, foo, 0}
2016-07-04 20:27:04,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:27:04.12, foo, 2016-07-04 20:27:04.12, foo, 0}
2016-07-04 20:27:04,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-04 20:27:04.121, foo, 2016-07-04 20:27:04.121, foo, 0}
2016-07-04 20:27:04,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:27:04.123, foo, 2016-07-04 20:27:04.123, foo, 0}
2016-07-04 20:27:04,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-04 20:27:04.124, foo, 2016-07-04 20:27:04.124, foo, 0}
2016-07-04 20:27:04,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-04 20:27:04.125, foo, 2016-07-04 20:27:04.125, foo, 0}
2016-07-04 20:27:04,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-04 20:27:04.126, foo, 2016-07-04 20:27:04.126, foo, 0}
2016-07-04 20:27:04,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-04 20:27:04.127, foo, 2016-07-04 20:27:04.127, foo, 0}
2016-07-04 20:27:04,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-04 20:27:04.128, foo, 2016-07-04 20:27:04.128, foo, 0}
2016-07-04 20:27:04,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-04 20:27:04.129, foo, 2016-07-04 20:27:04.13, foo, 0}
2016-07-04 20:27:04,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-04 20:27:04.131, foo, 2016-07-04 20:27:04.131, foo, 0}
2016-07-04 20:27:04,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-04 20:27:04.133, foo, 2016-07-04 20:27:04.133, foo, 0}
2016-07-04 20:27:04,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-04 20:27:04.135, foo, 2016-07-04 20:27:04.135, foo, 0}
2016-07-04 20:27:04,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-04 20:27:04.137, foo, 2016-07-04 20:27:04.137, foo, 0}
2016-07-04 20:27:04,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-04 20:27:04.138, foo, 2016-07-04 20:27:04.138, foo, 0}
2016-07-04 20:27:04,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-04 20:27:04.14, foo, 2016-07-04 20:27:04.14, foo, 0}
2016-07-04 20:27:04,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-04 20:27:04.141, foo, 2016-07-04 20:27:04.141, foo, 0}
2016-07-04 20:27:04,199 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-04 20:27:04,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-04 20:27:04.2, foo, 2016-07-04 20:27:04.2, foo}
2016-07-04 20:27:04,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-04 20:27:04.201, foo, 2016-07-04 20:27:04.201, foo}
2016-07-04 20:27:04,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-04 20:27:04.203, foo, 2016-07-04 20:27:04.203, foo}
2016-07-04 20:27:04,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-04 20:27:04.207, foo, 2016-07-04 20:27:04.207, foo}
2016-07-04 20:27:04,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-04 20:27:04.208, foo, 2016-07-04 20:27:04.208, foo}
2016-07-04 20:27:04,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-04 20:27:04.209, foo, 2016-07-04 20:27:04.209, foo}
2016-07-04 20:27:04,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-04 20:27:04.211, foo, 2016-07-04 20:27:04.211, foo}
2016-07-04 20:27:04,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-04 20:27:04.212, foo, 2016-07-04 20:27:04.212, foo}
2016-07-04 20:27:04,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-04 20:27:04.213, foo, 2016-07-04 20:27:04.213, foo}
2016-07-04 20:27:04,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-04 20:27:04.214, foo, 2016-07-04 20:27:04.214, foo}
2016-07-04 20:27:04,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-04 20:27:04.215, foo, 2016-07-04 20:27:04.215, foo}
2016-07-04 20:27:04,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-04 20:27:04.217, foo, 2016-07-04 20:27:04.217, foo}
2016-07-04 20:27:04,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-04 20:27:04.218, foo, 2016-07-04 20:27:04.218, foo}
2016-07-04 20:27:04,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-04 20:27:04.219, foo, 2016-07-04 20:27:04.219, foo}
2016-07-04 20:27:04,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-04 20:27:04.22, foo, 2016-07-04 20:27:04.22, foo}
2016-07-04 20:27:04,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-04 20:27:04.221, foo, 2016-07-04 20:27:04.221, foo}
2016-07-04 20:27:04,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-04 20:27:04.224, foo, 2016-07-04 20:27:04.224, foo}
2016-07-04 20:27:04,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-04 20:27:04.226, foo, 2016-07-04 20:27:04.226, foo}
2016-07-04 20:27:04,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-04 20:27:04.227, foo, 2016-07-04 20:27:04.227, foo}
2016-07-04 20:27:04,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-04 20:27:04.228, foo, 2016-07-04 20:27:04.228, foo}
2016-07-04 20:27:04,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-04 20:27:04.23, foo, 2016-07-04 20:27:04.23, foo}
2016-07-04 20:27:04,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-04 20:27:04.231, foo, 2016-07-04 20:27:04.231, foo}
2016-07-04 20:27:04,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-04 20:27:04.232, foo, 2016-07-04 20:27:04.232, foo}
2016-07-04 20:27:04,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-04 20:27:04.234, foo, 2016-07-04 20:27:04.234, foo}
2016-07-04 20:27:04,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-04 20:27:04.236, foo, 2016-07-04 20:27:04.236, foo}
2016-07-04 20:27:04,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:27:04.237, foo, 2016-07-04 20:27:04.237, foo}
2016-07-04 20:27:04,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-04 20:27:04.238, foo, 2016-07-04 20:27:04.238, foo}
2016-07-04 20:27:04,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-04 20:27:04.239, foo, 2016-07-04 20:27:04.239, foo}
2016-07-04 20:27:04,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-04 20:27:04.241, foo, 2016-07-04 20:27:04.241, foo}
2016-07-04 20:27:04,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:27:04.242, foo, 2016-07-04 20:27:04.242, foo}
2016-07-04 20:27:04,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:27:04.243, foo, 2016-07-04 20:27:04.243, foo}
2016-07-04 20:27:04,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:27:04.244, foo, 2016-07-04 20:27:04.244, foo}
2016-07-04 20:27:04,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-04 20:27:04.249, foo, 2016-07-04 20:27:04.249, foo}
2016-07-04 20:27:04,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-04 20:27:04.25, foo, 2016-07-04 20:27:04.25, foo}
2016-07-04 20:27:04,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-04 20:27:04.251, foo, 2016-07-04 20:27:04.251, foo}
2016-07-04 20:27:04,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-04 20:27:04.252, foo, 2016-07-04 20:27:04.252, foo}
2016-07-04 20:27:04,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-04 20:27:04.253, foo, 2016-07-04 20:27:04.253, foo}
2016-07-04 20:27:04,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-04 20:27:04.254, foo, 2016-07-04 20:27:04.254, foo}
2016-07-04 20:27:04,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-04 20:27:04.255, foo, 2016-07-04 20:27:04.255, foo}
2016-07-04 20:27:04,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-04 20:27:04.258, foo, 2016-07-04 20:27:04.258, foo}
2016-07-04 20:27:04,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-04 20:27:04.273, foo, 2016-07-04 20:27:04.273, foo}
2016-07-04 20:27:04,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-04 20:27:04.276, foo, 2016-07-04 20:27:04.276, foo}
2016-07-04 20:27:04,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-04 20:27:04.278, foo, 2016-07-04 20:27:04.278, foo}
2016-07-04 20:27:04,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-04 20:27:04.279, foo, 2016-07-04 20:27:04.279, foo}
2016-07-04 20:27:04,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-04 20:27:04.28, foo, 2016-07-04 20:27:04.28, foo}
2016-07-04 20:27:04,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-04 20:27:04.281, foo, 2016-07-04 20:27:04.281, foo}
2016-07-04 20:27:04,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-04 20:27:04.282, foo, 2016-07-04 20:27:04.282, foo}
2016-07-04 20:27:04,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-04 20:27:04.283, foo, 2016-07-04 20:27:04.283, foo}
2016-07-04 20:27:04,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-04 20:27:04.284, foo, 2016-07-04 20:27:04.284, foo}
2016-07-04 20:27:04,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-04 20:27:04.285, foo, 2016-07-04 20:27:04.285, foo}
2016-07-04 20:27:04,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-04 20:27:04.286, foo, 2016-07-04 20:27:04.286, foo}
2016-07-04 20:27:04,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-04 20:27:04.288, foo, 2016-07-04 20:27:04.288, foo}
2016-07-04 20:27:04,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-04 20:27:04.291, foo, 2016-07-04 20:27:04.291, foo}
2016-07-04 20:27:04,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-04 20:27:04.293, foo, 2016-07-04 20:27:04.293, foo}
2016-07-04 20:27:04,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-04 20:27:04.293, foo, 2016-07-04 20:27:04.293, foo}
2016-07-04 20:27:04,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-04 20:27:04.294, foo, 2016-07-04 20:27:04.294, foo}
2016-07-04 20:27:04,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-04 20:27:04.296, foo, 2016-07-04 20:27:04.296, foo}
2016-07-04 20:27:04,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-04 20:27:04.297, foo, 2016-07-04 20:27:04.297, foo}
2016-07-04 20:27:04,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:27:04.298, foo, 2016-07-04 20:27:04.298, foo}
2016-07-04 20:27:04,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-04 20:27:04.298, foo, 2016-07-04 20:27:04.299, foo}
2016-07-04 20:27:04,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-04 20:27:04.299, foo, 2016-07-04 20:27:04.299, foo}
2016-07-04 20:27:04,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-04 20:27:04.301, foo, 2016-07-04 20:27:04.301, foo}
2016-07-04 20:27:04,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-04 20:27:04.303, foo, 2016-07-04 20:27:04.303, foo}
2016-07-04 20:27:04,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-04 20:27:04.304, foo, 2016-07-04 20:27:04.304, foo}
2016-07-04 20:27:04,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:27:04.305, foo, 2016-07-04 20:27:04.305, foo}
2016-07-04 20:27:04,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-04 20:27:04.306, foo, 2016-07-04 20:27:04.306, foo}
2016-07-04 20:27:04,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-04 20:27:04.307, foo, 2016-07-04 20:27:04.307, foo}
2016-07-04 20:27:04,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-04 20:27:04.308, foo, 2016-07-04 20:27:04.308, foo}
2016-07-04 20:27:04,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-04 20:27:04.309, foo, 2016-07-04 20:27:04.309, foo}
2016-07-04 20:27:04,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-04 20:27:04.309, foo, 2016-07-04 20:27:04.309, foo}
2016-07-04 20:27:04,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-04 20:27:04.31, foo, 2016-07-04 20:27:04.31, foo}
2016-07-04 20:27:04,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-04 20:27:04.311, foo, 2016-07-04 20:27:04.311, foo}
2016-07-04 20:27:04,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-04 20:27:04.312, foo, 2016-07-04 20:27:04.312, foo}
2016-07-04 20:27:04,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-04 20:27:04.313, foo, 2016-07-04 20:27:04.313, foo}
2016-07-04 20:27:04,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-04 20:27:04.314, foo, 2016-07-04 20:27:04.314, foo}
2016-07-04 20:27:04,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-04 20:27:04.315, foo, 2016-07-04 20:27:04.315, foo}
2016-07-04 20:27:04,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-04 20:27:04.316, foo, 2016-07-04 20:27:04.316, foo}
2016-07-04 20:27:04,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-04 20:27:04.317, foo, 2016-07-04 20:27:04.317, foo}
2016-07-04 20:27:04,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-04 20:27:04.318, foo, 2016-07-04 20:27:04.318, foo}
2016-07-04 20:27:04,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-04 20:27:04.319, foo, 2016-07-04 20:27:04.319, foo}
2016-07-04 20:27:04,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-04 20:27:04.32, foo, 2016-07-04 20:27:04.32, foo}
2016-07-04 20:27:04,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-04 20:27:04.322, foo, 2016-07-04 20:27:04.322, foo}
2016-07-04 20:27:04,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:27:04.323, foo, 2016-07-04 20:27:04.323, foo}
2016-07-04 20:27:04,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:27:04.324, foo, 2016-07-04 20:27:04.324, foo}
2016-07-04 20:27:04,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:27:04.325, foo, 2016-07-04 20:27:04.325, foo}
2016-07-04 20:27:04,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:27:04.326, foo, 2016-07-04 20:27:04.326, foo}
2016-07-04 20:27:04,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-04 20:27:04.327, foo, 2016-07-04 20:27:04.327, foo}
2016-07-04 20:27:04,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:27:04.328, foo, 2016-07-04 20:27:04.328, foo}
2016-07-04 20:27:04,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-04 20:27:04.328, foo, 2016-07-04 20:27:04.328, foo}
2016-07-04 20:27:04,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-04 20:27:04.33, foo, 2016-07-04 20:27:04.33, foo}
2016-07-04 20:27:04,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-04 20:27:04.333, foo, 2016-07-04 20:27:04.333, foo}
2016-07-04 20:27:04,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-04 20:27:04.334, foo, 2016-07-04 20:27:04.334, foo}
2016-07-04 20:27:04,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-04 20:27:04.336, foo, 2016-07-04 20:27:04.336, foo}
2016-07-04 20:27:04,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-04 20:27:04.337, foo, 2016-07-04 20:27:04.337, foo}
2016-07-04 20:27:04,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-04 20:27:04.338, foo, 2016-07-04 20:27:04.338, foo}
2016-07-04 20:27:04,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-04 20:27:04.338, foo, 2016-07-04 20:27:04.338, foo}
2016-07-04 20:27:04,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-04 20:27:04.339, foo, 2016-07-04 20:27:04.339, foo}
2016-07-04 20:27:04,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-04 20:27:04.341, foo, 2016-07-04 20:27:04.341, foo}
2016-07-04 20:27:04,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-04 20:27:04.342, foo, 2016-07-04 20:27:04.342, foo}
2016-07-04 20:27:04,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-04 20:27:04.343, foo, 2016-07-04 20:27:04.343, foo}
2016-07-04 20:27:04,413 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-04 20:27:04,414 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-04 20:27:04,429 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:04,440 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:04,449 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:04,453 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:04,458 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:04,463 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:04,468 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:04,477 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:27:04,480 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:27:04,481 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-04 20:27:04,483 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-04 20:27:04,484 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-04 20:27:04,488 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-04 20:27:04,489 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-04 20:27:04,489 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-04 20:27:04,489 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-04 20:27:04,489 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-04 20:27:04,490 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-04 20:27:04,495 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-04 20:27:04,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-04 20:27:04,500 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-04 20:27:04,501 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-04 20:27:04,503 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-04 20:27:04,507 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-04 20:27:04,507 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-04 20:27:04,508 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:04,512 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s111ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-04 20:27:05,456 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:27:05,459 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:27:05,459 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:27:05,460 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:27:05,460 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:27:05,494 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:05,494 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:05,495 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:05,495 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:05,547 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:27:05,547 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:27:05,547 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:27:05,566 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:05,731 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:27:05,735 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:06,190 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:06,190 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:06,191 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:27:06,193 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:27:06,193 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:06,194 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:27:06,210 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:27:06,214 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:27:06,232 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:27:06,232 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:27:06,232 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:27:06,233 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:27:06,280 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:27:06,304 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:27:06,321 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:27:06,345 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:27:06,363 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:27:06,374 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:27:06,387 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:27:06,401 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:27:06,410 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:27:06,418 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:27:06,432 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:27:06,442 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:27:06,450 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:27:06,459 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:27:06,467 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:27:06,467 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:27:06,468 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:27:06,468 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:27:06,468 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:27:06,469 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:27:06,473 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:27:06,474 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:27:06,474 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:27:06,514 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:27:06,517 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:06,587 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:27:06,587 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:06,602 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s160ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:27:07,427 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:27:07,429 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:27:07,430 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:27:07,430 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:27:07,430 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:27:07,458 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:07,458 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:07,458 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:07,459 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:07,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:27:07,462 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:27:07,463 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:27:07,463 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:27:07,463 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:27:07,464 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:27:07,508 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:07,597 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:27:07,748 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:27:07,760 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:27:07,761 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:27:07,762 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:27:07,764 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:27:07,764 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:27:07,766 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:27:07,768 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:27:07,768 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:27:07,770 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:27:07,777 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:07,777 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:27:07,778 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:27:07,778 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:27:07,778 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:07,779 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:27:07,779 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:27:07,779 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:27:07,790 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:08,105 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:08,109 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:08,112 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:08,116 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:08,122 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:08,126 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:08,134 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:27:08,135 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:27:08,591 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:27:08,592 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:27:08,599 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:08,612 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:08,613 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:08,667 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:27:08,672 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:27:08,673 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:27:08,674 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:27:08,674 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:27:08,675 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:27:08,685 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:27:08,700 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:08,705 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s289ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:27:11,226 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:27:11,228 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:27:11,228 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:27:11,229 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:27:11,229 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:27:11,251 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:11,251 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:11,252 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:11,252 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:11,272 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:27:11,273 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:27:11,320 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:11,421 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:27:11,726 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:27:11,731 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:27:11,731 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:27:11,732 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:27:11,734 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:27:11,735 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:27:11,737 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:27:11,740 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:27:11,741 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:27:11,744 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:27:11,755 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:11,755 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:27:11,756 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:27:11,756 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:27:11,757 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:11,757 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:27:11,757 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:27:11,757 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:27:11,768 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:12,096 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:12,100 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:12,102 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:12,105 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:12,109 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:12,113 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:12,124 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:27:12,124 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:27:12,124 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:27:12,125 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:27:12,125 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:27:12,125 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:27:12,125 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:27:12,126 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:27:12,126 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:27:12,127 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:27:12,141 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:27:12,143 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:27:12,243 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:27:12,250 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:27:12,288 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:27:12,301 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:27:12,327 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:27:12,345 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:27:12,352 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:27:12,379 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:27:12,390 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:27:12,393 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:12,393 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:27:12,396 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:27:12,414 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:12,420 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:27:12,460 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:27:12,461 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:27:12,462 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:27:13,122 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:27:13,399 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:27:13,597 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:27:13,761 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:27:13,996 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:27:14,471 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:27:14,761 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:27:15,011 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:27:15,214 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:27:15,398 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:27:15,685 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:27:15,874 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:27:16,019 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:27:16,227 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:27:16,396 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:16,397 [main] INFO  (Database#info():2711) -  
2016-07-04 20:27:16,456 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:27:16,515 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s292ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:27:17,616 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:27:17,618 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:27:17,618 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:27:17,618 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:27:17,618 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:27:17,637 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:17,637 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:17,637 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:17,638 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:17,665 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:27:17,671 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:18,040 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:18,040 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:18,079 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:27:18,084 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:27:18,085 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:27:18,088 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:27:18,098 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:27:18,098 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:27:18,100 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:27:18,104 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:27:18,105 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:27:18,106 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE )
/*END*/
2016-07-04 20:27:18,110 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:27:18,111 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:27:18,111 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:18,118 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s515ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:27:18,927 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:27:18,929 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:27:18,929 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:27:18,929 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:27:18,930 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:27:18,950 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:18,950 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:18,951 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:18,951 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:18,963 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:27:18,964 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:27:18,971 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:19,059 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:27:19,065 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:19,396 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:19,396 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:19,399 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:27:19,466 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:27:19,466 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:27:19,467 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:27:19,480 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:27:19,480 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:27:19,482 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:27:19,491 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:27:19,492 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:27:19,493 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE )
/*END*/
2016-07-04 20:27:19,522 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:27:19,524 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:27:19,534 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:27:19,534 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:27:19,591 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:27:19,595 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:27:19,596 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:27:19,596 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:27:19,597 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:27:19,597 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:27:19,628 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:27:19,655 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:27:19,668 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:27:19,668 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:27:19,669 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:27:19,671 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:27:19,671 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:27:19,673 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:27:19,673 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:27:19,674 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:27:19,675 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:27:19,677 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:27:19,677 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:27:19,678 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:27:19,712 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:27:19,712 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:27:19,713 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:27:19,713 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:27:19,713 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:27:19,729 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:27:19,731 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:27:19,732 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:27:19,732 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:27:19,733 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:27:19,736 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:27:19,959 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:19,970 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:19,974 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:19,977 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:19,980 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:19,982 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:19,985 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:20,001 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:27:20,007 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:27:20,033 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:27:20,034 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:27:20,207 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:27:20,282 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:27:20,307 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:27:20,420 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:27:20,491 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:27:20,556 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:27:20,604 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:27:20,605 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:20,607 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:27:20,611 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:27:20,643 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:27:20,664 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:27:20,677 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:27:20,694 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:27:20,709 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:27:20,726 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:20,764 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:27:20,773 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:27:20,777 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:20,799 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s868ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:27:48,905 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:27:48,909 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:27:48,910 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:27:48,911 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:27:48,911 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:27:48,943 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:48,944 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:48,944 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:48,944 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:48,990 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:27:48,990 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:27:48,991 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:27:49,009 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:49,169 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:27:49,178 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:49,776 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:49,778 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:49,780 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:27:49,782 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:27:49,783 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:49,783 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:27:49,828 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:27:49,835 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:27:49,868 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:27:49,869 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:27:49,870 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:27:49,870 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:27:49,977 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:27:50,018 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:27:50,046 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:27:50,063 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:27:50,079 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:27:50,093 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:27:50,111 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:27:50,133 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:27:50,148 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:27:50,175 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:27:50,225 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:27:50,251 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:27:50,262 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:27:50,287 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:27:50,324 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:27:50,325 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:27:50,325 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:27:50,326 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:27:50,327 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:27:50,329 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:27:50,339 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:27:50,339 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:27:50,340 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:27:50,391 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:27:50,396 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:50,495 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:27:50,496 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:50,515 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s623ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:27:51,703 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:27:51,707 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:27:51,708 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:27:51,709 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:27:51,709 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:27:51,740 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:51,740 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:51,741 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:51,741 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:51,743 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:27:51,743 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:27:51,744 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:27:51,744 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:27:51,745 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:27:51,745 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:27:51,792 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:51,911 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:27:52,111 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:27:52,123 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:27:52,123 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:27:52,125 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:27:52,127 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:27:52,128 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:27:52,130 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:27:52,133 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:27:52,135 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:27:52,140 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:27:52,148 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:52,149 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:27:52,150 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:27:52,150 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:27:52,151 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:52,151 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:27:52,152 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:27:52,152 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:27:52,163 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:52,525 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:52,534 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:52,540 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:52,544 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:52,550 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:52,554 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:52,564 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:27:52,564 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:27:53,148 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:27:53,148 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:27:53,157 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:27:53,178 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:27:53,179 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:27:53,391 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:27:53,404 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:27:53,409 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:27:53,410 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:27:53,411 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:27:53,412 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:27:53,453 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:27:53,485 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:27:53,490 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s809ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:27:56,011 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:27:56,013 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:27:56,014 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:27:56,015 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:27:56,015 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:27:56,045 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:27:56,045 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:27:56,046 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:27:56,046 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:27:56,067 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:27:56,068 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:27:56,113 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:27:56,203 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:27:56,472 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:27:56,476 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:27:56,477 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:27:56,479 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:27:56,480 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:27:56,481 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:27:56,482 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:27:56,486 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:27:56,487 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:27:56,490 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:27:56,506 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:56,506 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:27:56,507 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:27:56,507 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:27:56,508 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:27:56,508 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:27:56,509 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:27:56,509 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:27:56,519 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:27:56,870 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:27:56,874 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:27:56,877 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:27:56,880 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:27:56,885 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:27:56,888 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:27:56,901 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:27:56,902 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:27:56,903 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:27:56,903 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:27:56,904 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:27:56,905 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:27:56,905 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:27:56,905 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:27:56,906 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:27:56,906 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:27:56,920 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:27:56,922 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:27:56,963 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:27:56,967 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:27:56,986 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:27:56,991 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:27:57,009 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:27:57,024 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:27:57,030 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:27:57,039 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:27:57,047 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:27:57,051 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:57,052 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:27:57,054 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:27:57,070 [main] INFO  (Database#info():2711) - }
2016-07-04 20:27:57,078 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:27:57,120 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:27:57,122 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:27:57,123 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:27:57,675 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:27:57,935 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:27:58,132 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:27:58,321 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:27:58,530 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:27:58,710 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:27:58,892 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:27:59,124 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:27:59,293 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:27:59,454 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:27:59,672 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:27:59,806 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:27:59,911 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:28:00,050 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:28:00,180 [main] INFO  (Database#info():2711) - }
2016-07-04 20:28:00,181 [main] INFO  (Database#info():2711) -  
2016-07-04 20:28:00,243 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:28:00,259 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s268ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:28:01,303 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:28:01,305 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:28:01,305 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:28:01,306 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:28:01,306 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:28:01,326 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:28:01,327 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:28:01,327 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:28:01,327 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:28:01,364 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:28:01,371 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:28:01,698 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:28:01,698 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:28:01,728 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:28:01,733 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:28:01,734 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:28:01,736 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:28:01,742 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:28:01,742 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:28:01,744 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:28:01,749 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:28:01,750 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:28:01,752 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE )
/*END*/
2016-07-04 20:28:01,757 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:28:01,758 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:28:01,759 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:28:01,767 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s474ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:28:02,448 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:28:02,450 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:28:02,451 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:28:02,451 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:28:02,451 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:28:02,471 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:28:02,472 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:28:02,472 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:28:02,473 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:28:02,489 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:28:02,489 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:28:02,494 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:28:02,597 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:28:02,602 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:28:02,916 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:28:02,917 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:28:02,920 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:28:02,975 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:28:02,976 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:28:02,977 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:28:02,985 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:28:02,986 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:28:02,987 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:28:02,995 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:28:02,996 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:28:02,997 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE )
/*END*/
2016-07-04 20:28:03,006 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:28:03,007 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:28:03,012 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:28:03,013 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:28:03,068 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:28:03,072 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:28:03,073 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:28:03,073 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:28:03,074 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:28:03,074 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:28:03,098 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:28:03,125 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:28:03,136 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:28:03,136 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:28:03,137 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:28:03,138 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:28:03,139 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:28:03,139 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:28:03,140 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:28:03,140 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:28:03,140 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:28:03,141 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:28:03,141 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:28:03,141 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:28:03,168 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:28:03,168 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:28:03,168 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:28:03,169 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:28:03,169 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:28:03,180 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:28:03,181 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:28:03,181 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:28:03,181 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:28:03,182 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:28:03,185 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:28:03,358 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:28:03,366 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:28:03,370 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:28:03,372 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:28:03,375 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:28:03,378 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:28:03,380 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:28:03,391 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:28:03,394 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:28:03,412 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:28:03,413 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:28:03,539 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:28:03,596 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:28:03,619 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:28:03,671 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:28:03,731 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:28:03,773 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:28:03,812 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:28:03,813 [main] INFO  (Database#info():2711) - }
2016-07-04 20:28:03,815 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:28:03,818 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:28:03,850 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:28:03,873 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:28:03,894 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:28:03,912 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:28:03,925 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:28:03,945 [main] INFO  (Database#info():2711) - }
2016-07-04 20:28:03,979 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:28:03,990 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:28:03,994 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:28:04,008 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s561ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:30:49,780 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-04 20:30:49,786 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-04 20:30:49,787 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-04 20:30:49,794 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-04 20:30:49,794 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-04 20:30:49,796 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-04 20:30:50,858 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:30:50,859 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:30:50,859 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:30:50,860 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:30:50,875 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:30:51,350 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:30:51,351 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:30:51,376 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-04 20:30:51,376 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-04 20:30:51,377 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-04 20:30:51,379 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-04 20:30:51,379 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-04 20:30:51,380 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-04 20:30:51,403 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:30:51,403 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:30:51,404 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:30:51,539 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-04 20:30:51,545 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-04 20:30:51,550 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-04 20:30:51,555 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-04 20:30:51,564 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-04 20:30:51,582 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-04 20:30:51,612 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-04 20:30:51,632 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-04 20:30:51,645 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-04 20:30:51,667 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-04 20:30:51,685 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-04 20:30:51,711 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-04 20:30:51,729 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-04 20:30:51,745 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-04 20:30:51,769 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-04 20:30:51,786 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-04 20:30:51,809 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-04 20:30:51,827 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-04 20:30:51,849 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-04 20:30:51,868 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-04 20:30:51,885 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-04 20:30:51,907 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-04 20:30:51,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-04 20:30:51,938 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-04 20:30:51,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-04 20:30:51,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-04 20:30:51,949 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-04 20:30:51,952 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-04 20:30:51,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-04 20:30:51,961 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-04 20:30:51,964 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-04 20:30:51,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-04 20:30:51,970 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-04 20:30:51,974 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-04 20:30:51,979 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-04 20:30:51,982 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-04 20:30:51,986 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-04 20:30:52,110 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-04 20:30:52,113 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-04 20:30:52,117 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-04 20:30:52,117 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-04 20:30:52,117 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-04 20:30:52,118 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-04 20:30:52,118 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-04 20:30:52,119 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-04 20:30:52,125 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-04 20:30:52,129 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-04 20:30:52,130 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-04 20:30:52,131 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-04 20:30:52,139 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-04 20:30:52,139 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-04 20:30:52,140 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-04 20:30:52,141 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-04 20:30:52,143 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-04 20:30:52,147 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:30:52,148 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-04 20:30:52,149 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-04 20:30:52,149 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-04 20:30:52,149 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-04 20:30:52,161 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-04 20:30:52,178 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-04 20:30:52,190 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-04 20:30:52,202 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-04 20:30:52,224 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-04 20:30:52,236 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-04 20:30:52,247 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-04 20:30:52,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-04 20:30:52,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-04 20:30:52,285 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-04 20:30:52,298 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-04 20:30:52,311 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-04 20:30:52,322 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-04 20:30:52,334 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-04 20:30:52,345 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-04 20:30:52,357 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:30:52,377 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-04 20:30:52,422 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 20:30:52,443 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-04 20:30:52,512 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,532 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,551 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-04 20:30:52,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 20:30:52,595 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-04 20:30:52,625 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-04 20:30:52,655 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:30:52,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-04 20:30:52,706 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 20:30:52,732 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-04 20:30:52,748 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-04 20:30:52,766 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-04 20:30:52,786 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-04 20:30:52,806 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-04 20:30:52,827 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-04 20:30:52,850 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-04 20:30:52,873 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-04 20:30:52,900 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-04 20:30:52,918 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-04 20:30:52,918 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-04 20:30:52,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-04 20:30:52,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-04 20:30:52,925 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 20:30:52,925 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-04 20:30:52,926 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-04 20:30:53,050 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-04 20:30:53,050 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-04 20:30:53,050 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-04 20:30:53,051 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-04 20:30:53,051 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-04 20:30:53,051 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-04 20:30:53,078 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:30:53,078 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-04 20:30:53,078 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:30:53,340 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:30:53,341 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:30:53,341 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:30:53,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-04 20:30:53,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-04 20:30:53,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-04 20:30:53,421 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-04 20:30:53,427 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-04 20:30:53,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-04 20:30:53,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-04 20:30:53,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-04 20:30:53,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-04 20:30:53,437 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-04 20:30:53,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-04 20:30:53,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-04 20:30:53,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-04 20:30:53,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-04 20:30:53,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-04 20:30:53,448 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-04 20:30:53,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-04 20:30:53,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-04 20:30:53,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-04 20:30:53,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-04 20:30:53,459 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-04 20:30:53,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-04 20:30:53,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-04 20:30:53,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-04 20:30:53,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-04 20:30:53,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-04 20:30:53,480 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-04 20:30:53,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-04 20:30:53,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-04 20:30:53,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-04 20:30:53,486 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-04 20:30:53,487 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:30:53,488 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-04 20:30:53,488 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:30:53,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-04 20:30:53.564, foo, 2016-07-04 20:30:53.564, foo, 0}
2016-07-04 20:30:53,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-04 20:30:53.573, foo, 2016-07-04 20:30:53.573, foo, 0}
2016-07-04 20:30:53,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-04 20:30:53.575, foo, 2016-07-04 20:30:53.575, foo, 0}
2016-07-04 20:30:53,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-04 20:30:53.577, foo, 2016-07-04 20:30:53.577, foo, 0}
2016-07-04 20:30:53,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-04 20:30:53.58, foo, 2016-07-04 20:30:53.58, foo, 0}
2016-07-04 20:30:53,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-04 20:30:53.581, foo, 2016-07-04 20:30:53.581, foo, 0}
2016-07-04 20:30:53,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:30:53.584, foo, 2016-07-04 20:30:53.584, foo, 0}
2016-07-04 20:30:53,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-04 20:30:53.585, foo, 2016-07-04 20:30:53.585, foo, 0}
2016-07-04 20:30:53,587 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-04 20:30:53.587, foo, 2016-07-04 20:30:53.587, foo, 0}
2016-07-04 20:30:53,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-04 20:30:53.589, foo, 2016-07-04 20:30:53.589, foo, 0}
2016-07-04 20:30:53,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-04 20:30:53.591, foo, 2016-07-04 20:30:53.591, foo, 0}
2016-07-04 20:30:53,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-04 20:30:53.593, foo, 2016-07-04 20:30:53.593, foo, 0}
2016-07-04 20:30:53,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-04 20:30:53.595, foo, 2016-07-04 20:30:53.595, foo, 0}
2016-07-04 20:30:53,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-04 20:30:53.599, foo, 2016-07-04 20:30:53.599, foo, 0}
2016-07-04 20:30:53,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-04 20:30:53.602, foo, 2016-07-04 20:30:53.602, foo, 0}
2016-07-04 20:30:53,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-04 20:30:53.605, foo, 2016-07-04 20:30:53.605, foo, 0}
2016-07-04 20:30:53,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-04 20:30:53.606, foo, 2016-07-04 20:30:53.606, foo, 0}
2016-07-04 20:30:53,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-04 20:30:53.608, foo, 2016-07-04 20:30:53.608, foo, 0}
2016-07-04 20:30:53,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-04 20:30:53.61, foo, 2016-07-04 20:30:53.61, foo, 0}
2016-07-04 20:30:53,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-04 20:30:53.622, foo, 2016-07-04 20:30:53.622, foo, 0}
2016-07-04 20:30:53,646 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-04 20:30:53,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-04 20:30:53.648, foo, 2016-07-04 20:30:53.648, foo, 0}
2016-07-04 20:30:53,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-04 20:30:53.651, foo, 2016-07-04 20:30:53.651, foo, 0}
2016-07-04 20:30:53,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-04 20:30:53.654, foo, 2016-07-04 20:30:53.654, foo, 0}
2016-07-04 20:30:53,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-04 20:30:53.656, foo, 2016-07-04 20:30:53.656, foo, 0}
2016-07-04 20:30:53,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-04 20:30:53.659, foo, 2016-07-04 20:30:53.659, foo, 0}
2016-07-04 20:30:53,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-04 20:30:53.661, foo, 2016-07-04 20:30:53.661, foo, 0}
2016-07-04 20:30:53,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-04 20:30:53.663, foo, 2016-07-04 20:30:53.663, foo, 0}
2016-07-04 20:30:53,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-04 20:30:53.666, foo, 2016-07-04 20:30:53.666, foo, 0}
2016-07-04 20:30:53,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-04 20:30:53.667, foo, 2016-07-04 20:30:53.667, foo, 0}
2016-07-04 20:30:53,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-04 20:30:53.669, foo, 2016-07-04 20:30:53.669, foo, 0}
2016-07-04 20:30:53,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-04 20:30:53.67, foo, 2016-07-04 20:30:53.67, foo, 0}
2016-07-04 20:30:53,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-04 20:30:53.672, foo, 2016-07-04 20:30:53.672, foo, 0}
2016-07-04 20:30:53,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-04 20:30:53.674, foo, 2016-07-04 20:30:53.674, foo, 0}
2016-07-04 20:30:53,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-04 20:30:53.677, foo, 2016-07-04 20:30:53.677, foo, 0}
2016-07-04 20:30:53,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-04 20:30:53.679, foo, 2016-07-04 20:30:53.679, foo, 0}
2016-07-04 20:30:53,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-04 20:30:53.681, foo, 2016-07-04 20:30:53.681, foo, 0}
2016-07-04 20:30:53,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-04 20:30:53.684, foo, 2016-07-04 20:30:53.684, foo, 0}
2016-07-04 20:30:53,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-04 20:30:53.686, foo, 2016-07-04 20:30:53.686, foo, 0}
2016-07-04 20:30:53,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-04 20:30:53.687, foo, 2016-07-04 20:30:53.687, foo, 0}
2016-07-04 20:30:53,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-04 20:30:53.689, foo, 2016-07-04 20:30:53.689, foo, 0}
2016-07-04 20:30:53,707 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-04 20:30:53,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:30:53,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-04 20:30:53,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-04 20:30:53,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-04 20:30:53,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-04 20:30:53,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-04 20:30:53,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-04 20:30:53,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-04 20:30:53,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-04 20:30:53,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-04 20:30:53,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-04 20:30:53,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-04 20:30:53,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-04 20:30:53,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-04 20:30:53,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-04 20:30:53,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-04 20:30:53,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-04 20:30:53,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-04 20:30:53,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-04 20:30:53,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-04 20:30:53,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-04 20:30:53,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-04 20:30:53,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-04 20:30:53,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-04 20:30:53,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-04 20:30:53,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-04 20:30:53,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-04 20:30:53,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-04 20:30:53,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-04 20:30:53,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-04 20:30:53,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-04 20:30:53,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-04 20:30:53,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-04 20:30:53,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-04 20:30:53,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-04 20:30:53,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-04 20:30:53,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-04 20:30:53,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-04 20:30:53,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-04 20:30:53,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-04 20:30:53,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-04 20:30:53,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-04 20:30:53,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-04 20:30:53,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-04 20:30:53,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-04 20:30:53,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-04 20:30:53,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-04 20:30:53,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-04 20:30:53,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-04 20:30:53,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-04 20:30:53,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-04 20:30:53,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-04 20:30:53,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-04 20:30:53,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-04 20:30:53,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-04 20:30:53,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-04 20:30:53,803 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-04 20:30:53,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-04 20:30:53.804, foo, 2016-07-04 20:30:53.804, foo, 0}
2016-07-04 20:30:53,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-04 20:30:53.805, foo, 2016-07-04 20:30:53.805, foo, 0}
2016-07-04 20:30:53,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-04 20:30:53.806, foo, 2016-07-04 20:30:53.806, foo, 0}
2016-07-04 20:30:53,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-04 20:30:53.807, foo, 2016-07-04 20:30:53.807, foo, 0}
2016-07-04 20:30:53,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-04 20:30:53.808, foo, 2016-07-04 20:30:53.808, foo, 0}
2016-07-04 20:30:53,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-04 20:30:53.81, foo, 2016-07-04 20:30:53.81, foo, 0}
2016-07-04 20:30:53,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-04 20:30:53.811, foo, 2016-07-04 20:30:53.811, foo, 0}
2016-07-04 20:30:53,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-04 20:30:53.812, foo, 2016-07-04 20:30:53.812, foo, 0}
2016-07-04 20:30:53,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-04 20:30:53.813, foo, 2016-07-04 20:30:53.813, foo, 0}
2016-07-04 20:30:53,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-04 20:30:53.814, foo, 2016-07-04 20:30:53.814, foo, 0}
2016-07-04 20:30:53,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-04 20:30:53.815, foo, 2016-07-04 20:30:53.815, foo, 0}
2016-07-04 20:30:53,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-04 20:30:53.815, foo, 2016-07-04 20:30:53.815, foo, 0}
2016-07-04 20:30:53,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-04 20:30:53.816, foo, 2016-07-04 20:30:53.816, foo, 0}
2016-07-04 20:30:53,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-04 20:30:53.817, foo, 2016-07-04 20:30:53.817, foo, 0}
2016-07-04 20:30:53,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-04 20:30:53.818, foo, 2016-07-04 20:30:53.818, foo, 0}
2016-07-04 20:30:53,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-04 20:30:53.819, foo, 2016-07-04 20:30:53.819, foo, 0}
2016-07-04 20:30:53,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-04 20:30:53.82, foo, 2016-07-04 20:30:53.82, foo, 0}
2016-07-04 20:30:53,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-04 20:30:53.822, foo, 2016-07-04 20:30:53.822, foo, 0}
2016-07-04 20:30:53,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-04 20:30:53.823, foo, 2016-07-04 20:30:53.823, foo, 0}
2016-07-04 20:30:53,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-04 20:30:53.824, foo, 2016-07-04 20:30:53.824, foo, 0}
2016-07-04 20:30:53,850 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-04 20:30:53,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-04 20:30:53.851, foo, 2016-07-04 20:30:53.851, foo, 0}
2016-07-04 20:30:53,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-04 20:30:53.853, foo, 2016-07-04 20:30:53.853, foo, 0}
2016-07-04 20:30:53,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-04 20:30:53.854, foo, 2016-07-04 20:30:53.854, foo, 0}
2016-07-04 20:30:53,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-04 20:30:53.855, foo, 2016-07-04 20:30:53.855, foo, 0}
2016-07-04 20:30:53,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-04 20:30:53.856, foo, 2016-07-04 20:30:53.856, foo, 0}
2016-07-04 20:30:53,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-04 20:30:53.857, foo, 2016-07-04 20:30:53.857, foo, 0}
2016-07-04 20:30:53,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-04 20:30:53.858, foo, 2016-07-04 20:30:53.858, foo, 0}
2016-07-04 20:30:53,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-04 20:30:53.858, foo, 2016-07-04 20:30:53.858, foo, 0}
2016-07-04 20:30:53,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-04 20:30:53.859, foo, 2016-07-04 20:30:53.859, foo, 0}
2016-07-04 20:30:53,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-04 20:30:53.86, foo, 2016-07-04 20:30:53.86, foo, 0}
2016-07-04 20:30:53,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-04 20:30:53.861, foo, 2016-07-04 20:30:53.861, foo, 0}
2016-07-04 20:30:53,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-04 20:30:53.862, foo, 2016-07-04 20:30:53.862, foo, 0}
2016-07-04 20:30:53,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-04 20:30:53.863, foo, 2016-07-04 20:30:53.863, foo, 0}
2016-07-04 20:30:53,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-04 20:30:53.863, foo, 2016-07-04 20:30:53.863, foo, 0}
2016-07-04 20:30:53,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-04 20:30:53.864, foo, 2016-07-04 20:30:53.864, foo, 0}
2016-07-04 20:30:53,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-04 20:30:53.865, foo, 2016-07-04 20:30:53.865, foo, 0}
2016-07-04 20:30:53,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-04 20:30:53.866, foo, 2016-07-04 20:30:53.866, foo, 0}
2016-07-04 20:30:53,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-04 20:30:53.867, foo, 2016-07-04 20:30:53.867, foo, 0}
2016-07-04 20:30:53,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-04 20:30:53.868, foo, 2016-07-04 20:30:53.868, foo, 0}
2016-07-04 20:30:53,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-04 20:30:53.869, foo, 2016-07-04 20:30:53.869, foo, 0}
2016-07-04 20:30:53,885 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-04 20:30:53,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-04 20:30:53.886, foo, 2016-07-04 20:30:53.886, foo}
2016-07-04 20:30:53,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-04 20:30:53.888, foo, 2016-07-04 20:30:53.888, foo}
2016-07-04 20:30:53,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-04 20:30:53.889, foo, 2016-07-04 20:30:53.889, foo}
2016-07-04 20:30:53,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-04 20:30:53.89, foo, 2016-07-04 20:30:53.89, foo}
2016-07-04 20:30:53,898 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-04 20:30:53,899 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 20:30:53,899 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-04 20:30:53,899 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 20:30:53,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-04 20:30:53.97, foo, 2016-07-04 20:30:53.97, foo, 0}
2016-07-04 20:30:53,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-04 20:30:53.973, foo, 2016-07-04 20:30:53.973, foo, 0}
2016-07-04 20:30:53,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-04 20:30:53.974, foo, 2016-07-04 20:30:53.974, foo, 0}
2016-07-04 20:30:53,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-04 20:30:53.975, foo, 2016-07-04 20:30:53.975, foo, 0}
2016-07-04 20:30:53,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-04 20:30:53.976, foo, 2016-07-04 20:30:53.976, foo, 0}
2016-07-04 20:30:53,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-04 20:30:53.977, foo, 2016-07-04 20:30:53.977, foo, 0}
2016-07-04 20:30:53,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-04 20:30:53.978, foo, 2016-07-04 20:30:53.978, foo, 0}
2016-07-04 20:30:53,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-04 20:30:53.979, foo, 2016-07-04 20:30:53.979, foo, 0}
2016-07-04 20:30:53,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-04 20:30:53.981, foo, 2016-07-04 20:30:53.981, foo, 0}
2016-07-04 20:30:53,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-04 20:30:53.982, foo, 2016-07-04 20:30:53.982, foo, 0}
2016-07-04 20:30:53,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-04 20:30:53.983, foo, 2016-07-04 20:30:53.983, foo, 0}
2016-07-04 20:30:53,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-04 20:30:53.984, foo, 2016-07-04 20:30:53.984, foo, 0}
2016-07-04 20:30:53,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-04 20:30:53.985, foo, 2016-07-04 20:30:53.985, foo, 0}
2016-07-04 20:30:53,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-04 20:30:53.986, foo, 2016-07-04 20:30:53.986, foo, 0}
2016-07-04 20:30:53,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-04 20:30:53.987, foo, 2016-07-04 20:30:53.987, foo, 0}
2016-07-04 20:30:53,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-04 20:30:53.988, foo, 2016-07-04 20:30:53.988, foo, 0}
2016-07-04 20:30:53,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-04 20:30:53.989, foo, 2016-07-04 20:30:53.989, foo, 0}
2016-07-04 20:30:53,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-04 20:30:53.99, foo, 2016-07-04 20:30:53.99, foo, 0}
2016-07-04 20:30:53,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-04 20:30:53.992, foo, 2016-07-04 20:30:53.992, foo, 0}
2016-07-04 20:30:53,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-04 20:30:53.992, foo, 2016-07-04 20:30:53.992, foo, 0}
2016-07-04 20:30:54,026 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-04 20:30:54,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-04 20:30:54.027, foo, 2016-07-04 20:30:54.027, foo, 0}
2016-07-04 20:30:54,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-04 20:30:54.029, foo, 2016-07-04 20:30:54.029, foo, 0}
2016-07-04 20:30:54,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-04 20:30:54.03, foo, 2016-07-04 20:30:54.03, foo, 0}
2016-07-04 20:30:54,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-04 20:30:54.032, foo, 2016-07-04 20:30:54.032, foo, 0}
2016-07-04 20:30:54,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-04 20:30:54.033, foo, 2016-07-04 20:30:54.033, foo, 0}
2016-07-04 20:30:54,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-04 20:30:54.034, foo, 2016-07-04 20:30:54.034, foo, 0}
2016-07-04 20:30:54,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-04 20:30:54.036, foo, 2016-07-04 20:30:54.036, foo, 0}
2016-07-04 20:30:54,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-04 20:30:54.038, foo, 2016-07-04 20:30:54.038, foo, 0}
2016-07-04 20:30:54,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-04 20:30:54.039, foo, 2016-07-04 20:30:54.039, foo, 0}
2016-07-04 20:30:54,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-04 20:30:54.041, foo, 2016-07-04 20:30:54.041, foo, 0}
2016-07-04 20:30:54,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-04 20:30:54.043, foo, 2016-07-04 20:30:54.043, foo, 0}
2016-07-04 20:30:54,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-04 20:30:54.045, foo, 2016-07-04 20:30:54.045, foo, 0}
2016-07-04 20:30:54,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-04 20:30:54.048, foo, 2016-07-04 20:30:54.048, foo, 0}
2016-07-04 20:30:54,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-04 20:30:54.05, foo, 2016-07-04 20:30:54.05, foo, 0}
2016-07-04 20:30:54,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-04 20:30:54.051, foo, 2016-07-04 20:30:54.051, foo, 0}
2016-07-04 20:30:54,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-04 20:30:54.052, foo, 2016-07-04 20:30:54.052, foo, 0}
2016-07-04 20:30:54,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-04 20:30:54.054, foo, 2016-07-04 20:30:54.054, foo, 0}
2016-07-04 20:30:54,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-04 20:30:54.055, foo, 2016-07-04 20:30:54.055, foo, 0}
2016-07-04 20:30:54,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-04 20:30:54.057, foo, 2016-07-04 20:30:54.057, foo, 0}
2016-07-04 20:30:54,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-04 20:30:54.058, foo, 2016-07-04 20:30:54.058, foo, 0}
2016-07-04 20:30:54,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-04 20:30:54.063, foo, 2016-07-04 20:30:54.063, foo, 0}
2016-07-04 20:30:54,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-04 20:30:54.065, foo, 2016-07-04 20:30:54.065, foo, 0}
2016-07-04 20:30:54,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-04 20:30:54.066, foo, 2016-07-04 20:30:54.066, foo, 0}
2016-07-04 20:30:54,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-04 20:30:54.073, foo, 2016-07-04 20:30:54.073, foo, 0}
2016-07-04 20:30:54,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-04 20:30:54.074, foo, 2016-07-04 20:30:54.074, foo, 0}
2016-07-04 20:30:54,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-04 20:30:54.076, foo, 2016-07-04 20:30:54.076, foo, 0}
2016-07-04 20:30:54,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-04 20:30:54.077, foo, 2016-07-04 20:30:54.077, foo, 0}
2016-07-04 20:30:54,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-04 20:30:54.078, foo, 2016-07-04 20:30:54.078, foo, 0}
2016-07-04 20:30:54,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-04 20:30:54.079, foo, 2016-07-04 20:30:54.079, foo, 0}
2016-07-04 20:30:54,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-04 20:30:54.081, foo, 2016-07-04 20:30:54.081, foo, 0}
2016-07-04 20:30:54,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-04 20:30:54.082, foo, 2016-07-04 20:30:54.082, foo, 0}
2016-07-04 20:30:54,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:30:54.083, foo, 2016-07-04 20:30:54.083, foo, 0}
2016-07-04 20:30:54,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:30:54.085, foo, 2016-07-04 20:30:54.085, foo, 0}
2016-07-04 20:30:54,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:30:54.086, foo, 2016-07-04 20:30:54.086, foo, 0}
2016-07-04 20:30:54,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:30:54.087, foo, 2016-07-04 20:30:54.088, foo, 0}
2016-07-04 20:30:54,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:30:54.089, foo, 2016-07-04 20:30:54.089, foo, 0}
2016-07-04 20:30:54,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-04 20:30:54.09, foo, 2016-07-04 20:30:54.09, foo, 0}
2016-07-04 20:30:54,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:30:54.091, foo, 2016-07-04 20:30:54.091, foo, 0}
2016-07-04 20:30:54,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:30:54.093, foo, 2016-07-04 20:30:54.093, foo, 0}
2016-07-04 20:30:54,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-04 20:30:54.094, foo, 2016-07-04 20:30:54.094, foo, 0}
2016-07-04 20:30:54,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-04 20:30:54.096, foo, 2016-07-04 20:30:54.096, foo, 0}
2016-07-04 20:30:54,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-04 20:30:54.098, foo, 2016-07-04 20:30:54.098, foo, 0}
2016-07-04 20:30:54,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 20:30:54.1, foo, 2016-07-04 20:30:54.1, foo, 0}
2016-07-04 20:30:54,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 20:30:54.101, foo, 2016-07-04 20:30:54.101, foo, 0}
2016-07-04 20:30:54,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:30:54.103, foo, 2016-07-04 20:30:54.103, foo, 0}
2016-07-04 20:30:54,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 20:30:54.105, foo, 2016-07-04 20:30:54.105, foo, 0}
2016-07-04 20:30:54,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:30:54.106, foo, 2016-07-04 20:30:54.106, foo, 0}
2016-07-04 20:30:54,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-04 20:30:54.107, foo, 2016-07-04 20:30:54.107, foo, 0}
2016-07-04 20:30:54,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 20:30:54.109, foo, 2016-07-04 20:30:54.109, foo, 0}
2016-07-04 20:30:54,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 20:30:54.11, foo, 2016-07-04 20:30:54.11, foo, 0}
2016-07-04 20:30:54,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-04 20:30:54.112, foo, 2016-07-04 20:30:54.112, foo, 0}
2016-07-04 20:30:54,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-04 20:30:54.113, foo, 2016-07-04 20:30:54.113, foo, 0}
2016-07-04 20:30:54,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-04 20:30:54.114, foo, 2016-07-04 20:30:54.114, foo, 0}
2016-07-04 20:30:54,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-04 20:30:54.116, foo, 2016-07-04 20:30:54.116, foo, 0}
2016-07-04 20:30:54,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-04 20:30:54.117, foo, 2016-07-04 20:30:54.117, foo, 0}
2016-07-04 20:30:54,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-04 20:30:54.123, foo, 2016-07-04 20:30:54.123, foo, 0}
2016-07-04 20:30:54,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-04 20:30:54.124, foo, 2016-07-04 20:30:54.124, foo, 0}
2016-07-04 20:30:54,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-04 20:30:54.125, foo, 2016-07-04 20:30:54.125, foo, 0}
2016-07-04 20:30:54,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-04 20:30:54.127, foo, 2016-07-04 20:30:54.127, foo, 0}
2016-07-04 20:30:54,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-04 20:30:54.128, foo, 2016-07-04 20:30:54.128, foo, 0}
2016-07-04 20:30:54,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-04 20:30:54.133, foo, 2016-07-04 20:30:54.133, foo, 0}
2016-07-04 20:30:54,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-04 20:30:54.135, foo, 2016-07-04 20:30:54.135, foo, 0}
2016-07-04 20:30:54,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-04 20:30:54.136, foo, 2016-07-04 20:30:54.136, foo, 0}
2016-07-04 20:30:54,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-04 20:30:54.138, foo, 2016-07-04 20:30:54.138, foo, 0}
2016-07-04 20:30:54,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-04 20:30:54.139, foo, 2016-07-04 20:30:54.139, foo, 0}
2016-07-04 20:30:54,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-04 20:30:54.141, foo, 2016-07-04 20:30:54.141, foo, 0}
2016-07-04 20:30:54,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-04 20:30:54.143, foo, 2016-07-04 20:30:54.143, foo, 0}
2016-07-04 20:30:54,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-04 20:30:54.145, foo, 2016-07-04 20:30:54.145, foo, 0}
2016-07-04 20:30:54,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-04 20:30:54.146, foo, 2016-07-04 20:30:54.146, foo, 0}
2016-07-04 20:30:54,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-04 20:30:54.148, foo, 2016-07-04 20:30:54.148, foo, 0}
2016-07-04 20:30:54,210 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-04 20:30:54,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-04 20:30:54.211, foo, 2016-07-04 20:30:54.211, foo}
2016-07-04 20:30:54,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-04 20:30:54.214, foo, 2016-07-04 20:30:54.214, foo}
2016-07-04 20:30:54,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-04 20:30:54.216, foo, 2016-07-04 20:30:54.216, foo}
2016-07-04 20:30:54,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-04 20:30:54.217, foo, 2016-07-04 20:30:54.217, foo}
2016-07-04 20:30:54,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-04 20:30:54.218, foo, 2016-07-04 20:30:54.218, foo}
2016-07-04 20:30:54,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-04 20:30:54.22, foo, 2016-07-04 20:30:54.22, foo}
2016-07-04 20:30:54,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-04 20:30:54.221, foo, 2016-07-04 20:30:54.221, foo}
2016-07-04 20:30:54,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-04 20:30:54.222, foo, 2016-07-04 20:30:54.222, foo}
2016-07-04 20:30:54,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-04 20:30:54.223, foo, 2016-07-04 20:30:54.223, foo}
2016-07-04 20:30:54,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-04 20:30:54.233, foo, 2016-07-04 20:30:54.233, foo}
2016-07-04 20:30:54,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-04 20:30:54.236, foo, 2016-07-04 20:30:54.236, foo}
2016-07-04 20:30:54,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-04 20:30:54.238, foo, 2016-07-04 20:30:54.238, foo}
2016-07-04 20:30:54,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-04 20:30:54.239, foo, 2016-07-04 20:30:54.239, foo}
2016-07-04 20:30:54,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-04 20:30:54.241, foo, 2016-07-04 20:30:54.241, foo}
2016-07-04 20:30:54,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-04 20:30:54.241, foo, 2016-07-04 20:30:54.241, foo}
2016-07-04 20:30:54,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-04 20:30:54.242, foo, 2016-07-04 20:30:54.242, foo}
2016-07-04 20:30:54,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-04 20:30:54.243, foo, 2016-07-04 20:30:54.243, foo}
2016-07-04 20:30:54,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-04 20:30:54.245, foo, 2016-07-04 20:30:54.245, foo}
2016-07-04 20:30:54,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-04 20:30:54.247, foo, 2016-07-04 20:30:54.247, foo}
2016-07-04 20:30:54,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-04 20:30:54.248, foo, 2016-07-04 20:30:54.248, foo}
2016-07-04 20:30:54,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-04 20:30:54.25, foo, 2016-07-04 20:30:54.25, foo}
2016-07-04 20:30:54,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-04 20:30:54.251, foo, 2016-07-04 20:30:54.251, foo}
2016-07-04 20:30:54,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-04 20:30:54.252, foo, 2016-07-04 20:30:54.252, foo}
2016-07-04 20:30:54,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-04 20:30:54.253, foo, 2016-07-04 20:30:54.253, foo}
2016-07-04 20:30:54,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-04 20:30:54.254, foo, 2016-07-04 20:30:54.254, foo}
2016-07-04 20:30:54,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:30:54.255, foo, 2016-07-04 20:30:54.255, foo}
2016-07-04 20:30:54,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-04 20:30:54.256, foo, 2016-07-04 20:30:54.256, foo}
2016-07-04 20:30:54,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-04 20:30:54.257, foo, 2016-07-04 20:30:54.257, foo}
2016-07-04 20:30:54,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-04 20:30:54.258, foo, 2016-07-04 20:30:54.258, foo}
2016-07-04 20:30:54,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:30:54.259, foo, 2016-07-04 20:30:54.269, foo}
2016-07-04 20:30:54,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:30:54.28, foo, 2016-07-04 20:30:54.28, foo}
2016-07-04 20:30:54,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 20:30:54.282, foo, 2016-07-04 20:30:54.282, foo}
2016-07-04 20:30:54,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-04 20:30:54.284, foo, 2016-07-04 20:30:54.284, foo}
2016-07-04 20:30:54,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-04 20:30:54.285, foo, 2016-07-04 20:30:54.285, foo}
2016-07-04 20:30:54,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-04 20:30:54.287, foo, 2016-07-04 20:30:54.287, foo}
2016-07-04 20:30:54,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-04 20:30:54.288, foo, 2016-07-04 20:30:54.288, foo}
2016-07-04 20:30:54,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-04 20:30:54.288, foo, 2016-07-04 20:30:54.288, foo}
2016-07-04 20:30:54,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-04 20:30:54.289, foo, 2016-07-04 20:30:54.289, foo}
2016-07-04 20:30:54,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-04 20:30:54.29, foo, 2016-07-04 20:30:54.29, foo}
2016-07-04 20:30:54,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-04 20:30:54.291, foo, 2016-07-04 20:30:54.291, foo}
2016-07-04 20:30:54,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-04 20:30:54.295, foo, 2016-07-04 20:30:54.295, foo}
2016-07-04 20:30:54,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-04 20:30:54.296, foo, 2016-07-04 20:30:54.296, foo}
2016-07-04 20:30:54,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-04 20:30:54.297, foo, 2016-07-04 20:30:54.297, foo}
2016-07-04 20:30:54,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-04 20:30:54.298, foo, 2016-07-04 20:30:54.298, foo}
2016-07-04 20:30:54,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-04 20:30:54.299, foo, 2016-07-04 20:30:54.299, foo}
2016-07-04 20:30:54,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-04 20:30:54.3, foo, 2016-07-04 20:30:54.3, foo}
2016-07-04 20:30:54,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-04 20:30:54.301, foo, 2016-07-04 20:30:54.301, foo}
2016-07-04 20:30:54,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-04 20:30:54.302, foo, 2016-07-04 20:30:54.302, foo}
2016-07-04 20:30:54,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-04 20:30:54.302, foo, 2016-07-04 20:30:54.302, foo}
2016-07-04 20:30:54,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-04 20:30:54.303, foo, 2016-07-04 20:30:54.303, foo}
2016-07-04 20:30:54,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-04 20:30:54.304, foo, 2016-07-04 20:30:54.304, foo}
2016-07-04 20:30:54,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-04 20:30:54.305, foo, 2016-07-04 20:30:54.305, foo}
2016-07-04 20:30:54,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-04 20:30:54.306, foo, 2016-07-04 20:30:54.306, foo}
2016-07-04 20:30:54,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-04 20:30:54.307, foo, 2016-07-04 20:30:54.307, foo}
2016-07-04 20:30:54,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-04 20:30:54.308, foo, 2016-07-04 20:30:54.308, foo}
2016-07-04 20:30:54,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-04 20:30:54.309, foo, 2016-07-04 20:30:54.309, foo}
2016-07-04 20:30:54,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-04 20:30:54.311, foo, 2016-07-04 20:30:54.311, foo}
2016-07-04 20:30:54,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-04 20:30:54.312, foo, 2016-07-04 20:30:54.312, foo}
2016-07-04 20:30:54,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 20:30:54.313, foo, 2016-07-04 20:30:54.313, foo}
2016-07-04 20:30:54,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-04 20:30:54.314, foo, 2016-07-04 20:30:54.314, foo}
2016-07-04 20:30:54,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-04 20:30:54.315, foo, 2016-07-04 20:30:54.315, foo}
2016-07-04 20:30:54,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-04 20:30:54.316, foo, 2016-07-04 20:30:54.316, foo}
2016-07-04 20:30:54,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-04 20:30:54.317, foo, 2016-07-04 20:30:54.317, foo}
2016-07-04 20:30:54,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-04 20:30:54.318, foo, 2016-07-04 20:30:54.318, foo}
2016-07-04 20:30:54,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:30:54.321, foo, 2016-07-04 20:30:54.321, foo}
2016-07-04 20:30:54,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-04 20:30:54.325, foo, 2016-07-04 20:30:54.325, foo}
2016-07-04 20:30:54,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-04 20:30:54.326, foo, 2016-07-04 20:30:54.326, foo}
2016-07-04 20:30:54,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-04 20:30:54.328, foo, 2016-07-04 20:30:54.328, foo}
2016-07-04 20:30:54,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-04 20:30:54.33, foo, 2016-07-04 20:30:54.33, foo}
2016-07-04 20:30:54,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-04 20:30:54.331, foo, 2016-07-04 20:30:54.331, foo}
2016-07-04 20:30:54,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-04 20:30:54.332, foo, 2016-07-04 20:30:54.332, foo}
2016-07-04 20:30:54,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-04 20:30:54.334, foo, 2016-07-04 20:30:54.334, foo}
2016-07-04 20:30:54,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-04 20:30:54.334, foo, 2016-07-04 20:30:54.334, foo}
2016-07-04 20:30:54,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-04 20:30:54.335, foo, 2016-07-04 20:30:54.335, foo}
2016-07-04 20:30:54,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-04 20:30:54.336, foo, 2016-07-04 20:30:54.336, foo}
2016-07-04 20:30:54,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-04 20:30:54.338, foo, 2016-07-04 20:30:54.338, foo}
2016-07-04 20:30:54,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-04 20:30:54.339, foo, 2016-07-04 20:30:54.339, foo}
2016-07-04 20:30:54,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-04 20:30:54.34, foo, 2016-07-04 20:30:54.34, foo}
2016-07-04 20:30:54,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-04 20:30:54.341, foo, 2016-07-04 20:30:54.341, foo}
2016-07-04 20:30:54,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-04 20:30:54.342, foo, 2016-07-04 20:30:54.342, foo}
2016-07-04 20:30:54,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-04 20:30:54.343, foo, 2016-07-04 20:30:54.343, foo}
2016-07-04 20:30:54,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-04 20:30:54.344, foo, 2016-07-04 20:30:54.344, foo}
2016-07-04 20:30:54,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:30:54.345, foo, 2016-07-04 20:30:54.345, foo}
2016-07-04 20:30:54,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:30:54.346, foo, 2016-07-04 20:30:54.346, foo}
2016-07-04 20:30:54,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:30:54.348, foo, 2016-07-04 20:30:54.348, foo}
2016-07-04 20:30:54,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 20:30:54.349, foo, 2016-07-04 20:30:54.349, foo}
2016-07-04 20:30:54,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-04 20:30:54.35, foo, 2016-07-04 20:30:54.35, foo}
2016-07-04 20:30:54,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-04 20:30:54.351, foo, 2016-07-04 20:30:54.351, foo}
2016-07-04 20:30:54,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-04 20:30:54.351, foo, 2016-07-04 20:30:54.351, foo}
2016-07-04 20:30:54,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-04 20:30:54.352, foo, 2016-07-04 20:30:54.352, foo}
2016-07-04 20:30:54,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-04 20:30:54.353, foo, 2016-07-04 20:30:54.353, foo}
2016-07-04 20:30:54,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-04 20:30:54.353, foo, 2016-07-04 20:30:54.353, foo}
2016-07-04 20:30:54,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-04 20:30:54.354, foo, 2016-07-04 20:30:54.354, foo}
2016-07-04 20:30:54,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-04 20:30:54.355, foo, 2016-07-04 20:30:54.355, foo}
2016-07-04 20:30:54,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-04 20:30:54.356, foo, 2016-07-04 20:30:54.356, foo}
2016-07-04 20:30:54,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-04 20:30:54.358, foo, 2016-07-04 20:30:54.358, foo}
2016-07-04 20:30:54,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-04 20:30:54.359, foo, 2016-07-04 20:30:54.359, foo}
2016-07-04 20:30:54,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-04 20:30:54.361, foo, 2016-07-04 20:30:54.361, foo}
2016-07-04 20:30:54,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-04 20:30:54.362, foo, 2016-07-04 20:30:54.362, foo}
2016-07-04 20:30:54,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-04 20:30:54.363, foo, 2016-07-04 20:30:54.363, foo}
2016-07-04 20:30:54,442 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-04 20:30:54,443 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-04 20:30:54,464 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:30:54,474 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:30:54,483 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:30:54,486 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:30:54,489 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:30:54,492 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:30:54,495 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:30:54,505 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:30:54,508 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 20:30:54,512 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-04 20:30:54,516 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-04 20:30:54,518 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-04 20:30:54,524 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-04 20:30:54,524 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-04 20:30:54,525 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-04 20:30:54,525 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-04 20:30:54,525 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-04 20:30:54,525 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-04 20:30:54,535 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-04 20:30:54,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-04 20:30:54,541 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-04 20:30:54,543 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-04 20:30:54,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-04 20:30:54,546 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-04 20:30:54,546 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-04 20:30:54,547 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:30:54,553 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s798ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-04 20:30:55,443 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:30:55,446 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:30:55,446 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:30:55,446 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:30:55,447 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:30:55,479 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:30:55,479 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:30:55,479 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:30:55,480 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:30:55,536 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:30:55,537 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:30:55,537 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:30:55,551 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:30:55,711 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:30:55,715 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:30:56,223 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:30:56,223 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:30:56,225 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:30:56,227 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:30:56,227 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:30:56,228 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:30:56,248 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:30:56,252 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:30:56,282 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:30:56,283 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:30:56,283 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:30:56,284 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:30:56,341 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:30:56,358 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:30:56,371 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:30:56,385 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:30:56,399 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:30:56,408 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:30:56,426 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:30:56,441 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:30:56,451 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:30:56,461 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:30:56,475 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:30:56,486 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:30:56,495 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:30:56,503 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:30:56,512 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:30:56,513 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:30:56,513 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:30:56,513 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:30:56,513 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:30:56,515 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:30:56,518 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:30:56,519 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:30:56,519 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:30:56,559 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:30:56,562 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:30:56,630 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:30:56,631 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:30:56,639 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s210ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:30:57,560 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:30:57,563 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:30:57,564 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:30:57,565 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:30:57,565 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:30:57,598 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:30:57,599 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:30:57,600 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:30:57,600 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:30:57,603 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:30:57,603 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:30:57,604 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:30:57,604 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:30:57,604 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:30:57,605 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:30:57,658 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:30:57,785 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:30:57,976 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:30:57,985 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:30:57,986 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:30:57,987 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:30:57,989 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:30:57,989 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:30:57,991 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:30:57,993 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:30:57,994 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:30:57,996 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:30:58,002 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:30:58,002 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:30:58,003 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:30:58,003 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:30:58,004 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:30:58,004 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:30:58,004 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:30:58,005 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:30:58,020 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:30:58,365 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:30:58,368 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:30:58,372 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:30:58,375 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:30:58,378 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:30:58,381 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:30:58,388 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:30:58,389 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:30:58,817 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:30:58,817 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:30:58,824 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:30:58,836 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:30:58,837 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:30:58,903 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:30:58,909 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:30:58,910 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:30:58,910 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:30:58,910 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:30:58,911 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:30:58,925 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:30:58,957 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:30:58,961 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s419ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:31:01,631 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:31:01,635 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:31:01,636 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:31:01,636 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:31:01,636 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:31:01,660 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:01,660 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:01,661 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:01,661 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:01,674 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:31:01,675 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:31:01,709 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:01,784 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:31:02,032 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:31:02,037 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:31:02,037 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:31:02,038 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:31:02,039 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:31:02,040 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:31:02,042 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:31:02,044 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:31:02,045 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:31:02,047 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:31:02,056 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:02,057 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:31:02,057 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:31:02,057 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:31:02,058 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:02,058 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:31:02,058 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:31:02,059 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:31:02,067 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:02,388 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:31:02,391 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:31:02,394 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:31:02,396 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:31:02,401 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:31:02,403 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:31:02,413 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:31:02,413 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:31:02,414 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:31:02,414 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:31:02,414 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:31:02,415 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:31:02,415 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:31:02,415 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:31:02,415 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:31:02,416 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:31:02,433 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:31:02,435 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:31:02,490 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:31:02,493 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:31:02,514 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:31:02,521 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:31:02,538 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:31:02,561 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:31:02,568 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:31:02,576 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:31:02,585 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:31:02,589 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:02,589 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:31:02,590 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:31:02,611 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:02,617 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:31:02,663 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:31:02,664 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:31:02,665 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:31:03,174 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:31:03,448 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:31:03,658 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:31:03,832 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:31:04,030 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:31:04,234 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:31:04,413 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:31:04,638 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:31:04,807 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:31:04,947 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:31:05,156 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:31:05,302 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:31:05,418 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:31:05,554 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:31:05,689 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:05,689 [main] INFO  (Database#info():2711) -  
2016-07-04 20:31:05,742 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:31:05,752 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s130ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:31:06,613 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:31:06,615 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:31:06,616 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:31:06,616 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:31:06,616 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:31:06,640 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:06,641 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:06,641 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:06,641 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:06,681 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:31:06,687 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:07,031 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:07,031 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:07,062 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:31:07,069 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:07,073 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:31:07,077 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:31:07,084 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:07,084 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:31:07,086 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:31:07,092 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:07,094 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:31:07,096 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-04 20:31:07,102 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:07,103 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:31:07,103 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:07,112 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s509ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:31:07,863 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:31:07,866 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:31:07,867 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:31:07,867 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:31:07,867 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:31:07,885 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:07,885 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:07,885 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:07,886 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:07,897 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:31:07,898 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:31:07,906 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:08,005 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:31:08,012 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:08,326 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:08,326 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:08,329 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:31:08,385 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:08,386 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:31:08,387 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:31:08,396 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:08,396 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:31:08,397 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:31:08,404 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:08,404 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:31:08,405 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-04 20:31:08,414 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:08,415 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:31:08,427 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:31:08,428 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:31:08,480 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:31:08,485 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:31:08,486 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:31:08,486 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:31:08,486 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:31:08,487 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:31:08,512 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:31:08,537 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:31:08,546 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:31:08,546 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:31:08,547 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:31:08,549 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:31:08,549 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:31:08,550 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:31:08,551 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:31:08,551 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:31:08,552 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:31:08,553 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:31:08,553 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:31:08,553 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:31:08,578 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:31:08,578 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:31:08,578 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:31:08,579 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:31:08,579 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:31:08,594 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:31:08,594 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:31:08,595 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:31:08,595 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:31:08,596 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:31:08,602 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:31:08,774 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:08,782 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:31:08,785 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:31:08,787 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:31:08,789 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:31:08,791 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:31:08,793 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:31:08,804 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:31:08,807 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:31:08,832 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:31:08,833 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:31:08,958 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:31:09,015 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:31:09,027 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:31:09,080 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:31:09,160 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:31:09,211 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:31:09,269 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:31:09,270 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:09,273 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:31:09,276 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:31:09,312 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:31:09,336 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:31:09,352 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:31:09,372 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:31:09,391 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:31:09,402 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:09,437 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:31:09,448 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:31:09,457 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:09,463 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s616ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 20:31:17,440 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 20:31:17,446 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 20:31:17,447 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 20:31:17,448 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 20:31:17,448 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 20:31:17,492 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:17,493 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:17,494 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:17,495 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:17,544 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 20:31:17,544 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 20:31:17,545 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 20:31:17,559 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:17,702 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 20:31:17,709 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:18,235 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:18,237 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:18,239 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 20:31:18,241 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 20:31:18,242 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:18,242 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 20:31:18,264 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 20:31:18,268 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 20:31:18,303 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 20:31:18,304 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:31:18,304 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 20:31:18,305 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 20:31:18,377 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 20:31:18,397 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 20:31:18,416 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 20:31:18,433 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 20:31:18,449 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 20:31:18,461 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 20:31:18,477 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 20:31:18,494 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 20:31:18,510 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 20:31:18,520 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 20:31:18,546 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 20:31:18,562 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 20:31:18,577 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 20:31:18,590 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 20:31:18,604 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 20:31:18,605 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 20:31:18,605 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 20:31:18,605 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 20:31:18,606 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 20:31:18,607 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 20:31:18,613 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 20:31:18,613 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 20:31:18,614 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 20:31:18,663 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 20:31:18,666 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:18,760 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 20:31:18,760 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:18,774 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s352ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 20:31:19,738 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 20:31:19,742 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 20:31:19,742 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 20:31:19,743 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 20:31:19,743 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 20:31:19,771 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:19,771 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:19,772 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:19,772 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:19,776 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 20:31:19,777 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 20:31:19,777 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 20:31:19,777 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 20:31:19,778 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 20:31:19,778 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 20:31:19,831 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:19,956 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 20:31:20,121 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 20:31:20,129 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:31:20,130 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:31:20,131 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:31:20,133 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:31:20,133 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:31:20,135 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:31:20,137 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:31:20,138 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:31:20,141 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:31:20,146 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:20,146 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:31:20,147 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:31:20,147 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:31:20,148 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:20,148 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:31:20,148 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:31:20,149 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:31:20,161 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:20,508 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:31:20,514 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:31:20,517 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:31:20,521 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:31:20,527 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:31:20,530 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:31:20,538 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 20:31:20,539 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 20:31:21,001 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 20:31:21,001 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 20:31:21,009 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:21,023 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:21,023 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:21,124 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:31:21,130 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:31:21,132 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:31:21,132 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:31:21,133 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:31:21,134 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:31:21,146 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:31:21,161 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:21,166 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s452ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 20:31:24,266 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 20:31:24,271 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 20:31:24,271 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 20:31:24,272 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 20:31:24,273 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 20:31:24,313 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:24,314 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:24,314 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:24,315 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:24,345 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 20:31:24,346 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 20:31:24,394 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:24,485 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 20:31:24,777 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 20:31:24,783 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 20:31:24,783 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 20:31:24,785 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 20:31:24,787 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 20:31:24,787 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 20:31:24,789 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 20:31:24,792 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 20:31:24,792 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 20:31:24,795 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 20:31:24,810 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:24,811 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 20:31:24,812 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 20:31:24,812 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 20:31:24,813 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 20:31:24,813 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 20:31:24,814 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 20:31:24,814 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 20:31:24,828 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:25,164 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:31:25,167 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:31:25,170 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:31:25,172 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:31:25,177 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:31:25,180 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:31:25,191 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 20:31:25,191 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 20:31:25,192 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 20:31:25,192 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 20:31:25,193 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 20:31:25,193 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 20:31:25,193 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 20:31:25,194 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 20:31:25,194 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 20:31:25,194 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 20:31:25,208 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 20:31:25,210 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 20:31:25,265 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 20:31:25,270 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 20:31:25,288 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 20:31:25,293 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 20:31:25,315 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 20:31:25,335 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 20:31:25,343 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 20:31:25,351 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 20:31:25,363 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 20:31:25,367 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:25,367 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 20:31:25,368 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 20:31:25,386 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:25,394 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 20:31:25,448 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:31:25,449 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 20:31:25,450 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 20:31:25,998 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 20:31:26,278 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 20:31:26,485 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 20:31:26,674 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 20:31:26,891 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 20:31:27,074 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 20:31:27,263 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 20:31:27,496 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 20:31:27,665 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 20:31:27,818 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 20:31:28,031 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 20:31:28,176 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 20:31:28,303 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 20:31:28,443 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 20:31:28,577 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:28,578 [main] INFO  (Database#info():2711) -  
2016-07-04 20:31:28,626 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:31:28,639 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s396ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 20:31:29,656 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 20:31:29,658 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 20:31:29,658 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 20:31:29,661 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 20:31:29,662 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 20:31:29,689 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:29,689 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:29,689 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:29,690 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:29,719 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:31:29,725 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:30,052 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:30,053 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:30,081 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:31:30,086 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:30,086 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:31:30,089 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:31:30,094 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:30,094 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:31:30,098 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:31:30,103 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:30,103 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:31:30,105 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-04 20:31:30,111 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 20:31:30,112 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:31:30,112 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:30,119 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s475ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 20:31:30,912 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 20:31:30,916 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 20:31:30,917 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 20:31:30,917 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 20:31:30,917 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 20:31:30,937 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 20:31:30,938 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 20:31:30,938 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 20:31:30,938 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 20:31:30,958 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 20:31:30,959 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 20:31:30,966 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 20:31:31,161 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 20:31:31,169 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 20:31:31,546 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 20:31:31,546 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 20:31:31,549 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 20:31:31,615 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:31,615 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 20:31:31,616 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 20:31:31,624 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:31,624 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 20:31:31,626 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 20:31:31,634 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:31,634 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 20:31:31,635 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-04 20:31:31,645 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 20:31:31,645 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 20:31:31,651 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 20:31:31,651 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 20:31:31,703 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 20:31:31,707 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 20:31:31,709 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 20:31:31,710 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 20:31:31,710 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 20:31:31,710 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 20:31:31,740 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 20:31:31,769 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 20:31:31,779 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 20:31:31,779 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 20:31:31,780 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 20:31:31,781 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 20:31:31,781 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 20:31:31,781 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 20:31:31,782 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 20:31:31,783 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 20:31:31,783 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 20:31:31,784 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 20:31:31,784 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 20:31:31,784 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 20:31:31,811 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 20:31:31,811 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 20:31:31,811 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 20:31:31,812 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 20:31:31,812 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 20:31:31,823 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 20:31:31,824 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 20:31:31,825 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 20:31:31,825 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 20:31:31,825 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 20:31:31,830 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 20:31:32,004 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 20:31:32,011 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 20:31:32,014 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 20:31:32,016 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 20:31:32,019 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 20:31:32,021 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 20:31:32,023 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 20:31:32,033 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 20:31:32,037 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 20:31:32,056 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 20:31:32,056 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 20:31:32,201 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 20:31:32,262 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 20:31:32,278 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 20:31:32,350 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 20:31:32,410 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 20:31:32,459 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 20:31:32,506 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 20:31:32,507 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:32,509 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 20:31:32,515 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 20:31:32,546 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 20:31:32,569 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 20:31:32,591 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 20:31:32,609 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 20:31:32,634 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 20:31:32,649 [main] INFO  (Database#info():2711) - }
2016-07-04 20:31:32,684 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 20:31:32,694 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 20:31:32,698 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 20:31:32,704 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s809ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 23:45:36,840 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-04 23:45:36,846 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-04 23:45:36,847 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-04 23:45:36,853 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-04 23:45:36,853 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-04 23:45:36,855 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-04 23:45:39,097 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:39,098 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:39,099 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:39,099 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:39,112 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:45:39,562 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:45:39,563 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:45:39,587 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-04 23:45:39,588 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-04 23:45:39,589 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-04 23:45:39,591 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-04 23:45:39,591 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-04 23:45:39,592 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-04 23:45:39,619 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 23:45:39,620 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:39,621 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 23:45:39,680 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-04 23:45:39,688 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-04 23:45:39,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-04 23:45:39,701 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-04 23:45:39,710 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-04 23:45:39,738 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-04 23:45:39,766 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-04 23:45:39,794 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-04 23:45:39,807 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-04 23:45:39,830 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-04 23:45:39,847 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-04 23:45:39,874 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-04 23:45:39,889 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-04 23:45:39,907 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-04 23:45:39,932 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-04 23:45:39,948 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-04 23:45:39,974 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-04 23:45:39,987 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-04 23:45:40,011 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-04 23:45:40,031 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-04 23:45:40,048 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-04 23:45:40,073 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-04 23:45:40,092 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-04 23:45:40,096 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-04 23:45:40,101 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-04 23:45:40,105 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-04 23:45:40,108 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-04 23:45:40,111 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-04 23:45:40,115 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-04 23:45:40,122 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-04 23:45:40,126 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-04 23:45:40,130 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-04 23:45:40,135 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-04 23:45:40,138 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-04 23:45:40,142 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-04 23:45:40,145 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-04 23:45:40,150 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-04 23:45:40,285 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-04 23:45:40,293 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-04 23:45:40,296 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-04 23:45:40,296 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-04 23:45:40,296 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-04 23:45:40,297 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-04 23:45:40,297 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-04 23:45:40,297 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-04 23:45:40,302 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-04 23:45:40,305 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-04 23:45:40,306 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-04 23:45:40,307 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-04 23:45:40,316 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-04 23:45:40,316 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-04 23:45:40,317 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-04 23:45:40,318 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-04 23:45:40,322 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-04 23:45:40,326 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 23:45:40,327 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-04 23:45:40,327 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-04 23:45:40,328 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-04 23:45:40,328 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-04 23:45:40,338 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-04 23:45:40,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-04 23:45:40,367 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-04 23:45:40,377 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-04 23:45:40,400 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-04 23:45:40,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-04 23:45:40,422 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-04 23:45:40,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-04 23:45:40,449 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-04 23:45:40,468 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-04 23:45:40,478 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-04 23:45:40,490 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-04 23:45:40,500 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-04 23:45:40,513 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-04 23:45:40,525 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-04 23:45:40,537 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 23:45:40,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-04 23:45:40,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-04 23:45:40,628 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,647 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,668 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-04 23:45:40,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,716 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,737 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-04 23:45:40,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-04 23:45:40,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-04 23:45:40,812 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-04 23:45:40,837 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 23:45:40,859 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-04 23:45:40,883 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-04 23:45:40,909 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-04 23:45:40,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-04 23:45:40,955 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-04 23:45:40,972 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-04 23:45:40,992 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-04 23:45:41,012 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-04 23:45:41,022 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-04 23:45:41,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-04 23:45:41,062 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-04 23:45:41,084 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-04 23:45:41,084 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-04 23:45:41,086 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-04 23:45:41,088 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-04 23:45:41,091 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-04 23:45:41,091 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-04 23:45:41,092 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-04 23:45:41,213 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-04 23:45:41,214 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-04 23:45:41,214 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-04 23:45:41,214 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-04 23:45:41,215 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-04 23:45:41,215 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-04 23:45:41,244 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 23:45:41,245 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-04 23:45:41,245 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 23:45:41,552 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 23:45:41,552 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:41,552 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 23:45:41,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-04 23:45:41,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-04 23:45:41,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-04 23:45:41,651 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-04 23:45:41,663 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-04 23:45:41,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-04 23:45:41,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-04 23:45:41,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-04 23:45:41,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-04 23:45:41,678 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-04 23:45:41,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-04 23:45:41,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-04 23:45:41,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-04 23:45:41,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-04 23:45:41,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-04 23:45:41,695 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-04 23:45:41,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-04 23:45:41,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-04 23:45:41,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-04 23:45:41,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-04 23:45:41,715 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-04 23:45:41,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-04 23:45:41,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-04 23:45:41,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-04 23:45:41,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-04 23:45:41,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-04 23:45:41,727 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-04 23:45:41,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-04 23:45:41,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-04 23:45:41,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-04 23:45:41,732 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-04 23:45:41,734 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 23:45:41,734 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-04 23:45:41,735 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 23:45:41,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-04 23:45:41.809, foo, 2016-07-04 23:45:41.809, foo, 0}
2016-07-04 23:45:41,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-04 23:45:41.816, foo, 2016-07-04 23:45:41.816, foo, 0}
2016-07-04 23:45:41,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-04 23:45:41.818, foo, 2016-07-04 23:45:41.818, foo, 0}
2016-07-04 23:45:41,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-04 23:45:41.82, foo, 2016-07-04 23:45:41.82, foo, 0}
2016-07-04 23:45:41,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-04 23:45:41.823, foo, 2016-07-04 23:45:41.823, foo, 0}
2016-07-04 23:45:41,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-04 23:45:41.825, foo, 2016-07-04 23:45:41.825, foo, 0}
2016-07-04 23:45:41,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-04 23:45:41.827, foo, 2016-07-04 23:45:41.827, foo, 0}
2016-07-04 23:45:41,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-04 23:45:41.829, foo, 2016-07-04 23:45:41.829, foo, 0}
2016-07-04 23:45:41,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-04 23:45:41.83, foo, 2016-07-04 23:45:41.83, foo, 0}
2016-07-04 23:45:41,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-04 23:45:41.831, foo, 2016-07-04 23:45:41.831, foo, 0}
2016-07-04 23:45:41,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-04 23:45:41.832, foo, 2016-07-04 23:45:41.832, foo, 0}
2016-07-04 23:45:41,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-04 23:45:41.833, foo, 2016-07-04 23:45:41.833, foo, 0}
2016-07-04 23:45:41,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-04 23:45:41.834, foo, 2016-07-04 23:45:41.834, foo, 0}
2016-07-04 23:45:41,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-04 23:45:41.837, foo, 2016-07-04 23:45:41.837, foo, 0}
2016-07-04 23:45:41,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-04 23:45:41.838, foo, 2016-07-04 23:45:41.838, foo, 0}
2016-07-04 23:45:41,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-04 23:45:41.84, foo, 2016-07-04 23:45:41.84, foo, 0}
2016-07-04 23:45:41,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-04 23:45:41.841, foo, 2016-07-04 23:45:41.841, foo, 0}
2016-07-04 23:45:41,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-04 23:45:41.843, foo, 2016-07-04 23:45:41.843, foo, 0}
2016-07-04 23:45:41,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-04 23:45:41.845, foo, 2016-07-04 23:45:41.845, foo, 0}
2016-07-04 23:45:41,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-04 23:45:41.848, foo, 2016-07-04 23:45:41.848, foo, 0}
2016-07-04 23:45:41,871 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-04 23:45:41,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-04 23:45:41.872, foo, 2016-07-04 23:45:41.872, foo, 0}
2016-07-04 23:45:41,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-04 23:45:41.875, foo, 2016-07-04 23:45:41.876, foo, 0}
2016-07-04 23:45:41,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-04 23:45:41.877, foo, 2016-07-04 23:45:41.877, foo, 0}
2016-07-04 23:45:41,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-04 23:45:41.879, foo, 2016-07-04 23:45:41.879, foo, 0}
2016-07-04 23:45:41,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-04 23:45:41.884, foo, 2016-07-04 23:45:41.884, foo, 0}
2016-07-04 23:45:41,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-04 23:45:41.888, foo, 2016-07-04 23:45:41.888, foo, 0}
2016-07-04 23:45:41,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-04 23:45:41.891, foo, 2016-07-04 23:45:41.891, foo, 0}
2016-07-04 23:45:41,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-04 23:45:41.894, foo, 2016-07-04 23:45:41.894, foo, 0}
2016-07-04 23:45:41,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-04 23:45:41.896, foo, 2016-07-04 23:45:41.896, foo, 0}
2016-07-04 23:45:41,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-04 23:45:41.898, foo, 2016-07-04 23:45:41.898, foo, 0}
2016-07-04 23:45:41,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-04 23:45:41.901, foo, 2016-07-04 23:45:41.901, foo, 0}
2016-07-04 23:45:41,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-04 23:45:41.905, foo, 2016-07-04 23:45:41.905, foo, 0}
2016-07-04 23:45:41,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-04 23:45:41.908, foo, 2016-07-04 23:45:41.908, foo, 0}
2016-07-04 23:45:41,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-04 23:45:41.914, foo, 2016-07-04 23:45:41.914, foo, 0}
2016-07-04 23:45:41,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-04 23:45:41.918, foo, 2016-07-04 23:45:41.918, foo, 0}
2016-07-04 23:45:41,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-04 23:45:41.923, foo, 2016-07-04 23:45:41.923, foo, 0}
2016-07-04 23:45:41,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-04 23:45:41.926, foo, 2016-07-04 23:45:41.926, foo, 0}
2016-07-04 23:45:41,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-04 23:45:41.929, foo, 2016-07-04 23:45:41.929, foo, 0}
2016-07-04 23:45:41,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-04 23:45:41.931, foo, 2016-07-04 23:45:41.931, foo, 0}
2016-07-04 23:45:41,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-04 23:45:41.934, foo, 2016-07-04 23:45:41.934, foo, 0}
2016-07-04 23:45:41,954 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-04 23:45:41,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-04 23:45:41,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-04 23:45:41,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-04 23:45:41,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-04 23:45:41,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-04 23:45:41,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-04 23:45:41,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-04 23:45:41,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-04 23:45:41,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-04 23:45:41,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-04 23:45:41,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-04 23:45:41,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-04 23:45:41,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-04 23:45:41,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-04 23:45:41,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-04 23:45:41,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-04 23:45:41,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-04 23:45:41,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-04 23:45:41,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-04 23:45:41,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-04 23:45:41,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-04 23:45:41,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-04 23:45:41,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-04 23:45:41,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-04 23:45:41,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-04 23:45:41,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-04 23:45:41,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-04 23:45:41,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-04 23:45:41,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-04 23:45:41,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-04 23:45:41,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-04 23:45:41,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-04 23:45:41,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-04 23:45:41,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-04 23:45:41,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-04 23:45:41,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-04 23:45:41,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-04 23:45:41,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-04 23:45:41,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-04 23:45:41,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-04 23:45:41,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-04 23:45:41,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-04 23:45:41,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-04 23:45:42,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-04 23:45:42,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-04 23:45:42,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-04 23:45:42,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-04 23:45:42,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-04 23:45:42,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-04 23:45:42,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-04 23:45:42,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-04 23:45:42,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-04 23:45:42,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-04 23:45:42,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-04 23:45:42,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-04 23:45:42,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-04 23:45:42,052 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-04 23:45:42,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-04 23:45:42.053, foo, 2016-07-04 23:45:42.053, foo, 0}
2016-07-04 23:45:42,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-04 23:45:42.055, foo, 2016-07-04 23:45:42.055, foo, 0}
2016-07-04 23:45:42,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-04 23:45:42.055, foo, 2016-07-04 23:45:42.055, foo, 0}
2016-07-04 23:45:42,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-04 23:45:42.056, foo, 2016-07-04 23:45:42.056, foo, 0}
2016-07-04 23:45:42,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-04 23:45:42.057, foo, 2016-07-04 23:45:42.057, foo, 0}
2016-07-04 23:45:42,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-04 23:45:42.058, foo, 2016-07-04 23:45:42.058, foo, 0}
2016-07-04 23:45:42,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-04 23:45:42.058, foo, 2016-07-04 23:45:42.058, foo, 0}
2016-07-04 23:45:42,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-04 23:45:42.059, foo, 2016-07-04 23:45:42.059, foo, 0}
2016-07-04 23:45:42,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-04 23:45:42.06, foo, 2016-07-04 23:45:42.06, foo, 0}
2016-07-04 23:45:42,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-04 23:45:42.062, foo, 2016-07-04 23:45:42.062, foo, 0}
2016-07-04 23:45:42,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-04 23:45:42.063, foo, 2016-07-04 23:45:42.063, foo, 0}
2016-07-04 23:45:42,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-04 23:45:42.064, foo, 2016-07-04 23:45:42.064, foo, 0}
2016-07-04 23:45:42,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-04 23:45:42.065, foo, 2016-07-04 23:45:42.065, foo, 0}
2016-07-04 23:45:42,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-04 23:45:42.066, foo, 2016-07-04 23:45:42.066, foo, 0}
2016-07-04 23:45:42,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-04 23:45:42.066, foo, 2016-07-04 23:45:42.066, foo, 0}
2016-07-04 23:45:42,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-04 23:45:42.067, foo, 2016-07-04 23:45:42.067, foo, 0}
2016-07-04 23:45:42,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-04 23:45:42.068, foo, 2016-07-04 23:45:42.068, foo, 0}
2016-07-04 23:45:42,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-04 23:45:42.069, foo, 2016-07-04 23:45:42.069, foo, 0}
2016-07-04 23:45:42,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-04 23:45:42.07, foo, 2016-07-04 23:45:42.07, foo, 0}
2016-07-04 23:45:42,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-04 23:45:42.071, foo, 2016-07-04 23:45:42.071, foo, 0}
2016-07-04 23:45:42,092 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-04 23:45:42,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-04 23:45:42.093, foo, 2016-07-04 23:45:42.093, foo, 0}
2016-07-04 23:45:42,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-04 23:45:42.094, foo, 2016-07-04 23:45:42.094, foo, 0}
2016-07-04 23:45:42,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-04 23:45:42.094, foo, 2016-07-04 23:45:42.094, foo, 0}
2016-07-04 23:45:42,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-04 23:45:42.095, foo, 2016-07-04 23:45:42.095, foo, 0}
2016-07-04 23:45:42,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-04 23:45:42.097, foo, 2016-07-04 23:45:42.097, foo, 0}
2016-07-04 23:45:42,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-04 23:45:42.099, foo, 2016-07-04 23:45:42.099, foo, 0}
2016-07-04 23:45:42,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-04 23:45:42.1, foo, 2016-07-04 23:45:42.1, foo, 0}
2016-07-04 23:45:42,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-04 23:45:42.101, foo, 2016-07-04 23:45:42.101, foo, 0}
2016-07-04 23:45:42,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-04 23:45:42.103, foo, 2016-07-04 23:45:42.103, foo, 0}
2016-07-04 23:45:42,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-04 23:45:42.104, foo, 2016-07-04 23:45:42.104, foo, 0}
2016-07-04 23:45:42,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-04 23:45:42.105, foo, 2016-07-04 23:45:42.105, foo, 0}
2016-07-04 23:45:42,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-04 23:45:42.105, foo, 2016-07-04 23:45:42.105, foo, 0}
2016-07-04 23:45:42,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-04 23:45:42.106, foo, 2016-07-04 23:45:42.106, foo, 0}
2016-07-04 23:45:42,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-04 23:45:42.107, foo, 2016-07-04 23:45:42.107, foo, 0}
2016-07-04 23:45:42,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-04 23:45:42.108, foo, 2016-07-04 23:45:42.108, foo, 0}
2016-07-04 23:45:42,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-04 23:45:42.108, foo, 2016-07-04 23:45:42.108, foo, 0}
2016-07-04 23:45:42,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-04 23:45:42.109, foo, 2016-07-04 23:45:42.109, foo, 0}
2016-07-04 23:45:42,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-04 23:45:42.11, foo, 2016-07-04 23:45:42.11, foo, 0}
2016-07-04 23:45:42,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-04 23:45:42.111, foo, 2016-07-04 23:45:42.111, foo, 0}
2016-07-04 23:45:42,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-04 23:45:42.112, foo, 2016-07-04 23:45:42.112, foo, 0}
2016-07-04 23:45:42,129 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-04 23:45:42,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-04 23:45:42.13, foo, 2016-07-04 23:45:42.13, foo}
2016-07-04 23:45:42,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-04 23:45:42.131, foo, 2016-07-04 23:45:42.131, foo}
2016-07-04 23:45:42,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-04 23:45:42.132, foo, 2016-07-04 23:45:42.132, foo}
2016-07-04 23:45:42,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-04 23:45:42.133, foo, 2016-07-04 23:45:42.133, foo}
2016-07-04 23:45:42,144 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-04 23:45:42,145 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-04 23:45:42,146 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-04 23:45:42,151 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-04 23:45:42,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-04 23:45:42.236, foo, 2016-07-04 23:45:42.236, foo, 0}
2016-07-04 23:45:42,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-04 23:45:42.238, foo, 2016-07-04 23:45:42.238, foo, 0}
2016-07-04 23:45:42,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-04 23:45:42.239, foo, 2016-07-04 23:45:42.239, foo, 0}
2016-07-04 23:45:42,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-04 23:45:42.24, foo, 2016-07-04 23:45:42.24, foo, 0}
2016-07-04 23:45:42,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-04 23:45:42.241, foo, 2016-07-04 23:45:42.241, foo, 0}
2016-07-04 23:45:42,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-04 23:45:42.242, foo, 2016-07-04 23:45:42.242, foo, 0}
2016-07-04 23:45:42,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-04 23:45:42.243, foo, 2016-07-04 23:45:42.243, foo, 0}
2016-07-04 23:45:42,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-04 23:45:42.244, foo, 2016-07-04 23:45:42.244, foo, 0}
2016-07-04 23:45:42,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-04 23:45:42.244, foo, 2016-07-04 23:45:42.244, foo, 0}
2016-07-04 23:45:42,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-04 23:45:42.245, foo, 2016-07-04 23:45:42.245, foo, 0}
2016-07-04 23:45:42,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-04 23:45:42.246, foo, 2016-07-04 23:45:42.246, foo, 0}
2016-07-04 23:45:42,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-04 23:45:42.248, foo, 2016-07-04 23:45:42.248, foo, 0}
2016-07-04 23:45:42,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-04 23:45:42.249, foo, 2016-07-04 23:45:42.249, foo, 0}
2016-07-04 23:45:42,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-04 23:45:42.249, foo, 2016-07-04 23:45:42.249, foo, 0}
2016-07-04 23:45:42,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-04 23:45:42.25, foo, 2016-07-04 23:45:42.25, foo, 0}
2016-07-04 23:45:42,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-04 23:45:42.251, foo, 2016-07-04 23:45:42.251, foo, 0}
2016-07-04 23:45:42,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-04 23:45:42.252, foo, 2016-07-04 23:45:42.252, foo, 0}
2016-07-04 23:45:42,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-04 23:45:42.255, foo, 2016-07-04 23:45:42.255, foo, 0}
2016-07-04 23:45:42,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-04 23:45:42.256, foo, 2016-07-04 23:45:42.256, foo, 0}
2016-07-04 23:45:42,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-04 23:45:42.257, foo, 2016-07-04 23:45:42.257, foo, 0}
2016-07-04 23:45:42,289 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-04 23:45:42,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-04 23:45:42.291, foo, 2016-07-04 23:45:42.291, foo, 0}
2016-07-04 23:45:42,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-04 23:45:42.292, foo, 2016-07-04 23:45:42.292, foo, 0}
2016-07-04 23:45:42,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-04 23:45:42.293, foo, 2016-07-04 23:45:42.293, foo, 0}
2016-07-04 23:45:42,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-04 23:45:42.295, foo, 2016-07-04 23:45:42.295, foo, 0}
2016-07-04 23:45:42,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-04 23:45:42.296, foo, 2016-07-04 23:45:42.296, foo, 0}
2016-07-04 23:45:42,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-04 23:45:42.299, foo, 2016-07-04 23:45:42.299, foo, 0}
2016-07-04 23:45:42,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-04 23:45:42.302, foo, 2016-07-04 23:45:42.302, foo, 0}
2016-07-04 23:45:42,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-04 23:45:42.304, foo, 2016-07-04 23:45:42.304, foo, 0}
2016-07-04 23:45:42,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-04 23:45:42.305, foo, 2016-07-04 23:45:42.305, foo, 0}
2016-07-04 23:45:42,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-04 23:45:42.306, foo, 2016-07-04 23:45:42.306, foo, 0}
2016-07-04 23:45:42,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-04 23:45:42.308, foo, 2016-07-04 23:45:42.308, foo, 0}
2016-07-04 23:45:42,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-04 23:45:42.31, foo, 2016-07-04 23:45:42.31, foo, 0}
2016-07-04 23:45:42,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-04 23:45:42.311, foo, 2016-07-04 23:45:42.312, foo, 0}
2016-07-04 23:45:42,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-04 23:45:42.313, foo, 2016-07-04 23:45:42.313, foo, 0}
2016-07-04 23:45:42,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-04 23:45:42.314, foo, 2016-07-04 23:45:42.314, foo, 0}
2016-07-04 23:45:42,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-04 23:45:42.315, foo, 2016-07-04 23:45:42.315, foo, 0}
2016-07-04 23:45:42,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-04 23:45:42.317, foo, 2016-07-04 23:45:42.317, foo, 0}
2016-07-04 23:45:42,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-04 23:45:42.318, foo, 2016-07-04 23:45:42.318, foo, 0}
2016-07-04 23:45:42,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-04 23:45:42.321, foo, 2016-07-04 23:45:42.321, foo, 0}
2016-07-04 23:45:42,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-04 23:45:42.323, foo, 2016-07-04 23:45:42.323, foo, 0}
2016-07-04 23:45:42,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-04 23:45:42.324, foo, 2016-07-04 23:45:42.324, foo, 0}
2016-07-04 23:45:42,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-04 23:45:42.326, foo, 2016-07-04 23:45:42.326, foo, 0}
2016-07-04 23:45:42,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-04 23:45:42.328, foo, 2016-07-04 23:45:42.328, foo, 0}
2016-07-04 23:45:42,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-04 23:45:42.329, foo, 2016-07-04 23:45:42.329, foo, 0}
2016-07-04 23:45:42,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-04 23:45:42.33, foo, 2016-07-04 23:45:42.33, foo, 0}
2016-07-04 23:45:42,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-04 23:45:42.332, foo, 2016-07-04 23:45:42.332, foo, 0}
2016-07-04 23:45:42,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-04 23:45:42.336, foo, 2016-07-04 23:45:42.336, foo, 0}
2016-07-04 23:45:42,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-04 23:45:42.338, foo, 2016-07-04 23:45:42.338, foo, 0}
2016-07-04 23:45:42,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-04 23:45:42.339, foo, 2016-07-04 23:45:42.339, foo, 0}
2016-07-04 23:45:42,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-04 23:45:42.34, foo, 2016-07-04 23:45:42.34, foo, 0}
2016-07-04 23:45:42,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-04 23:45:42.343, foo, 2016-07-04 23:45:42.343, foo, 0}
2016-07-04 23:45:42,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 23:45:42.344, foo, 2016-07-04 23:45:42.344, foo, 0}
2016-07-04 23:45:42,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 23:45:42.345, foo, 2016-07-04 23:45:42.345, foo, 0}
2016-07-04 23:45:42,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 23:45:42.346, foo, 2016-07-04 23:45:42.346, foo, 0}
2016-07-04 23:45:42,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 23:45:42.348, foo, 2016-07-04 23:45:42.348, foo, 0}
2016-07-04 23:45:42,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 23:45:42.349, foo, 2016-07-04 23:45:42.349, foo, 0}
2016-07-04 23:45:42,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-04 23:45:42.351, foo, 2016-07-04 23:45:42.351, foo, 0}
2016-07-04 23:45:42,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 23:45:42.353, foo, 2016-07-04 23:45:42.353, foo, 0}
2016-07-04 23:45:42,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 23:45:42.355, foo, 2016-07-04 23:45:42.355, foo, 0}
2016-07-04 23:45:42,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-04 23:45:42.356, foo, 2016-07-04 23:45:42.356, foo, 0}
2016-07-04 23:45:42,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-04 23:45:42.357, foo, 2016-07-04 23:45:42.357, foo, 0}
2016-07-04 23:45:42,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-04 23:45:42.358, foo, 2016-07-04 23:45:42.358, foo, 0}
2016-07-04 23:45:42,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-04 23:45:42.359, foo, 2016-07-04 23:45:42.359, foo, 0}
2016-07-04 23:45:42,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-04 23:45:42.361, foo, 2016-07-04 23:45:42.361, foo, 0}
2016-07-04 23:45:42,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-04 23:45:42.362, foo, 2016-07-04 23:45:42.362, foo, 0}
2016-07-04 23:45:42,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-04 23:45:42.363, foo, 2016-07-04 23:45:42.363, foo, 0}
2016-07-04 23:45:42,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-04 23:45:42.364, foo, 2016-07-04 23:45:42.364, foo, 0}
2016-07-04 23:45:42,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-04 23:45:42.366, foo, 2016-07-04 23:45:42.366, foo, 0}
2016-07-04 23:45:42,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-04 23:45:42.367, foo, 2016-07-04 23:45:42.368, foo, 0}
2016-07-04 23:45:42,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-04 23:45:42.369, foo, 2016-07-04 23:45:42.369, foo, 0}
2016-07-04 23:45:42,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-04 23:45:42.37, foo, 2016-07-04 23:45:42.37, foo, 0}
2016-07-04 23:45:42,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-04 23:45:42.372, foo, 2016-07-04 23:45:42.372, foo, 0}
2016-07-04 23:45:42,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-04 23:45:42.374, foo, 2016-07-04 23:45:42.374, foo, 0}
2016-07-04 23:45:42,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-04 23:45:42.375, foo, 2016-07-04 23:45:42.375, foo, 0}
2016-07-04 23:45:42,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-04 23:45:42.376, foo, 2016-07-04 23:45:42.376, foo, 0}
2016-07-04 23:45:42,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-04 23:45:42.378, foo, 2016-07-04 23:45:42.378, foo, 0}
2016-07-04 23:45:42,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-04 23:45:42.381, foo, 2016-07-04 23:45:42.381, foo, 0}
2016-07-04 23:45:42,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-04 23:45:42.382, foo, 2016-07-04 23:45:42.382, foo, 0}
2016-07-04 23:45:42,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-04 23:45:42.383, foo, 2016-07-04 23:45:42.383, foo, 0}
2016-07-04 23:45:42,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-04 23:45:42.384, foo, 2016-07-04 23:45:42.384, foo, 0}
2016-07-04 23:45:42,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-04 23:45:42.384, foo, 2016-07-04 23:45:42.384, foo, 0}
2016-07-04 23:45:42,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-04 23:45:42.385, foo, 2016-07-04 23:45:42.385, foo, 0}
2016-07-04 23:45:42,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-04 23:45:42.387, foo, 2016-07-04 23:45:42.387, foo, 0}
2016-07-04 23:45:42,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-04 23:45:42.389, foo, 2016-07-04 23:45:42.389, foo, 0}
2016-07-04 23:45:42,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-04 23:45:42.391, foo, 2016-07-04 23:45:42.391, foo, 0}
2016-07-04 23:45:42,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-04 23:45:42.392, foo, 2016-07-04 23:45:42.392, foo, 0}
2016-07-04 23:45:42,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-04 23:45:42.393, foo, 2016-07-04 23:45:42.393, foo, 0}
2016-07-04 23:45:42,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-04 23:45:42.397, foo, 2016-07-04 23:45:42.398, foo, 0}
2016-07-04 23:45:42,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-04 23:45:42.401, foo, 2016-07-04 23:45:42.401, foo, 0}
2016-07-04 23:45:42,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-04 23:45:42.404, foo, 2016-07-04 23:45:42.404, foo, 0}
2016-07-04 23:45:42,474 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-04 23:45:42,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-04 23:45:42.475, foo, 2016-07-04 23:45:42.475, foo}
2016-07-04 23:45:42,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-04 23:45:42.476, foo, 2016-07-04 23:45:42.476, foo}
2016-07-04 23:45:42,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-04 23:45:42.477, foo, 2016-07-04 23:45:42.477, foo}
2016-07-04 23:45:42,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-04 23:45:42.478, foo, 2016-07-04 23:45:42.478, foo}
2016-07-04 23:45:42,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-04 23:45:42.479, foo, 2016-07-04 23:45:42.479, foo}
2016-07-04 23:45:42,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-04 23:45:42.481, foo, 2016-07-04 23:45:42.481, foo}
2016-07-04 23:45:42,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-04 23:45:42.482, foo, 2016-07-04 23:45:42.482, foo}
2016-07-04 23:45:42,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-04 23:45:42.483, foo, 2016-07-04 23:45:42.483, foo}
2016-07-04 23:45:42,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-04 23:45:42.484, foo, 2016-07-04 23:45:42.484, foo}
2016-07-04 23:45:42,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-04 23:45:42.485, foo, 2016-07-04 23:45:42.485, foo}
2016-07-04 23:45:42,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-04 23:45:42.486, foo, 2016-07-04 23:45:42.486, foo}
2016-07-04 23:45:42,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-04 23:45:42.488, foo, 2016-07-04 23:45:42.488, foo}
2016-07-04 23:45:42,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-04 23:45:42.489, foo, 2016-07-04 23:45:42.489, foo}
2016-07-04 23:45:42,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-04 23:45:42.49, foo, 2016-07-04 23:45:42.49, foo}
2016-07-04 23:45:42,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-04 23:45:42.491, foo, 2016-07-04 23:45:42.491, foo}
2016-07-04 23:45:42,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-04 23:45:42.492, foo, 2016-07-04 23:45:42.492, foo}
2016-07-04 23:45:42,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-04 23:45:42.494, foo, 2016-07-04 23:45:42.494, foo}
2016-07-04 23:45:42,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-04 23:45:42.495, foo, 2016-07-04 23:45:42.495, foo}
2016-07-04 23:45:42,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-04 23:45:42.496, foo, 2016-07-04 23:45:42.496, foo}
2016-07-04 23:45:42,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-04 23:45:42.497, foo, 2016-07-04 23:45:42.497, foo}
2016-07-04 23:45:42,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-04 23:45:42.498, foo, 2016-07-04 23:45:42.498, foo}
2016-07-04 23:45:42,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-04 23:45:42.499, foo, 2016-07-04 23:45:42.499, foo}
2016-07-04 23:45:42,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-04 23:45:42.5, foo, 2016-07-04 23:45:42.5, foo}
2016-07-04 23:45:42,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-04 23:45:42.502, foo, 2016-07-04 23:45:42.502, foo}
2016-07-04 23:45:42,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-04 23:45:42.503, foo, 2016-07-04 23:45:42.503, foo}
2016-07-04 23:45:42,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 23:45:42.504, foo, 2016-07-04 23:45:42.504, foo}
2016-07-04 23:45:42,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-04 23:45:42.505, foo, 2016-07-04 23:45:42.505, foo}
2016-07-04 23:45:42,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-04 23:45:42.506, foo, 2016-07-04 23:45:42.506, foo}
2016-07-04 23:45:42,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-04 23:45:42.507, foo, 2016-07-04 23:45:42.507, foo}
2016-07-04 23:45:42,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 23:45:42.508, foo, 2016-07-04 23:45:42.508, foo}
2016-07-04 23:45:42,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 23:45:42.51, foo, 2016-07-04 23:45:42.51, foo}
2016-07-04 23:45:42,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-04 23:45:42.512, foo, 2016-07-04 23:45:42.512, foo}
2016-07-04 23:45:42,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-04 23:45:42.524, foo, 2016-07-04 23:45:42.524, foo}
2016-07-04 23:45:42,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-04 23:45:42.525, foo, 2016-07-04 23:45:42.525, foo}
2016-07-04 23:45:42,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-04 23:45:42.526, foo, 2016-07-04 23:45:42.526, foo}
2016-07-04 23:45:42,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-04 23:45:42.527, foo, 2016-07-04 23:45:42.527, foo}
2016-07-04 23:45:42,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-04 23:45:42.53, foo, 2016-07-04 23:45:42.53, foo}
2016-07-04 23:45:42,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-04 23:45:42.534, foo, 2016-07-04 23:45:42.534, foo}
2016-07-04 23:45:42,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-04 23:45:42.538, foo, 2016-07-04 23:45:42.538, foo}
2016-07-04 23:45:42,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-04 23:45:42.539, foo, 2016-07-04 23:45:42.539, foo}
2016-07-04 23:45:42,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-04 23:45:42.54, foo, 2016-07-04 23:45:42.54, foo}
2016-07-04 23:45:42,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-04 23:45:42.541, foo, 2016-07-04 23:45:42.541, foo}
2016-07-04 23:45:42,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-04 23:45:42.542, foo, 2016-07-04 23:45:42.542, foo}
2016-07-04 23:45:42,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-04 23:45:42.543, foo, 2016-07-04 23:45:42.543, foo}
2016-07-04 23:45:42,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-04 23:45:42.546, foo, 2016-07-04 23:45:42.546, foo}
2016-07-04 23:45:42,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-04 23:45:42.548, foo, 2016-07-04 23:45:42.548, foo}
2016-07-04 23:45:42,550 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-04 23:45:42.55, foo, 2016-07-04 23:45:42.55, foo}
2016-07-04 23:45:42,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-04 23:45:42.552, foo, 2016-07-04 23:45:42.552, foo}
2016-07-04 23:45:42,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-04 23:45:42.553, foo, 2016-07-04 23:45:42.553, foo}
2016-07-04 23:45:42,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-04 23:45:42.556, foo, 2016-07-04 23:45:42.556, foo}
2016-07-04 23:45:42,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-04 23:45:42.557, foo, 2016-07-04 23:45:42.557, foo}
2016-07-04 23:45:42,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-04 23:45:42.558, foo, 2016-07-04 23:45:42.558, foo}
2016-07-04 23:45:42,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-04 23:45:42.559, foo, 2016-07-04 23:45:42.559, foo}
2016-07-04 23:45:42,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-04 23:45:42.56, foo, 2016-07-04 23:45:42.56, foo}
2016-07-04 23:45:42,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-04 23:45:42.561, foo, 2016-07-04 23:45:42.561, foo}
2016-07-04 23:45:42,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-04 23:45:42.562, foo, 2016-07-04 23:45:42.562, foo}
2016-07-04 23:45:42,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-04 23:45:42.562, foo, 2016-07-04 23:45:42.562, foo}
2016-07-04 23:45:42,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-04 23:45:42.563, foo, 2016-07-04 23:45:42.563, foo}
2016-07-04 23:45:42,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-04 23:45:42.565, foo, 2016-07-04 23:45:42.565, foo}
2016-07-04 23:45:42,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-04 23:45:42.567, foo, 2016-07-04 23:45:42.567, foo}
2016-07-04 23:45:42,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-04 23:45:42.568, foo, 2016-07-04 23:45:42.568, foo}
2016-07-04 23:45:42,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-04 23:45:42.569, foo, 2016-07-04 23:45:42.569, foo}
2016-07-04 23:45:42,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-04 23:45:42.571, foo, 2016-07-04 23:45:42.571, foo}
2016-07-04 23:45:42,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-04 23:45:42.572, foo, 2016-07-04 23:45:42.572, foo}
2016-07-04 23:45:42,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-04 23:45:42.574, foo, 2016-07-04 23:45:42.574, foo}
2016-07-04 23:45:42,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-04 23:45:42.575, foo, 2016-07-04 23:45:42.575, foo}
2016-07-04 23:45:42,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-04 23:45:42.576, foo, 2016-07-04 23:45:42.576, foo}
2016-07-04 23:45:42,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-04 23:45:42.577, foo, 2016-07-04 23:45:42.577, foo}
2016-07-04 23:45:42,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-04 23:45:42.578, foo, 2016-07-04 23:45:42.578, foo}
2016-07-04 23:45:42,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-04 23:45:42.579, foo, 2016-07-04 23:45:42.579, foo}
2016-07-04 23:45:42,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-04 23:45:42.58, foo, 2016-07-04 23:45:42.58, foo}
2016-07-04 23:45:42,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-04 23:45:42.582, foo, 2016-07-04 23:45:42.582, foo}
2016-07-04 23:45:42,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-04 23:45:42.583, foo, 2016-07-04 23:45:42.583, foo}
2016-07-04 23:45:42,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-04 23:45:42.585, foo, 2016-07-04 23:45:42.585, foo}
2016-07-04 23:45:42,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-04 23:45:42.586, foo, 2016-07-04 23:45:42.586, foo}
2016-07-04 23:45:42,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-04 23:45:42.588, foo, 2016-07-04 23:45:42.588, foo}
2016-07-04 23:45:42,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-04 23:45:42.589, foo, 2016-07-04 23:45:42.589, foo}
2016-07-04 23:45:42,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-04 23:45:42.59, foo, 2016-07-04 23:45:42.59, foo}
2016-07-04 23:45:42,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-04 23:45:42.591, foo, 2016-07-04 23:45:42.591, foo}
2016-07-04 23:45:42,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-04 23:45:42.592, foo, 2016-07-04 23:45:42.592, foo}
2016-07-04 23:45:42,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-04 23:45:42.593, foo, 2016-07-04 23:45:42.593, foo}
2016-07-04 23:45:42,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-04 23:45:42.594, foo, 2016-07-04 23:45:42.594, foo}
2016-07-04 23:45:42,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 23:45:42.595, foo, 2016-07-04 23:45:42.595, foo}
2016-07-04 23:45:42,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 23:45:42.596, foo, 2016-07-04 23:45:42.596, foo}
2016-07-04 23:45:42,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 23:45:42.597, foo, 2016-07-04 23:45:42.597, foo}
2016-07-04 23:45:42,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-04 23:45:42.598, foo, 2016-07-04 23:45:42.598, foo}
2016-07-04 23:45:42,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-04 23:45:42.599, foo, 2016-07-04 23:45:42.599, foo}
2016-07-04 23:45:42,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-04 23:45:42.6, foo, 2016-07-04 23:45:42.6, foo}
2016-07-04 23:45:42,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-04 23:45:42.601, foo, 2016-07-04 23:45:42.601, foo}
2016-07-04 23:45:42,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-04 23:45:42.602, foo, 2016-07-04 23:45:42.603, foo}
2016-07-04 23:45:42,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-04 23:45:42.604, foo, 2016-07-04 23:45:42.604, foo}
2016-07-04 23:45:42,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-04 23:45:42.612, foo, 2016-07-04 23:45:42.612, foo}
2016-07-04 23:45:42,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-04 23:45:42.613, foo, 2016-07-04 23:45:42.613, foo}
2016-07-04 23:45:42,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-04 23:45:42.614, foo, 2016-07-04 23:45:42.614, foo}
2016-07-04 23:45:42,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-04 23:45:42.614, foo, 2016-07-04 23:45:42.614, foo}
2016-07-04 23:45:42,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-04 23:45:42.618, foo, 2016-07-04 23:45:42.618, foo}
2016-07-04 23:45:42,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-04 23:45:42.62, foo, 2016-07-04 23:45:42.62, foo}
2016-07-04 23:45:42,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-04 23:45:42.622, foo, 2016-07-04 23:45:42.622, foo}
2016-07-04 23:45:42,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-04 23:45:42.623, foo, 2016-07-04 23:45:42.623, foo}
2016-07-04 23:45:42,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-04 23:45:42.624, foo, 2016-07-04 23:45:42.624, foo}
2016-07-04 23:45:42,699 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-04 23:45:42,700 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-04 23:45:42,719 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:42,730 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:45:42,737 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:45:42,741 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:45:42,744 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:45:42,747 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:45:42,750 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:45:42,761 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 23:45:42,763 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-04 23:45:42,766 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-04 23:45:42,769 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-04 23:45:42,771 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-04 23:45:42,776 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-04 23:45:42,776 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-04 23:45:42,777 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-04 23:45:42,777 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-04 23:45:42,777 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-04 23:45:42,777 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-04 23:45:42,783 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-04 23:45:42,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-04 23:45:42,789 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-04 23:45:42,799 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-04 23:45:42,800 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-04 23:45:42,802 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-04 23:45:42,803 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-04 23:45:42,804 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:45:42,808 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s998ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-04 23:45:43,707 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 23:45:43,709 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 23:45:43,710 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 23:45:43,710 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 23:45:43,710 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 23:45:43,742 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:43,746 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:43,747 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:43,747 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:43,817 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 23:45:43,817 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 23:45:43,818 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 23:45:43,832 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:45:44,041 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 23:45:44,064 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:45:44,603 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:45:44,603 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:45:44,605 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 23:45:44,606 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 23:45:44,607 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:44,608 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 23:45:44,624 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 23:45:44,628 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 23:45:44,659 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 23:45:44,660 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 23:45:44,660 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 23:45:44,661 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 23:45:44,730 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 23:45:44,748 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 23:45:44,762 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 23:45:44,791 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 23:45:44,806 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 23:45:44,818 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 23:45:44,844 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 23:45:44,862 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 23:45:44,872 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 23:45:44,879 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 23:45:44,897 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 23:45:44,908 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 23:45:44,915 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 23:45:44,927 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 23:45:44,935 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 23:45:44,935 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 23:45:44,936 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 23:45:44,936 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 23:45:44,936 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 23:45:44,941 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 23:45:44,960 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 23:45:44,961 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 23:45:44,961 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 23:45:45,011 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 23:45:45,014 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:45:45,097 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 23:45:45,098 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:45:45,108 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s417ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 23:45:46,100 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 23:45:46,102 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 23:45:46,102 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 23:45:46,103 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 23:45:46,103 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 23:45:46,133 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:46,133 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:46,134 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:46,134 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:46,136 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 23:45:46,137 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 23:45:46,137 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 23:45:46,137 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 23:45:46,138 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 23:45:46,138 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 23:45:46,192 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:45:46,309 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 23:45:46,509 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 23:45:46,519 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 23:45:46,519 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 23:45:46,521 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 23:45:46,522 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 23:45:46,522 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 23:45:46,524 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 23:45:46,526 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 23:45:46,527 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 23:45:46,529 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 23:45:46,535 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:45:46,536 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 23:45:46,536 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 23:45:46,537 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 23:45:46,537 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:45:46,537 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 23:45:46,538 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 23:45:46,538 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 23:45:46,550 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:46,885 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:45:46,888 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:45:46,891 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:45:46,894 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:45:46,900 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:45:46,903 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:45:46,911 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 23:45:46,912 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 23:45:47,355 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 23:45:47,356 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 23:45:47,361 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:45:47,374 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:45:47,374 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:45:47,443 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 23:45:47,450 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 23:45:47,451 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 23:45:47,452 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 23:45:47,452 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 23:45:47,453 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 23:45:47,465 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:45:47,508 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:45:47,513 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s428ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 23:45:49,925 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 23:45:49,929 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 23:45:49,930 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 23:45:49,930 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 23:45:49,930 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 23:45:49,954 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:49,954 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:49,955 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:49,955 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:49,969 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 23:45:49,969 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 23:45:50,004 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:45:50,085 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 23:45:50,308 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 23:45:50,312 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 23:45:50,313 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 23:45:50,314 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 23:45:50,316 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 23:45:50,316 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 23:45:50,318 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 23:45:50,320 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 23:45:50,321 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 23:45:50,323 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 23:45:50,331 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:45:50,332 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 23:45:50,332 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 23:45:50,332 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 23:45:50,333 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:45:50,333 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 23:45:50,333 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 23:45:50,334 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 23:45:50,342 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:50,682 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:45:50,686 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:45:50,689 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:45:50,691 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:45:50,696 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:45:50,698 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:45:50,711 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 23:45:50,711 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 23:45:50,712 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 23:45:50,712 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 23:45:50,712 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 23:45:50,713 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 23:45:50,713 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 23:45:50,713 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 23:45:50,714 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 23:45:50,714 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 23:45:50,739 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 23:45:50,741 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 23:45:50,830 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 23:45:50,836 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 23:45:50,885 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 23:45:50,894 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 23:45:50,917 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 23:45:50,943 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 23:45:50,951 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 23:45:50,959 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 23:45:50,968 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 23:45:50,978 [main] INFO  (Database#info():2711) - }
2016-07-04 23:45:50,978 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 23:45:50,981 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 23:45:50,999 [main] INFO  (Database#info():2711) - }
2016-07-04 23:45:51,004 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 23:45:51,044 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 23:45:51,045 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 23:45:51,046 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 23:45:51,591 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 23:45:51,885 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 23:45:52,124 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 23:45:52,301 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 23:45:52,461 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 23:45:52,680 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 23:45:52,863 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 23:45:53,076 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 23:45:53,255 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 23:45:53,382 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 23:45:53,590 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 23:45:53,729 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 23:45:53,859 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 23:45:53,999 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 23:45:54,138 [main] INFO  (Database#info():2711) - }
2016-07-04 23:45:54,138 [main] INFO  (Database#info():2711) -  
2016-07-04 23:45:54,183 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:45:54,194 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s278ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 23:45:54,880 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 23:45:54,883 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 23:45:54,883 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 23:45:54,883 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 23:45:54,885 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 23:45:54,911 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:54,912 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:54,912 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:54,912 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:54,945 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 23:45:54,950 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:45:55,264 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:45:55,265 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:45:55,306 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 23:45:55,312 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:45:55,312 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 23:45:55,315 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 23:45:55,318 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:45:55,319 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 23:45:55,322 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 23:45:55,327 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:45:55,328 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 23:45:55,329 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-04 23:45:55,333 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:45:55,334 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 23:45:55,334 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:45:55,340 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s474ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 23:45:56,034 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 23:45:56,036 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 23:45:56,036 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 23:45:56,037 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 23:45:56,037 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 23:45:56,057 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:45:56,057 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:45:56,057 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:45:56,057 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:45:56,071 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 23:45:56,071 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 23:45:56,080 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:45:56,177 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 23:45:56,182 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:45:56,496 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:45:56,497 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:45:56,499 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 23:45:56,554 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:45:56,555 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 23:45:56,557 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 23:45:56,567 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:45:56,567 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 23:45:56,569 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 23:45:56,576 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:45:56,576 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 23:45:56,577 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-04 23:45:56,585 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:45:56,585 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 23:45:56,591 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 23:45:56,592 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 23:45:56,644 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 23:45:56,649 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 23:45:56,650 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 23:45:56,650 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 23:45:56,650 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 23:45:56,650 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 23:45:56,678 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 23:45:56,704 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 23:45:56,716 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 23:45:56,716 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 23:45:56,717 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 23:45:56,717 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 23:45:56,718 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 23:45:56,718 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 23:45:56,719 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 23:45:56,719 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 23:45:56,720 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 23:45:56,720 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 23:45:56,721 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 23:45:56,721 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 23:45:56,751 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 23:45:56,751 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 23:45:56,752 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 23:45:56,752 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 23:45:56,753 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 23:45:56,768 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 23:45:56,768 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 23:45:56,769 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 23:45:56,769 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 23:45:56,770 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 23:45:56,772 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 23:45:56,955 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:45:56,962 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:45:56,965 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:45:56,968 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:45:56,970 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:45:56,972 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:45:56,974 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:45:56,986 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 23:45:56,989 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 23:45:57,012 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 23:45:57,012 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 23:45:57,141 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 23:45:57,200 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 23:45:57,217 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 23:45:57,278 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 23:45:57,362 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 23:45:57,407 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 23:45:57,451 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 23:45:57,452 [main] INFO  (Database#info():2711) - }
2016-07-04 23:45:57,456 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 23:45:57,461 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 23:45:57,502 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 23:45:57,528 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 23:45:57,545 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 23:45:57,561 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 23:45:57,578 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 23:45:57,597 [main] INFO  (Database#info():2711) - }
2016-07-04 23:45:57,637 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 23:45:57,649 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:45:57,658 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:45:57,666 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s645ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-04 23:46:07,678 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-04 23:46:07,682 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-04 23:46:07,683 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-04 23:46:07,683 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-04 23:46:07,683 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-04 23:46:07,722 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:46:07,726 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:46:07,727 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:46:07,728 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:46:07,773 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-04 23:46:07,773 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-04 23:46:07,774 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-04 23:46:07,790 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:46:07,932 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-04 23:46:07,939 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:46:08,497 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:46:08,499 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:46:08,501 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-04 23:46:08,503 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-04 23:46:08,503 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:46:08,504 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-04 23:46:08,526 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-04 23:46:08,530 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-04 23:46:08,561 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-04 23:46:08,562 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 23:46:08,562 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-04 23:46:08,563 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-04 23:46:08,638 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-04 23:46:08,660 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-04 23:46:08,685 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-04 23:46:08,707 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-04 23:46:08,723 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-04 23:46:08,744 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-04 23:46:08,761 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-04 23:46:08,778 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-04 23:46:08,802 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-04 23:46:08,815 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-04 23:46:08,832 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-04 23:46:08,850 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-04 23:46:08,866 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-04 23:46:08,877 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-04 23:46:08,889 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-04 23:46:08,889 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-04 23:46:08,890 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-04 23:46:08,890 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-04 23:46:08,891 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-04 23:46:08,892 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-04 23:46:08,900 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-04 23:46:08,907 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-04 23:46:08,910 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-04 23:46:08,960 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-04 23:46:09,059 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:46:09,142 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-04 23:46:09,142 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:46:09,154 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s491ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-04 23:46:10,071 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-04 23:46:10,078 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-04 23:46:10,078 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-04 23:46:10,079 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-04 23:46:10,079 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-04 23:46:10,114 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:46:10,114 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:46:10,115 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:46:10,115 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:46:10,118 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-04 23:46:10,118 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-04 23:46:10,119 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-04 23:46:10,119 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-04 23:46:10,119 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-04 23:46:10,120 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-04 23:46:10,180 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:46:10,306 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-04 23:46:10,484 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-04 23:46:10,491 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 23:46:10,492 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 23:46:10,494 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 23:46:10,496 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 23:46:10,496 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 23:46:10,498 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 23:46:10,500 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 23:46:10,501 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 23:46:10,504 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 23:46:10,509 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:46:10,510 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 23:46:10,510 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 23:46:10,511 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 23:46:10,512 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:46:10,512 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 23:46:10,513 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 23:46:10,513 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 23:46:10,525 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:46:10,864 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:46:10,870 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:46:10,873 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:46:10,876 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:46:10,883 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:46:10,889 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:46:10,898 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-04 23:46:10,899 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():163) -  -> no history
2016-07-04 23:46:11,371 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-04 23:46:11,371 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-04 23:46:11,379 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:46:11,401 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:46:11,402 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:46:11,467 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 23:46:11,473 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 23:46:11,474 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 23:46:11,475 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 23:46:11,475 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 23:46:11,476 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 23:46:11,514 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:46:11,540 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:46:11,547 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s493ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-04 23:46:14,244 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-04 23:46:14,248 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-04 23:46:14,248 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-04 23:46:14,249 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-04 23:46:14,249 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-04 23:46:14,277 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:46:14,278 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:46:14,278 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:46:14,283 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:46:14,305 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-04 23:46:14,306 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-04 23:46:14,356 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:46:14,460 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-04 23:46:14,750 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-04 23:46:14,754 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-04 23:46:14,755 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-04 23:46:14,757 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-04 23:46:14,758 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-04 23:46:14,759 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-04 23:46:14,761 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-04 23:46:14,764 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-04 23:46:14,765 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-04 23:46:14,768 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-04 23:46:14,788 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:46:14,789 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-04 23:46:14,789 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-04 23:46:14,790 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-04 23:46:14,790 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-04 23:46:14,791 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-04 23:46:14,791 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-04 23:46:14,791 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-04 23:46:14,807 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:46:15,156 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:46:15,160 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:46:15,163 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:46:15,166 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:46:15,171 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:46:15,173 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:46:15,184 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-04 23:46:15,184 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-04 23:46:15,184 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-04 23:46:15,185 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-04 23:46:15,185 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-04 23:46:15,185 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-04 23:46:15,186 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-04 23:46:15,186 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-04 23:46:15,186 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-04 23:46:15,186 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-04 23:46:15,200 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-04 23:46:15,202 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-04 23:46:15,256 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-04 23:46:15,259 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-04 23:46:15,278 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-04 23:46:15,283 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-04 23:46:15,303 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-04 23:46:15,329 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-04 23:46:15,335 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-04 23:46:15,343 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-04 23:46:15,361 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-04 23:46:15,365 [main] INFO  (Database#info():2711) - }
2016-07-04 23:46:15,366 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-04 23:46:15,368 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-04 23:46:15,386 [main] INFO  (Database#info():2711) - }
2016-07-04 23:46:15,393 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-04 23:46:15,446 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 23:46:15,450 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-04 23:46:15,455 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-04 23:46:15,993 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-04 23:46:16,254 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-04 23:46:16,458 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-04 23:46:16,634 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-04 23:46:16,837 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-04 23:46:17,001 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-04 23:46:17,193 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-04 23:46:17,410 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-04 23:46:17,561 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-04 23:46:17,694 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-04 23:46:17,890 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-04 23:46:18,033 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-04 23:46:18,145 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-04 23:46:18,282 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-04 23:46:18,398 [main] INFO  (Database#info():2711) - }
2016-07-04 23:46:18,398 [main] INFO  (Database#info():2711) -  
2016-07-04 23:46:18,459 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:46:18,469 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s241ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-04 23:46:19,368 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-04 23:46:19,370 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-04 23:46:19,370 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-04 23:46:19,370 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-04 23:46:19,371 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-04 23:46:19,395 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:46:19,396 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:46:19,396 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:46:19,396 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:46:19,423 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 23:46:19,429 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:46:19,757 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:46:19,757 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:46:19,784 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 23:46:19,789 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:46:19,790 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 23:46:19,792 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 23:46:19,796 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:46:19,796 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 23:46:19,798 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 23:46:19,804 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:46:19,804 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 23:46:19,807 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-04 23:46:19,811 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-04 23:46:19,811 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 23:46:19,812 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:46:19,818 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s460ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-04 23:46:20,535 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-04 23:46:20,537 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-04 23:46:20,537 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-04 23:46:20,537 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-04 23:46:20,538 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-04 23:46:20,559 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-04 23:46:20,560 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-04 23:46:20,560 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-04 23:46:20,560 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-04 23:46:20,574 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-04 23:46:20,574 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-04 23:46:20,581 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-04 23:46:20,702 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-04 23:46:20,708 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-04 23:46:21,026 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-04 23:46:21,026 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-04 23:46:21,029 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-04 23:46:21,083 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:46:21,084 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-04 23:46:21,085 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-04 23:46:21,092 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:46:21,092 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-04 23:46:21,094 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-04 23:46:21,100 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:46:21,101 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-04 23:46:21,102 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-04 23:46:21,110 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-04 23:46:21,110 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-04 23:46:21,116 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-04 23:46:21,117 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-04 23:46:21,168 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-04 23:46:21,172 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-04 23:46:21,172 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-04 23:46:21,173 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-04 23:46:21,173 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-04 23:46:21,173 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-04 23:46:21,197 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-04 23:46:21,225 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-04 23:46:21,237 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-04 23:46:21,237 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-04 23:46:21,238 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-04 23:46:21,239 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-04 23:46:21,239 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-04 23:46:21,240 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-04 23:46:21,240 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-04 23:46:21,240 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-04 23:46:21,241 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-04 23:46:21,241 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-04 23:46:21,241 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-04 23:46:21,242 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-04 23:46:21,269 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-04 23:46:21,269 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-04 23:46:21,269 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-04 23:46:21,269 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-04 23:46:21,270 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-04 23:46:21,282 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-04 23:46:21,283 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-04 23:46:21,283 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-04 23:46:21,283 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-04 23:46:21,284 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-04 23:46:21,287 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-04 23:46:21,459 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-04 23:46:21,467 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-04 23:46:21,470 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-04 23:46:21,472 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-04 23:46:21,474 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-04 23:46:21,476 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-04 23:46:21,478 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-04 23:46:21,489 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-04 23:46:21,492 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-04 23:46:21,512 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-04 23:46:21,512 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-04 23:46:21,643 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-04 23:46:21,702 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-04 23:46:21,716 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-04 23:46:21,777 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-04 23:46:21,861 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-04 23:46:21,955 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-04 23:46:22,018 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-04 23:46:22,019 [main] INFO  (Database#info():2711) - }
2016-07-04 23:46:22,021 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-04 23:46:22,026 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-04 23:46:22,087 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-04 23:46:22,107 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-04 23:46:22,140 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-04 23:46:22,160 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-04 23:46:22,180 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-04 23:46:22,211 [main] INFO  (Database#info():2711) - }
2016-07-04 23:46:22,260 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-04 23:46:22,273 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-04 23:46:22,601 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-04 23:46:22,606 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s086ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 07:27:22,145 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:27:22,149 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:27:22,149 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:27:22,154 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:27:22,154 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:27:22,157 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:27:23,675 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:23,675 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:23,676 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:23,676 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:23,685 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:27:24,111 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:27:24,112 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:27:24,135 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:27:24,135 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:27:24,136 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:27:24,139 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:27:24,139 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:27:24,140 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:27:24,164 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:27:24,164 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:24,165 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:27:24,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:27:24,211 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:27:24,217 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:27:24,225 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:27:24,233 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:27:24,250 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:27:24,278 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:27:24,302 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:27:24,317 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:27:24,340 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:27:24,358 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:27:24,380 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:27:24,402 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:27:24,417 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:27:24,443 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:27:24,459 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:27:24,480 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:27:24,497 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:27:24,520 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:27:24,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:27:24,559 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:27:24,579 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:27:24,604 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:27:24,609 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:27:24,613 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:27:24,618 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:27:24,623 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:27:24,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:27:24,631 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:27:24,636 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:27:24,641 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:27:24,644 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:27:24,649 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:27:24,654 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:27:24,658 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:27:24,669 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:27:24,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:27:24,734 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 07:27:24,737 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 07:27:24,740 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:27:24,740 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:27:24,740 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:27:24,741 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:27:24,741 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:27:24,742 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:27:24,813 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:27:24,818 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:27:24,819 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:27:24,821 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:27:24,833 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:27:24,834 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:27:24,835 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:27:24,836 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:27:24,839 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:27:24,842 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:27:24,843 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:27:24,843 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:27:24,843 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:27:24,844 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:27:24,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:27:24,869 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:27:24,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:27:24,931 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:27:24,975 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:27:24,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:27:25,055 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:27:25,124 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:27:25,132 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:27:25,189 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:27:25,199 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:27:25,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:27:25,253 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:27:25,290 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:27:25,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:27:25,333 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:27:25,353 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,373 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:27:25,395 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:27:25,424 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,445 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,473 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:27:25,493 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,515 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:27:25,553 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:27:25,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:27:25,610 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:27:25,634 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:27:25,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:27:25,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:27:25,712 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:27:25,728 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:27:25,750 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:27:25,769 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-05 07:27:25,790 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 07:27:25,808 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 07:27:25,828 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 07:27:25,848 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 07:27:25,869 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 07:27:25,890 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 07:27:25,891 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 07:27:25,892 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 07:27:25,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 07:27:25,895 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:27:25,895 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 07:27:25,896 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:27:26,023 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 07:27:26,024 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 07:27:26,024 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 07:27:26,025 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 07:27:26,025 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 07:27:26,025 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 07:27:26,059 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:27:26,060 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 07:27:26,060 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:27:26,324 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:27:26,325 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:26,325 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:27:26,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 07:27:26,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 07:27:26,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 07:27:26,410 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 07:27:26,419 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 07:27:26,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 07:27:26,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 07:27:26,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 07:27:26,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 07:27:26,436 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 07:27:26,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 07:27:26,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 07:27:26,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 07:27:26,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 07:27:26,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 07:27:26,454 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 07:27:26,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 07:27:26,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 07:27:26,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 07:27:26,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 07:27:26,463 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 07:27:26,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 07:27:26,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 07:27:26,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 07:27:26,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 07:27:26,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 07:27:26,475 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 07:27:26,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 07:27:26,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 07:27:26,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 07:27:26,486 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 07:27:26,488 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:27:26,489 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 07:27:26,489 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:27:26,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 07:27:26.581, foo, 2016-07-05 07:27:26.581, foo, 0}
2016-07-05 07:27:26,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 07:27:26.592, foo, 2016-07-05 07:27:26.592, foo, 0}
2016-07-05 07:27:26,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 07:27:26.594, foo, 2016-07-05 07:27:26.594, foo, 0}
2016-07-05 07:27:26,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 07:27:26.596, foo, 2016-07-05 07:27:26.596, foo, 0}
2016-07-05 07:27:26,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 07:27:26.601, foo, 2016-07-05 07:27:26.601, foo, 0}
2016-07-05 07:27:26,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 07:27:26.602, foo, 2016-07-05 07:27:26.602, foo, 0}
2016-07-05 07:27:26,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:27:26.605, foo, 2016-07-05 07:27:26.605, foo, 0}
2016-07-05 07:27:26,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 07:27:26.607, foo, 2016-07-05 07:27:26.607, foo, 0}
2016-07-05 07:27:26,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 07:27:26.609, foo, 2016-07-05 07:27:26.609, foo, 0}
2016-07-05 07:27:26,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 07:27:26.611, foo, 2016-07-05 07:27:26.611, foo, 0}
2016-07-05 07:27:26,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 07:27:26.612, foo, 2016-07-05 07:27:26.613, foo, 0}
2016-07-05 07:27:26,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 07:27:26.615, foo, 2016-07-05 07:27:26.615, foo, 0}
2016-07-05 07:27:26,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 07:27:26.617, foo, 2016-07-05 07:27:26.617, foo, 0}
2016-07-05 07:27:26,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 07:27:26.62, foo, 2016-07-05 07:27:26.62, foo, 0}
2016-07-05 07:27:26,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 07:27:26.623, foo, 2016-07-05 07:27:26.623, foo, 0}
2016-07-05 07:27:26,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 07:27:26.625, foo, 2016-07-05 07:27:26.625, foo, 0}
2016-07-05 07:27:26,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:27:26.627, foo, 2016-07-05 07:27:26.627, foo, 0}
2016-07-05 07:27:26,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 07:27:26.629, foo, 2016-07-05 07:27:26.629, foo, 0}
2016-07-05 07:27:26,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 07:27:26.632, foo, 2016-07-05 07:27:26.632, foo, 0}
2016-07-05 07:27:26,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 07:27:26.634, foo, 2016-07-05 07:27:26.634, foo, 0}
2016-07-05 07:27:26,657 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 07:27:26,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 07:27:26.659, foo, 2016-07-05 07:27:26.659, foo, 0}
2016-07-05 07:27:26,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 07:27:26.662, foo, 2016-07-05 07:27:26.662, foo, 0}
2016-07-05 07:27:26,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 07:27:26.665, foo, 2016-07-05 07:27:26.665, foo, 0}
2016-07-05 07:27:26,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 07:27:26.668, foo, 2016-07-05 07:27:26.668, foo, 0}
2016-07-05 07:27:26,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 07:27:26.67, foo, 2016-07-05 07:27:26.67, foo, 0}
2016-07-05 07:27:26,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 07:27:26.673, foo, 2016-07-05 07:27:26.673, foo, 0}
2016-07-05 07:27:26,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 07:27:26.676, foo, 2016-07-05 07:27:26.676, foo, 0}
2016-07-05 07:27:26,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 07:27:26.679, foo, 2016-07-05 07:27:26.679, foo, 0}
2016-07-05 07:27:26,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 07:27:26.682, foo, 2016-07-05 07:27:26.682, foo, 0}
2016-07-05 07:27:26,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 07:27:26.685, foo, 2016-07-05 07:27:26.685, foo, 0}
2016-07-05 07:27:26,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 07:27:26.688, foo, 2016-07-05 07:27:26.688, foo, 0}
2016-07-05 07:27:26,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 07:27:26.691, foo, 2016-07-05 07:27:26.691, foo, 0}
2016-07-05 07:27:26,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 07:27:26.694, foo, 2016-07-05 07:27:26.694, foo, 0}
2016-07-05 07:27:26,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 07:27:26.696, foo, 2016-07-05 07:27:26.696, foo, 0}
2016-07-05 07:27:26,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 07:27:26.698, foo, 2016-07-05 07:27:26.698, foo, 0}
2016-07-05 07:27:26,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 07:27:26.701, foo, 2016-07-05 07:27:26.701, foo, 0}
2016-07-05 07:27:26,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 07:27:26.704, foo, 2016-07-05 07:27:26.704, foo, 0}
2016-07-05 07:27:26,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 07:27:26.708, foo, 2016-07-05 07:27:26.708, foo, 0}
2016-07-05 07:27:26,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 07:27:26.711, foo, 2016-07-05 07:27:26.711, foo, 0}
2016-07-05 07:27:26,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 07:27:26.714, foo, 2016-07-05 07:27:26.714, foo, 0}
2016-07-05 07:27:26,734 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 07:27:26,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:27:26,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 07:27:26,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 07:27:26,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 07:27:26,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 07:27:26,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 07:27:26,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 07:27:26,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 07:27:26,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 07:27:26,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 07:27:26,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 07:27:26,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 07:27:26,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:27:26,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 07:27:26,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 07:27:26,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 07:27:26,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 07:27:26,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 07:27:26,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 07:27:26,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 07:27:26,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 07:27:26,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 07:27:26,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 07:27:26,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 07:27:26,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 07:27:26,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 07:27:26,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 07:27:26,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 07:27:26,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 07:27:26,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 07:27:26,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 07:27:26,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 07:27:26,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 07:27:26,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 07:27:26,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 07:27:26,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 07:27:26,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 07:27:26,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 07:27:26,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 07:27:26,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 07:27:26,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 07:27:26,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 07:27:26,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 07:27:26,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 07:27:26,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 07:27:26,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 07:27:26,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 07:27:26,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 07:27:26,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 07:27:26,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 07:27:26,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 07:27:26,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 07:27:26,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 07:27:26,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 07:27:26,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 07:27:26,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 07:27:26,839 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 07:27:26,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 07:27:26.84, foo, 2016-07-05 07:27:26.84, foo, 0}
2016-07-05 07:27:26,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 07:27:26.842, foo, 2016-07-05 07:27:26.842, foo, 0}
2016-07-05 07:27:26,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 07:27:26.842, foo, 2016-07-05 07:27:26.842, foo, 0}
2016-07-05 07:27:26,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 07:27:26.843, foo, 2016-07-05 07:27:26.843, foo, 0}
2016-07-05 07:27:26,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 07:27:26.844, foo, 2016-07-05 07:27:26.844, foo, 0}
2016-07-05 07:27:26,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 07:27:26.844, foo, 2016-07-05 07:27:26.845, foo, 0}
2016-07-05 07:27:26,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 07:27:26.845, foo, 2016-07-05 07:27:26.845, foo, 0}
2016-07-05 07:27:26,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 07:27:26.846, foo, 2016-07-05 07:27:26.846, foo, 0}
2016-07-05 07:27:26,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 07:27:26.847, foo, 2016-07-05 07:27:26.847, foo, 0}
2016-07-05 07:27:26,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 07:27:26.847, foo, 2016-07-05 07:27:26.847, foo, 0}
2016-07-05 07:27:26,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 07:27:26.848, foo, 2016-07-05 07:27:26.848, foo, 0}
2016-07-05 07:27:26,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 07:27:26.849, foo, 2016-07-05 07:27:26.849, foo, 0}
2016-07-05 07:27:26,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 07:27:26.85, foo, 2016-07-05 07:27:26.85, foo, 0}
2016-07-05 07:27:26,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 07:27:26.851, foo, 2016-07-05 07:27:26.851, foo, 0}
2016-07-05 07:27:26,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 07:27:26.853, foo, 2016-07-05 07:27:26.853, foo, 0}
2016-07-05 07:27:26,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 07:27:26.855, foo, 2016-07-05 07:27:26.855, foo, 0}
2016-07-05 07:27:26,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 07:27:26.858, foo, 2016-07-05 07:27:26.858, foo, 0}
2016-07-05 07:27:26,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 07:27:26.86, foo, 2016-07-05 07:27:26.86, foo, 0}
2016-07-05 07:27:26,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 07:27:26.861, foo, 2016-07-05 07:27:26.861, foo, 0}
2016-07-05 07:27:26,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 07:27:26.862, foo, 2016-07-05 07:27:26.862, foo, 0}
2016-07-05 07:27:26,889 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 07:27:26,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 07:27:26.89, foo, 2016-07-05 07:27:26.89, foo, 0}
2016-07-05 07:27:26,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 07:27:26.892, foo, 2016-07-05 07:27:26.892, foo, 0}
2016-07-05 07:27:26,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 07:27:26.893, foo, 2016-07-05 07:27:26.893, foo, 0}
2016-07-05 07:27:26,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 07:27:26.893, foo, 2016-07-05 07:27:26.893, foo, 0}
2016-07-05 07:27:26,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 07:27:26.894, foo, 2016-07-05 07:27:26.894, foo, 0}
2016-07-05 07:27:26,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 07:27:26.895, foo, 2016-07-05 07:27:26.895, foo, 0}
2016-07-05 07:27:26,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 07:27:26.902, foo, 2016-07-05 07:27:26.902, foo, 0}
2016-07-05 07:27:26,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 07:27:26.903, foo, 2016-07-05 07:27:26.903, foo, 0}
2016-07-05 07:27:26,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 07:27:26.904, foo, 2016-07-05 07:27:26.904, foo, 0}
2016-07-05 07:27:26,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 07:27:26.905, foo, 2016-07-05 07:27:26.905, foo, 0}
2016-07-05 07:27:26,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 07:27:26.905, foo, 2016-07-05 07:27:26.905, foo, 0}
2016-07-05 07:27:26,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 07:27:26.906, foo, 2016-07-05 07:27:26.906, foo, 0}
2016-07-05 07:27:26,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 07:27:26.907, foo, 2016-07-05 07:27:26.907, foo, 0}
2016-07-05 07:27:26,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 07:27:26.907, foo, 2016-07-05 07:27:26.907, foo, 0}
2016-07-05 07:27:26,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 07:27:26.908, foo, 2016-07-05 07:27:26.908, foo, 0}
2016-07-05 07:27:26,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 07:27:26.909, foo, 2016-07-05 07:27:26.909, foo, 0}
2016-07-05 07:27:26,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 07:27:26.909, foo, 2016-07-05 07:27:26.909, foo, 0}
2016-07-05 07:27:26,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 07:27:26.91, foo, 2016-07-05 07:27:26.91, foo, 0}
2016-07-05 07:27:26,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 07:27:26.911, foo, 2016-07-05 07:27:26.911, foo, 0}
2016-07-05 07:27:26,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 07:27:26.911, foo, 2016-07-05 07:27:26.911, foo, 0}
2016-07-05 07:27:26,928 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 07:27:26,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 07:27:26.929, foo, 2016-07-05 07:27:26.929, foo}
2016-07-05 07:27:26,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 07:27:26.931, foo, 2016-07-05 07:27:26.931, foo}
2016-07-05 07:27:26,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 07:27:26.932, foo, 2016-07-05 07:27:26.932, foo}
2016-07-05 07:27:26,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 07:27:26.934, foo, 2016-07-05 07:27:26.934, foo}
2016-07-05 07:27:26,941 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 07:27:26,942 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:27:26,942 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 07:27:26,942 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:27:27,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 07:27:27.014, foo, 2016-07-05 07:27:27.014, foo, 0}
2016-07-05 07:27:27,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 07:27:27.019, foo, 2016-07-05 07:27:27.019, foo, 0}
2016-07-05 07:27:27,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 07:27:27.022, foo, 2016-07-05 07:27:27.022, foo, 0}
2016-07-05 07:27:27,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 07:27:27.023, foo, 2016-07-05 07:27:27.023, foo, 0}
2016-07-05 07:27:27,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 07:27:27.024, foo, 2016-07-05 07:27:27.024, foo, 0}
2016-07-05 07:27:27,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 07:27:27.024, foo, 2016-07-05 07:27:27.024, foo, 0}
2016-07-05 07:27:27,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 07:27:27.025, foo, 2016-07-05 07:27:27.025, foo, 0}
2016-07-05 07:27:27,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 07:27:27.026, foo, 2016-07-05 07:27:27.026, foo, 0}
2016-07-05 07:27:27,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 07:27:27.027, foo, 2016-07-05 07:27:27.027, foo, 0}
2016-07-05 07:27:27,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 07:27:27.036, foo, 2016-07-05 07:27:27.036, foo, 0}
2016-07-05 07:27:27,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 07:27:27.038, foo, 2016-07-05 07:27:27.038, foo, 0}
2016-07-05 07:27:27,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 07:27:27.039, foo, 2016-07-05 07:27:27.039, foo, 0}
2016-07-05 07:27:27,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 07:27:27.04, foo, 2016-07-05 07:27:27.04, foo, 0}
2016-07-05 07:27:27,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 07:27:27.042, foo, 2016-07-05 07:27:27.042, foo, 0}
2016-07-05 07:27:27,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-05 07:27:27.044, foo, 2016-07-05 07:27:27.044, foo, 0}
2016-07-05 07:27:27,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-05 07:27:27.045, foo, 2016-07-05 07:27:27.045, foo, 0}
2016-07-05 07:27:27,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 07:27:27.046, foo, 2016-07-05 07:27:27.046, foo, 0}
2016-07-05 07:27:27,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 07:27:27.047, foo, 2016-07-05 07:27:27.047, foo, 0}
2016-07-05 07:27:27,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 07:27:27.048, foo, 2016-07-05 07:27:27.048, foo, 0}
2016-07-05 07:27:27,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 07:27:27.05, foo, 2016-07-05 07:27:27.05, foo, 0}
2016-07-05 07:27:27,095 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 07:27:27,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 07:27:27.096, foo, 2016-07-05 07:27:27.096, foo, 0}
2016-07-05 07:27:27,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 07:27:27.098, foo, 2016-07-05 07:27:27.098, foo, 0}
2016-07-05 07:27:27,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 07:27:27.099, foo, 2016-07-05 07:27:27.099, foo, 0}
2016-07-05 07:27:27,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 07:27:27.1, foo, 2016-07-05 07:27:27.1, foo, 0}
2016-07-05 07:27:27,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 07:27:27.101, foo, 2016-07-05 07:27:27.101, foo, 0}
2016-07-05 07:27:27,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 07:27:27.103, foo, 2016-07-05 07:27:27.103, foo, 0}
2016-07-05 07:27:27,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 07:27:27.105, foo, 2016-07-05 07:27:27.105, foo, 0}
2016-07-05 07:27:27,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 07:27:27.106, foo, 2016-07-05 07:27:27.107, foo, 0}
2016-07-05 07:27:27,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 07:27:27.108, foo, 2016-07-05 07:27:27.108, foo, 0}
2016-07-05 07:27:27,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 07:27:27.11, foo, 2016-07-05 07:27:27.11, foo, 0}
2016-07-05 07:27:27,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 07:27:27.111, foo, 2016-07-05 07:27:27.111, foo, 0}
2016-07-05 07:27:27,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 07:27:27.113, foo, 2016-07-05 07:27:27.113, foo, 0}
2016-07-05 07:27:27,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 07:27:27.114, foo, 2016-07-05 07:27:27.114, foo, 0}
2016-07-05 07:27:27,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 07:27:27.115, foo, 2016-07-05 07:27:27.115, foo, 0}
2016-07-05 07:27:27,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 07:27:27.117, foo, 2016-07-05 07:27:27.117, foo, 0}
2016-07-05 07:27:27,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 07:27:27.118, foo, 2016-07-05 07:27:27.118, foo, 0}
2016-07-05 07:27:27,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 07:27:27.12, foo, 2016-07-05 07:27:27.12, foo, 0}
2016-07-05 07:27:27,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 07:27:27.121, foo, 2016-07-05 07:27:27.121, foo, 0}
2016-07-05 07:27:27,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 07:27:27.123, foo, 2016-07-05 07:27:27.123, foo, 0}
2016-07-05 07:27:27,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 07:27:27.124, foo, 2016-07-05 07:27:27.125, foo, 0}
2016-07-05 07:27:27,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 07:27:27.126, foo, 2016-07-05 07:27:27.126, foo, 0}
2016-07-05 07:27:27,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 07:27:27.128, foo, 2016-07-05 07:27:27.128, foo, 0}
2016-07-05 07:27:27,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 07:27:27.129, foo, 2016-07-05 07:27:27.129, foo, 0}
2016-07-05 07:27:27,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 07:27:27.131, foo, 2016-07-05 07:27:27.131, foo, 0}
2016-07-05 07:27:27,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 07:27:27.132, foo, 2016-07-05 07:27:27.132, foo, 0}
2016-07-05 07:27:27,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 07:27:27.133, foo, 2016-07-05 07:27:27.133, foo, 0}
2016-07-05 07:27:27,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 07:27:27.135, foo, 2016-07-05 07:27:27.135, foo, 0}
2016-07-05 07:27:27,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 07:27:27.136, foo, 2016-07-05 07:27:27.136, foo, 0}
2016-07-05 07:27:27,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 07:27:27.142, foo, 2016-07-05 07:27:27.142, foo, 0}
2016-07-05 07:27:27,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 07:27:27.144, foo, 2016-07-05 07:27:27.144, foo, 0}
2016-07-05 07:27:27,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 07:27:27.145, foo, 2016-07-05 07:27:27.145, foo, 0}
2016-07-05 07:27:27,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 07:27:27.147, foo, 2016-07-05 07:27:27.147, foo, 0}
2016-07-05 07:27:27,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 07:27:27.148, foo, 2016-07-05 07:27:27.148, foo, 0}
2016-07-05 07:27:27,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:27:27.149, foo, 2016-07-05 07:27:27.149, foo, 0}
2016-07-05 07:27:27,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 07:27:27.151, foo, 2016-07-05 07:27:27.151, foo, 0}
2016-07-05 07:27:27,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:27:27.153, foo, 2016-07-05 07:27:27.153, foo, 0}
2016-07-05 07:27:27,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 07:27:27.155, foo, 2016-07-05 07:27:27.155, foo, 0}
2016-07-05 07:27:27,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 07:27:27.156, foo, 2016-07-05 07:27:27.156, foo, 0}
2016-07-05 07:27:27,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 07:27:27.158, foo, 2016-07-05 07:27:27.158, foo, 0}
2016-07-05 07:27:27,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 07:27:27.16, foo, 2016-07-05 07:27:27.16, foo, 0}
2016-07-05 07:27:27,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 07:27:27.161, foo, 2016-07-05 07:27:27.161, foo, 0}
2016-07-05 07:27:27,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 07:27:27.163, foo, 2016-07-05 07:27:27.163, foo, 0}
2016-07-05 07:27:27,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 07:27:27.164, foo, 2016-07-05 07:27:27.164, foo, 0}
2016-07-05 07:27:27,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 07:27:27.165, foo, 2016-07-05 07:27:27.165, foo, 0}
2016-07-05 07:27:27,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:27:27.166, foo, 2016-07-05 07:27:27.166, foo, 0}
2016-07-05 07:27:27,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 07:27:27.167, foo, 2016-07-05 07:27:27.167, foo, 0}
2016-07-05 07:27:27,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:27:27.168, foo, 2016-07-05 07:27:27.168, foo, 0}
2016-07-05 07:27:27,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 07:27:27.169, foo, 2016-07-05 07:27:27.169, foo, 0}
2016-07-05 07:27:27,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 07:27:27.17, foo, 2016-07-05 07:27:27.17, foo, 0}
2016-07-05 07:27:27,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 07:27:27.171, foo, 2016-07-05 07:27:27.171, foo, 0}
2016-07-05 07:27:27,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 07:27:27.175, foo, 2016-07-05 07:27:27.175, foo, 0}
2016-07-05 07:27:27,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 07:27:27.176, foo, 2016-07-05 07:27:27.176, foo, 0}
2016-07-05 07:27:27,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 07:27:27.178, foo, 2016-07-05 07:27:27.178, foo, 0}
2016-07-05 07:27:27,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 07:27:27.179, foo, 2016-07-05 07:27:27.179, foo, 0}
2016-07-05 07:27:27,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:27:27.18, foo, 2016-07-05 07:27:27.18, foo, 0}
2016-07-05 07:27:27,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 07:27:27.181, foo, 2016-07-05 07:27:27.181, foo, 0}
2016-07-05 07:27:27,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:27:27.183, foo, 2016-07-05 07:27:27.183, foo, 0}
2016-07-05 07:27:27,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 07:27:27.187, foo, 2016-07-05 07:27:27.187, foo, 0}
2016-07-05 07:27:27,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 07:27:27.189, foo, 2016-07-05 07:27:27.189, foo, 0}
2016-07-05 07:27:27,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 07:27:27.191, foo, 2016-07-05 07:27:27.191, foo, 0}
2016-07-05 07:27:27,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 07:27:27.193, foo, 2016-07-05 07:27:27.193, foo, 0}
2016-07-05 07:27:27,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 07:27:27.195, foo, 2016-07-05 07:27:27.196, foo, 0}
2016-07-05 07:27:27,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 07:27:27.198, foo, 2016-07-05 07:27:27.198, foo, 0}
2016-07-05 07:27:27,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 07:27:27.199, foo, 2016-07-05 07:27:27.199, foo, 0}
2016-07-05 07:27:27,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 07:27:27.2, foo, 2016-07-05 07:27:27.2, foo, 0}
2016-07-05 07:27:27,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 07:27:27.202, foo, 2016-07-05 07:27:27.202, foo, 0}
2016-07-05 07:27:27,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 07:27:27.203, foo, 2016-07-05 07:27:27.203, foo, 0}
2016-07-05 07:27:27,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 07:27:27.204, foo, 2016-07-05 07:27:27.204, foo, 0}
2016-07-05 07:27:27,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 07:27:27.205, foo, 2016-07-05 07:27:27.205, foo, 0}
2016-07-05 07:27:27,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 07:27:27.208, foo, 2016-07-05 07:27:27.208, foo, 0}
2016-07-05 07:27:27,271 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 07:27:27,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 07:27:27.272, foo, 2016-07-05 07:27:27.272, foo}
2016-07-05 07:27:27,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 07:27:27.275, foo, 2016-07-05 07:27:27.275, foo}
2016-07-05 07:27:27,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 07:27:27.276, foo, 2016-07-05 07:27:27.276, foo}
2016-07-05 07:27:27,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 07:27:27.278, foo, 2016-07-05 07:27:27.278, foo}
2016-07-05 07:27:27,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 07:27:27.279, foo, 2016-07-05 07:27:27.279, foo}
2016-07-05 07:27:27,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 07:27:27.281, foo, 2016-07-05 07:27:27.281, foo}
2016-07-05 07:27:27,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 07:27:27.283, foo, 2016-07-05 07:27:27.283, foo}
2016-07-05 07:27:27,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 07:27:27.284, foo, 2016-07-05 07:27:27.284, foo}
2016-07-05 07:27:27,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 07:27:27.286, foo, 2016-07-05 07:27:27.286, foo}
2016-07-05 07:27:27,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 07:27:27.287, foo, 2016-07-05 07:27:27.287, foo}
2016-07-05 07:27:27,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 07:27:27.289, foo, 2016-07-05 07:27:27.289, foo}
2016-07-05 07:27:27,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 07:27:27.291, foo, 2016-07-05 07:27:27.291, foo}
2016-07-05 07:27:27,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 07:27:27.303, foo, 2016-07-05 07:27:27.303, foo}
2016-07-05 07:27:27,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 07:27:27.304, foo, 2016-07-05 07:27:27.304, foo}
2016-07-05 07:27:27,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 07:27:27.305, foo, 2016-07-05 07:27:27.305, foo}
2016-07-05 07:27:27,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 07:27:27.306, foo, 2016-07-05 07:27:27.306, foo}
2016-07-05 07:27:27,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 07:27:27.309, foo, 2016-07-05 07:27:27.309, foo}
2016-07-05 07:27:27,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 07:27:27.31, foo, 2016-07-05 07:27:27.31, foo}
2016-07-05 07:27:27,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 07:27:27.312, foo, 2016-07-05 07:27:27.312, foo}
2016-07-05 07:27:27,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 07:27:27.313, foo, 2016-07-05 07:27:27.313, foo}
2016-07-05 07:27:27,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 07:27:27.315, foo, 2016-07-05 07:27:27.315, foo}
2016-07-05 07:27:27,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 07:27:27.316, foo, 2016-07-05 07:27:27.316, foo}
2016-07-05 07:27:27,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 07:27:27.317, foo, 2016-07-05 07:27:27.317, foo}
2016-07-05 07:27:27,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 07:27:27.319, foo, 2016-07-05 07:27:27.319, foo}
2016-07-05 07:27:27,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 07:27:27.32, foo, 2016-07-05 07:27:27.32, foo}
2016-07-05 07:27:27,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 07:27:27.322, foo, 2016-07-05 07:27:27.322, foo}
2016-07-05 07:27:27,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 07:27:27.325, foo, 2016-07-05 07:27:27.325, foo}
2016-07-05 07:27:27,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 07:27:27.327, foo, 2016-07-05 07:27:27.327, foo}
2016-07-05 07:27:27,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 07:27:27.328, foo, 2016-07-05 07:27:27.328, foo}
2016-07-05 07:27:27,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:27:27.329, foo, 2016-07-05 07:27:27.329, foo}
2016-07-05 07:27:27,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:27:27.33, foo, 2016-07-05 07:27:27.33, foo}
2016-07-05 07:27:27,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:27:27.331, foo, 2016-07-05 07:27:27.331, foo}
2016-07-05 07:27:27,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 07:27:27.332, foo, 2016-07-05 07:27:27.332, foo}
2016-07-05 07:27:27,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 07:27:27.333, foo, 2016-07-05 07:27:27.333, foo}
2016-07-05 07:27:27,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 07:27:27.335, foo, 2016-07-05 07:27:27.335, foo}
2016-07-05 07:27:27,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 07:27:27.336, foo, 2016-07-05 07:27:27.336, foo}
2016-07-05 07:27:27,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 07:27:27.337, foo, 2016-07-05 07:27:27.337, foo}
2016-07-05 07:27:27,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 07:27:27.338, foo, 2016-07-05 07:27:27.338, foo}
2016-07-05 07:27:27,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 07:27:27.338, foo, 2016-07-05 07:27:27.338, foo}
2016-07-05 07:27:27,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 07:27:27.344, foo, 2016-07-05 07:27:27.344, foo}
2016-07-05 07:27:27,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 07:27:27.345, foo, 2016-07-05 07:27:27.345, foo}
2016-07-05 07:27:27,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 07:27:27.346, foo, 2016-07-05 07:27:27.346, foo}
2016-07-05 07:27:27,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 07:27:27.362, foo, 2016-07-05 07:27:27.362, foo}
2016-07-05 07:27:27,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 07:27:27.364, foo, 2016-07-05 07:27:27.364, foo}
2016-07-05 07:27:27,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 07:27:27.367, foo, 2016-07-05 07:27:27.367, foo}
2016-07-05 07:27:27,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 07:27:27.368, foo, 2016-07-05 07:27:27.368, foo}
2016-07-05 07:27:27,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 07:27:27.369, foo, 2016-07-05 07:27:27.369, foo}
2016-07-05 07:27:27,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 07:27:27.375, foo, 2016-07-05 07:27:27.375, foo}
2016-07-05 07:27:27,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 07:27:27.378, foo, 2016-07-05 07:27:27.378, foo}
2016-07-05 07:27:27,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 07:27:27.379, foo, 2016-07-05 07:27:27.379, foo}
2016-07-05 07:27:27,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 07:27:27.38, foo, 2016-07-05 07:27:27.38, foo}
2016-07-05 07:27:27,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 07:27:27.381, foo, 2016-07-05 07:27:27.381, foo}
2016-07-05 07:27:27,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 07:27:27.383, foo, 2016-07-05 07:27:27.383, foo}
2016-07-05 07:27:27,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 07:27:27.385, foo, 2016-07-05 07:27:27.385, foo}
2016-07-05 07:27:27,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 07:27:27.387, foo, 2016-07-05 07:27:27.387, foo}
2016-07-05 07:27:27,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 07:27:27.389, foo, 2016-07-05 07:27:27.389, foo}
2016-07-05 07:27:27,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 07:27:27.396, foo, 2016-07-05 07:27:27.396, foo}
2016-07-05 07:27:27,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 07:27:27.398, foo, 2016-07-05 07:27:27.398, foo}
2016-07-05 07:27:27,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 07:27:27.399, foo, 2016-07-05 07:27:27.399, foo}
2016-07-05 07:27:27,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 07:27:27.4, foo, 2016-07-05 07:27:27.4, foo}
2016-07-05 07:27:27,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 07:27:27.401, foo, 2016-07-05 07:27:27.401, foo}
2016-07-05 07:27:27,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 07:27:27.402, foo, 2016-07-05 07:27:27.402, foo}
2016-07-05 07:27:27,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 07:27:27.403, foo, 2016-07-05 07:27:27.403, foo}
2016-07-05 07:27:27,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 07:27:27.403, foo, 2016-07-05 07:27:27.403, foo}
2016-07-05 07:27:27,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 07:27:27.404, foo, 2016-07-05 07:27:27.404, foo}
2016-07-05 07:27:27,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 07:27:27.413, foo, 2016-07-05 07:27:27.413, foo}
2016-07-05 07:27:27,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 07:27:27.414, foo, 2016-07-05 07:27:27.414, foo}
2016-07-05 07:27:27,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 07:27:27.415, foo, 2016-07-05 07:27:27.415, foo}
2016-07-05 07:27:27,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 07:27:27.416, foo, 2016-07-05 07:27:27.416, foo}
2016-07-05 07:27:27,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 07:27:27.418, foo, 2016-07-05 07:27:27.418, foo}
2016-07-05 07:27:27,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 07:27:27.419, foo, 2016-07-05 07:27:27.419, foo}
2016-07-05 07:27:27,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 07:27:27.42, foo, 2016-07-05 07:27:27.42, foo}
2016-07-05 07:27:27,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 07:27:27.422, foo, 2016-07-05 07:27:27.422, foo}
2016-07-05 07:27:27,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 07:27:27.423, foo, 2016-07-05 07:27:27.423, foo}
2016-07-05 07:27:27,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 07:27:27.424, foo, 2016-07-05 07:27:27.424, foo}
2016-07-05 07:27:27,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 07:27:27.425, foo, 2016-07-05 07:27:27.425, foo}
2016-07-05 07:27:27,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 07:27:27.426, foo, 2016-07-05 07:27:27.426, foo}
2016-07-05 07:27:27,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 07:27:27.427, foo, 2016-07-05 07:27:27.427, foo}
2016-07-05 07:27:27,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 07:27:27.428, foo, 2016-07-05 07:27:27.428, foo}
2016-07-05 07:27:27,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 07:27:27.429, foo, 2016-07-05 07:27:27.429, foo}
2016-07-05 07:27:27,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 07:27:27.43, foo, 2016-07-05 07:27:27.43, foo}
2016-07-05 07:27:27,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 07:27:27.431, foo, 2016-07-05 07:27:27.431, foo}
2016-07-05 07:27:27,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:27:27.432, foo, 2016-07-05 07:27:27.432, foo}
2016-07-05 07:27:27,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:27:27.433, foo, 2016-07-05 07:27:27.433, foo}
2016-07-05 07:27:27,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:27:27.434, foo, 2016-07-05 07:27:27.434, foo}
2016-07-05 07:27:27,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:27:27.434, foo, 2016-07-05 07:27:27.434, foo}
2016-07-05 07:27:27,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 07:27:27.435, foo, 2016-07-05 07:27:27.435, foo}
2016-07-05 07:27:27,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 07:27:27.436, foo, 2016-07-05 07:27:27.436, foo}
2016-07-05 07:27:27,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 07:27:27.444, foo, 2016-07-05 07:27:27.444, foo}
2016-07-05 07:27:27,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 07:27:27.445, foo, 2016-07-05 07:27:27.445, foo}
2016-07-05 07:27:27,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 07:27:27.446, foo, 2016-07-05 07:27:27.446, foo}
2016-07-05 07:27:27,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 07:27:27.447, foo, 2016-07-05 07:27:27.447, foo}
2016-07-05 07:27:27,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 07:27:27.448, foo, 2016-07-05 07:27:27.448, foo}
2016-07-05 07:27:27,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 07:27:27.449, foo, 2016-07-05 07:27:27.449, foo}
2016-07-05 07:27:27,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 07:27:27.45, foo, 2016-07-05 07:27:27.45, foo}
2016-07-05 07:27:27,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 07:27:27.451, foo, 2016-07-05 07:27:27.451, foo}
2016-07-05 07:27:27,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 07:27:27.452, foo, 2016-07-05 07:27:27.452, foo}
2016-07-05 07:27:27,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 07:27:27.453, foo, 2016-07-05 07:27:27.453, foo}
2016-07-05 07:27:27,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 07:27:27.454, foo, 2016-07-05 07:27:27.454, foo}
2016-07-05 07:27:27,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 07:27:27.456, foo, 2016-07-05 07:27:27.456, foo}
2016-07-05 07:27:27,511 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 07:27:27,512 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 07:27:27,529 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:27,541 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:27:27,550 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:27:27,554 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:27:27,558 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:27:27,561 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:27:27,565 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:27:27,575 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 07:27:27,578 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 07:27:27,581 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 07:27:27,585 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 07:27:27,587 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 07:27:27,596 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 07:27:27,596 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 07:27:27,596 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 07:27:27,597 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 07:27:27,597 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 07:27:27,597 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 07:27:27,606 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 07:27:27,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 07:27:27,612 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 07:27:27,614 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 07:27:27,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 07:27:27,617 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 07:27:27,617 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 07:27:27,619 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:27:27,625 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s503ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:27:28,586 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 07:27:28,589 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 07:27:28,589 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 07:27:28,589 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 07:27:28,590 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 07:27:28,629 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:28,630 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:28,630 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:28,631 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:28,700 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 07:27:28,700 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 07:27:28,701 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 07:27:28,717 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:27:28,909 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 07:27:28,915 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:27:29,364 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:27:29,365 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:27:29,367 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 07:27:29,368 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:27:29,369 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:29,369 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:27:29,384 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 07:27:29,388 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 07:27:29,408 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 07:27:29,409 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 07:27:29,409 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 07:27:29,410 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 07:27:29,478 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 07:27:29,502 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 07:27:29,521 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 07:27:29,556 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 07:27:29,574 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 07:27:29,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 07:27:29,604 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 07:27:29,617 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 07:27:29,629 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 07:27:29,638 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 07:27:29,654 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 07:27:29,665 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 07:27:29,679 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 07:27:29,689 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 07:27:29,696 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 07:27:29,696 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 07:27:29,696 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 07:27:29,696 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 07:27:29,696 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 07:27:29,698 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 07:27:29,701 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 07:27:29,701 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 07:27:29,701 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 07:27:29,743 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 07:27:29,747 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:27:29,837 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1483) -  -> different from previous (schema diff)
2016-07-05 07:27:29,839 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1485) - ...Serializing schema-diff:
2016-07-05 07:27:29,839 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1486) -   filePath = ./schema/project-history-maihamadb.diffmap
2016-07-05 07:27:29,842 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:27:29,854 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s287ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 07:27:30,686 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 07:27:30,689 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 07:27:30,690 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 07:27:30,690 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 07:27:30,691 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 07:27:30,719 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:30,719 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:30,720 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:30,720 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:30,723 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 07:27:30,723 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 07:27:30,724 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 07:27:30,724 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 07:27:30,725 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 07:27:30,725 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 07:27:30,777 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:27:30,873 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 07:27:31,030 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 07:27:31,038 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:27:31,038 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:27:31,040 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:27:31,042 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:27:31,042 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:27:31,043 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:27:31,046 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:27:31,046 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:27:31,049 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:27:31,054 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:27:31,055 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:27:31,055 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:27:31,055 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:27:31,056 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:27:31,056 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:27:31,057 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:27:31,057 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:27:31,069 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:31,419 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:27:31,423 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:27:31,426 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:27:31,432 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:27:31,437 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:27:31,440 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:27:31,451 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 07:27:31,472 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 07:27:31,963 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 07:27:31,963 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 07:27:31,970 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:27:31,982 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:27:31,982 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:27:32,052 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 07:27:32,058 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 07:27:32,059 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 07:27:32,060 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 07:27:32,060 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 07:27:32,061 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 07:27:32,100 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:27:32,123 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:27:32,127 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s453ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 07:27:34,719 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 07:27:34,721 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 07:27:34,721 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 07:27:34,722 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 07:27:34,722 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 07:27:34,742 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:34,743 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:34,743 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:34,743 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:34,762 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 07:27:34,762 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 07:27:34,800 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:27:34,880 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 07:27:35,101 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 07:27:35,107 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:27:35,107 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:27:35,108 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:27:35,109 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:27:35,110 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:27:35,111 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:27:35,114 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:27:35,115 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:27:35,117 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:27:35,127 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:27:35,127 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:27:35,128 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:27:35,128 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:27:35,128 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:27:35,129 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:27:35,129 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:27:35,129 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:27:35,139 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:35,470 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:27:35,473 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:27:35,476 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:27:35,478 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:27:35,482 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:27:35,485 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:27:35,496 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 07:27:35,496 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 07:27:35,497 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 07:27:35,497 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 07:27:35,497 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 07:27:35,498 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 07:27:35,498 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 07:27:35,498 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 07:27:35,499 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 07:27:35,499 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 07:27:35,515 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 07:27:35,518 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 07:27:35,568 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 07:27:35,571 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 07:27:35,588 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 07:27:35,593 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 07:27:35,622 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 07:27:35,641 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 07:27:35,650 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 07:27:35,662 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 07:27:35,669 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 07:27:35,673 [main] INFO  (Database#info():2711) - }
2016-07-05 07:27:35,674 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 07:27:35,675 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 07:27:35,693 [main] INFO  (Database#info():2711) - }
2016-07-05 07:27:35,700 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 07:27:35,747 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 07:27:35,748 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 07:27:35,750 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 07:27:36,313 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 07:27:36,712 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 07:27:36,956 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 07:27:37,164 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 07:27:37,406 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 07:27:37,596 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 07:27:37,772 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 07:27:37,984 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 07:27:38,147 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 07:27:38,269 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 07:27:38,461 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 07:27:38,594 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 07:27:38,702 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 07:27:38,823 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 07:27:38,960 [main] INFO  (Database#info():2711) - }
2016-07-05 07:27:38,960 [main] INFO  (Database#info():2711) -  
2016-07-05 07:27:38,998 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:27:39,006 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s303ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 07:27:39,731 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 07:27:39,735 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 07:27:39,735 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 07:27:39,735 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 07:27:39,735 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 07:27:39,752 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:39,753 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:39,753 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:39,753 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:39,785 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 07:27:39,794 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:27:40,123 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:27:40,124 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:27:40,157 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 07:27:40,163 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:27:40,164 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 07:27:40,166 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 07:27:40,178 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:27:40,178 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 07:27:40,180 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 07:27:40,184 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:27:40,184 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 07:27:40,187 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 07:27:40,194 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:27:40,195 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 07:27:40,195 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:27:40,201 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s480ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 07:27:40,923 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 07:27:40,925 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 07:27:40,926 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 07:27:40,926 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 07:27:40,926 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 07:27:40,946 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:27:40,947 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:27:40,947 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:27:40,947 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:27:40,967 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 07:27:40,967 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 07:27:40,974 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:27:41,077 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 07:27:41,083 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:27:41,401 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:27:41,401 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:27:41,404 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 07:27:41,453 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:27:41,454 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 07:27:41,455 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 07:27:41,467 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:27:41,468 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 07:27:41,470 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 07:27:41,479 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:27:41,479 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 07:27:41,481 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 07:27:41,507 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:27:41,508 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 07:27:41,516 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 07:27:41,517 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 07:27:41,568 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 07:27:41,572 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 07:27:41,573 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 07:27:41,573 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 07:27:41,574 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 07:27:41,574 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 07:27:41,606 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 07:27:41,633 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 07:27:41,643 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 07:27:41,644 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 07:27:41,644 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 07:27:41,645 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 07:27:41,646 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 07:27:41,646 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 07:27:41,646 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 07:27:41,647 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 07:27:41,647 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 07:27:41,648 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 07:27:41,648 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 07:27:41,648 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 07:27:41,678 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 07:27:41,678 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 07:27:41,679 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 07:27:41,679 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 07:27:41,679 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 07:27:41,689 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  AKIRAKANI_OKASHII_KARAMU_MEI INT(11) related to member_service.AKIRAKANI_OKASHII_KARAMU_MEI

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 07:27:41,690 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 07:27:41,691 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 07:27:41,691 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 07:27:41,692 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer AKIRAKANI_OKASHII_KARAMU_MEI:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 07:27:41,698 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 07:27:41,873 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:27:41,880 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:27:41,883 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:27:41,885 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:27:41,887 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:27:41,889 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:27:41,892 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:27:41,905 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 07:27:41,909 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 07:27:41,929 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 07:27:41,929 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 07:27:42,060 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 07:27:42,119 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 07:27:42,137 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 07:27:42,222 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 07:27:42,285 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 07:27:42,344 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 07:27:42,390 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 07:27:42,391 [main] INFO  (Database#info():2711) - }
2016-07-05 07:27:42,393 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 07:27:42,399 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 07:27:42,432 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 07:27:42,452 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 07:27:42,476 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 07:27:42,491 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 07:27:42,511 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 07:27:42,535 [main] INFO  (Database#info():2711) - }
2016-07-05 07:27:42,576 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 07:27:42,586 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:27:42,598 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:27:42,611 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s695ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 07:41:01,032 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:41:01,037 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:41:01,037 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:41:01,043 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:41:01,043 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:41:01,045 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:41:02,843 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:41:02,843 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:41:02,844 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:41:02,844 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:41:02,853 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:41:03,288 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:41:03,288 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:41:03,317 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:41:03,318 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:41:03,318 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:41:03,321 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:41:03,322 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:41:03,322 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:41:03,344 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:41:03,345 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:41:03,346 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:41:03,485 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:41:03,492 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:41:03,497 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:41:03,504 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:41:03,516 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:41:03,536 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:41:03,556 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:41:03,576 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:41:03,591 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:41:03,605 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:41:03,622 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:41:03,644 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:41:03,665 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:41:03,685 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:41:03,706 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:41:03,722 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:41:03,744 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:41:03,762 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:41:03,788 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:41:03,805 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:41:03,823 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:41:03,844 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:41:03,868 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:41:03,873 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:41:03,876 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:41:03,880 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:41:03,884 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:41:03,890 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:41:03,893 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:41:03,898 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:41:03,901 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:41:03,905 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:41:03,909 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:41:03,913 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:41:03,917 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:41:03,922 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:41:03,925 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:41:04,045 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 07:41:04,047 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 07:41:04,050 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:41:04,050 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:41:04,051 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:41:04,051 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:41:04,051 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:41:04,052 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:41:04,056 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:41:04,059 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:41:04,060 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:41:04,061 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:41:04,072 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:41:04,072 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:41:04,073 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:41:04,074 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:41:04,076 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:41:04,079 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:41:04,079 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:41:04,079 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:41:04,080 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:41:04,080 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:41:04,085 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:41:04,105 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:41:04,157 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:41:04,167 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:41:04,178 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:41:04,242 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:41:04,253 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:41:04,266 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:41:04,280 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:41:04,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:41:04,344 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:41:04,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:41:04,366 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:41:04,389 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:41:04,400 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:41:04,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:41:04,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,459 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:41:04,480 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:41:04,499 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,518 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:41:04,558 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,597 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:41:04,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:41:04,641 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:41:04,674 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:41:04,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:41:04,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:41:04,741 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:41:04,760 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:41:04,788 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:41:04,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:41:04,826 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-05 07:41:04,829 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=36 failure=1 *break (in 3 files)
2016-07-05 07:41:04,830 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:41:04,912 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.SQLFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute the SQL!

[SQL File]
playsql/replace-schema-10-basic.sql

[Executed SQL]
create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)

[SQLState]
42000

[ErrorCode]
1072

[SQLException]
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
* * * * * * * * * */
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.throwSQLFailureException(DfSqlFileRunnerBase.java:587)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:80)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.createSchema(DfCreateSchemaProcess.java:274)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.execute(DfCreateSchemaProcess.java:143)
	at org.dbflute.task.DfReplaceSchemaTask.createSchema(DfReplaceSchemaTask.java:261)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:246)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2526)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:848)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:742)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.processNonDispatch(DfSqlFileRunnerExecute.java:98)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema.processNonDispatch(DfCreateSchemaProcess.java:460)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:66)
	... 43 more
2016-07-05 07:41:04,920 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:41:04,926 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s918ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=36 failure=1 *break (in 3 files)
  o replace-schema-00-system.sql
  x replace-schema-10-basic.sql
   >> (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:43:18,769 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:43:18,773 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:43:18,774 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:43:18,780 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:43:18,781 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:43:18,783 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:43:20,361 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:43:20,362 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:43:20,362 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:43:20,363 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:43:20,374 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:43:20,814 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:43:20,814 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:43:20,845 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:43:20,846 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:43:20,846 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:43:20,849 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:43:20,849 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:43:20,850 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:43:20,874 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:43:20,875 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:43:20,876 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:43:20,919 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:43:20,927 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:43:20,932 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:43:20,937 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:43:20,945 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:43:20,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:43:20,996 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:43:21,026 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:43:21,046 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:43:21,070 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:43:21,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:43:21,110 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:43:21,130 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:43:21,146 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:43:21,173 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:43:21,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:43:21,210 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:43:21,227 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:43:21,249 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:43:21,272 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:43:21,287 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:43:21,309 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:43:21,333 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:43:21,338 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:43:21,343 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:43:21,346 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:43:21,349 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:43:21,353 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:43:21,358 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:43:21,361 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:43:21,366 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:43:21,371 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:43:21,375 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:43:21,378 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:43:21,381 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:43:21,384 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:43:21,388 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:43:21,422 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:43:21,423 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:43:21,423 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:43:21,423 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:43:21,424 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:43:21,424 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:43:21,429 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:43:21,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:43:21,436 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:43:21,438 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:43:21,450 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:43:21,450 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:43:21,452 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:43:21,453 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:43:21,457 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:43:21,461 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:43:21,462 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:43:21,462 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:43:21,462 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:43:21,463 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:43:21,470 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:43:21,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:43:21,590 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:43:21,609 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:43:21,677 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:43:21,687 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:43:21,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:43:21,763 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:43:21,778 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:43:21,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:43:21,843 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:43:21,859 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:43:21,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:43:21,909 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:43:21,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:43:21,931 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:43:21,950 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:21,970 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:43:21,992 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:43:22,022 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:22,041 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:22,059 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:43:22,081 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:22,101 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:22,119 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:43:22,142 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:43:22,163 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:43:22,199 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:43:22,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:43:22,251 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:43:22,273 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:43:22,295 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:43:22,315 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:43:22,335 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:43:22,356 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-05 07:43:22,358 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=36 failure=1 *break (in 3 files)
2016-07-05 07:43:22,359 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:43:22,440 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.SQLFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute the SQL!

[SQL File]
playsql/replace-schema-10-basic.sql

[Executed SQL]
create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)

[SQLState]
42000

[ErrorCode]
1072

[SQLException]
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
* * * * * * * * * */
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.throwSQLFailureException(DfSqlFileRunnerBase.java:587)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:80)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.createSchema(DfCreateSchemaProcess.java:274)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.execute(DfCreateSchemaProcess.java:143)
	at org.dbflute.task.DfReplaceSchemaTask.createSchema(DfReplaceSchemaTask.java:261)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:246)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2526)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:848)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:742)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.processNonDispatch(DfSqlFileRunnerExecute.java:98)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema.processNonDispatch(DfCreateSchemaProcess.java:460)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:66)
	... 43 more
2016-07-05 07:43:22,449 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:43:22,456 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s713ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=36 failure=1 *break (in 3 files)
  o replace-schema-00-system.sql
  x replace-schema-10-basic.sql
   >> (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:46:23,894 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:46:23,900 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:46:23,901 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:46:23,906 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:46:23,907 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:46:23,909 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:46:25,192 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:46:25,193 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:46:25,194 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:46:25,194 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:46:25,207 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:46:25,636 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:46:25,637 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:46:25,660 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:46:25,661 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:46:25,661 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:46:25,664 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:46:25,665 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:46:25,665 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:46:25,684 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:46:25,685 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:46:25,686 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:46:25,728 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:46:25,736 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:46:25,742 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:46:25,748 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:46:25,756 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:46:25,775 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:46:25,803 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:46:25,824 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:46:25,839 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:46:25,869 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:46:25,889 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:46:25,914 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:46:25,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:46:25,958 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:46:25,976 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:46:25,999 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:46:26,022 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:46:26,039 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:46:26,052 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:46:26,074 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:46:26,089 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:46:26,113 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:46:26,137 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:46:26,141 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:46:26,146 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:46:26,150 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:46:26,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:46:26,157 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:46:26,160 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:46:26,165 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:46:26,171 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:46:26,175 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:46:26,179 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:46:26,182 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:46:26,186 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:46:26,189 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:46:26,194 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:46:26,231 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:46:26,232 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:46:26,232 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:46:26,233 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:46:26,233 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:46:26,233 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:46:26,238 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:46:26,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:46:26,244 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:46:26,246 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:46:26,258 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:46:26,258 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:46:26,260 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:46:26,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:46:26,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:46:26,267 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:46:26,268 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:46:26,268 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:46:26,269 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:46:26,269 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:46:26,275 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:46:26,306 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:46:26,357 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:46:26,369 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:46:26,382 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:46:26,441 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:46:26,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:46:26,548 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:46:26,558 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:46:26,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:46:26,582 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:46:26,594 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:46:26,619 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:46:26,632 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:46:26,644 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:46:26,657 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:46:26,700 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,725 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:46:26,746 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:46:26,766 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,788 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:46:26,835 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,855 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:46:26,895 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:46:26,923 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:46:26,947 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:46:26,968 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:46:26,986 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:46:27,011 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:46:27,038 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:46:27,050 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:46:27,070 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:46:27,092 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 07:46:27,111 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 07:46:27,131 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 07:46:27,150 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 07:46:27,171 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 07:46:27,192 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 07:46:27,211 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 07:46:27,212 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 07:46:27,213 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 07:46:27,215 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 07:46:27,217 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:46:27,217 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 07:46:27,217 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:46:27,332 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 07:46:27,332 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 07:46:27,333 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 07:46:27,333 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 07:46:27,333 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 07:46:27,334 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 07:46:27,360 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:46:27,360 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 07:46:27,361 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:46:27,612 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:46:27,612 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:46:27,612 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:46:27,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 07:46:27,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 07:46:27,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 07:46:27,703 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 07:46:27,709 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 07:46:27,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 07:46:27,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 07:46:27,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 07:46:27,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 07:46:27,720 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 07:46:27,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 07:46:27,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 07:46:27,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 07:46:27,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 07:46:27,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 07:46:27,739 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 07:46:27,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 07:46:27,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 07:46:27,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 07:46:27,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 07:46:27,747 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 07:46:27,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 07:46:27,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 07:46:27,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 07:46:27,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 07:46:27,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 07:46:27,754 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 07:46:27,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 07:46:27,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 07:46:27,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 07:46:27,761 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 07:46:27,764 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:46:27,764 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 07:46:27,765 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:46:27,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 07:46:27.862, foo, 2016-07-05 07:46:27.862, foo, 0}
2016-07-05 07:46:27,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 07:46:27.87, foo, 2016-07-05 07:46:27.87, foo, 0}
2016-07-05 07:46:27,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 07:46:27.872, foo, 2016-07-05 07:46:27.872, foo, 0}
2016-07-05 07:46:27,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 07:46:27.874, foo, 2016-07-05 07:46:27.874, foo, 0}
2016-07-05 07:46:27,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 07:46:27.877, foo, 2016-07-05 07:46:27.877, foo, 0}
2016-07-05 07:46:27,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 07:46:27.879, foo, 2016-07-05 07:46:27.879, foo, 0}
2016-07-05 07:46:27,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:46:27.881, foo, 2016-07-05 07:46:27.881, foo, 0}
2016-07-05 07:46:27,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 07:46:27.883, foo, 2016-07-05 07:46:27.883, foo, 0}
2016-07-05 07:46:27,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 07:46:27.884, foo, 2016-07-05 07:46:27.884, foo, 0}
2016-07-05 07:46:27,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 07:46:27.887, foo, 2016-07-05 07:46:27.887, foo, 0}
2016-07-05 07:46:27,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 07:46:27.888, foo, 2016-07-05 07:46:27.888, foo, 0}
2016-07-05 07:46:27,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 07:46:27.89, foo, 2016-07-05 07:46:27.89, foo, 0}
2016-07-05 07:46:27,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 07:46:27.892, foo, 2016-07-05 07:46:27.892, foo, 0}
2016-07-05 07:46:27,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 07:46:27.894, foo, 2016-07-05 07:46:27.894, foo, 0}
2016-07-05 07:46:27,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 07:46:27.896, foo, 2016-07-05 07:46:27.897, foo, 0}
2016-07-05 07:46:27,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 07:46:27.899, foo, 2016-07-05 07:46:27.899, foo, 0}
2016-07-05 07:46:27,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:46:27.901, foo, 2016-07-05 07:46:27.901, foo, 0}
2016-07-05 07:46:27,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 07:46:27.902, foo, 2016-07-05 07:46:27.902, foo, 0}
2016-07-05 07:46:27,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 07:46:27.905, foo, 2016-07-05 07:46:27.905, foo, 0}
2016-07-05 07:46:27,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 07:46:27.907, foo, 2016-07-05 07:46:27.907, foo, 0}
2016-07-05 07:46:27,944 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 07:46:27,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 07:46:27.945, foo, 2016-07-05 07:46:27.945, foo, 0}
2016-07-05 07:46:27,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 07:46:27.948, foo, 2016-07-05 07:46:27.948, foo, 0}
2016-07-05 07:46:27,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 07:46:27.951, foo, 2016-07-05 07:46:27.951, foo, 0}
2016-07-05 07:46:27,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 07:46:27.954, foo, 2016-07-05 07:46:27.954, foo, 0}
2016-07-05 07:46:27,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 07:46:27.956, foo, 2016-07-05 07:46:27.956, foo, 0}
2016-07-05 07:46:27,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 07:46:27.959, foo, 2016-07-05 07:46:27.959, foo, 0}
2016-07-05 07:46:27,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 07:46:27.965, foo, 2016-07-05 07:46:27.965, foo, 0}
2016-07-05 07:46:27,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 07:46:27.969, foo, 2016-07-05 07:46:27.969, foo, 0}
2016-07-05 07:46:27,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 07:46:27.972, foo, 2016-07-05 07:46:27.972, foo, 0}
2016-07-05 07:46:27,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 07:46:27.975, foo, 2016-07-05 07:46:27.975, foo, 0}
2016-07-05 07:46:27,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 07:46:27.977, foo, 2016-07-05 07:46:27.977, foo, 0}
2016-07-05 07:46:27,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 07:46:27.98, foo, 2016-07-05 07:46:27.98, foo, 0}
2016-07-05 07:46:27,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 07:46:27.984, foo, 2016-07-05 07:46:27.984, foo, 0}
2016-07-05 07:46:27,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 07:46:27.986, foo, 2016-07-05 07:46:27.986, foo, 0}
2016-07-05 07:46:27,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 07:46:27.989, foo, 2016-07-05 07:46:27.989, foo, 0}
2016-07-05 07:46:27,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 07:46:27.991, foo, 2016-07-05 07:46:27.991, foo, 0}
2016-07-05 07:46:27,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 07:46:27.993, foo, 2016-07-05 07:46:27.993, foo, 0}
2016-07-05 07:46:27,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 07:46:27.995, foo, 2016-07-05 07:46:27.995, foo, 0}
2016-07-05 07:46:27,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 07:46:27.998, foo, 2016-07-05 07:46:27.998, foo, 0}
2016-07-05 07:46:28,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 07:46:28.0, foo, 2016-07-05 07:46:28.0, foo, 0}
2016-07-05 07:46:28,018 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 07:46:28,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:46:28,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 07:46:28,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 07:46:28,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 07:46:28,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 07:46:28,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 07:46:28,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 07:46:28,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 07:46:28,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 07:46:28,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 07:46:28,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 07:46:28,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 07:46:28,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:46:28,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 07:46:28,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 07:46:28,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 07:46:28,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 07:46:28,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 07:46:28,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 07:46:28,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 07:46:28,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 07:46:28,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 07:46:28,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 07:46:28,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 07:46:28,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 07:46:28,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 07:46:28,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 07:46:28,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 07:46:28,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 07:46:28,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 07:46:28,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 07:46:28,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 07:46:28,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 07:46:28,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 07:46:28,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 07:46:28,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 07:46:28,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 07:46:28,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 07:46:28,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 07:46:28,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 07:46:28,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 07:46:28,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 07:46:28,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 07:46:28,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 07:46:28,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 07:46:28,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 07:46:28,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 07:46:28,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 07:46:28,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 07:46:28,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 07:46:28,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 07:46:28,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 07:46:28,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 07:46:28,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 07:46:28,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 07:46:28,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 07:46:28,119 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 07:46:28,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 07:46:28.12, foo, 2016-07-05 07:46:28.12, foo, 0}
2016-07-05 07:46:28,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 07:46:28.121, foo, 2016-07-05 07:46:28.121, foo, 0}
2016-07-05 07:46:28,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 07:46:28.122, foo, 2016-07-05 07:46:28.122, foo, 0}
2016-07-05 07:46:28,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 07:46:28.122, foo, 2016-07-05 07:46:28.122, foo, 0}
2016-07-05 07:46:28,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 07:46:28.123, foo, 2016-07-05 07:46:28.123, foo, 0}
2016-07-05 07:46:28,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 07:46:28.124, foo, 2016-07-05 07:46:28.124, foo, 0}
2016-07-05 07:46:28,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 07:46:28.125, foo, 2016-07-05 07:46:28.125, foo, 0}
2016-07-05 07:46:28,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 07:46:28.126, foo, 2016-07-05 07:46:28.126, foo, 0}
2016-07-05 07:46:28,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 07:46:28.126, foo, 2016-07-05 07:46:28.126, foo, 0}
2016-07-05 07:46:28,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 07:46:28.127, foo, 2016-07-05 07:46:28.127, foo, 0}
2016-07-05 07:46:28,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 07:46:28.129, foo, 2016-07-05 07:46:28.129, foo, 0}
2016-07-05 07:46:28,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 07:46:28.13, foo, 2016-07-05 07:46:28.13, foo, 0}
2016-07-05 07:46:28,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 07:46:28.131, foo, 2016-07-05 07:46:28.131, foo, 0}
2016-07-05 07:46:28,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 07:46:28.132, foo, 2016-07-05 07:46:28.132, foo, 0}
2016-07-05 07:46:28,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 07:46:28.135, foo, 2016-07-05 07:46:28.135, foo, 0}
2016-07-05 07:46:28,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 07:46:28.137, foo, 2016-07-05 07:46:28.137, foo, 0}
2016-07-05 07:46:28,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 07:46:28.138, foo, 2016-07-05 07:46:28.138, foo, 0}
2016-07-05 07:46:28,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 07:46:28.139, foo, 2016-07-05 07:46:28.139, foo, 0}
2016-07-05 07:46:28,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 07:46:28.139, foo, 2016-07-05 07:46:28.139, foo, 0}
2016-07-05 07:46:28,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 07:46:28.14, foo, 2016-07-05 07:46:28.14, foo, 0}
2016-07-05 07:46:28,162 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 07:46:28,166 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfLoadDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the no-exist column in your data file.

[Data Directory]
playsql/data/ut/xls

[Data File]
playsql/data/ut/xls/20-member.xls

[Table Name]
MEMBER_SERVICE

[Found Column]
AKIRAKANI_OKASHII_KARAMU_MEI
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.impl.dataprop.DfLoadingControlProp.throwLoadingControlNoExistenceColumnFoundException(DfLoadingControlProp.java:153)
	at org.dbflute.logic.replaceschema.loaddata.impl.dataprop.DfLoadingControlProp.checkColumnDefExistence(DfLoadingControlProp.java:134)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfAbsractDataWriter.checkColumnDefExistence(DfAbsractDataWriter.java:1145)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.checkHeaderColumnIfNeeds(DfXlsDataHandlerImpl.java:316)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:175)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:154)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:135)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsLoadingTypeData(DfLoadDataProcess.java:291)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:159)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:287)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:248)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 07:46:28,260 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:46:28,265 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s398ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=1
  (common)
  o 10-master.xls
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:47:39,896 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:47:39,901 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:47:39,901 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:47:39,905 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:47:39,906 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:47:39,908 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:47:42,006 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:47:42,007 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:47:42,008 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:47:42,008 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:47:42,017 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:47:42,461 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:47:42,462 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:47:42,487 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:47:42,487 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:47:42,488 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:47:42,490 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:47:42,492 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:47:42,492 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:47:42,517 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:47:42,518 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:47:42,518 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:47:42,662 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:47:42,668 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:47:42,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:47:42,679 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:47:42,688 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:47:42,704 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:47:42,724 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:47:42,742 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:47:42,759 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:47:42,780 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:47:42,798 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:47:42,822 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:47:42,840 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:47:42,861 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:47:42,881 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:47:42,898 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:47:42,920 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:47:42,937 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:47:42,965 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:47:42,980 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:47:42,998 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:47:43,021 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:47:43,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:47:43,048 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:47:43,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:47:43,055 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:47:43,060 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:47:43,065 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:47:43,071 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:47:43,076 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:47:43,080 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:47:43,084 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:47:43,088 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:47:43,093 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:47:43,098 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:47:43,102 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:47:43,106 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:47:43,234 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 07:47:43,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 07:47:43,238 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:47:43,238 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:47:43,239 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:47:43,239 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:47:43,239 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:47:43,240 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:47:43,244 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:47:43,248 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:47:43,249 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:47:43,250 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:47:43,259 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:47:43,259 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:47:43,260 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:47:43,261 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:47:43,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:47:43,267 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:47:43,267 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:47:43,268 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:47:43,268 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:47:43,269 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:47:43,274 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:47:43,291 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:47:43,304 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:47:43,315 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:47:43,383 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:47:43,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:47:43,404 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:47:43,471 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:47:43,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:47:43,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:47:43,553 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:47:43,604 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:47:43,614 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:47:43,659 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:47:43,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:47:43,713 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:47:43,730 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,753 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:47:43,773 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:47:43,795 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,825 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:47:43,873 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,914 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:47:43,936 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:47:43,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:47:43,990 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:47:44,021 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:47:44,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:47:44,071 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:47:44,094 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:47:44,109 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:47:44,129 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:47:44,147 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 07:47:44,170 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 07:47:44,188 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 07:47:44,209 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 07:47:44,230 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 07:47:44,248 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 07:47:44,268 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 07:47:44,268 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 07:47:44,269 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 07:47:44,271 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 07:47:44,273 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:47:44,273 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 07:47:44,274 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:47:44,391 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 07:47:44,391 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 07:47:44,391 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 07:47:44,392 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 07:47:44,392 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 07:47:44,392 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 07:47:44,429 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:47:44,430 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 07:47:44,430 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:47:44,703 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:47:44,704 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:47:44,704 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:47:44,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 07:47:44,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 07:47:44,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 07:47:44,794 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 07:47:44,816 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 07:47:44,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 07:47:44,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 07:47:44,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 07:47:44,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 07:47:44,835 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 07:47:44,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 07:47:44,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 07:47:44,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 07:47:44,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 07:47:44,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 07:47:44,846 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 07:47:44,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 07:47:44,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 07:47:44,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 07:47:44,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 07:47:44,854 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 07:47:44,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 07:47:44,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 07:47:44,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 07:47:44,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 07:47:44,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 07:47:44,865 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 07:47:44,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 07:47:44,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 07:47:44,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 07:47:44,872 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 07:47:44,874 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:47:44,874 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 07:47:44,874 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:47:44,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 07:47:44.945, foo, 2016-07-05 07:47:44.945, foo, 0}
2016-07-05 07:47:44,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 07:47:44.955, foo, 2016-07-05 07:47:44.955, foo, 0}
2016-07-05 07:47:44,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 07:47:44.958, foo, 2016-07-05 07:47:44.958, foo, 0}
2016-07-05 07:47:44,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 07:47:44.96, foo, 2016-07-05 07:47:44.96, foo, 0}
2016-07-05 07:47:44,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 07:47:44.963, foo, 2016-07-05 07:47:44.963, foo, 0}
2016-07-05 07:47:44,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 07:47:44.964, foo, 2016-07-05 07:47:44.964, foo, 0}
2016-07-05 07:47:44,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:47:44.97, foo, 2016-07-05 07:47:44.97, foo, 0}
2016-07-05 07:47:44,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 07:47:44.972, foo, 2016-07-05 07:47:44.972, foo, 0}
2016-07-05 07:47:44,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 07:47:44.973, foo, 2016-07-05 07:47:44.973, foo, 0}
2016-07-05 07:47:44,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 07:47:44.976, foo, 2016-07-05 07:47:44.976, foo, 0}
2016-07-05 07:47:44,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 07:47:44.978, foo, 2016-07-05 07:47:44.978, foo, 0}
2016-07-05 07:47:44,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 07:47:44.982, foo, 2016-07-05 07:47:44.982, foo, 0}
2016-07-05 07:47:44,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 07:47:44.985, foo, 2016-07-05 07:47:44.985, foo, 0}
2016-07-05 07:47:44,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 07:47:44.987, foo, 2016-07-05 07:47:44.987, foo, 0}
2016-07-05 07:47:44,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 07:47:44.989, foo, 2016-07-05 07:47:44.989, foo, 0}
2016-07-05 07:47:44,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 07:47:44.992, foo, 2016-07-05 07:47:44.992, foo, 0}
2016-07-05 07:47:44,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:47:44.994, foo, 2016-07-05 07:47:44.994, foo, 0}
2016-07-05 07:47:44,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 07:47:44.996, foo, 2016-07-05 07:47:44.996, foo, 0}
2016-07-05 07:47:44,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 07:47:44.999, foo, 2016-07-05 07:47:44.999, foo, 0}
2016-07-05 07:47:45,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 07:47:45.001, foo, 2016-07-05 07:47:45.001, foo, 0}
2016-07-05 07:47:45,023 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 07:47:45,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 07:47:45.024, foo, 2016-07-05 07:47:45.024, foo, 0}
2016-07-05 07:47:45,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 07:47:45.027, foo, 2016-07-05 07:47:45.027, foo, 0}
2016-07-05 07:47:45,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 07:47:45.031, foo, 2016-07-05 07:47:45.031, foo, 0}
2016-07-05 07:47:45,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 07:47:45.035, foo, 2016-07-05 07:47:45.035, foo, 0}
2016-07-05 07:47:45,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 07:47:45.038, foo, 2016-07-05 07:47:45.038, foo, 0}
2016-07-05 07:47:45,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 07:47:45.04, foo, 2016-07-05 07:47:45.04, foo, 0}
2016-07-05 07:47:45,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 07:47:45.043, foo, 2016-07-05 07:47:45.043, foo, 0}
2016-07-05 07:47:45,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 07:47:45.046, foo, 2016-07-05 07:47:45.046, foo, 0}
2016-07-05 07:47:45,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 07:47:45.049, foo, 2016-07-05 07:47:45.049, foo, 0}
2016-07-05 07:47:45,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 07:47:45.051, foo, 2016-07-05 07:47:45.052, foo, 0}
2016-07-05 07:47:45,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 07:47:45.054, foo, 2016-07-05 07:47:45.054, foo, 0}
2016-07-05 07:47:45,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 07:47:45.057, foo, 2016-07-05 07:47:45.057, foo, 0}
2016-07-05 07:47:45,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 07:47:45.059, foo, 2016-07-05 07:47:45.059, foo, 0}
2016-07-05 07:47:45,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 07:47:45.061, foo, 2016-07-05 07:47:45.061, foo, 0}
2016-07-05 07:47:45,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 07:47:45.066, foo, 2016-07-05 07:47:45.066, foo, 0}
2016-07-05 07:47:45,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 07:47:45.069, foo, 2016-07-05 07:47:45.069, foo, 0}
2016-07-05 07:47:45,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 07:47:45.071, foo, 2016-07-05 07:47:45.071, foo, 0}
2016-07-05 07:47:45,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 07:47:45.074, foo, 2016-07-05 07:47:45.074, foo, 0}
2016-07-05 07:47:45,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 07:47:45.076, foo, 2016-07-05 07:47:45.076, foo, 0}
2016-07-05 07:47:45,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 07:47:45.078, foo, 2016-07-05 07:47:45.078, foo, 0}
2016-07-05 07:47:45,093 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 07:47:45,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:47:45,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 07:47:45,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 07:47:45,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 07:47:45,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 07:47:45,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 07:47:45,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 07:47:45,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 07:47:45,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 07:47:45,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 07:47:45,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 07:47:45,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 07:47:45,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:47:45,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 07:47:45,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 07:47:45,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 07:47:45,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 07:47:45,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 07:47:45,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 07:47:45,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 07:47:45,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 07:47:45,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 07:47:45,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 07:47:45,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 07:47:45,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 07:47:45,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 07:47:45,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 07:47:45,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 07:47:45,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 07:47:45,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 07:47:45,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 07:47:45,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 07:47:45,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 07:47:45,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 07:47:45,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 07:47:45,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 07:47:45,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 07:47:45,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 07:47:45,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 07:47:45,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 07:47:45,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 07:47:45,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 07:47:45,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 07:47:45,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 07:47:45,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 07:47:45,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 07:47:45,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 07:47:45,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 07:47:45,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 07:47:45,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 07:47:45,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 07:47:45,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 07:47:45,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 07:47:45,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 07:47:45,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 07:47:45,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 07:47:45,197 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 07:47:45,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 07:47:45.198, foo, 2016-07-05 07:47:45.198, foo, 0}
2016-07-05 07:47:45,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 07:47:45.201, foo, 2016-07-05 07:47:45.201, foo, 0}
2016-07-05 07:47:45,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 07:47:45.202, foo, 2016-07-05 07:47:45.202, foo, 0}
2016-07-05 07:47:45,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 07:47:45.203, foo, 2016-07-05 07:47:45.203, foo, 0}
2016-07-05 07:47:45,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 07:47:45.204, foo, 2016-07-05 07:47:45.204, foo, 0}
2016-07-05 07:47:45,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 07:47:45.205, foo, 2016-07-05 07:47:45.205, foo, 0}
2016-07-05 07:47:45,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 07:47:45.206, foo, 2016-07-05 07:47:45.206, foo, 0}
2016-07-05 07:47:45,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 07:47:45.207, foo, 2016-07-05 07:47:45.207, foo, 0}
2016-07-05 07:47:45,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 07:47:45.208, foo, 2016-07-05 07:47:45.208, foo, 0}
2016-07-05 07:47:45,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 07:47:45.209, foo, 2016-07-05 07:47:45.209, foo, 0}
2016-07-05 07:47:45,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 07:47:45.21, foo, 2016-07-05 07:47:45.21, foo, 0}
2016-07-05 07:47:45,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 07:47:45.21, foo, 2016-07-05 07:47:45.21, foo, 0}
2016-07-05 07:47:45,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 07:47:45.211, foo, 2016-07-05 07:47:45.211, foo, 0}
2016-07-05 07:47:45,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 07:47:45.212, foo, 2016-07-05 07:47:45.212, foo, 0}
2016-07-05 07:47:45,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 07:47:45.213, foo, 2016-07-05 07:47:45.213, foo, 0}
2016-07-05 07:47:45,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 07:47:45.214, foo, 2016-07-05 07:47:45.214, foo, 0}
2016-07-05 07:47:45,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 07:47:45.215, foo, 2016-07-05 07:47:45.215, foo, 0}
2016-07-05 07:47:45,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 07:47:45.216, foo, 2016-07-05 07:47:45.216, foo, 0}
2016-07-05 07:47:45,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 07:47:45.217, foo, 2016-07-05 07:47:45.217, foo, 0}
2016-07-05 07:47:45,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 07:47:45.218, foo, 2016-07-05 07:47:45.218, foo, 0}
2016-07-05 07:47:45,243 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 07:47:45,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 07:47:45.245, foo, 2016-07-05 07:47:45.246, foo, 0}
2016-07-05 07:47:45,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 07:47:45.247, foo, 2016-07-05 07:47:45.247, foo, 0}
2016-07-05 07:47:45,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 07:47:45.248, foo, 2016-07-05 07:47:45.248, foo, 0}
2016-07-05 07:47:45,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 07:47:45.25, foo, 2016-07-05 07:47:45.25, foo, 0}
2016-07-05 07:47:45,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 07:47:45.251, foo, 2016-07-05 07:47:45.251, foo, 0}
2016-07-05 07:47:45,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 07:47:45.251, foo, 2016-07-05 07:47:45.251, foo, 0}
2016-07-05 07:47:45,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 07:47:45.252, foo, 2016-07-05 07:47:45.252, foo, 0}
2016-07-05 07:47:45,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 07:47:45.253, foo, 2016-07-05 07:47:45.253, foo, 0}
2016-07-05 07:47:45,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 07:47:45.254, foo, 2016-07-05 07:47:45.254, foo, 0}
2016-07-05 07:47:45,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 07:47:45.255, foo, 2016-07-05 07:47:45.255, foo, 0}
2016-07-05 07:47:45,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 07:47:45.255, foo, 2016-07-05 07:47:45.255, foo, 0}
2016-07-05 07:47:45,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 07:47:45.269, foo, 2016-07-05 07:47:45.269, foo, 0}
2016-07-05 07:47:45,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 07:47:45.27, foo, 2016-07-05 07:47:45.27, foo, 0}
2016-07-05 07:47:45,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 07:47:45.271, foo, 2016-07-05 07:47:45.271, foo, 0}
2016-07-05 07:47:45,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 07:47:45.272, foo, 2016-07-05 07:47:45.272, foo, 0}
2016-07-05 07:47:45,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 07:47:45.273, foo, 2016-07-05 07:47:45.273, foo, 0}
2016-07-05 07:47:45,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 07:47:45.274, foo, 2016-07-05 07:47:45.274, foo, 0}
2016-07-05 07:47:45,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 07:47:45.274, foo, 2016-07-05 07:47:45.274, foo, 0}
2016-07-05 07:47:45,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 07:47:45.275, foo, 2016-07-05 07:47:45.275, foo, 0}
2016-07-05 07:47:45,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 07:47:45.276, foo, 2016-07-05 07:47:45.276, foo, 0}
2016-07-05 07:47:45,297 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 07:47:45,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 07:47:45.298, foo, 2016-07-05 07:47:45.298, foo}
2016-07-05 07:47:45,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 07:47:45.3, foo, 2016-07-05 07:47:45.3, foo}
2016-07-05 07:47:45,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 07:47:45.316, foo, 2016-07-05 07:47:45.316, foo}
2016-07-05 07:47:45,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 07:47:45.317, foo, 2016-07-05 07:47:45.317, foo}
2016-07-05 07:47:45,323 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 07:47:45,323 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:47:45,323 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 07:47:45,324 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:47:45,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 07:47:45.425, foo, 2016-07-05 07:47:45.425, foo, 0}
2016-07-05 07:47:45,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 07:47:45.43, foo, 2016-07-05 07:47:45.43, foo, 0}
2016-07-05 07:47:45,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 07:47:45.439, foo, 2016-07-05 07:47:45.439, foo, 0}
2016-07-05 07:47:45,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 07:47:45.44, foo, 2016-07-05 07:47:45.44, foo, 0}
2016-07-05 07:47:45,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 07:47:45.441, foo, 2016-07-05 07:47:45.441, foo, 0}
2016-07-05 07:47:45,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 07:47:45.442, foo, 2016-07-05 07:47:45.442, foo, 0}
2016-07-05 07:47:45,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 07:47:45.443, foo, 2016-07-05 07:47:45.443, foo, 0}
2016-07-05 07:47:45,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 07:47:45.444, foo, 2016-07-05 07:47:45.444, foo, 0}
2016-07-05 07:47:45,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 07:47:45.445, foo, 2016-07-05 07:47:45.445, foo, 0}
2016-07-05 07:47:45,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 07:47:45.445, foo, 2016-07-05 07:47:45.445, foo, 0}
2016-07-05 07:47:45,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 07:47:45.453, foo, 2016-07-05 07:47:45.453, foo, 0}
2016-07-05 07:47:45,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 07:47:45.467, foo, 2016-07-05 07:47:45.467, foo, 0}
2016-07-05 07:47:45,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 07:47:45.469, foo, 2016-07-05 07:47:45.469, foo, 0}
2016-07-05 07:47:45,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 07:47:45.47, foo, 2016-07-05 07:47:45.47, foo, 0}
2016-07-05 07:47:45,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-05 07:47:45.471, foo, 2016-07-05 07:47:45.471, foo, 0}
2016-07-05 07:47:45,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-05 07:47:45.471, foo, 2016-07-05 07:47:45.471, foo, 0}
2016-07-05 07:47:45,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 07:47:45.472, foo, 2016-07-05 07:47:45.472, foo, 0}
2016-07-05 07:47:45,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 07:47:45.488, foo, 2016-07-05 07:47:45.488, foo, 0}
2016-07-05 07:47:45,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 07:47:45.488, foo, 2016-07-05 07:47:45.488, foo, 0}
2016-07-05 07:47:45,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 07:47:45.489, foo, 2016-07-05 07:47:45.489, foo, 0}
2016-07-05 07:47:45,517 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():229) - ...Retrying by suppressing batch update: PRODUCT
2016-07-05 07:47:45,540 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfXlsDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the update values to not-null columns.

[Data Directory]
playsql/data/ut/xls

[Xls File]
playsql/data/ut/xls/30-product.xls

[Table]
PRODUCT

[SQLException]
java.sql.BatchUpdateException
Column 'REGULAR_PRICE' cannot be null

[Non-Batch Retry]
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException
Column 'REGULAR_PRICE' cannot be null
[PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, REGISTER_DATETIME, REGISTER_USER, UPDATE_DATETIME, UPDATE_USER, VERSION_NO]
{15, Silver Flute, FLUTE-02, INS, ONS, null, null, null, null, null, null}
Row Number: 15

[Bind Type]
PRODUCT_ID = java.lang.Integer
PRODUCT_NAME = java.lang.String (RealStringProcessor)
PRODUCT_HANDLE_CODE = java.lang.String (RealStringProcessor)
PRODUCT_CATEGORY_CODE = java.lang.String (RealStringProcessor)
PRODUCT_STATUS_CODE = java.lang.String (RealStringProcessor)
REGULAR_PRICE = java.lang.Integer
REGISTER_DATETIME = java.sql.Timestamp
REGISTER_USER = java.lang.String (RealStringProcessor)
UPDATE_DATETIME = java.sql.Timestamp
UPDATE_USER = java.lang.String (RealStringProcessor)
VERSION_NO = java.lang.Long (NumberStringProcessor)
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.handleWriteTableException(DfXlsDataHandlerImpl.java:376)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:264)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:154)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:135)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsLoadingTypeData(DfLoadDataProcess.java:291)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:159)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:287)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:248)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Column 'REGULAR_PRICE' cannot be null
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1815)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1277)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:220)
	... 44 more
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'REGULAR_PRICE' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:971)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2530)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1907)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2141)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1773)
	... 46 more
2016-07-05 07:47:45,566 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:47:45,574 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s696ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=2
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:48:26,856 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:48:26,861 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:48:26,862 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:48:26,868 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:48:26,869 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:48:26,871 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:48:28,268 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:48:28,269 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:48:28,269 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:48:28,270 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:48:28,282 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:48:28,730 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:48:28,731 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:48:28,755 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:48:28,755 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:48:28,756 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:48:28,758 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:48:28,759 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:48:28,760 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:48:28,776 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:48:28,777 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:48:28,777 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:48:28,810 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:48:28,819 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:48:28,823 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:48:28,830 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:48:28,838 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:48:28,854 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:48:28,879 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:48:28,904 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:48:28,921 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:48:28,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:48:28,960 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:48:28,983 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:48:29,002 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:48:29,021 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:48:29,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:48:29,060 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:48:29,083 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:48:29,100 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:48:29,123 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:48:29,143 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:48:29,160 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:48:29,181 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:48:29,205 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:48:29,209 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:48:29,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:48:29,217 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:48:29,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:48:29,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:48:29,230 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:48:29,235 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:48:29,238 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:48:29,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:48:29,245 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:48:29,249 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:48:29,253 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:48:29,256 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:48:29,259 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:48:29,389 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 07:48:29,392 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 07:48:29,395 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:48:29,395 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:48:29,396 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:48:29,396 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:48:29,396 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:48:29,397 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:48:29,402 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:48:29,406 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:48:29,407 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:48:29,409 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:48:29,423 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:48:29,424 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:48:29,425 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:48:29,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:48:29,428 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:48:29,433 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:48:29,434 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:48:29,434 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:48:29,435 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:48:29,435 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:48:29,444 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:48:29,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:48:29,484 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:48:29,494 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:48:29,556 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:48:29,569 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:48:29,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:48:29,643 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:48:29,655 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:48:29,666 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:48:29,717 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:48:29,727 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:48:29,738 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:48:29,777 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:48:29,814 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:48:29,826 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:48:29,862 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:29,886 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:48:29,907 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:48:29,928 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:29,948 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:29,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:48:29,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:30,007 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:30,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:48:30,050 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:48:30,080 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:48:30,113 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:48:30,137 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:48:30,158 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:48:30,179 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:48:30,197 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:48:30,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:48:30,232 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:48:30,252 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 07:48:30,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 07:48:30,291 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 07:48:30,302 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 07:48:30,321 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 07:48:30,341 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 07:48:30,363 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 07:48:30,363 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 07:48:30,365 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 07:48:30,368 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 07:48:30,370 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:48:30,371 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 07:48:30,371 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:48:30,480 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 07:48:30,481 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 07:48:30,481 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 07:48:30,481 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 07:48:30,482 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 07:48:30,482 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 07:48:30,506 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:48:30,506 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 07:48:30,506 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:48:30,775 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:48:30,776 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:48:30,776 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:48:30,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 07:48:30,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 07:48:30,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 07:48:30,857 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 07:48:30,867 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 07:48:30,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 07:48:30,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 07:48:30,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 07:48:30,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 07:48:30,882 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 07:48:30,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 07:48:30,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 07:48:30,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 07:48:30,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 07:48:30,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 07:48:30,895 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 07:48:30,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 07:48:30,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 07:48:30,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 07:48:30,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 07:48:30,905 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 07:48:30,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 07:48:30,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 07:48:30,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 07:48:30,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 07:48:30,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 07:48:30,920 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 07:48:30,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 07:48:30,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 07:48:30,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 07:48:30,927 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 07:48:30,929 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:48:30,930 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 07:48:30,930 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:48:31,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 07:48:31.02, foo, 2016-07-05 07:48:31.02, foo, 0}
2016-07-05 07:48:31,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 07:48:31.044, foo, 2016-07-05 07:48:31.044, foo, 0}
2016-07-05 07:48:31,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 07:48:31.046, foo, 2016-07-05 07:48:31.046, foo, 0}
2016-07-05 07:48:31,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 07:48:31.048, foo, 2016-07-05 07:48:31.048, foo, 0}
2016-07-05 07:48:31,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 07:48:31.051, foo, 2016-07-05 07:48:31.051, foo, 0}
2016-07-05 07:48:31,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 07:48:31.053, foo, 2016-07-05 07:48:31.053, foo, 0}
2016-07-05 07:48:31,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:48:31.059, foo, 2016-07-05 07:48:31.059, foo, 0}
2016-07-05 07:48:31,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 07:48:31.061, foo, 2016-07-05 07:48:31.061, foo, 0}
2016-07-05 07:48:31,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 07:48:31.064, foo, 2016-07-05 07:48:31.064, foo, 0}
2016-07-05 07:48:31,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 07:48:31.067, foo, 2016-07-05 07:48:31.067, foo, 0}
2016-07-05 07:48:31,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 07:48:31.069, foo, 2016-07-05 07:48:31.069, foo, 0}
2016-07-05 07:48:31,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 07:48:31.071, foo, 2016-07-05 07:48:31.071, foo, 0}
2016-07-05 07:48:31,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 07:48:31.073, foo, 2016-07-05 07:48:31.073, foo, 0}
2016-07-05 07:48:31,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 07:48:31.076, foo, 2016-07-05 07:48:31.076, foo, 0}
2016-07-05 07:48:31,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 07:48:31.08, foo, 2016-07-05 07:48:31.08, foo, 0}
2016-07-05 07:48:31,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 07:48:31.083, foo, 2016-07-05 07:48:31.083, foo, 0}
2016-07-05 07:48:31,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:48:31.101, foo, 2016-07-05 07:48:31.101, foo, 0}
2016-07-05 07:48:31,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 07:48:31.103, foo, 2016-07-05 07:48:31.103, foo, 0}
2016-07-05 07:48:31,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 07:48:31.105, foo, 2016-07-05 07:48:31.105, foo, 0}
2016-07-05 07:48:31,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 07:48:31.108, foo, 2016-07-05 07:48:31.108, foo, 0}
2016-07-05 07:48:31,144 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 07:48:31,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 07:48:31.146, foo, 2016-07-05 07:48:31.146, foo, 0}
2016-07-05 07:48:31,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 07:48:31.15, foo, 2016-07-05 07:48:31.15, foo, 0}
2016-07-05 07:48:31,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 07:48:31.152, foo, 2016-07-05 07:48:31.152, foo, 0}
2016-07-05 07:48:31,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 07:48:31.155, foo, 2016-07-05 07:48:31.155, foo, 0}
2016-07-05 07:48:31,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 07:48:31.157, foo, 2016-07-05 07:48:31.157, foo, 0}
2016-07-05 07:48:31,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 07:48:31.16, foo, 2016-07-05 07:48:31.16, foo, 0}
2016-07-05 07:48:31,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 07:48:31.162, foo, 2016-07-05 07:48:31.162, foo, 0}
2016-07-05 07:48:31,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 07:48:31.165, foo, 2016-07-05 07:48:31.165, foo, 0}
2016-07-05 07:48:31,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 07:48:31.167, foo, 2016-07-05 07:48:31.167, foo, 0}
2016-07-05 07:48:31,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 07:48:31.17, foo, 2016-07-05 07:48:31.17, foo, 0}
2016-07-05 07:48:31,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 07:48:31.172, foo, 2016-07-05 07:48:31.172, foo, 0}
2016-07-05 07:48:31,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 07:48:31.179, foo, 2016-07-05 07:48:31.179, foo, 0}
2016-07-05 07:48:31,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 07:48:31.181, foo, 2016-07-05 07:48:31.181, foo, 0}
2016-07-05 07:48:31,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 07:48:31.184, foo, 2016-07-05 07:48:31.184, foo, 0}
2016-07-05 07:48:31,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 07:48:31.186, foo, 2016-07-05 07:48:31.186, foo, 0}
2016-07-05 07:48:31,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 07:48:31.189, foo, 2016-07-05 07:48:31.189, foo, 0}
2016-07-05 07:48:31,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 07:48:31.191, foo, 2016-07-05 07:48:31.191, foo, 0}
2016-07-05 07:48:31,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 07:48:31.194, foo, 2016-07-05 07:48:31.194, foo, 0}
2016-07-05 07:48:31,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 07:48:31.196, foo, 2016-07-05 07:48:31.196, foo, 0}
2016-07-05 07:48:31,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 07:48:31.198, foo, 2016-07-05 07:48:31.198, foo, 0}
2016-07-05 07:48:31,216 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 07:48:31,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:48:31,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 07:48:31,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 07:48:31,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 07:48:31,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 07:48:31,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 07:48:31,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 07:48:31,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 07:48:31,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 07:48:31,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 07:48:31,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 07:48:31,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 07:48:31,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:48:31,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 07:48:31,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 07:48:31,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 07:48:31,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 07:48:31,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 07:48:31,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 07:48:31,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 07:48:31,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 07:48:31,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 07:48:31,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 07:48:31,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 07:48:31,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 07:48:31,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 07:48:31,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 07:48:31,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 07:48:31,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 07:48:31,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 07:48:31,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 07:48:31,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 07:48:31,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 07:48:31,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 07:48:31,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 07:48:31,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 07:48:31,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 07:48:31,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 07:48:31,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 07:48:31,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 07:48:31,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 07:48:31,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 07:48:31,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 07:48:31,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 07:48:31,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 07:48:31,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 07:48:31,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 07:48:31,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 07:48:31,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 07:48:31,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 07:48:31,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 07:48:31,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 07:48:31,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 07:48:31,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 07:48:31,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 07:48:31,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 07:48:31,320 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 07:48:31,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 07:48:31.321, foo, 2016-07-05 07:48:31.321, foo, 0}
2016-07-05 07:48:31,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 07:48:31.323, foo, 2016-07-05 07:48:31.323, foo, 0}
2016-07-05 07:48:31,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 07:48:31.323, foo, 2016-07-05 07:48:31.323, foo, 0}
2016-07-05 07:48:31,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 07:48:31.324, foo, 2016-07-05 07:48:31.324, foo, 0}
2016-07-05 07:48:31,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 07:48:31.325, foo, 2016-07-05 07:48:31.325, foo, 0}
2016-07-05 07:48:31,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 07:48:31.325, foo, 2016-07-05 07:48:31.325, foo, 0}
2016-07-05 07:48:31,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 07:48:31.326, foo, 2016-07-05 07:48:31.326, foo, 0}
2016-07-05 07:48:31,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 07:48:31.327, foo, 2016-07-05 07:48:31.327, foo, 0}
2016-07-05 07:48:31,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 07:48:31.327, foo, 2016-07-05 07:48:31.327, foo, 0}
2016-07-05 07:48:31,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 07:48:31.328, foo, 2016-07-05 07:48:31.328, foo, 0}
2016-07-05 07:48:31,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 07:48:31.329, foo, 2016-07-05 07:48:31.329, foo, 0}
2016-07-05 07:48:31,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 07:48:31.33, foo, 2016-07-05 07:48:31.33, foo, 0}
2016-07-05 07:48:31,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 07:48:31.331, foo, 2016-07-05 07:48:31.331, foo, 0}
2016-07-05 07:48:31,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 07:48:31.332, foo, 2016-07-05 07:48:31.332, foo, 0}
2016-07-05 07:48:31,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 07:48:31.333, foo, 2016-07-05 07:48:31.333, foo, 0}
2016-07-05 07:48:31,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 07:48:31.334, foo, 2016-07-05 07:48:31.334, foo, 0}
2016-07-05 07:48:31,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 07:48:31.335, foo, 2016-07-05 07:48:31.335, foo, 0}
2016-07-05 07:48:31,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 07:48:31.337, foo, 2016-07-05 07:48:31.337, foo, 0}
2016-07-05 07:48:31,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 07:48:31.338, foo, 2016-07-05 07:48:31.338, foo, 0}
2016-07-05 07:48:31,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 07:48:31.338, foo, 2016-07-05 07:48:31.338, foo, 0}
2016-07-05 07:48:31,369 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 07:48:31,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 07:48:31.37, foo, 2016-07-05 07:48:31.37, foo, 0}
2016-07-05 07:48:31,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 07:48:31.372, foo, 2016-07-05 07:48:31.372, foo, 0}
2016-07-05 07:48:31,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 07:48:31.373, foo, 2016-07-05 07:48:31.373, foo, 0}
2016-07-05 07:48:31,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 07:48:31.374, foo, 2016-07-05 07:48:31.374, foo, 0}
2016-07-05 07:48:31,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 07:48:31.375, foo, 2016-07-05 07:48:31.375, foo, 0}
2016-07-05 07:48:31,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 07:48:31.376, foo, 2016-07-05 07:48:31.376, foo, 0}
2016-07-05 07:48:31,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 07:48:31.377, foo, 2016-07-05 07:48:31.377, foo, 0}
2016-07-05 07:48:31,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 07:48:31.378, foo, 2016-07-05 07:48:31.378, foo, 0}
2016-07-05 07:48:31,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 07:48:31.378, foo, 2016-07-05 07:48:31.378, foo, 0}
2016-07-05 07:48:31,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 07:48:31.379, foo, 2016-07-05 07:48:31.379, foo, 0}
2016-07-05 07:48:31,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 07:48:31.381, foo, 2016-07-05 07:48:31.381, foo, 0}
2016-07-05 07:48:31,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 07:48:31.381, foo, 2016-07-05 07:48:31.381, foo, 0}
2016-07-05 07:48:31,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 07:48:31.383, foo, 2016-07-05 07:48:31.383, foo, 0}
2016-07-05 07:48:31,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 07:48:31.384, foo, 2016-07-05 07:48:31.384, foo, 0}
2016-07-05 07:48:31,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 07:48:31.384, foo, 2016-07-05 07:48:31.384, foo, 0}
2016-07-05 07:48:31,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 07:48:31.385, foo, 2016-07-05 07:48:31.385, foo, 0}
2016-07-05 07:48:31,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 07:48:31.385, foo, 2016-07-05 07:48:31.385, foo, 0}
2016-07-05 07:48:31,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 07:48:31.386, foo, 2016-07-05 07:48:31.386, foo, 0}
2016-07-05 07:48:31,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 07:48:31.387, foo, 2016-07-05 07:48:31.387, foo, 0}
2016-07-05 07:48:31,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 07:48:31.388, foo, 2016-07-05 07:48:31.388, foo, 0}
2016-07-05 07:48:31,405 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 07:48:31,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 07:48:31.405, foo, 2016-07-05 07:48:31.405, foo}
2016-07-05 07:48:31,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 07:48:31.407, foo, 2016-07-05 07:48:31.407, foo}
2016-07-05 07:48:31,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 07:48:31.408, foo, 2016-07-05 07:48:31.408, foo}
2016-07-05 07:48:31,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 07:48:31.409, foo, 2016-07-05 07:48:31.41, foo}
2016-07-05 07:48:31,415 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 07:48:31,416 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:48:31,416 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 07:48:31,416 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:48:31,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 07:48:31.491, foo, 2016-07-05 07:48:31.491, foo, 0}
2016-07-05 07:48:31,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 07:48:31.494, foo, 2016-07-05 07:48:31.494, foo, 0}
2016-07-05 07:48:31,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 07:48:31.495, foo, 2016-07-05 07:48:31.495, foo, 0}
2016-07-05 07:48:31,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 07:48:31.497, foo, 2016-07-05 07:48:31.497, foo, 0}
2016-07-05 07:48:31,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 07:48:31.498, foo, 2016-07-05 07:48:31.498, foo, 0}
2016-07-05 07:48:31,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 07:48:31.5, foo, 2016-07-05 07:48:31.5, foo, 0}
2016-07-05 07:48:31,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 07:48:31.501, foo, 2016-07-05 07:48:31.501, foo, 0}
2016-07-05 07:48:31,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 07:48:31.502, foo, 2016-07-05 07:48:31.502, foo, 0}
2016-07-05 07:48:31,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 07:48:31.503, foo, 2016-07-05 07:48:31.503, foo, 0}
2016-07-05 07:48:31,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 07:48:31.504, foo, 2016-07-05 07:48:31.504, foo, 0}
2016-07-05 07:48:31,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 07:48:31.505, foo, 2016-07-05 07:48:31.505, foo, 0}
2016-07-05 07:48:31,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 07:48:31.528, foo, 2016-07-05 07:48:31.528, foo, 0}
2016-07-05 07:48:31,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 07:48:31.53, foo, 2016-07-05 07:48:31.53, foo, 0}
2016-07-05 07:48:31,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 07:48:31.531, foo, 2016-07-05 07:48:31.531, foo, 0}
2016-07-05 07:48:31,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2016-07-05 07:48:31.532, foo, 2016-07-05 07:48:31.532, foo, 0}
2016-07-05 07:48:31,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2016-07-05 07:48:31.537, foo, 2016-07-05 07:48:31.537, foo, 0}
2016-07-05 07:48:31,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 07:48:31.538, foo, 2016-07-05 07:48:31.538, foo, 0}
2016-07-05 07:48:31,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 07:48:31.539, foo, 2016-07-05 07:48:31.539, foo, 0}
2016-07-05 07:48:31,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 07:48:31.553, foo, 2016-07-05 07:48:31.553, foo, 0}
2016-07-05 07:48:31,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 07:48:31.554, foo, 2016-07-05 07:48:31.554, foo, 0}
2016-07-05 07:48:31,588 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():229) - ...Retrying by suppressing batch update: PRODUCT
2016-07-05 07:48:31,617 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfXlsDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the update values to not-null columns.

[Data Directory]
playsql/data/ut/xls

[Xls File]
playsql/data/ut/xls/30-product.xls

[Table]
PRODUCT

[SQLException]
java.sql.BatchUpdateException
Column 'REGULAR_PRICE' cannot be null

[Non-Batch Retry]
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException
Column 'REGULAR_PRICE' cannot be null
[PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, REGISTER_DATETIME, REGISTER_USER, UPDATE_DATETIME, UPDATE_USER, VERSION_NO]
{15, Silver Flute, FLUTE-02, INS, ONS, null, null, null, null, null, null}
Row Number: 15

[Bind Type]
PRODUCT_ID = java.lang.Integer
PRODUCT_NAME = java.lang.String (RealStringProcessor)
PRODUCT_HANDLE_CODE = java.lang.String (RealStringProcessor)
PRODUCT_CATEGORY_CODE = java.lang.String (RealStringProcessor)
PRODUCT_STATUS_CODE = java.lang.String (RealStringProcessor)
REGULAR_PRICE = java.lang.Integer
REGISTER_DATETIME = java.sql.Timestamp
REGISTER_USER = java.lang.String (RealStringProcessor)
UPDATE_DATETIME = java.sql.Timestamp
UPDATE_USER = java.lang.String (RealStringProcessor)
VERSION_NO = java.lang.Long (NumberStringProcessor)
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.handleWriteTableException(DfXlsDataHandlerImpl.java:376)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:264)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:154)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:135)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsLoadingTypeData(DfLoadDataProcess.java:291)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:159)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:287)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:248)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Column 'REGULAR_PRICE' cannot be null
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1815)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1277)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:220)
	... 44 more
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'REGULAR_PRICE' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:971)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2530)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1907)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2141)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1773)
	... 46 more
2016-07-05 07:48:31,638 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:48:31,645 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s818ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=2
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:50:07,665 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 07:50:07,670 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 07:50:07,670 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 07:50:07,675 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 07:50:07,676 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 07:50:07,677 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 07:50:08,882 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:50:08,883 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:50:08,883 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:50:08,883 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:50:08,894 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:50:09,353 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:50:09,354 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:50:09,382 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 07:50:09,383 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 07:50:09,384 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 07:50:09,386 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 07:50:09,387 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 07:50:09,387 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 07:50:09,417 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:50:09,418 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:09,419 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:50:09,466 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 07:50:09,471 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 07:50:09,476 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 07:50:09,481 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 07:50:09,488 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 07:50:09,505 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 07:50:09,531 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 07:50:09,551 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 07:50:09,565 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 07:50:09,587 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 07:50:09,605 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 07:50:09,628 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 07:50:09,651 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 07:50:09,665 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 07:50:09,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 07:50:09,706 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 07:50:09,719 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 07:50:09,736 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 07:50:09,757 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 07:50:09,781 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 07:50:09,795 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 07:50:09,818 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 07:50:09,841 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 07:50:09,845 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 07:50:09,851 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 07:50:09,855 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 07:50:09,858 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 07:50:09,864 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 07:50:09,871 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 07:50:09,875 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 07:50:09,879 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 07:50:09,882 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 07:50:09,884 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 07:50:09,888 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 07:50:09,891 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 07:50:09,895 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 07:50:09,901 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 07:50:10,028 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 07:50:10,030 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 07:50:10,032 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 07:50:10,033 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 07:50:10,033 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 07:50:10,033 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 07:50:10,034 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 07:50:10,034 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 07:50:10,039 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 07:50:10,042 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 07:50:10,043 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 07:50:10,045 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 07:50:10,053 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 07:50:10,054 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 07:50:10,055 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 07:50:10,055 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 07:50:10,057 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 07:50:10,060 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:50:10,061 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 07:50:10,061 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 07:50:10,061 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 07:50:10,062 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 07:50:10,068 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 07:50:10,091 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 07:50:10,103 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 07:50:10,171 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 07:50:10,237 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 07:50:10,314 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 07:50:10,374 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 07:50:10,440 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 07:50:10,507 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 07:50:10,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 07:50:10,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 07:50:10,637 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 07:50:10,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 07:50:10,689 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 07:50:10,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 07:50:10,745 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:50:10,766 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 07:50:10,806 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 07:50:10,827 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,846 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,868 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 07:50:10,895 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,915 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,936 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 07:50:10,958 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 07:50:10,978 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 07:50:11,002 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 07:50:11,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:50:11,049 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 07:50:11,080 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 07:50:11,106 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 07:50:11,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 07:50:11,141 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 07:50:11,162 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 07:50:11,181 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 07:50:11,200 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 07:50:11,221 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 07:50:11,241 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 07:50:11,261 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 07:50:11,284 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 07:50:11,285 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 07:50:11,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 07:50:11,289 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 07:50:11,290 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 07:50:11,291 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 07:50:11,291 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 07:50:11,405 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 07:50:11,406 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 07:50:11,406 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 07:50:11,406 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 07:50:11,406 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 07:50:11,407 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 07:50:11,434 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:50:11,434 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 07:50:11,435 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:50:11,714 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:50:11,715 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:11,715 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:50:11,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 07:50:11,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 07:50:11,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 07:50:11,805 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 07:50:11,812 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 07:50:11,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 07:50:11,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 07:50:11,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 07:50:11,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 07:50:11,824 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 07:50:11,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 07:50:11,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 07:50:11,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 07:50:11,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 07:50:11,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 07:50:11,847 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 07:50:11,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 07:50:11,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 07:50:11,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 07:50:11,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 07:50:11,856 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 07:50:11,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 07:50:11,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 07:50:11,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 07:50:11,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 07:50:11,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 07:50:11,869 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 07:50:11,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 07:50:11,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 07:50:11,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 07:50:11,875 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 07:50:11,878 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:50:11,878 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 07:50:11,879 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:50:11,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 07:50:11.986, foo, 2016-07-05 07:50:11.986, foo, 0}
2016-07-05 07:50:11,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 07:50:11.995, foo, 2016-07-05 07:50:11.995, foo, 0}
2016-07-05 07:50:12,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 07:50:12.0, foo, 2016-07-05 07:50:12.0, foo, 0}
2016-07-05 07:50:12,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 07:50:12.003, foo, 2016-07-05 07:50:12.003, foo, 0}
2016-07-05 07:50:12,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 07:50:12.005, foo, 2016-07-05 07:50:12.005, foo, 0}
2016-07-05 07:50:12,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 07:50:12.008, foo, 2016-07-05 07:50:12.008, foo, 0}
2016-07-05 07:50:12,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:50:12.013, foo, 2016-07-05 07:50:12.013, foo, 0}
2016-07-05 07:50:12,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 07:50:12.015, foo, 2016-07-05 07:50:12.015, foo, 0}
2016-07-05 07:50:12,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 07:50:12.019, foo, 2016-07-05 07:50:12.019, foo, 0}
2016-07-05 07:50:12,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 07:50:12.027, foo, 2016-07-05 07:50:12.027, foo, 0}
2016-07-05 07:50:12,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 07:50:12.028, foo, 2016-07-05 07:50:12.028, foo, 0}
2016-07-05 07:50:12,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 07:50:12.031, foo, 2016-07-05 07:50:12.031, foo, 0}
2016-07-05 07:50:12,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 07:50:12.033, foo, 2016-07-05 07:50:12.033, foo, 0}
2016-07-05 07:50:12,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 07:50:12.035, foo, 2016-07-05 07:50:12.035, foo, 0}
2016-07-05 07:50:12,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 07:50:12.037, foo, 2016-07-05 07:50:12.037, foo, 0}
2016-07-05 07:50:12,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 07:50:12.039, foo, 2016-07-05 07:50:12.039, foo, 0}
2016-07-05 07:50:12,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 07:50:12.041, foo, 2016-07-05 07:50:12.041, foo, 0}
2016-07-05 07:50:12,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 07:50:12.042, foo, 2016-07-05 07:50:12.042, foo, 0}
2016-07-05 07:50:12,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 07:50:12.045, foo, 2016-07-05 07:50:12.045, foo, 0}
2016-07-05 07:50:12,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 07:50:12.049, foo, 2016-07-05 07:50:12.049, foo, 0}
2016-07-05 07:50:12,072 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 07:50:12,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 07:50:12.074, foo, 2016-07-05 07:50:12.074, foo, 0}
2016-07-05 07:50:12,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 07:50:12.077, foo, 2016-07-05 07:50:12.077, foo, 0}
2016-07-05 07:50:12,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 07:50:12.082, foo, 2016-07-05 07:50:12.082, foo, 0}
2016-07-05 07:50:12,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 07:50:12.085, foo, 2016-07-05 07:50:12.085, foo, 0}
2016-07-05 07:50:12,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 07:50:12.087, foo, 2016-07-05 07:50:12.087, foo, 0}
2016-07-05 07:50:12,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 07:50:12.09, foo, 2016-07-05 07:50:12.09, foo, 0}
2016-07-05 07:50:12,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 07:50:12.094, foo, 2016-07-05 07:50:12.094, foo, 0}
2016-07-05 07:50:12,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 07:50:12.11, foo, 2016-07-05 07:50:12.11, foo, 0}
2016-07-05 07:50:12,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 07:50:12.114, foo, 2016-07-05 07:50:12.114, foo, 0}
2016-07-05 07:50:12,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 07:50:12.116, foo, 2016-07-05 07:50:12.116, foo, 0}
2016-07-05 07:50:12,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 07:50:12.118, foo, 2016-07-05 07:50:12.118, foo, 0}
2016-07-05 07:50:12,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 07:50:12.119, foo, 2016-07-05 07:50:12.119, foo, 0}
2016-07-05 07:50:12,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 07:50:12.122, foo, 2016-07-05 07:50:12.122, foo, 0}
2016-07-05 07:50:12,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 07:50:12.124, foo, 2016-07-05 07:50:12.124, foo, 0}
2016-07-05 07:50:12,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 07:50:12.126, foo, 2016-07-05 07:50:12.126, foo, 0}
2016-07-05 07:50:12,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 07:50:12.129, foo, 2016-07-05 07:50:12.129, foo, 0}
2016-07-05 07:50:12,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 07:50:12.134, foo, 2016-07-05 07:50:12.134, foo, 0}
2016-07-05 07:50:12,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 07:50:12.137, foo, 2016-07-05 07:50:12.137, foo, 0}
2016-07-05 07:50:12,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 07:50:12.139, foo, 2016-07-05 07:50:12.139, foo, 0}
2016-07-05 07:50:12,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 07:50:12.141, foo, 2016-07-05 07:50:12.141, foo, 0}
2016-07-05 07:50:12,159 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 07:50:12,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:50:12,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 07:50:12,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 07:50:12,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 07:50:12,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 07:50:12,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 07:50:12,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 07:50:12,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 07:50:12,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 07:50:12,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 07:50:12,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 07:50:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 07:50:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 07:50:12,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 07:50:12,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 07:50:12,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 07:50:12,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 07:50:12,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 07:50:12,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 07:50:12,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 07:50:12,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 07:50:12,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 07:50:12,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 07:50:12,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 07:50:12,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 07:50:12,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 07:50:12,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 07:50:12,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 07:50:12,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 07:50:12,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 07:50:12,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 07:50:12,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 07:50:12,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 07:50:12,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 07:50:12,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 07:50:12,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 07:50:12,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 07:50:12,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 07:50:12,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 07:50:12,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 07:50:12,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 07:50:12,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 07:50:12,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 07:50:12,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 07:50:12,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 07:50:12,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 07:50:12,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 07:50:12,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 07:50:12,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 07:50:12,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 07:50:12,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 07:50:12,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 07:50:12,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 07:50:12,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 07:50:12,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 07:50:12,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 07:50:12,270 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 07:50:12,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 07:50:12.271, foo, 2016-07-05 07:50:12.271, foo, 0}
2016-07-05 07:50:12,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 07:50:12.272, foo, 2016-07-05 07:50:12.272, foo, 0}
2016-07-05 07:50:12,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 07:50:12.273, foo, 2016-07-05 07:50:12.273, foo, 0}
2016-07-05 07:50:12,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 07:50:12.274, foo, 2016-07-05 07:50:12.274, foo, 0}
2016-07-05 07:50:12,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 07:50:12.274, foo, 2016-07-05 07:50:12.274, foo, 0}
2016-07-05 07:50:12,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 07:50:12.275, foo, 2016-07-05 07:50:12.275, foo, 0}
2016-07-05 07:50:12,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 07:50:12.275, foo, 2016-07-05 07:50:12.275, foo, 0}
2016-07-05 07:50:12,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 07:50:12.277, foo, 2016-07-05 07:50:12.277, foo, 0}
2016-07-05 07:50:12,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 07:50:12.278, foo, 2016-07-05 07:50:12.278, foo, 0}
2016-07-05 07:50:12,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 07:50:12.279, foo, 2016-07-05 07:50:12.279, foo, 0}
2016-07-05 07:50:12,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 07:50:12.28, foo, 2016-07-05 07:50:12.283, foo, 0}
2016-07-05 07:50:12,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 07:50:12.284, foo, 2016-07-05 07:50:12.284, foo, 0}
2016-07-05 07:50:12,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 07:50:12.285, foo, 2016-07-05 07:50:12.285, foo, 0}
2016-07-05 07:50:12,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 07:50:12.286, foo, 2016-07-05 07:50:12.286, foo, 0}
2016-07-05 07:50:12,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 07:50:12.287, foo, 2016-07-05 07:50:12.287, foo, 0}
2016-07-05 07:50:12,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 07:50:12.288, foo, 2016-07-05 07:50:12.288, foo, 0}
2016-07-05 07:50:12,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 07:50:12.289, foo, 2016-07-05 07:50:12.289, foo, 0}
2016-07-05 07:50:12,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 07:50:12.29, foo, 2016-07-05 07:50:12.29, foo, 0}
2016-07-05 07:50:12,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 07:50:12.29, foo, 2016-07-05 07:50:12.29, foo, 0}
2016-07-05 07:50:12,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 07:50:12.291, foo, 2016-07-05 07:50:12.291, foo, 0}
2016-07-05 07:50:12,314 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 07:50:12,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 07:50:12.315, foo, 2016-07-05 07:50:12.315, foo, 0}
2016-07-05 07:50:12,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 07:50:12.316, foo, 2016-07-05 07:50:12.316, foo, 0}
2016-07-05 07:50:12,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 07:50:12.317, foo, 2016-07-05 07:50:12.317, foo, 0}
2016-07-05 07:50:12,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 07:50:12.318, foo, 2016-07-05 07:50:12.318, foo, 0}
2016-07-05 07:50:12,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 07:50:12.319, foo, 2016-07-05 07:50:12.319, foo, 0}
2016-07-05 07:50:12,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 07:50:12.32, foo, 2016-07-05 07:50:12.32, foo, 0}
2016-07-05 07:50:12,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 07:50:12.321, foo, 2016-07-05 07:50:12.321, foo, 0}
2016-07-05 07:50:12,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 07:50:12.322, foo, 2016-07-05 07:50:12.322, foo, 0}
2016-07-05 07:50:12,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 07:50:12.323, foo, 2016-07-05 07:50:12.323, foo, 0}
2016-07-05 07:50:12,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 07:50:12.324, foo, 2016-07-05 07:50:12.324, foo, 0}
2016-07-05 07:50:12,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 07:50:12.325, foo, 2016-07-05 07:50:12.325, foo, 0}
2016-07-05 07:50:12,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 07:50:12.326, foo, 2016-07-05 07:50:12.326, foo, 0}
2016-07-05 07:50:12,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 07:50:12.348, foo, 2016-07-05 07:50:12.348, foo, 0}
2016-07-05 07:50:12,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 07:50:12.349, foo, 2016-07-05 07:50:12.349, foo, 0}
2016-07-05 07:50:12,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 07:50:12.349, foo, 2016-07-05 07:50:12.349, foo, 0}
2016-07-05 07:50:12,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 07:50:12.35, foo, 2016-07-05 07:50:12.35, foo, 0}
2016-07-05 07:50:12,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 07:50:12.35, foo, 2016-07-05 07:50:12.35, foo, 0}
2016-07-05 07:50:12,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 07:50:12.351, foo, 2016-07-05 07:50:12.351, foo, 0}
2016-07-05 07:50:12,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 07:50:12.352, foo, 2016-07-05 07:50:12.352, foo, 0}
2016-07-05 07:50:12,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 07:50:12.352, foo, 2016-07-05 07:50:12.352, foo, 0}
2016-07-05 07:50:12,373 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 07:50:12,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 07:50:12.373, foo, 2016-07-05 07:50:12.373, foo}
2016-07-05 07:50:12,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 07:50:12.39, foo, 2016-07-05 07:50:12.39, foo}
2016-07-05 07:50:12,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 07:50:12.391, foo, 2016-07-05 07:50:12.391, foo}
2016-07-05 07:50:12,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 07:50:12.393, foo, 2016-07-05 07:50:12.393, foo}
2016-07-05 07:50:12,402 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 07:50:12,402 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 07:50:12,403 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 07:50:12,403 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 07:50:12,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 07:50:12.459, foo, 2016-07-05 07:50:12.459, foo, 0}
2016-07-05 07:50:12,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 07:50:12.461, foo, 2016-07-05 07:50:12.461, foo, 0}
2016-07-05 07:50:12,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 07:50:12.462, foo, 2016-07-05 07:50:12.462, foo, 0}
2016-07-05 07:50:12,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 07:50:12.463, foo, 2016-07-05 07:50:12.463, foo, 0}
2016-07-05 07:50:12,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 07:50:12.464, foo, 2016-07-05 07:50:12.464, foo, 0}
2016-07-05 07:50:12,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 07:50:12.465, foo, 2016-07-05 07:50:12.465, foo, 0}
2016-07-05 07:50:12,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 07:50:12.465, foo, 2016-07-05 07:50:12.465, foo, 0}
2016-07-05 07:50:12,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 07:50:12.466, foo, 2016-07-05 07:50:12.466, foo, 0}
2016-07-05 07:50:12,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 07:50:12.482, foo, 2016-07-05 07:50:12.482, foo, 0}
2016-07-05 07:50:12,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 07:50:12.483, foo, 2016-07-05 07:50:12.483, foo, 0}
2016-07-05 07:50:12,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 07:50:12.485, foo, 2016-07-05 07:50:12.485, foo, 0}
2016-07-05 07:50:12,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 07:50:12.486, foo, 2016-07-05 07:50:12.486, foo, 0}
2016-07-05 07:50:12,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 07:50:12.487, foo, 2016-07-05 07:50:12.487, foo, 0}
2016-07-05 07:50:12,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 07:50:12.489, foo, 2016-07-05 07:50:12.489, foo, 0}
2016-07-05 07:50:12,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 07:50:12.489, foo, 2016-07-05 07:50:12.49, foo, 0}
2016-07-05 07:50:12,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 07:50:12.519, foo, 2016-07-05 07:50:12.519, foo, 0}
2016-07-05 07:50:12,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 07:50:12.52, foo, 2016-07-05 07:50:12.52, foo, 0}
2016-07-05 07:50:12,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 07:50:12.521, foo, 2016-07-05 07:50:12.521, foo, 0}
2016-07-05 07:50:12,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 07:50:12.522, foo, 2016-07-05 07:50:12.522, foo, 0}
2016-07-05 07:50:12,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 07:50:12.523, foo, 2016-07-05 07:50:12.523, foo, 0}
2016-07-05 07:50:12,545 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 07:50:12,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 07:50:12.547, foo, 2016-07-05 07:50:12.547, foo, 0}
2016-07-05 07:50:12,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 07:50:12.549, foo, 2016-07-05 07:50:12.549, foo, 0}
2016-07-05 07:50:12,550 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 07:50:12.55, foo, 2016-07-05 07:50:12.55, foo, 0}
2016-07-05 07:50:12,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 07:50:12.551, foo, 2016-07-05 07:50:12.551, foo, 0}
2016-07-05 07:50:12,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 07:50:12.553, foo, 2016-07-05 07:50:12.553, foo, 0}
2016-07-05 07:50:12,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 07:50:12.554, foo, 2016-07-05 07:50:12.554, foo, 0}
2016-07-05 07:50:12,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 07:50:12.555, foo, 2016-07-05 07:50:12.555, foo, 0}
2016-07-05 07:50:12,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 07:50:12.556, foo, 2016-07-05 07:50:12.556, foo, 0}
2016-07-05 07:50:12,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 07:50:12.558, foo, 2016-07-05 07:50:12.558, foo, 0}
2016-07-05 07:50:12,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 07:50:12.574, foo, 2016-07-05 07:50:12.574, foo, 0}
2016-07-05 07:50:12,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 07:50:12.576, foo, 2016-07-05 07:50:12.576, foo, 0}
2016-07-05 07:50:12,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 07:50:12.579, foo, 2016-07-05 07:50:12.579, foo, 0}
2016-07-05 07:50:12,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 07:50:12.581, foo, 2016-07-05 07:50:12.581, foo, 0}
2016-07-05 07:50:12,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 07:50:12.582, foo, 2016-07-05 07:50:12.582, foo, 0}
2016-07-05 07:50:12,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 07:50:12.584, foo, 2016-07-05 07:50:12.584, foo, 0}
2016-07-05 07:50:12,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 07:50:12.586, foo, 2016-07-05 07:50:12.586, foo, 0}
2016-07-05 07:50:12,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 07:50:12.596, foo, 2016-07-05 07:50:12.596, foo, 0}
2016-07-05 07:50:12,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 07:50:12.598, foo, 2016-07-05 07:50:12.598, foo, 0}
2016-07-05 07:50:12,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 07:50:12.6, foo, 2016-07-05 07:50:12.6, foo, 0}
2016-07-05 07:50:12,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 07:50:12.602, foo, 2016-07-05 07:50:12.602, foo, 0}
2016-07-05 07:50:12,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 07:50:12.603, foo, 2016-07-05 07:50:12.603, foo, 0}
2016-07-05 07:50:12,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 07:50:12.604, foo, 2016-07-05 07:50:12.604, foo, 0}
2016-07-05 07:50:12,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 07:50:12.605, foo, 2016-07-05 07:50:12.605, foo, 0}
2016-07-05 07:50:12,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 07:50:12.608, foo, 2016-07-05 07:50:12.608, foo, 0}
2016-07-05 07:50:12,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 07:50:12.609, foo, 2016-07-05 07:50:12.609, foo, 0}
2016-07-05 07:50:12,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 07:50:12.611, foo, 2016-07-05 07:50:12.611, foo, 0}
2016-07-05 07:50:12,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 07:50:12.612, foo, 2016-07-05 07:50:12.612, foo, 0}
2016-07-05 07:50:12,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 07:50:12.613, foo, 2016-07-05 07:50:12.613, foo, 0}
2016-07-05 07:50:12,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 07:50:12.615, foo, 2016-07-05 07:50:12.615, foo, 0}
2016-07-05 07:50:12,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 07:50:12.617, foo, 2016-07-05 07:50:12.617, foo, 0}
2016-07-05 07:50:12,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 07:50:12.618, foo, 2016-07-05 07:50:12.618, foo, 0}
2016-07-05 07:50:12,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 07:50:12.62, foo, 2016-07-05 07:50:12.62, foo, 0}
2016-07-05 07:50:12,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 07:50:12.621, foo, 2016-07-05 07:50:12.621, foo, 0}
2016-07-05 07:50:12,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:50:12.621, foo, 2016-07-05 07:50:12.621, foo, 0}
2016-07-05 07:50:12,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 07:50:12.622, foo, 2016-07-05 07:50:12.622, foo, 0}
2016-07-05 07:50:12,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:50:12.624, foo, 2016-07-05 07:50:12.624, foo, 0}
2016-07-05 07:50:12,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 07:50:12.625, foo, 2016-07-05 07:50:12.625, foo, 0}
2016-07-05 07:50:12,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 07:50:12.626, foo, 2016-07-05 07:50:12.626, foo, 0}
2016-07-05 07:50:12,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 07:50:12.627, foo, 2016-07-05 07:50:12.627, foo, 0}
2016-07-05 07:50:12,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 07:50:12.628, foo, 2016-07-05 07:50:12.628, foo, 0}
2016-07-05 07:50:12,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 07:50:12.63, foo, 2016-07-05 07:50:12.63, foo, 0}
2016-07-05 07:50:12,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 07:50:12.631, foo, 2016-07-05 07:50:12.631, foo, 0}
2016-07-05 07:50:12,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 07:50:12.632, foo, 2016-07-05 07:50:12.632, foo, 0}
2016-07-05 07:50:12,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 07:50:12.633, foo, 2016-07-05 07:50:12.633, foo, 0}
2016-07-05 07:50:12,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:50:12.634, foo, 2016-07-05 07:50:12.634, foo, 0}
2016-07-05 07:50:12,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 07:50:12.635, foo, 2016-07-05 07:50:12.635, foo, 0}
2016-07-05 07:50:12,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:50:12.636, foo, 2016-07-05 07:50:12.636, foo, 0}
2016-07-05 07:50:12,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 07:50:12.637, foo, 2016-07-05 07:50:12.637, foo, 0}
2016-07-05 07:50:12,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 07:50:12.641, foo, 2016-07-05 07:50:12.641, foo, 0}
2016-07-05 07:50:12,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 07:50:12.643, foo, 2016-07-05 07:50:12.643, foo, 0}
2016-07-05 07:50:12,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 07:50:12.644, foo, 2016-07-05 07:50:12.644, foo, 0}
2016-07-05 07:50:12,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 07:50:12.646, foo, 2016-07-05 07:50:12.646, foo, 0}
2016-07-05 07:50:12,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 07:50:12.647, foo, 2016-07-05 07:50:12.647, foo, 0}
2016-07-05 07:50:12,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 07:50:12.649, foo, 2016-07-05 07:50:12.649, foo, 0}
2016-07-05 07:50:12,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 07:50:12.651, foo, 2016-07-05 07:50:12.651, foo, 0}
2016-07-05 07:50:12,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 07:50:12.652, foo, 2016-07-05 07:50:12.652, foo, 0}
2016-07-05 07:50:12,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 07:50:12.656, foo, 2016-07-05 07:50:12.656, foo, 0}
2016-07-05 07:50:12,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 07:50:12.657, foo, 2016-07-05 07:50:12.657, foo, 0}
2016-07-05 07:50:12,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 07:50:12.659, foo, 2016-07-05 07:50:12.659, foo, 0}
2016-07-05 07:50:12,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 07:50:12.66, foo, 2016-07-05 07:50:12.66, foo, 0}
2016-07-05 07:50:12,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 07:50:12.662, foo, 2016-07-05 07:50:12.662, foo, 0}
2016-07-05 07:50:12,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 07:50:12.663, foo, 2016-07-05 07:50:12.663, foo, 0}
2016-07-05 07:50:12,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 07:50:12.665, foo, 2016-07-05 07:50:12.665, foo, 0}
2016-07-05 07:50:12,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 07:50:12.666, foo, 2016-07-05 07:50:12.666, foo, 0}
2016-07-05 07:50:12,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 07:50:12.667, foo, 2016-07-05 07:50:12.667, foo, 0}
2016-07-05 07:50:12,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 07:50:12.668, foo, 2016-07-05 07:50:12.668, foo, 0}
2016-07-05 07:50:12,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 07:50:12.67, foo, 2016-07-05 07:50:12.67, foo, 0}
2016-07-05 07:50:12,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 07:50:12.671, foo, 2016-07-05 07:50:12.671, foo, 0}
2016-07-05 07:50:12,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 07:50:12.678, foo, 2016-07-05 07:50:12.678, foo, 0}
2016-07-05 07:50:12,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 07:50:12.679, foo, 2016-07-05 07:50:12.679, foo, 0}
2016-07-05 07:50:12,737 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 07:50:12,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 07:50:12.738, foo, 2016-07-05 07:50:12.738, foo}
2016-07-05 07:50:12,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 07:50:12.74, foo, 2016-07-05 07:50:12.74, foo}
2016-07-05 07:50:12,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 07:50:12.742, foo, 2016-07-05 07:50:12.742, foo}
2016-07-05 07:50:12,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 07:50:12.743, foo, 2016-07-05 07:50:12.743, foo}
2016-07-05 07:50:12,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 07:50:12.744, foo, 2016-07-05 07:50:12.744, foo}
2016-07-05 07:50:12,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 07:50:12.746, foo, 2016-07-05 07:50:12.746, foo}
2016-07-05 07:50:12,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 07:50:12.747, foo, 2016-07-05 07:50:12.747, foo}
2016-07-05 07:50:12,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 07:50:12.748, foo, 2016-07-05 07:50:12.748, foo}
2016-07-05 07:50:12,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 07:50:12.749, foo, 2016-07-05 07:50:12.749, foo}
2016-07-05 07:50:12,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 07:50:12.751, foo, 2016-07-05 07:50:12.751, foo}
2016-07-05 07:50:12,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 07:50:12.753, foo, 2016-07-05 07:50:12.753, foo}
2016-07-05 07:50:12,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 07:50:12.754, foo, 2016-07-05 07:50:12.754, foo}
2016-07-05 07:50:12,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 07:50:12.755, foo, 2016-07-05 07:50:12.755, foo}
2016-07-05 07:50:12,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 07:50:12.757, foo, 2016-07-05 07:50:12.757, foo}
2016-07-05 07:50:12,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 07:50:12.758, foo, 2016-07-05 07:50:12.758, foo}
2016-07-05 07:50:12,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 07:50:12.759, foo, 2016-07-05 07:50:12.759, foo}
2016-07-05 07:50:12,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 07:50:12.76, foo, 2016-07-05 07:50:12.76, foo}
2016-07-05 07:50:12,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 07:50:12.762, foo, 2016-07-05 07:50:12.762, foo}
2016-07-05 07:50:12,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 07:50:12.763, foo, 2016-07-05 07:50:12.763, foo}
2016-07-05 07:50:12,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 07:50:12.765, foo, 2016-07-05 07:50:12.765, foo}
2016-07-05 07:50:12,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 07:50:12.766, foo, 2016-07-05 07:50:12.766, foo}
2016-07-05 07:50:12,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 07:50:12.767, foo, 2016-07-05 07:50:12.767, foo}
2016-07-05 07:50:12,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 07:50:12.768, foo, 2016-07-05 07:50:12.768, foo}
2016-07-05 07:50:12,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 07:50:12.77, foo, 2016-07-05 07:50:12.77, foo}
2016-07-05 07:50:12,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 07:50:12.771, foo, 2016-07-05 07:50:12.771, foo}
2016-07-05 07:50:12,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 07:50:12.772, foo, 2016-07-05 07:50:12.772, foo}
2016-07-05 07:50:12,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 07:50:12.773, foo, 2016-07-05 07:50:12.773, foo}
2016-07-05 07:50:12,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 07:50:12.777, foo, 2016-07-05 07:50:12.777, foo}
2016-07-05 07:50:12,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 07:50:12.778, foo, 2016-07-05 07:50:12.778, foo}
2016-07-05 07:50:12,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:50:12.78, foo, 2016-07-05 07:50:12.78, foo}
2016-07-05 07:50:12,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:50:12.782, foo, 2016-07-05 07:50:12.782, foo}
2016-07-05 07:50:12,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 07:50:12.784, foo, 2016-07-05 07:50:12.784, foo}
2016-07-05 07:50:12,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 07:50:12.79, foo, 2016-07-05 07:50:12.79, foo}
2016-07-05 07:50:12,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 07:50:12.791, foo, 2016-07-05 07:50:12.791, foo}
2016-07-05 07:50:12,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 07:50:12.793, foo, 2016-07-05 07:50:12.793, foo}
2016-07-05 07:50:12,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 07:50:12.794, foo, 2016-07-05 07:50:12.794, foo}
2016-07-05 07:50:12,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 07:50:12.795, foo, 2016-07-05 07:50:12.795, foo}
2016-07-05 07:50:12,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 07:50:12.796, foo, 2016-07-05 07:50:12.796, foo}
2016-07-05 07:50:12,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 07:50:12.797, foo, 2016-07-05 07:50:12.797, foo}
2016-07-05 07:50:12,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 07:50:12.798, foo, 2016-07-05 07:50:12.798, foo}
2016-07-05 07:50:12,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 07:50:12.81, foo, 2016-07-05 07:50:12.81, foo}
2016-07-05 07:50:12,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 07:50:12.82, foo, 2016-07-05 07:50:12.82, foo}
2016-07-05 07:50:12,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 07:50:12.821, foo, 2016-07-05 07:50:12.821, foo}
2016-07-05 07:50:12,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 07:50:12.822, foo, 2016-07-05 07:50:12.822, foo}
2016-07-05 07:50:12,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 07:50:12.824, foo, 2016-07-05 07:50:12.824, foo}
2016-07-05 07:50:12,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 07:50:12.825, foo, 2016-07-05 07:50:12.825, foo}
2016-07-05 07:50:12,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 07:50:12.827, foo, 2016-07-05 07:50:12.827, foo}
2016-07-05 07:50:12,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 07:50:12.828, foo, 2016-07-05 07:50:12.828, foo}
2016-07-05 07:50:12,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 07:50:12.829, foo, 2016-07-05 07:50:12.829, foo}
2016-07-05 07:50:12,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 07:50:12.83, foo, 2016-07-05 07:50:12.83, foo}
2016-07-05 07:50:12,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 07:50:12.831, foo, 2016-07-05 07:50:12.831, foo}
2016-07-05 07:50:12,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 07:50:12.832, foo, 2016-07-05 07:50:12.832, foo}
2016-07-05 07:50:12,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 07:50:12.833, foo, 2016-07-05 07:50:12.833, foo}
2016-07-05 07:50:12,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 07:50:12.834, foo, 2016-07-05 07:50:12.834, foo}
2016-07-05 07:50:12,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 07:50:12.835, foo, 2016-07-05 07:50:12.835, foo}
2016-07-05 07:50:12,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 07:50:12.836, foo, 2016-07-05 07:50:12.836, foo}
2016-07-05 07:50:12,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 07:50:12.839, foo, 2016-07-05 07:50:12.839, foo}
2016-07-05 07:50:12,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 07:50:12.846, foo, 2016-07-05 07:50:12.846, foo}
2016-07-05 07:50:12,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 07:50:12.847, foo, 2016-07-05 07:50:12.847, foo}
2016-07-05 07:50:12,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 07:50:12.848, foo, 2016-07-05 07:50:12.848, foo}
2016-07-05 07:50:12,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 07:50:12.849, foo, 2016-07-05 07:50:12.849, foo}
2016-07-05 07:50:12,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 07:50:12.85, foo, 2016-07-05 07:50:12.85, foo}
2016-07-05 07:50:12,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 07:50:12.85, foo, 2016-07-05 07:50:12.85, foo}
2016-07-05 07:50:12,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 07:50:12.851, foo, 2016-07-05 07:50:12.851, foo}
2016-07-05 07:50:12,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 07:50:12.852, foo, 2016-07-05 07:50:12.852, foo}
2016-07-05 07:50:12,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 07:50:12.853, foo, 2016-07-05 07:50:12.853, foo}
2016-07-05 07:50:12,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 07:50:12.854, foo, 2016-07-05 07:50:12.854, foo}
2016-07-05 07:50:12,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 07:50:12.855, foo, 2016-07-05 07:50:12.855, foo}
2016-07-05 07:50:12,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 07:50:12.856, foo, 2016-07-05 07:50:12.856, foo}
2016-07-05 07:50:12,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 07:50:12.856, foo, 2016-07-05 07:50:12.856, foo}
2016-07-05 07:50:12,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 07:50:12.858, foo, 2016-07-05 07:50:12.858, foo}
2016-07-05 07:50:12,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 07:50:12.859, foo, 2016-07-05 07:50:12.859, foo}
2016-07-05 07:50:12,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 07:50:12.86, foo, 2016-07-05 07:50:12.86, foo}
2016-07-05 07:50:12,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 07:50:12.861, foo, 2016-07-05 07:50:12.861, foo}
2016-07-05 07:50:12,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 07:50:12.862, foo, 2016-07-05 07:50:12.862, foo}
2016-07-05 07:50:12,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 07:50:12.865, foo, 2016-07-05 07:50:12.865, foo}
2016-07-05 07:50:12,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 07:50:12.866, foo, 2016-07-05 07:50:12.866, foo}
2016-07-05 07:50:12,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 07:50:12.868, foo, 2016-07-05 07:50:12.868, foo}
2016-07-05 07:50:12,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 07:50:12.869, foo, 2016-07-05 07:50:12.869, foo}
2016-07-05 07:50:12,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 07:50:12.871, foo, 2016-07-05 07:50:12.871, foo}
2016-07-05 07:50:12,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 07:50:12.881, foo, 2016-07-05 07:50:12.881, foo}
2016-07-05 07:50:12,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 07:50:12.883, foo, 2016-07-05 07:50:12.883, foo}
2016-07-05 07:50:12,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:50:12.885, foo, 2016-07-05 07:50:12.885, foo}
2016-07-05 07:50:12,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:50:12.886, foo, 2016-07-05 07:50:12.886, foo}
2016-07-05 07:50:12,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:50:12.887, foo, 2016-07-05 07:50:12.887, foo}
2016-07-05 07:50:12,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 07:50:12.888, foo, 2016-07-05 07:50:12.888, foo}
2016-07-05 07:50:12,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 07:50:12.889, foo, 2016-07-05 07:50:12.889, foo}
2016-07-05 07:50:12,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 07:50:12.89, foo, 2016-07-05 07:50:12.89, foo}
2016-07-05 07:50:12,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 07:50:12.892, foo, 2016-07-05 07:50:12.892, foo}
2016-07-05 07:50:12,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 07:50:12.899, foo, 2016-07-05 07:50:12.899, foo}
2016-07-05 07:50:12,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 07:50:12.901, foo, 2016-07-05 07:50:12.901, foo}
2016-07-05 07:50:12,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 07:50:12.904, foo, 2016-07-05 07:50:12.904, foo}
2016-07-05 07:50:12,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 07:50:12.905, foo, 2016-07-05 07:50:12.905, foo}
2016-07-05 07:50:12,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 07:50:12.906, foo, 2016-07-05 07:50:12.906, foo}
2016-07-05 07:50:12,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 07:50:12.907, foo, 2016-07-05 07:50:12.907, foo}
2016-07-05 07:50:12,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 07:50:12.908, foo, 2016-07-05 07:50:12.908, foo}
2016-07-05 07:50:12,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 07:50:12.909, foo, 2016-07-05 07:50:12.909, foo}
2016-07-05 07:50:12,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 07:50:12.911, foo, 2016-07-05 07:50:12.911, foo}
2016-07-05 07:50:12,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 07:50:12.913, foo, 2016-07-05 07:50:12.913, foo}
2016-07-05 07:50:12,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 07:50:12.913, foo, 2016-07-05 07:50:12.913, foo}
2016-07-05 07:50:12,985 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 07:50:12,987 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 07:50:13,004 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:13,013 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:50:13,022 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:50:13,025 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:50:13,028 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:50:13,031 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:50:13,036 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:50:13,048 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 07:50:13,050 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 07:50:13,052 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 07:50:13,054 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 07:50:13,056 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 07:50:13,060 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 07:50:13,061 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 07:50:13,061 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 07:50:13,061 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 07:50:13,062 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 07:50:13,062 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 07:50:13,069 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 07:50:13,070 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 07:50:13,075 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 07:50:13,076 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 07:50:13,078 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 07:50:13,080 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 07:50:13,081 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 07:50:13,083 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:50:13,088 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s447ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 07:50:14,006 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 07:50:14,008 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 07:50:14,009 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 07:50:14,009 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 07:50:14,009 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 07:50:14,043 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:50:14,043 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:50:14,044 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:50:14,044 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:50:14,099 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 07:50:14,099 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 07:50:14,100 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 07:50:14,116 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:50:14,296 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 07:50:14,304 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:50:14,770 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:50:14,771 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:50:14,772 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 07:50:14,773 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:50:14,774 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:14,774 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:50:14,786 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 07:50:14,790 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 07:50:14,808 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 07:50:14,809 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 07:50:14,809 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 07:50:14,810 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 07:50:14,866 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 07:50:14,882 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 07:50:14,897 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 07:50:14,911 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 07:50:14,925 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 07:50:14,936 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 07:50:14,954 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 07:50:14,970 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 07:50:14,981 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 07:50:14,991 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 07:50:15,005 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 07:50:15,020 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 07:50:15,030 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 07:50:15,045 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 07:50:15,060 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 07:50:15,061 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 07:50:15,061 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 07:50:15,061 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 07:50:15,062 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 07:50:15,063 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 07:50:15,067 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 07:50:15,068 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 07:50:15,068 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 07:50:15,106 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 07:50:15,110 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:50:15,221 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1483) -  -> different from previous (schema diff)
2016-07-05 07:50:15,223 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1485) - ...Serializing schema-diff:
2016-07-05 07:50:15,223 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1486) -   filePath = ./schema/project-history-maihamadb.diffmap
2016-07-05 07:50:15,230 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:50:15,244 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s253ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 07:50:16,033 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 07:50:16,035 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 07:50:16,035 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 07:50:16,036 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 07:50:16,036 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 07:50:16,070 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:50:16,071 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:50:16,071 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:50:16,071 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:50:16,073 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 07:50:16,073 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 07:50:16,074 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 07:50:16,074 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 07:50:16,074 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 07:50:16,075 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 07:50:16,125 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:50:16,240 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 07:50:16,425 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 07:50:16,435 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:50:16,435 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:50:16,437 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:50:16,438 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:50:16,438 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:50:16,440 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:50:16,442 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:50:16,443 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:50:16,445 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:50:16,451 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:50:16,451 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:50:16,452 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:50:16,452 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:50:16,453 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:50:16,453 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:50:16,454 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:50:16,454 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:50:16,467 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:16,820 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:50:16,824 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:50:16,828 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:50:16,831 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:50:16,835 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:50:16,838 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:50:16,845 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 07:50:16,874 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 07:50:17,332 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 07:50:17,333 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 07:50:17,339 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:50:17,353 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:50:17,353 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:50:17,422 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 07:50:17,431 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 07:50:17,432 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 07:50:17,433 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 07:50:17,433 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 07:50:17,434 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 07:50:17,489 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:50:17,515 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:50:17,536 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s504ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 07:50:20,222 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 07:50:20,224 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 07:50:20,225 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 07:50:20,226 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 07:50:20,227 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 07:50:20,252 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:50:20,253 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:50:20,253 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:50:20,253 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:50:20,278 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 07:50:20,278 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 07:50:20,321 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:50:20,401 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 07:50:20,675 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 07:50:20,680 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:50:20,680 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:50:20,682 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:50:20,684 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:50:20,684 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:50:20,686 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:50:20,690 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:50:20,690 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:50:20,693 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:50:20,710 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:50:20,711 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:50:20,711 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:50:20,712 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:50:20,713 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:50:20,714 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:50:20,714 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:50:20,715 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:50:20,728 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:50:21,094 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:50:21,098 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:50:21,101 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:50:21,105 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:50:21,112 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:50:21,115 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:50:21,132 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 07:50:21,133 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 07:50:21,134 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 07:50:21,134 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 07:50:21,134 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 07:50:21,135 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 07:50:21,135 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 07:50:21,137 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 07:50:21,137 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 07:50:21,137 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 07:50:21,163 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 07:50:21,166 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 07:50:21,232 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 07:50:21,235 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 07:50:21,253 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 07:50:21,262 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 07:50:21,281 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 07:50:21,310 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 07:50:21,318 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 07:50:21,340 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 07:50:21,347 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 07:50:21,351 [main] INFO  (Database#info():2711) - }
2016-07-05 07:50:21,352 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 07:50:21,354 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 07:50:21,373 [main] INFO  (Database#info():2711) - }
2016-07-05 07:50:21,382 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 07:50:21,435 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 07:50:21,436 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 07:50:21,437 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 07:50:22,016 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 07:50:22,286 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 07:50:22,498 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 07:50:22,680 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 07:50:22,876 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 07:50:23,074 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 07:50:23,266 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 07:50:23,512 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 07:50:23,675 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 07:50:23,801 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 07:50:24,006 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 07:50:24,133 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 07:50:24,249 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 07:50:24,372 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 07:50:24,505 [main] INFO  (Database#info():2711) - }
2016-07-05 07:50:24,506 [main] INFO  (Database#info():2711) -  
2016-07-05 07:50:24,564 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:50:24,573 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s367ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 07:50:26,093 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 07:50:26,097 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 07:50:26,100 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 07:50:26,100 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 07:50:26,101 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 07:50:26,133 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:50:26,133 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:50:26,134 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:50:26,134 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:50:26,186 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 07:50:26,197 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:50:26,588 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:50:26,588 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:50:26,624 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 07:50:26,630 [main] WARN  (DfSqlFileRunnerExecute#showContinueWarnLog():110) - *Failure: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
/nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
Unknown column 'serv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'field list'
(SQLState=42S22 ErrorCode=1054)
nnnnnnnnnnnnnnnnnnnn/
2016-07-05 07:50:26,633 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=0 failure=1

2016-07-05 07:50:26,634 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 07:50:26,637 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.AKIRAKANI_OKASHII_KARAMU_MEI
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
   and serv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 07:50:26,641 [main] WARN  (DfSqlFileRunnerExecute#showContinueWarnLog():110) - *Failure: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
/nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
Unknown column 'serv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'field list'
(SQLState=42S22 ErrorCode=1054)
nnnnnnnnnnnnnnnnnnnn/
2016-07-05 07:50:26,643 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=0 failure=1

2016-07-05 07:50:26,643 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 07:50:26,645 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 07:50:26,648 [main] WARN  (DfSqlFileRunnerExecute#showContinueWarnLog():110) - *Failure: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
/nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
Unknown column 'srv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'where clause'
(SQLState=42S22 ErrorCode=1054)
nnnnnnnnnnnnnnnnnnnn/
2016-07-05 07:50:26,650 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=0 failure=1

2016-07-05 07:50:26,650 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 07:50:26,652 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.AKIRAKANI_OKASHII_KARAMU_MEI != null*/
  and srv.AKIRAKANI_OKASHII_KARAMU_MEI >= /*pmb.AKIRAKANI_OKASHII_KARAMU_MEI*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 07:50:26,657 [main] WARN  (DfSqlFileRunnerExecute#showContinueWarnLog():110) - *Failure: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
/nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
Unknown column 'srv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'where clause'
(SQLState=42S22 ErrorCode=1054)
nnnnnnnnnnnnnnnnnnnn/
2016-07-05 07:50:26,659 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=0 failure=1

2016-07-05 07:50:26,659 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=0 failure=4 (in 4 files)
2016-07-05 07:50:26,665 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'OutsideSqlTest'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfOutsideSqlTestFailureFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the failure SQL by the OutsideSqlTest.

[Advice]
You can see the exception info
after each SQL logging like this:

  ...Firing [SQL-file]
  SQL: [SQL-string]
  *Failure: [SQLException-class]
  /nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn...
  [SQLException-message]
  [SQLState-info]
  nnnnnnnnnn/

* * * * * * * * * */
	at org.dbflute.task.DfOutsideSqlTestTask.throwOutsideSqlTestFailureFoundException(DfOutsideSqlTestTask.java:335)
	at org.dbflute.task.DfOutsideSqlTestTask.handleSqlFileFailure(DfOutsideSqlTestTask.java:314)
	at org.dbflute.task.DfOutsideSqlTestTask.doExecute(DfOutsideSqlTestTask.java:103)
	at org.dbflute.task.bs.DfAbstractTask$1.callActualExecute(DfAbstractTask.java:113)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTask.execute(DfAbstractTask.java:135)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 07:50:26,680 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:50:26,690 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s629ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  x MemberBhv_selectOutsideMember.sql
   -> Unknown column 'serv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'field list'
  x MemberBhv_selectPartOfMember.sql
   -> Unknown column 'serv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'field list'
  x PurchaseBhv_selectPurchaseMonthCursor.sql
   -> Unknown column 'srv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'where clause'
  x PurchaseBhv_selectPurchaseMonthSummary.sql
   -> Unknown column 'srv.AKIRAKANI_OKASHII_KARAMU_MEI' in 'where clause'

   o: OK (0)
   x: Failure exists (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 07:55:56,819 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 07:55:56,823 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 07:55:56,824 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 07:55:56,824 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 07:55:56,825 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 07:55:56,865 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:55:56,866 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:55:56,867 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:55:56,867 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:55:56,916 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 07:55:56,917 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 07:55:56,917 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 07:55:56,930 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:55:57,083 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 07:55:57,092 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:55:57,659 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:55:57,661 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:55:57,663 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 07:55:57,665 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 07:55:57,666 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:55:57,666 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 07:55:57,691 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 07:55:57,696 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 07:55:57,721 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 07:55:57,721 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 07:55:57,722 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 07:55:57,725 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 07:55:57,802 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 07:55:57,827 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 07:55:57,849 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 07:55:57,881 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 07:55:57,898 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 07:55:57,911 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 07:55:57,927 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 07:55:57,954 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 07:55:57,967 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 07:55:57,979 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 07:55:57,999 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 07:55:58,013 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 07:55:58,023 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 07:55:58,038 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 07:55:58,050 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 07:55:58,050 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 07:55:58,051 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 07:55:58,051 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 07:55:58,051 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 07:55:58,053 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 07:55:58,058 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 07:55:58,059 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 07:55:58,060 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 07:55:58,103 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 07:55:58,201 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:55:58,288 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 07:55:58,288 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:55:58,302 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s499ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 07:55:59,259 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 07:55:59,263 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 07:55:59,263 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 07:55:59,264 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 07:55:59,265 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 07:55:59,305 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:55:59,306 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:55:59,306 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:55:59,307 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:55:59,309 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 07:55:59,310 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 07:55:59,310 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 07:55:59,310 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 07:55:59,311 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 07:55:59,311 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 07:55:59,366 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:55:59,482 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 07:55:59,632 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 07:55:59,639 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:55:59,640 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:55:59,641 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:55:59,642 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:55:59,643 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:55:59,644 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:55:59,646 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:55:59,647 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:55:59,649 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:55:59,655 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:55:59,656 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:55:59,656 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:55:59,657 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:55:59,658 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:55:59,659 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:55:59,659 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:55:59,659 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:55:59,670 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:56:00,009 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:56:00,016 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:56:00,019 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:56:00,024 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:56:00,030 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:56:00,035 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:56:00,043 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 07:56:00,074 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 07:56:00,567 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 07:56:00,569 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 07:56:00,578 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:56:00,595 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:56:00,595 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:56:00,674 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 07:56:00,680 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 07:56:00,681 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 07:56:00,682 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 07:56:00,683 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 07:56:00,683 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 07:56:00,733 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:56:00,747 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:56:00,752 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s516ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 07:56:03,512 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 07:56:03,515 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 07:56:03,515 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 07:56:03,516 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 07:56:03,516 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 07:56:03,553 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:56:03,553 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:56:03,554 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:56:03,555 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:56:03,578 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 07:56:03,578 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 07:56:03,633 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:56:03,736 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 07:56:04,013 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 07:56:04,019 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 07:56:04,019 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 07:56:04,021 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 07:56:04,022 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 07:56:04,023 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 07:56:04,024 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 07:56:04,028 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 07:56:04,029 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 07:56:04,032 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 07:56:04,041 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:56:04,041 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 07:56:04,042 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 07:56:04,042 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 07:56:04,042 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 07:56:04,043 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 07:56:04,043 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 07:56:04,043 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 07:56:04,058 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:56:04,441 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:56:04,444 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:56:04,447 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:56:04,450 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:56:04,455 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:56:04,458 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:56:04,471 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 07:56:04,471 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 07:56:04,471 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 07:56:04,472 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 07:56:04,472 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 07:56:04,472 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 07:56:04,473 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 07:56:04,473 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 07:56:04,473 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 07:56:04,474 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 07:56:04,491 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 07:56:04,494 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 07:56:04,546 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 07:56:04,550 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 07:56:04,575 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 07:56:04,580 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 07:56:04,606 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 07:56:04,622 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 07:56:04,629 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 07:56:04,638 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 07:56:04,644 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 07:56:04,647 [main] INFO  (Database#info():2711) - }
2016-07-05 07:56:04,647 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 07:56:04,649 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 07:56:04,677 [main] INFO  (Database#info():2711) - }
2016-07-05 07:56:04,686 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 07:56:04,725 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 07:56:04,726 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 07:56:04,727 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 07:56:05,308 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 07:56:05,573 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 07:56:05,801 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 07:56:05,981 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 07:56:06,198 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 07:56:06,379 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 07:56:06,557 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 07:56:06,786 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 07:56:06,939 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 07:56:07,080 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 07:56:07,272 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 07:56:07,409 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 07:56:07,525 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 07:56:07,664 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 07:56:07,824 [main] INFO  (Database#info():2711) - }
2016-07-05 07:56:07,825 [main] INFO  (Database#info():2711) -  
2016-07-05 07:56:07,881 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:56:07,892 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s400ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 07:56:08,856 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 07:56:08,858 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 07:56:08,859 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 07:56:08,859 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 07:56:08,859 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 07:56:08,881 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:56:08,882 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:56:08,882 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:56:08,882 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:56:08,911 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 07:56:08,919 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:56:09,237 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:56:09,237 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:56:09,267 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 07:56:09,271 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:56:09,272 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 07:56:09,274 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 07:56:09,279 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:56:09,280 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 07:56:09,283 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 07:56:09,288 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:56:09,289 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 07:56:09,291 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 07:56:09,318 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 07:56:09,319 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 07:56:09,319 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:56:09,328 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s482ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 07:56:10,026 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 07:56:10,028 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 07:56:10,029 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 07:56:10,029 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 07:56:10,029 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 07:56:10,066 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 07:56:10,066 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 07:56:10,066 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 07:56:10,067 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 07:56:10,078 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 07:56:10,079 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 07:56:10,087 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 07:56:10,181 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 07:56:10,188 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 07:56:10,518 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 07:56:10,519 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 07:56:10,522 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 07:56:10,585 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:56:10,585 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 07:56:10,586 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 07:56:10,603 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:56:10,603 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 07:56:10,605 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 07:56:10,631 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:56:10,631 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 07:56:10,633 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 07:56:10,660 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 07:56:10,660 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 07:56:10,670 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 07:56:10,670 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 07:56:10,731 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 07:56:10,737 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 07:56:10,738 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 07:56:10,738 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 07:56:10,739 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 07:56:10,739 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 07:56:10,767 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 07:56:10,796 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 07:56:10,808 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 07:56:10,808 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 07:56:10,809 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 07:56:10,810 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 07:56:10,810 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 07:56:10,810 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 07:56:10,811 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 07:56:10,812 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 07:56:10,813 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 07:56:10,813 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 07:56:10,813 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 07:56:10,814 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 07:56:10,844 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 07:56:10,844 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 07:56:10,845 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 07:56:10,845 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 07:56:10,845 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 07:56:10,862 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 07:56:10,870 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 07:56:10,871 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 07:56:10,871 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 07:56:10,871 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 07:56:10,875 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 07:56:11,050 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 07:56:11,058 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 07:56:11,062 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 07:56:11,064 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 07:56:11,066 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 07:56:11,068 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 07:56:11,071 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 07:56:11,090 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 07:56:11,093 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 07:56:11,110 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 07:56:11,110 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 07:56:11,245 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 07:56:11,310 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 07:56:11,323 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 07:56:11,392 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 07:56:11,456 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 07:56:11,493 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 07:56:11,538 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 07:56:11,539 [main] INFO  (Database#info():2711) - }
2016-07-05 07:56:11,540 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 07:56:11,545 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 07:56:11,581 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 07:56:11,603 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 07:56:11,623 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 07:56:11,645 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 07:56:11,665 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 07:56:11,684 [main] INFO  (Database#info():2711) - }
2016-07-05 07:56:11,723 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 07:56:11,730 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 07:56:11,739 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 07:56:11,749 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s736ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 08:01:15,103 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 08:01:15,107 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 08:01:15,107 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 08:01:15,112 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 08:01:15,113 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 08:01:15,115 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 08:01:16,580 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:16,581 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:16,581 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:16,582 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:16,593 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:01:17,016 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:01:17,016 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:01:17,045 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 08:01:17,046 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 08:01:17,047 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 08:01:17,049 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 08:01:17,049 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 08:01:17,050 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 08:01:17,078 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:01:17,078 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:17,079 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:01:17,213 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 08:01:17,220 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 08:01:17,228 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 08:01:17,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 08:01:17,245 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 08:01:17,258 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 08:01:17,280 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 08:01:17,307 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 08:01:17,320 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 08:01:17,343 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 08:01:17,360 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 08:01:17,382 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 08:01:17,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 08:01:17,420 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 08:01:17,445 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 08:01:17,460 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 08:01:17,482 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 08:01:17,500 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 08:01:17,525 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 08:01:17,542 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 08:01:17,559 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 08:01:17,585 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 08:01:17,603 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 08:01:17,607 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 08:01:17,610 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 08:01:17,614 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 08:01:17,618 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 08:01:17,623 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 08:01:17,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 08:01:17,630 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 08:01:17,634 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 08:01:17,637 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 08:01:17,640 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 08:01:17,643 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 08:01:17,647 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 08:01:17,651 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 08:01:17,657 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 08:01:17,788 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 08:01:17,790 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 08:01:17,792 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 08:01:17,793 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 08:01:17,793 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 08:01:17,793 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 08:01:17,794 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 08:01:17,794 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 08:01:17,798 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 08:01:17,801 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 08:01:17,802 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 08:01:17,803 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 08:01:17,812 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 08:01:17,812 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 08:01:17,813 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 08:01:17,814 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 08:01:17,816 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 08:01:17,819 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 08:01:17,820 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 08:01:17,820 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 08:01:17,821 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 08:01:17,822 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 08:01:17,826 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 08:01:17,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 08:01:17,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 08:01:17,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 08:01:17,931 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 08:01:18,001 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 08:01:18,012 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 08:01:18,025 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 08:01:18,035 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 08:01:18,094 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 08:01:18,104 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 08:01:18,116 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 08:01:18,125 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 08:01:18,148 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 08:01:18,161 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 08:01:18,173 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 08:01:18,190 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,216 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 08:01:18,239 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 08:01:18,266 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,305 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 08:01:18,328 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,377 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 08:01:18,396 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:01:18,422 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 08:01:18,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 08:01:18,475 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 08:01:18,498 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 08:01:18,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 08:01:18,560 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 08:01:18,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 08:01:18,601 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 08:01:18,621 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 08:01:18,642 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 08:01:18,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 08:01:18,681 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 08:01:18,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 08:01:18,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 08:01:18,741 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 08:01:18,741 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 08:01:18,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 08:01:18,744 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 08:01:18,746 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 08:01:18,746 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 08:01:18,747 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 08:01:18,861 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 08:01:18,861 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 08:01:18,861 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 08:01:18,861 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 08:01:18,862 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 08:01:18,862 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 08:01:18,888 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:01:18,889 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 08:01:18,889 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:01:19,155 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:01:19,156 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:19,156 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:01:19,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 08:01:19,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 08:01:19,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 08:01:19,235 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 08:01:19,242 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 08:01:19,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 08:01:19,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 08:01:19,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 08:01:19,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 08:01:19,250 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 08:01:19,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 08:01:19,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 08:01:19,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 08:01:19,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 08:01:19,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 08:01:19,264 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 08:01:19,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 08:01:19,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 08:01:19,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 08:01:19,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 08:01:19,275 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 08:01:19,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 08:01:19,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 08:01:19,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 08:01:19,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 08:01:19,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 08:01:19,288 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 08:01:19,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 08:01:19,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 08:01:19,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 08:01:19,296 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 08:01:19,298 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:01:19,299 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 08:01:19,299 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:01:19,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 08:01:19.38, foo, 2016-07-05 08:01:19.38, foo, 0}
2016-07-05 08:01:19,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 08:01:19.405, foo, 2016-07-05 08:01:19.405, foo, 0}
2016-07-05 08:01:19,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 08:01:19.409, foo, 2016-07-05 08:01:19.409, foo, 0}
2016-07-05 08:01:19,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 08:01:19.412, foo, 2016-07-05 08:01:19.412, foo, 0}
2016-07-05 08:01:19,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 08:01:19.415, foo, 2016-07-05 08:01:19.415, foo, 0}
2016-07-05 08:01:19,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 08:01:19.417, foo, 2016-07-05 08:01:19.417, foo, 0}
2016-07-05 08:01:19,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 08:01:19.42, foo, 2016-07-05 08:01:19.42, foo, 0}
2016-07-05 08:01:19,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 08:01:19.424, foo, 2016-07-05 08:01:19.424, foo, 0}
2016-07-05 08:01:19,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 08:01:19.427, foo, 2016-07-05 08:01:19.427, foo, 0}
2016-07-05 08:01:19,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 08:01:19.43, foo, 2016-07-05 08:01:19.43, foo, 0}
2016-07-05 08:01:19,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 08:01:19.431, foo, 2016-07-05 08:01:19.431, foo, 0}
2016-07-05 08:01:19,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 08:01:19.433, foo, 2016-07-05 08:01:19.433, foo, 0}
2016-07-05 08:01:19,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 08:01:19.435, foo, 2016-07-05 08:01:19.435, foo, 0}
2016-07-05 08:01:19,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 08:01:19.438, foo, 2016-07-05 08:01:19.438, foo, 0}
2016-07-05 08:01:19,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 08:01:19.44, foo, 2016-07-05 08:01:19.44, foo, 0}
2016-07-05 08:01:19,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 08:01:19.451, foo, 2016-07-05 08:01:19.451, foo, 0}
2016-07-05 08:01:19,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 08:01:19.457, foo, 2016-07-05 08:01:19.457, foo, 0}
2016-07-05 08:01:19,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 08:01:19.46, foo, 2016-07-05 08:01:19.46, foo, 0}
2016-07-05 08:01:19,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 08:01:19.462, foo, 2016-07-05 08:01:19.462, foo, 0}
2016-07-05 08:01:19,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 08:01:19.464, foo, 2016-07-05 08:01:19.464, foo, 0}
2016-07-05 08:01:19,498 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 08:01:19,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 08:01:19.499, foo, 2016-07-05 08:01:19.499, foo, 0}
2016-07-05 08:01:19,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 08:01:19.502, foo, 2016-07-05 08:01:19.502, foo, 0}
2016-07-05 08:01:19,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 08:01:19.505, foo, 2016-07-05 08:01:19.505, foo, 0}
2016-07-05 08:01:19,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 08:01:19.507, foo, 2016-07-05 08:01:19.507, foo, 0}
2016-07-05 08:01:19,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 08:01:19.509, foo, 2016-07-05 08:01:19.509, foo, 0}
2016-07-05 08:01:19,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 08:01:19.51, foo, 2016-07-05 08:01:19.511, foo, 0}
2016-07-05 08:01:19,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 08:01:19.512, foo, 2016-07-05 08:01:19.512, foo, 0}
2016-07-05 08:01:19,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 08:01:19.514, foo, 2016-07-05 08:01:19.514, foo, 0}
2016-07-05 08:01:19,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 08:01:19.516, foo, 2016-07-05 08:01:19.517, foo, 0}
2016-07-05 08:01:19,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 08:01:19.519, foo, 2016-07-05 08:01:19.519, foo, 0}
2016-07-05 08:01:19,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 08:01:19.522, foo, 2016-07-05 08:01:19.522, foo, 0}
2016-07-05 08:01:19,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 08:01:19.525, foo, 2016-07-05 08:01:19.525, foo, 0}
2016-07-05 08:01:19,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 08:01:19.527, foo, 2016-07-05 08:01:19.527, foo, 0}
2016-07-05 08:01:19,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 08:01:19.53, foo, 2016-07-05 08:01:19.53, foo, 0}
2016-07-05 08:01:19,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 08:01:19.532, foo, 2016-07-05 08:01:19.532, foo, 0}
2016-07-05 08:01:19,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 08:01:19.535, foo, 2016-07-05 08:01:19.535, foo, 0}
2016-07-05 08:01:19,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 08:01:19.538, foo, 2016-07-05 08:01:19.538, foo, 0}
2016-07-05 08:01:19,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 08:01:19.539, foo, 2016-07-05 08:01:19.539, foo, 0}
2016-07-05 08:01:19,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 08:01:19.541, foo, 2016-07-05 08:01:19.541, foo, 0}
2016-07-05 08:01:19,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 08:01:19.543, foo, 2016-07-05 08:01:19.543, foo, 0}
2016-07-05 08:01:19,562 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 08:01:19,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 08:01:19,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 08:01:19,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 08:01:19,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 08:01:19,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 08:01:19,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 08:01:19,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 08:01:19,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 08:01:19,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 08:01:19,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 08:01:19,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 08:01:19,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 08:01:19,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 08:01:19,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 08:01:19,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 08:01:19,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 08:01:19,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 08:01:19,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 08:01:19,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 08:01:19,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 08:01:19,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 08:01:19,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 08:01:19,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 08:01:19,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 08:01:19,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 08:01:19,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 08:01:19,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 08:01:19,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 08:01:19,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 08:01:19,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 08:01:19,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 08:01:19,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 08:01:19,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 08:01:19,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 08:01:19,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 08:01:19,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 08:01:19,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 08:01:19,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 08:01:19,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 08:01:19,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 08:01:19,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 08:01:19,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 08:01:19,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 08:01:19,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 08:01:19,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 08:01:19,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 08:01:19,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 08:01:19,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 08:01:19,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 08:01:19,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 08:01:19,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 08:01:19,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 08:01:19,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 08:01:19,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 08:01:19,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 08:01:19,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 08:01:19,665 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 08:01:19,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 08:01:19.666, foo, 2016-07-05 08:01:19.666, foo, 0}
2016-07-05 08:01:19,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 08:01:19.668, foo, 2016-07-05 08:01:19.668, foo, 0}
2016-07-05 08:01:19,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 08:01:19.67, foo, 2016-07-05 08:01:19.67, foo, 0}
2016-07-05 08:01:19,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 08:01:19.671, foo, 2016-07-05 08:01:19.671, foo, 0}
2016-07-05 08:01:19,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 08:01:19.672, foo, 2016-07-05 08:01:19.672, foo, 0}
2016-07-05 08:01:19,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 08:01:19.673, foo, 2016-07-05 08:01:19.673, foo, 0}
2016-07-05 08:01:19,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 08:01:19.674, foo, 2016-07-05 08:01:19.674, foo, 0}
2016-07-05 08:01:19,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 08:01:19.674, foo, 2016-07-05 08:01:19.674, foo, 0}
2016-07-05 08:01:19,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 08:01:19.675, foo, 2016-07-05 08:01:19.675, foo, 0}
2016-07-05 08:01:19,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 08:01:19.676, foo, 2016-07-05 08:01:19.676, foo, 0}
2016-07-05 08:01:19,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 08:01:19.677, foo, 2016-07-05 08:01:19.677, foo, 0}
2016-07-05 08:01:19,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 08:01:19.678, foo, 2016-07-05 08:01:19.678, foo, 0}
2016-07-05 08:01:19,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 08:01:19.679, foo, 2016-07-05 08:01:19.679, foo, 0}
2016-07-05 08:01:19,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 08:01:19.68, foo, 2016-07-05 08:01:19.68, foo, 0}
2016-07-05 08:01:19,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 08:01:19.682, foo, 2016-07-05 08:01:19.682, foo, 0}
2016-07-05 08:01:19,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 08:01:19.683, foo, 2016-07-05 08:01:19.683, foo, 0}
2016-07-05 08:01:19,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 08:01:19.685, foo, 2016-07-05 08:01:19.685, foo, 0}
2016-07-05 08:01:19,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 08:01:19.689, foo, 2016-07-05 08:01:19.689, foo, 0}
2016-07-05 08:01:19,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 08:01:19.691, foo, 2016-07-05 08:01:19.691, foo, 0}
2016-07-05 08:01:19,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 08:01:19.693, foo, 2016-07-05 08:01:19.693, foo, 0}
2016-07-05 08:01:19,722 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 08:01:19,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 08:01:19.723, foo, 2016-07-05 08:01:19.723, foo, 0}
2016-07-05 08:01:19,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 08:01:19.725, foo, 2016-07-05 08:01:19.725, foo, 0}
2016-07-05 08:01:19,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 08:01:19.726, foo, 2016-07-05 08:01:19.726, foo, 0}
2016-07-05 08:01:19,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 08:01:19.727, foo, 2016-07-05 08:01:19.727, foo, 0}
2016-07-05 08:01:19,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 08:01:19.728, foo, 2016-07-05 08:01:19.728, foo, 0}
2016-07-05 08:01:19,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 08:01:19.729, foo, 2016-07-05 08:01:19.729, foo, 0}
2016-07-05 08:01:19,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 08:01:19.73, foo, 2016-07-05 08:01:19.73, foo, 0}
2016-07-05 08:01:19,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 08:01:19.737, foo, 2016-07-05 08:01:19.737, foo, 0}
2016-07-05 08:01:19,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 08:01:19.738, foo, 2016-07-05 08:01:19.738, foo, 0}
2016-07-05 08:01:19,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 08:01:19.739, foo, 2016-07-05 08:01:19.739, foo, 0}
2016-07-05 08:01:19,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 08:01:19.739, foo, 2016-07-05 08:01:19.74, foo, 0}
2016-07-05 08:01:19,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 08:01:19.74, foo, 2016-07-05 08:01:19.74, foo, 0}
2016-07-05 08:01:19,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 08:01:19.741, foo, 2016-07-05 08:01:19.741, foo, 0}
2016-07-05 08:01:19,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 08:01:19.742, foo, 2016-07-05 08:01:19.742, foo, 0}
2016-07-05 08:01:19,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 08:01:19.743, foo, 2016-07-05 08:01:19.743, foo, 0}
2016-07-05 08:01:19,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 08:01:19.743, foo, 2016-07-05 08:01:19.743, foo, 0}
2016-07-05 08:01:19,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 08:01:19.744, foo, 2016-07-05 08:01:19.744, foo, 0}
2016-07-05 08:01:19,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 08:01:19.771, foo, 2016-07-05 08:01:19.771, foo, 0}
2016-07-05 08:01:19,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 08:01:19.772, foo, 2016-07-05 08:01:19.772, foo, 0}
2016-07-05 08:01:19,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 08:01:19.773, foo, 2016-07-05 08:01:19.773, foo, 0}
2016-07-05 08:01:19,793 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 08:01:19,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 08:01:19.794, foo, 2016-07-05 08:01:19.794, foo}
2016-07-05 08:01:19,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 08:01:19.796, foo, 2016-07-05 08:01:19.796, foo}
2016-07-05 08:01:19,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 08:01:19.797, foo, 2016-07-05 08:01:19.797, foo}
2016-07-05 08:01:19,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 08:01:19.799, foo, 2016-07-05 08:01:19.799, foo}
2016-07-05 08:01:19,819 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 08:01:19,820 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:01:19,820 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 08:01:19,821 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:01:19,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 08:01:19.878, foo, 2016-07-05 08:01:19.878, foo, 0}
2016-07-05 08:01:19,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 08:01:19.88, foo, 2016-07-05 08:01:19.88, foo, 0}
2016-07-05 08:01:19,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 08:01:19.881, foo, 2016-07-05 08:01:19.881, foo, 0}
2016-07-05 08:01:19,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 08:01:19.882, foo, 2016-07-05 08:01:19.882, foo, 0}
2016-07-05 08:01:19,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 08:01:19.883, foo, 2016-07-05 08:01:19.883, foo, 0}
2016-07-05 08:01:19,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 08:01:19.884, foo, 2016-07-05 08:01:19.884, foo, 0}
2016-07-05 08:01:19,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 08:01:19.886, foo, 2016-07-05 08:01:19.886, foo, 0}
2016-07-05 08:01:19,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 08:01:19.887, foo, 2016-07-05 08:01:19.887, foo, 0}
2016-07-05 08:01:19,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 08:01:19.888, foo, 2016-07-05 08:01:19.888, foo, 0}
2016-07-05 08:01:19,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 08:01:19.889, foo, 2016-07-05 08:01:19.889, foo, 0}
2016-07-05 08:01:19,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 08:01:19.911, foo, 2016-07-05 08:01:19.911, foo, 0}
2016-07-05 08:01:19,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 08:01:19.912, foo, 2016-07-05 08:01:19.912, foo, 0}
2016-07-05 08:01:19,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 08:01:19.913, foo, 2016-07-05 08:01:19.913, foo, 0}
2016-07-05 08:01:19,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 08:01:19.914, foo, 2016-07-05 08:01:19.914, foo, 0}
2016-07-05 08:01:19,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 08:01:19.915, foo, 2016-07-05 08:01:19.915, foo, 0}
2016-07-05 08:01:19,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 08:01:19.915, foo, 2016-07-05 08:01:19.915, foo, 0}
2016-07-05 08:01:19,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 08:01:19.916, foo, 2016-07-05 08:01:19.916, foo, 0}
2016-07-05 08:01:19,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 08:01:19.945, foo, 2016-07-05 08:01:19.945, foo, 0}
2016-07-05 08:01:19,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 08:01:19.946, foo, 2016-07-05 08:01:19.946, foo, 0}
2016-07-05 08:01:19,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 08:01:19.947, foo, 2016-07-05 08:01:19.947, foo, 0}
2016-07-05 08:01:19,975 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 08:01:19,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 08:01:19.977, foo, 2016-07-05 08:01:19.977, foo, 0}
2016-07-05 08:01:19,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 08:01:19.979, foo, 2016-07-05 08:01:19.979, foo, 0}
2016-07-05 08:01:19,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 08:01:19.98, foo, 2016-07-05 08:01:19.98, foo, 0}
2016-07-05 08:01:19,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 08:01:19.981, foo, 2016-07-05 08:01:19.981, foo, 0}
2016-07-05 08:01:19,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 08:01:19.983, foo, 2016-07-05 08:01:19.983, foo, 0}
2016-07-05 08:01:19,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 08:01:19.984, foo, 2016-07-05 08:01:19.984, foo, 0}
2016-07-05 08:01:19,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 08:01:19.985, foo, 2016-07-05 08:01:19.985, foo, 0}
2016-07-05 08:01:19,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 08:01:19.987, foo, 2016-07-05 08:01:19.987, foo, 0}
2016-07-05 08:01:19,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 08:01:19.989, foo, 2016-07-05 08:01:19.989, foo, 0}
2016-07-05 08:01:19,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 08:01:19.994, foo, 2016-07-05 08:01:19.994, foo, 0}
2016-07-05 08:01:19,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 08:01:19.996, foo, 2016-07-05 08:01:19.996, foo, 0}
2016-07-05 08:01:19,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 08:01:19.997, foo, 2016-07-05 08:01:19.997, foo, 0}
2016-07-05 08:01:19,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 08:01:19.998, foo, 2016-07-05 08:01:19.998, foo, 0}
2016-07-05 08:01:20,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 08:01:20.0, foo, 2016-07-05 08:01:20.0, foo, 0}
2016-07-05 08:01:20,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 08:01:20.002, foo, 2016-07-05 08:01:20.002, foo, 0}
2016-07-05 08:01:20,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 08:01:20.003, foo, 2016-07-05 08:01:20.003, foo, 0}
2016-07-05 08:01:20,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 08:01:20.004, foo, 2016-07-05 08:01:20.004, foo, 0}
2016-07-05 08:01:20,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 08:01:20.007, foo, 2016-07-05 08:01:20.007, foo, 0}
2016-07-05 08:01:20,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 08:01:20.015, foo, 2016-07-05 08:01:20.016, foo, 0}
2016-07-05 08:01:20,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 08:01:20.017, foo, 2016-07-05 08:01:20.017, foo, 0}
2016-07-05 08:01:20,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 08:01:20.02, foo, 2016-07-05 08:01:20.02, foo, 0}
2016-07-05 08:01:20,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 08:01:20.022, foo, 2016-07-05 08:01:20.022, foo, 0}
2016-07-05 08:01:20,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 08:01:20.024, foo, 2016-07-05 08:01:20.024, foo, 0}
2016-07-05 08:01:20,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 08:01:20.027, foo, 2016-07-05 08:01:20.027, foo, 0}
2016-07-05 08:01:20,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 08:01:20.028, foo, 2016-07-05 08:01:20.028, foo, 0}
2016-07-05 08:01:20,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 08:01:20.029, foo, 2016-07-05 08:01:20.029, foo, 0}
2016-07-05 08:01:20,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 08:01:20.03, foo, 2016-07-05 08:01:20.03, foo, 0}
2016-07-05 08:01:20,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 08:01:20.031, foo, 2016-07-05 08:01:20.031, foo, 0}
2016-07-05 08:01:20,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 08:01:20.032, foo, 2016-07-05 08:01:20.032, foo, 0}
2016-07-05 08:01:20,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 08:01:20.033, foo, 2016-07-05 08:01:20.033, foo, 0}
2016-07-05 08:01:20,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 08:01:20.033, foo, 2016-07-05 08:01:20.033, foo, 0}
2016-07-05 08:01:20,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 08:01:20.038, foo, 2016-07-05 08:01:20.038, foo, 0}
2016-07-05 08:01:20,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 08:01:20.039, foo, 2016-07-05 08:01:20.039, foo, 0}
2016-07-05 08:01:20,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:01:20.04, foo, 2016-07-05 08:01:20.04, foo, 0}
2016-07-05 08:01:20,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 08:01:20.041, foo, 2016-07-05 08:01:20.041, foo, 0}
2016-07-05 08:01:20,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:01:20.041, foo, 2016-07-05 08:01:20.041, foo, 0}
2016-07-05 08:01:20,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 08:01:20.042, foo, 2016-07-05 08:01:20.042, foo, 0}
2016-07-05 08:01:20,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 08:01:20.043, foo, 2016-07-05 08:01:20.043, foo, 0}
2016-07-05 08:01:20,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 08:01:20.044, foo, 2016-07-05 08:01:20.044, foo, 0}
2016-07-05 08:01:20,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 08:01:20.045, foo, 2016-07-05 08:01:20.045, foo, 0}
2016-07-05 08:01:20,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 08:01:20.046, foo, 2016-07-05 08:01:20.046, foo, 0}
2016-07-05 08:01:20,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 08:01:20.047, foo, 2016-07-05 08:01:20.047, foo, 0}
2016-07-05 08:01:20,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 08:01:20.048, foo, 2016-07-05 08:01:20.048, foo, 0}
2016-07-05 08:01:20,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 08:01:20.049, foo, 2016-07-05 08:01:20.049, foo, 0}
2016-07-05 08:01:20,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:01:20.05, foo, 2016-07-05 08:01:20.05, foo, 0}
2016-07-05 08:01:20,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 08:01:20.052, foo, 2016-07-05 08:01:20.052, foo, 0}
2016-07-05 08:01:20,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:01:20.054, foo, 2016-07-05 08:01:20.054, foo, 0}
2016-07-05 08:01:20,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 08:01:20.055, foo, 2016-07-05 08:01:20.055, foo, 0}
2016-07-05 08:01:20,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 08:01:20.057, foo, 2016-07-05 08:01:20.057, foo, 0}
2016-07-05 08:01:20,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 08:01:20.059, foo, 2016-07-05 08:01:20.059, foo, 0}
2016-07-05 08:01:20,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 08:01:20.061, foo, 2016-07-05 08:01:20.061, foo, 0}
2016-07-05 08:01:20,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 08:01:20.062, foo, 2016-07-05 08:01:20.062, foo, 0}
2016-07-05 08:01:20,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 08:01:20.064, foo, 2016-07-05 08:01:20.064, foo, 0}
2016-07-05 08:01:20,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 08:01:20.065, foo, 2016-07-05 08:01:20.065, foo, 0}
2016-07-05 08:01:20,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:01:20.066, foo, 2016-07-05 08:01:20.066, foo, 0}
2016-07-05 08:01:20,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 08:01:20.067, foo, 2016-07-05 08:01:20.067, foo, 0}
2016-07-05 08:01:20,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:01:20.073, foo, 2016-07-05 08:01:20.073, foo, 0}
2016-07-05 08:01:20,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 08:01:20.075, foo, 2016-07-05 08:01:20.075, foo, 0}
2016-07-05 08:01:20,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 08:01:20.077, foo, 2016-07-05 08:01:20.077, foo, 0}
2016-07-05 08:01:20,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 08:01:20.078, foo, 2016-07-05 08:01:20.078, foo, 0}
2016-07-05 08:01:20,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 08:01:20.079, foo, 2016-07-05 08:01:20.079, foo, 0}
2016-07-05 08:01:20,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 08:01:20.08, foo, 2016-07-05 08:01:20.08, foo, 0}
2016-07-05 08:01:20,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 08:01:20.081, foo, 2016-07-05 08:01:20.081, foo, 0}
2016-07-05 08:01:20,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 08:01:20.082, foo, 2016-07-05 08:01:20.082, foo, 0}
2016-07-05 08:01:20,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 08:01:20.084, foo, 2016-07-05 08:01:20.084, foo, 0}
2016-07-05 08:01:20,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 08:01:20.085, foo, 2016-07-05 08:01:20.085, foo, 0}
2016-07-05 08:01:20,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 08:01:20.089, foo, 2016-07-05 08:01:20.089, foo, 0}
2016-07-05 08:01:20,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 08:01:20.092, foo, 2016-07-05 08:01:20.092, foo, 0}
2016-07-05 08:01:20,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 08:01:20.094, foo, 2016-07-05 08:01:20.094, foo, 0}
2016-07-05 08:01:20,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 08:01:20.095, foo, 2016-07-05 08:01:20.095, foo, 0}
2016-07-05 08:01:20,164 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 08:01:20,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 08:01:20.166, foo, 2016-07-05 08:01:20.166, foo}
2016-07-05 08:01:20,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 08:01:20.168, foo, 2016-07-05 08:01:20.168, foo}
2016-07-05 08:01:20,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 08:01:20.169, foo, 2016-07-05 08:01:20.169, foo}
2016-07-05 08:01:20,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 08:01:20.17, foo, 2016-07-05 08:01:20.17, foo}
2016-07-05 08:01:20,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 08:01:20.172, foo, 2016-07-05 08:01:20.172, foo}
2016-07-05 08:01:20,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 08:01:20.173, foo, 2016-07-05 08:01:20.173, foo}
2016-07-05 08:01:20,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 08:01:20.174, foo, 2016-07-05 08:01:20.174, foo}
2016-07-05 08:01:20,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 08:01:20.177, foo, 2016-07-05 08:01:20.177, foo}
2016-07-05 08:01:20,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 08:01:20.178, foo, 2016-07-05 08:01:20.178, foo}
2016-07-05 08:01:20,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 08:01:20.179, foo, 2016-07-05 08:01:20.179, foo}
2016-07-05 08:01:20,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 08:01:20.18, foo, 2016-07-05 08:01:20.18, foo}
2016-07-05 08:01:20,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 08:01:20.182, foo, 2016-07-05 08:01:20.182, foo}
2016-07-05 08:01:20,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 08:01:20.183, foo, 2016-07-05 08:01:20.183, foo}
2016-07-05 08:01:20,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 08:01:20.184, foo, 2016-07-05 08:01:20.184, foo}
2016-07-05 08:01:20,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 08:01:20.185, foo, 2016-07-05 08:01:20.185, foo}
2016-07-05 08:01:20,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 08:01:20.187, foo, 2016-07-05 08:01:20.187, foo}
2016-07-05 08:01:20,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 08:01:20.188, foo, 2016-07-05 08:01:20.188, foo}
2016-07-05 08:01:20,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 08:01:20.189, foo, 2016-07-05 08:01:20.189, foo}
2016-07-05 08:01:20,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 08:01:20.19, foo, 2016-07-05 08:01:20.19, foo}
2016-07-05 08:01:20,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 08:01:20.191, foo, 2016-07-05 08:01:20.191, foo}
2016-07-05 08:01:20,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 08:01:20.192, foo, 2016-07-05 08:01:20.192, foo}
2016-07-05 08:01:20,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 08:01:20.193, foo, 2016-07-05 08:01:20.193, foo}
2016-07-05 08:01:20,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 08:01:20.194, foo, 2016-07-05 08:01:20.194, foo}
2016-07-05 08:01:20,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 08:01:20.195, foo, 2016-07-05 08:01:20.195, foo}
2016-07-05 08:01:20,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 08:01:20.196, foo, 2016-07-05 08:01:20.196, foo}
2016-07-05 08:01:20,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 08:01:20.197, foo, 2016-07-05 08:01:20.197, foo}
2016-07-05 08:01:20,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 08:01:20.198, foo, 2016-07-05 08:01:20.198, foo}
2016-07-05 08:01:20,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 08:01:20.2, foo, 2016-07-05 08:01:20.2, foo}
2016-07-05 08:01:20,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 08:01:20.204, foo, 2016-07-05 08:01:20.204, foo}
2016-07-05 08:01:20,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:01:20.205, foo, 2016-07-05 08:01:20.205, foo}
2016-07-05 08:01:20,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:01:20.207, foo, 2016-07-05 08:01:20.207, foo}
2016-07-05 08:01:20,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:01:20.208, foo, 2016-07-05 08:01:20.208, foo}
2016-07-05 08:01:20,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 08:01:20.21, foo, 2016-07-05 08:01:20.21, foo}
2016-07-05 08:01:20,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 08:01:20.212, foo, 2016-07-05 08:01:20.212, foo}
2016-07-05 08:01:20,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 08:01:20.213, foo, 2016-07-05 08:01:20.213, foo}
2016-07-05 08:01:20,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 08:01:20.214, foo, 2016-07-05 08:01:20.214, foo}
2016-07-05 08:01:20,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 08:01:20.216, foo, 2016-07-05 08:01:20.216, foo}
2016-07-05 08:01:20,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 08:01:20.217, foo, 2016-07-05 08:01:20.217, foo}
2016-07-05 08:01:20,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 08:01:20.218, foo, 2016-07-05 08:01:20.218, foo}
2016-07-05 08:01:20,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 08:01:20.219, foo, 2016-07-05 08:01:20.219, foo}
2016-07-05 08:01:20,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 08:01:20.22, foo, 2016-07-05 08:01:20.22, foo}
2016-07-05 08:01:20,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 08:01:20.233, foo, 2016-07-05 08:01:20.233, foo}
2016-07-05 08:01:20,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 08:01:20.234, foo, 2016-07-05 08:01:20.234, foo}
2016-07-05 08:01:20,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 08:01:20.235, foo, 2016-07-05 08:01:20.235, foo}
2016-07-05 08:01:20,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 08:01:20.236, foo, 2016-07-05 08:01:20.236, foo}
2016-07-05 08:01:20,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 08:01:20.238, foo, 2016-07-05 08:01:20.238, foo}
2016-07-05 08:01:20,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 08:01:20.243, foo, 2016-07-05 08:01:20.243, foo}
2016-07-05 08:01:20,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 08:01:20.244, foo, 2016-07-05 08:01:20.244, foo}
2016-07-05 08:01:20,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 08:01:20.245, foo, 2016-07-05 08:01:20.245, foo}
2016-07-05 08:01:20,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 08:01:20.246, foo, 2016-07-05 08:01:20.246, foo}
2016-07-05 08:01:20,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 08:01:20.247, foo, 2016-07-05 08:01:20.247, foo}
2016-07-05 08:01:20,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 08:01:20.248, foo, 2016-07-05 08:01:20.248, foo}
2016-07-05 08:01:20,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 08:01:20.249, foo, 2016-07-05 08:01:20.249, foo}
2016-07-05 08:01:20,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 08:01:20.25, foo, 2016-07-05 08:01:20.25, foo}
2016-07-05 08:01:20,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 08:01:20.251, foo, 2016-07-05 08:01:20.251, foo}
2016-07-05 08:01:20,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 08:01:20.252, foo, 2016-07-05 08:01:20.252, foo}
2016-07-05 08:01:20,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 08:01:20.254, foo, 2016-07-05 08:01:20.254, foo}
2016-07-05 08:01:20,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 08:01:20.255, foo, 2016-07-05 08:01:20.255, foo}
2016-07-05 08:01:20,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 08:01:20.257, foo, 2016-07-05 08:01:20.257, foo}
2016-07-05 08:01:20,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 08:01:20.258, foo, 2016-07-05 08:01:20.258, foo}
2016-07-05 08:01:20,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 08:01:20.259, foo, 2016-07-05 08:01:20.259, foo}
2016-07-05 08:01:20,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 08:01:20.26, foo, 2016-07-05 08:01:20.26, foo}
2016-07-05 08:01:20,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 08:01:20.261, foo, 2016-07-05 08:01:20.261, foo}
2016-07-05 08:01:20,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 08:01:20.262, foo, 2016-07-05 08:01:20.262, foo}
2016-07-05 08:01:20,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 08:01:20.263, foo, 2016-07-05 08:01:20.263, foo}
2016-07-05 08:01:20,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 08:01:20.264, foo, 2016-07-05 08:01:20.264, foo}
2016-07-05 08:01:20,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 08:01:20.264, foo, 2016-07-05 08:01:20.264, foo}
2016-07-05 08:01:20,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 08:01:20.265, foo, 2016-07-05 08:01:20.265, foo}
2016-07-05 08:01:20,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 08:01:20.266, foo, 2016-07-05 08:01:20.266, foo}
2016-07-05 08:01:20,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 08:01:20.267, foo, 2016-07-05 08:01:20.267, foo}
2016-07-05 08:01:20,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 08:01:20.268, foo, 2016-07-05 08:01:20.268, foo}
2016-07-05 08:01:20,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 08:01:20.271, foo, 2016-07-05 08:01:20.271, foo}
2016-07-05 08:01:20,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 08:01:20.271, foo, 2016-07-05 08:01:20.271, foo}
2016-07-05 08:01:20,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 08:01:20.272, foo, 2016-07-05 08:01:20.272, foo}
2016-07-05 08:01:20,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 08:01:20.273, foo, 2016-07-05 08:01:20.273, foo}
2016-07-05 08:01:20,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 08:01:20.275, foo, 2016-07-05 08:01:20.275, foo}
2016-07-05 08:01:20,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 08:01:20.276, foo, 2016-07-05 08:01:20.276, foo}
2016-07-05 08:01:20,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 08:01:20.277, foo, 2016-07-05 08:01:20.277, foo}
2016-07-05 08:01:20,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 08:01:20.277, foo, 2016-07-05 08:01:20.277, foo}
2016-07-05 08:01:20,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 08:01:20.278, foo, 2016-07-05 08:01:20.278, foo}
2016-07-05 08:01:20,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 08:01:20.279, foo, 2016-07-05 08:01:20.279, foo}
2016-07-05 08:01:20,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 08:01:20.28, foo, 2016-07-05 08:01:20.28, foo}
2016-07-05 08:01:20,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:01:20.284, foo, 2016-07-05 08:01:20.284, foo}
2016-07-05 08:01:20,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:01:20.285, foo, 2016-07-05 08:01:20.285, foo}
2016-07-05 08:01:20,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:01:20.286, foo, 2016-07-05 08:01:20.286, foo}
2016-07-05 08:01:20,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:01:20.288, foo, 2016-07-05 08:01:20.288, foo}
2016-07-05 08:01:20,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 08:01:20.29, foo, 2016-07-05 08:01:20.29, foo}
2016-07-05 08:01:20,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 08:01:20.293, foo, 2016-07-05 08:01:20.293, foo}
2016-07-05 08:01:20,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 08:01:20.296, foo, 2016-07-05 08:01:20.296, foo}
2016-07-05 08:01:20,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 08:01:20.297, foo, 2016-07-05 08:01:20.297, foo}
2016-07-05 08:01:20,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 08:01:20.298, foo, 2016-07-05 08:01:20.298, foo}
2016-07-05 08:01:20,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 08:01:20.299, foo, 2016-07-05 08:01:20.299, foo}
2016-07-05 08:01:20,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 08:01:20.3, foo, 2016-07-05 08:01:20.3, foo}
2016-07-05 08:01:20,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 08:01:20.301, foo, 2016-07-05 08:01:20.302, foo}
2016-07-05 08:01:20,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 08:01:20.303, foo, 2016-07-05 08:01:20.303, foo}
2016-07-05 08:01:20,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 08:01:20.304, foo, 2016-07-05 08:01:20.304, foo}
2016-07-05 08:01:20,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 08:01:20.305, foo, 2016-07-05 08:01:20.305, foo}
2016-07-05 08:01:20,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 08:01:20.306, foo, 2016-07-05 08:01:20.306, foo}
2016-07-05 08:01:20,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 08:01:20.307, foo, 2016-07-05 08:01:20.307, foo}
2016-07-05 08:01:20,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 08:01:20.308, foo, 2016-07-05 08:01:20.308, foo}
2016-07-05 08:01:20,382 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 08:01:20,384 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 08:01:20,407 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:20,417 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:01:20,424 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:01:20,427 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:01:20,430 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:01:20,434 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:01:20,440 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:01:20,450 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 08:01:20,452 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 08:01:20,454 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 08:01:20,456 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 08:01:20,458 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 08:01:20,464 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 08:01:20,464 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 08:01:20,464 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 08:01:20,464 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 08:01:20,465 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 08:01:20,465 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 08:01:20,475 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 08:01:20,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 08:01:20,480 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 08:01:20,482 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 08:01:20,483 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 08:01:20,485 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 08:01:20,485 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 08:01:20,487 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:01:20,492 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s416ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 08:01:21,475 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 08:01:21,479 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 08:01:21,479 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 08:01:21,480 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 08:01:21,480 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 08:01:21,521 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:21,522 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:21,522 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:21,522 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:21,585 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 08:01:21,585 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 08:01:21,585 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 08:01:21,600 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:01:21,772 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 08:01:21,776 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:01:22,247 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:01:22,248 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:01:22,249 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 08:01:22,251 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:01:22,252 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:22,252 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:01:22,271 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 08:01:22,277 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 08:01:22,297 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 08:01:22,297 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:01:22,298 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 08:01:22,298 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 08:01:22,349 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 08:01:22,367 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 08:01:22,381 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 08:01:22,414 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 08:01:22,446 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 08:01:22,460 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 08:01:22,473 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 08:01:22,485 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 08:01:22,493 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 08:01:22,503 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 08:01:22,517 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 08:01:22,529 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 08:01:22,536 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 08:01:22,549 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 08:01:22,558 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 08:01:22,558 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 08:01:22,559 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 08:01:22,559 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 08:01:22,559 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 08:01:22,561 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 08:01:22,565 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 08:01:22,565 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 08:01:22,566 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 08:01:22,606 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 08:01:22,608 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:01:22,693 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 08:01:22,694 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:01:22,704 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s247ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 08:01:23,567 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 08:01:23,570 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 08:01:23,570 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 08:01:23,571 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 08:01:23,572 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 08:01:23,599 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:23,600 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:23,600 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:23,600 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:23,603 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 08:01:23,603 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 08:01:23,603 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 08:01:23,604 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 08:01:23,605 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 08:01:23,605 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 08:01:23,648 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:01:23,745 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 08:01:23,912 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 08:01:23,922 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:01:23,923 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:01:23,925 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:01:23,926 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:01:23,926 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:01:23,929 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:01:23,931 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:01:23,932 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:01:23,934 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:01:23,940 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:01:23,941 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:01:23,941 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:01:23,942 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:01:23,942 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:01:23,943 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:01:23,944 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:01:23,944 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:01:23,956 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:24,284 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:01:24,288 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:01:24,290 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:01:24,293 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:01:24,296 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:01:24,299 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:01:24,307 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 08:01:24,330 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 08:01:24,770 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 08:01:24,771 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 08:01:24,778 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:01:24,798 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:01:24,799 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:01:24,871 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:01:24,876 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:01:24,877 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:01:24,878 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:01:24,878 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:01:24,879 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:01:24,934 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:01:24,947 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:01:24,950 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s396ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 08:01:27,689 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 08:01:27,691 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 08:01:27,692 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 08:01:27,693 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 08:01:27,693 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 08:01:27,717 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:27,717 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:27,717 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:27,718 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:27,738 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 08:01:27,738 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 08:01:27,773 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:01:27,843 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 08:01:28,070 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 08:01:28,073 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:01:28,074 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:01:28,075 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:01:28,076 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:01:28,077 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:01:28,078 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:01:28,081 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:01:28,081 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:01:28,084 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:01:28,097 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:01:28,097 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:01:28,098 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:01:28,098 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:01:28,099 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:01:28,099 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:01:28,100 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:01:28,100 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:01:28,111 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:28,426 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:01:28,430 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:01:28,432 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:01:28,435 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:01:28,440 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:01:28,442 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:01:28,453 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 08:01:28,453 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 08:01:28,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 08:01:28,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 08:01:28,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 08:01:28,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 08:01:28,455 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 08:01:28,455 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 08:01:28,455 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 08:01:28,455 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 08:01:28,476 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 08:01:28,478 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 08:01:28,530 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 08:01:28,534 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 08:01:28,552 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 08:01:28,562 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 08:01:28,580 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 08:01:28,607 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 08:01:28,615 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 08:01:28,625 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 08:01:28,632 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 08:01:28,636 [main] INFO  (Database#info():2711) - }
2016-07-05 08:01:28,637 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 08:01:28,638 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 08:01:28,659 [main] INFO  (Database#info():2711) - }
2016-07-05 08:01:28,668 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 08:01:28,712 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:01:28,713 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 08:01:28,714 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 08:01:29,227 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 08:01:29,507 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 08:01:29,722 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 08:01:29,915 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 08:01:30,108 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 08:01:30,301 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 08:01:30,495 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 08:01:30,739 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 08:01:30,931 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 08:01:31,069 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 08:01:31,269 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 08:01:31,407 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 08:01:31,527 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 08:01:31,654 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 08:01:31,776 [main] INFO  (Database#info():2711) - }
2016-07-05 08:01:31,777 [main] INFO  (Database#info():2711) -  
2016-07-05 08:01:31,823 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:01:31,833 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s157ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 08:01:32,527 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 08:01:32,529 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 08:01:32,529 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 08:01:32,530 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 08:01:32,530 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 08:01:32,551 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:32,551 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:32,552 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:32,552 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:32,585 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:01:32,592 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:01:32,909 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:01:32,909 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:01:32,941 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:01:32,947 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:01:32,947 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:01:32,950 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:01:32,952 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:01:32,953 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:01:32,955 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:01:32,982 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:01:32,982 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:01:32,984 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 08:01:32,991 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:01:32,991 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:01:32,992 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:01:33,000 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s486ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 08:01:33,788 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 08:01:33,790 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 08:01:33,790 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 08:01:33,790 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 08:01:33,791 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 08:01:33,814 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:01:33,814 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:01:33,814 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:01:33,815 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:01:33,828 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 08:01:33,828 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 08:01:33,834 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:01:33,936 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:01:33,942 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:01:34,256 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:01:34,257 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:01:34,260 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:01:34,315 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:01:34,315 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:01:34,316 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:01:34,331 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:01:34,331 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:01:34,333 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:01:34,361 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:01:34,361 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:01:34,363 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 08:01:34,404 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:01:34,404 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:01:34,415 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 08:01:34,416 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 08:01:34,479 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:01:34,483 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:01:34,484 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:01:34,485 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:01:34,485 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:01:34,485 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:01:34,521 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 08:01:34,549 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 08:01:34,561 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 08:01:34,562 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:01:34,563 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 08:01:34,564 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 08:01:34,565 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 08:01:34,566 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 08:01:34,566 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 08:01:34,567 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 08:01:34,567 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 08:01:34,568 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 08:01:34,568 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 08:01:34,568 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 08:01:34,593 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 08:01:34,594 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 08:01:34,595 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 08:01:34,595 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 08:01:34,595 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 08:01:34,609 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 08:01:34,611 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 08:01:34,611 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 08:01:34,611 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 08:01:34,612 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 08:01:34,617 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 08:01:34,797 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:01:34,805 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:01:34,808 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:01:34,810 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:01:34,812 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:01:34,813 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:01:34,816 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:01:34,828 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 08:01:34,833 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 08:01:34,851 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:01:34,852 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 08:01:34,991 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 08:01:35,054 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 08:01:35,069 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 08:01:35,120 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 08:01:35,204 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 08:01:35,249 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 08:01:35,292 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 08:01:35,293 [main] INFO  (Database#info():2711) - }
2016-07-05 08:01:35,295 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 08:01:35,301 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 08:01:35,339 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 08:01:35,370 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 08:01:35,389 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 08:01:35,404 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 08:01:35,425 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 08:01:35,451 [main] INFO  (Database#info():2711) - }
2016-07-05 08:01:35,495 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 08:01:35,505 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:01:35,528 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:01:35,536 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s761ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 08:14:21,780 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 08:14:21,785 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 08:14:21,786 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 08:14:21,787 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 08:14:21,787 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 08:14:21,823 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:14:21,824 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:14:21,824 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:14:21,825 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:14:21,872 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 08:14:21,872 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 08:14:21,873 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 08:14:21,889 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:14:22,049 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 08:14:22,055 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:14:22,630 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:14:22,632 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:14:22,634 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 08:14:22,636 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:14:22,637 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:14:22,637 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:14:22,661 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 08:14:22,668 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 08:14:22,692 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 08:14:22,693 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:14:22,693 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 08:14:22,694 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 08:14:22,765 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 08:14:22,786 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 08:14:22,803 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 08:14:22,820 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 08:14:22,842 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 08:14:22,853 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 08:14:22,870 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 08:14:22,889 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 08:14:22,901 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 08:14:22,911 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 08:14:22,931 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 08:14:22,950 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 08:14:22,967 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 08:14:22,981 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 08:14:22,993 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 08:14:22,994 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 08:14:22,994 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 08:14:22,995 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 08:14:22,995 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 08:14:22,997 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 08:14:23,005 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 08:14:23,006 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 08:14:23,006 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 08:14:23,061 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 08:14:23,162 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:14:23,260 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 08:14:23,261 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:14:23,277 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s511ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 08:14:24,280 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 08:14:24,284 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 08:14:24,284 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 08:14:24,285 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 08:14:24,285 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 08:14:24,324 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:14:24,324 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:14:24,325 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:14:24,325 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:14:24,328 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 08:14:24,328 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 08:14:24,329 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 08:14:24,329 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 08:14:24,329 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 08:14:24,330 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 08:14:24,394 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:14:24,520 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 08:14:24,706 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 08:14:24,715 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:14:24,716 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:14:24,717 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:14:24,719 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:14:24,719 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:14:24,721 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:14:24,724 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:14:24,724 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:14:24,728 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:14:24,735 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:14:24,736 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:14:24,736 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:14:24,737 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:14:24,737 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:14:24,738 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:14:24,738 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:14:24,738 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:14:24,755 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:14:25,126 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:14:25,133 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:14:25,136 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:14:25,140 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:14:25,146 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:14:25,150 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:14:25,161 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 08:14:25,198 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 08:14:25,771 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 08:14:25,771 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 08:14:25,779 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:14:25,800 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:14:25,800 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:14:25,867 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:14:25,873 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:14:25,874 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:14:25,874 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:14:25,875 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:14:25,875 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:14:25,922 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:14:25,942 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:14:25,948 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s693ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 08:14:28,661 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 08:14:28,665 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 08:14:28,667 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 08:14:28,667 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 08:14:28,668 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 08:14:28,698 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:14:28,698 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:14:28,699 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:14:28,699 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:14:28,722 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 08:14:28,723 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 08:14:28,775 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:14:28,879 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 08:14:29,159 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 08:14:29,164 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:14:29,164 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:14:29,166 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:14:29,168 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:14:29,168 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:14:29,170 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:14:29,173 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:14:29,173 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:14:29,176 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:14:29,187 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:14:29,188 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:14:29,189 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:14:29,189 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:14:29,190 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:14:29,190 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:14:29,190 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:14:29,191 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:14:29,204 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:14:29,560 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:14:29,564 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:14:29,567 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:14:29,570 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:14:29,574 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:14:29,576 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:14:29,587 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 08:14:29,588 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 08:14:29,588 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 08:14:29,589 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 08:14:29,589 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 08:14:29,589 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 08:14:29,590 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 08:14:29,590 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 08:14:29,590 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 08:14:29,591 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 08:14:29,608 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 08:14:29,611 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 08:14:29,663 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 08:14:29,666 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 08:14:29,683 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 08:14:29,688 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 08:14:29,709 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 08:14:29,736 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 08:14:29,743 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 08:14:29,755 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 08:14:29,762 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 08:14:29,765 [main] INFO  (Database#info():2711) - }
2016-07-05 08:14:29,768 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 08:14:29,770 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 08:14:29,790 [main] INFO  (Database#info():2711) - }
2016-07-05 08:14:29,799 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 08:14:29,854 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:14:29,855 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 08:14:29,856 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 08:14:30,406 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 08:14:30,667 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 08:14:30,875 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 08:14:31,069 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 08:14:31,271 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 08:14:31,461 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 08:14:31,647 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 08:14:31,856 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 08:14:32,032 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 08:14:32,160 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 08:14:32,364 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 08:14:32,510 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 08:14:32,626 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 08:14:32,761 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 08:14:32,912 [main] INFO  (Database#info():2711) - }
2016-07-05 08:14:32,913 [main] INFO  (Database#info():2711) -  
2016-07-05 08:14:33,026 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:14:33,035 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s396ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 08:14:33,912 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 08:14:33,914 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 08:14:33,915 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 08:14:33,915 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 08:14:33,916 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 08:14:33,936 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:14:33,937 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:14:33,937 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:14:33,937 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:14:33,968 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:14:33,973 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:14:34,291 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:14:34,291 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:14:34,320 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:14:34,325 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:14:34,325 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:14:34,328 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:14:34,350 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:14:34,350 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:14:34,352 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:14:34,357 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:14:34,358 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:14:34,360 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 08:14:34,398 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:14:34,398 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:14:34,399 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:14:34,409 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s504ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 08:14:35,116 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 08:14:35,119 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 08:14:35,120 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 08:14:35,120 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 08:14:35,120 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 08:14:35,141 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:14:35,141 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:14:35,141 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:14:35,141 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:14:35,157 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 08:14:35,157 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 08:14:35,164 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:14:35,273 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:14:35,281 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:14:35,598 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:14:35,599 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:14:35,601 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:14:35,652 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:14:35,653 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:14:35,654 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:14:35,664 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:14:35,665 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:14:35,666 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:14:35,692 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:14:35,693 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:14:35,694 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count -- サブクエリはエイリアスをつけないとエラーになる。
/*END*/
2016-07-05 08:14:35,727 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:14:35,727 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:14:35,735 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 08:14:35,736 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 08:14:35,794 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:14:35,799 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:14:35,800 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:14:35,800 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:14:35,801 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:14:35,801 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:14:35,834 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 08:14:35,864 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 08:14:35,876 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 08:14:35,876 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:14:35,877 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 08:14:35,878 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 08:14:35,878 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 08:14:35,879 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 08:14:35,879 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 08:14:35,879 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 08:14:35,881 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 08:14:35,881 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 08:14:35,882 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 08:14:35,882 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 08:14:35,910 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 08:14:35,910 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 08:14:35,911 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 08:14:35,911 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 08:14:35,911 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 08:14:35,926 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 08:14:35,937 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 08:14:35,938 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 08:14:35,938 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 08:14:35,938 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 08:14:35,942 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 08:14:36,128 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:14:36,135 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:14:36,138 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:14:36,140 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:14:36,143 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:14:36,145 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:14:36,147 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:14:36,163 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 08:14:36,167 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 08:14:36,182 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:14:36,182 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 08:14:36,335 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 08:14:36,403 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 08:14:36,416 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 08:14:36,473 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 08:14:36,612 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 08:14:36,667 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 08:14:36,708 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 08:14:36,709 [main] INFO  (Database#info():2711) - }
2016-07-05 08:14:36,711 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 08:14:36,714 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 08:14:36,751 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 08:14:36,774 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 08:14:36,794 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 08:14:36,811 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 08:14:36,840 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 08:14:36,862 [main] INFO  (Database#info():2711) - }
2016-07-05 08:14:36,905 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 08:14:36,916 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:14:36,920 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:14:36,930 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s834ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 08:25:27,008 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 08:25:27,011 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 08:25:27,012 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 08:25:27,017 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 08:25:27,018 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 08:25:27,020 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 08:25:28,410 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:28,411 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:28,411 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:28,412 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:28,425 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:28,859 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:28,860 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:28,881 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 08:25:28,881 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 08:25:28,882 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 08:25:28,885 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 08:25:28,886 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 08:25:28,886 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 08:25:28,909 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:25:28,910 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:28,911 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:25:28,954 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 08:25:28,963 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 08:25:28,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 08:25:28,974 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 08:25:28,991 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 08:25:29,008 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 08:25:29,037 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 08:25:29,058 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 08:25:29,081 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 08:25:29,105 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 08:25:29,131 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 08:25:29,157 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 08:25:29,179 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 08:25:29,191 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 08:25:29,217 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 08:25:29,231 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 08:25:29,255 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 08:25:29,272 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 08:25:29,295 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 08:25:29,316 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 08:25:29,331 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 08:25:29,344 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 08:25:29,367 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 08:25:29,371 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 08:25:29,374 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 08:25:29,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 08:25:29,382 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 08:25:29,386 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 08:25:29,391 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 08:25:29,395 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 08:25:29,398 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 08:25:29,402 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 08:25:29,405 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 08:25:29,408 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 08:25:29,412 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 08:25:29,416 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 08:25:29,419 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 08:25:29,477 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 08:25:29,479 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 08:25:29,482 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 08:25:29,483 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 08:25:29,483 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 08:25:29,483 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 08:25:29,484 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 08:25:29,484 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 08:25:29,555 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 08:25:29,559 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 08:25:29,560 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 08:25:29,562 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 08:25:29,574 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 08:25:29,574 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 08:25:29,575 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 08:25:29,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 08:25:29,578 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 08:25:29,581 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 08:25:29,583 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 08:25:29,583 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 08:25:29,583 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 08:25:29,584 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 08:25:29,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 08:25:29,605 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 08:25:29,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 08:25:29,675 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 08:25:29,734 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 08:25:29,806 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 08:25:29,868 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 08:25:29,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 08:25:29,998 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 08:25:30,074 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 08:25:30,085 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 08:25:30,096 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 08:25:30,133 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 08:25:30,173 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 08:25:30,215 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 08:25:30,228 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 08:25:30,250 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,269 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 08:25:30,289 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 08:25:30,308 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,329 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,350 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 08:25:30,381 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,436 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 08:25:30,459 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 08:25:30,491 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 08:25:30,521 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 08:25:30,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 08:25:30,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 08:25:30,592 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 08:25:30,624 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 08:25:30,643 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 08:25:30,664 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 08:25:30,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 08:25:30,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 08:25:30,718 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 08:25:30,733 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 08:25:30,753 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 08:25:30,773 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 08:25:30,795 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 08:25:30,796 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 08:25:30,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 08:25:30,800 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 08:25:30,802 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 08:25:30,802 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 08:25:30,802 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 08:25:30,912 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 08:25:30,912 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 08:25:30,912 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 08:25:30,913 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 08:25:30,913 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 08:25:30,913 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 08:25:30,936 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:25:30,936 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 08:25:30,936 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:25:31,222 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:25:31,222 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:31,223 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:25:31,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 08:25:31,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 08:25:31,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 08:25:31,316 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 08:25:31,323 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 08:25:31,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 08:25:31,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 08:25:31,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 08:25:31,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 08:25:31,336 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 08:25:31,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 08:25:31,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 08:25:31,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 08:25:31,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 08:25:31,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 08:25:31,362 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 08:25:31,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 08:25:31,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 08:25:31,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 08:25:31,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 08:25:31,377 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 08:25:31,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 08:25:31,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 08:25:31,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 08:25:31,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 08:25:31,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 08:25:31,391 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 08:25:31,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 08:25:31,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 08:25:31,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 08:25:31,398 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 08:25:31,401 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:25:31,401 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 08:25:31,403 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:25:31,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 08:25:31.505, foo, 2016-07-05 08:25:31.505, foo, 0}
2016-07-05 08:25:31,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 08:25:31.513, foo, 2016-07-05 08:25:31.513, foo, 0}
2016-07-05 08:25:31,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 08:25:31.514, foo, 2016-07-05 08:25:31.514, foo, 0}
2016-07-05 08:25:31,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 08:25:31.516, foo, 2016-07-05 08:25:31.516, foo, 0}
2016-07-05 08:25:31,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 08:25:31.52, foo, 2016-07-05 08:25:31.52, foo, 0}
2016-07-05 08:25:31,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 08:25:31.522, foo, 2016-07-05 08:25:31.522, foo, 0}
2016-07-05 08:25:31,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 08:25:31.525, foo, 2016-07-05 08:25:31.525, foo, 0}
2016-07-05 08:25:31,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 08:25:31.527, foo, 2016-07-05 08:25:31.527, foo, 0}
2016-07-05 08:25:31,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 08:25:31.529, foo, 2016-07-05 08:25:31.529, foo, 0}
2016-07-05 08:25:31,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 08:25:31.532, foo, 2016-07-05 08:25:31.532, foo, 0}
2016-07-05 08:25:31,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 08:25:31.534, foo, 2016-07-05 08:25:31.534, foo, 0}
2016-07-05 08:25:31,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 08:25:31.537, foo, 2016-07-05 08:25:31.537, foo, 0}
2016-07-05 08:25:31,545 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 08:25:31.544, foo, 2016-07-05 08:25:31.544, foo, 0}
2016-07-05 08:25:31,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 08:25:31.572, foo, 2016-07-05 08:25:31.572, foo, 0}
2016-07-05 08:25:31,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 08:25:31.576, foo, 2016-07-05 08:25:31.576, foo, 0}
2016-07-05 08:25:31,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 08:25:31.58, foo, 2016-07-05 08:25:31.58, foo, 0}
2016-07-05 08:25:31,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 08:25:31.584, foo, 2016-07-05 08:25:31.584, foo, 0}
2016-07-05 08:25:31,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 08:25:31.586, foo, 2016-07-05 08:25:31.586, foo, 0}
2016-07-05 08:25:31,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 08:25:31.588, foo, 2016-07-05 08:25:31.588, foo, 0}
2016-07-05 08:25:31,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 08:25:31.591, foo, 2016-07-05 08:25:31.591, foo, 0}
2016-07-05 08:25:31,631 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 08:25:31,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 08:25:31.632, foo, 2016-07-05 08:25:31.632, foo, 0}
2016-07-05 08:25:31,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 08:25:31.634, foo, 2016-07-05 08:25:31.634, foo, 0}
2016-07-05 08:25:31,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 08:25:31.636, foo, 2016-07-05 08:25:31.636, foo, 0}
2016-07-05 08:25:31,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 08:25:31.638, foo, 2016-07-05 08:25:31.638, foo, 0}
2016-07-05 08:25:31,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 08:25:31.641, foo, 2016-07-05 08:25:31.641, foo, 0}
2016-07-05 08:25:31,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 08:25:31.644, foo, 2016-07-05 08:25:31.644, foo, 0}
2016-07-05 08:25:31,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 08:25:31.648, foo, 2016-07-05 08:25:31.648, foo, 0}
2016-07-05 08:25:31,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 08:25:31.652, foo, 2016-07-05 08:25:31.652, foo, 0}
2016-07-05 08:25:31,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 08:25:31.656, foo, 2016-07-05 08:25:31.656, foo, 0}
2016-07-05 08:25:31,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 08:25:31.658, foo, 2016-07-05 08:25:31.658, foo, 0}
2016-07-05 08:25:31,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 08:25:31.661, foo, 2016-07-05 08:25:31.661, foo, 0}
2016-07-05 08:25:31,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 08:25:31.664, foo, 2016-07-05 08:25:31.664, foo, 0}
2016-07-05 08:25:31,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 08:25:31.667, foo, 2016-07-05 08:25:31.667, foo, 0}
2016-07-05 08:25:31,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 08:25:31.669, foo, 2016-07-05 08:25:31.669, foo, 0}
2016-07-05 08:25:31,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 08:25:31.673, foo, 2016-07-05 08:25:31.673, foo, 0}
2016-07-05 08:25:31,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 08:25:31.675, foo, 2016-07-05 08:25:31.675, foo, 0}
2016-07-05 08:25:31,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 08:25:31.678, foo, 2016-07-05 08:25:31.678, foo, 0}
2016-07-05 08:25:31,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 08:25:31.68, foo, 2016-07-05 08:25:31.68, foo, 0}
2016-07-05 08:25:31,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 08:25:31.683, foo, 2016-07-05 08:25:31.683, foo, 0}
2016-07-05 08:25:31,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 08:25:31.685, foo, 2016-07-05 08:25:31.685, foo, 0}
2016-07-05 08:25:31,703 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 08:25:31,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 08:25:31,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 08:25:31,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 08:25:31,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 08:25:31,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 08:25:31,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 08:25:31,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 08:25:31,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 08:25:31,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 08:25:31,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 08:25:31,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 08:25:31,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 08:25:31,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 08:25:31,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 08:25:31,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 08:25:31,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 08:25:31,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 08:25:31,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 08:25:31,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 08:25:31,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 08:25:31,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 08:25:31,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 08:25:31,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 08:25:31,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 08:25:31,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 08:25:31,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 08:25:31,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 08:25:31,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 08:25:31,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 08:25:31,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 08:25:31,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 08:25:31,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 08:25:31,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 08:25:31,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 08:25:31,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 08:25:31,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 08:25:31,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 08:25:31,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 08:25:31,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 08:25:31,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 08:25:31,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 08:25:31,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 08:25:31,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 08:25:31,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 08:25:31,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 08:25:31,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 08:25:31,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 08:25:31,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 08:25:31,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 08:25:31,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 08:25:31,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 08:25:31,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 08:25:31,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 08:25:31,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 08:25:31,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 08:25:31,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 08:25:31,806 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 08:25:31,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 08:25:31.807, foo, 2016-07-05 08:25:31.807, foo, 0}
2016-07-05 08:25:31,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 08:25:31.808, foo, 2016-07-05 08:25:31.808, foo, 0}
2016-07-05 08:25:31,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 08:25:31.809, foo, 2016-07-05 08:25:31.809, foo, 0}
2016-07-05 08:25:31,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 08:25:31.81, foo, 2016-07-05 08:25:31.81, foo, 0}
2016-07-05 08:25:31,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 08:25:31.81, foo, 2016-07-05 08:25:31.81, foo, 0}
2016-07-05 08:25:31,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 08:25:31.811, foo, 2016-07-05 08:25:31.811, foo, 0}
2016-07-05 08:25:31,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 08:25:31.812, foo, 2016-07-05 08:25:31.812, foo, 0}
2016-07-05 08:25:31,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 08:25:31.812, foo, 2016-07-05 08:25:31.812, foo, 0}
2016-07-05 08:25:31,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 08:25:31.814, foo, 2016-07-05 08:25:31.814, foo, 0}
2016-07-05 08:25:31,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 08:25:31.815, foo, 2016-07-05 08:25:31.815, foo, 0}
2016-07-05 08:25:31,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 08:25:31.816, foo, 2016-07-05 08:25:31.816, foo, 0}
2016-07-05 08:25:31,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 08:25:31.817, foo, 2016-07-05 08:25:31.817, foo, 0}
2016-07-05 08:25:31,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 08:25:31.817, foo, 2016-07-05 08:25:31.817, foo, 0}
2016-07-05 08:25:31,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 08:25:31.819, foo, 2016-07-05 08:25:31.819, foo, 0}
2016-07-05 08:25:31,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 08:25:31.819, foo, 2016-07-05 08:25:31.819, foo, 0}
2016-07-05 08:25:31,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 08:25:31.821, foo, 2016-07-05 08:25:31.821, foo, 0}
2016-07-05 08:25:31,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 08:25:31.822, foo, 2016-07-05 08:25:31.822, foo, 0}
2016-07-05 08:25:31,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 08:25:31.823, foo, 2016-07-05 08:25:31.823, foo, 0}
2016-07-05 08:25:31,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 08:25:31.824, foo, 2016-07-05 08:25:31.824, foo, 0}
2016-07-05 08:25:31,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 08:25:31.824, foo, 2016-07-05 08:25:31.824, foo, 0}
2016-07-05 08:25:31,847 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 08:25:31,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 08:25:31.848, foo, 2016-07-05 08:25:31.848, foo, 0}
2016-07-05 08:25:31,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 08:25:31.85, foo, 2016-07-05 08:25:31.85, foo, 0}
2016-07-05 08:25:31,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 08:25:31.851, foo, 2016-07-05 08:25:31.851, foo, 0}
2016-07-05 08:25:31,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 08:25:31.851, foo, 2016-07-05 08:25:31.851, foo, 0}
2016-07-05 08:25:31,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 08:25:31.852, foo, 2016-07-05 08:25:31.852, foo, 0}
2016-07-05 08:25:31,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 08:25:31.853, foo, 2016-07-05 08:25:31.853, foo, 0}
2016-07-05 08:25:31,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 08:25:31.854, foo, 2016-07-05 08:25:31.854, foo, 0}
2016-07-05 08:25:31,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 08:25:31.855, foo, 2016-07-05 08:25:31.855, foo, 0}
2016-07-05 08:25:31,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 08:25:31.856, foo, 2016-07-05 08:25:31.856, foo, 0}
2016-07-05 08:25:31,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 08:25:31.857, foo, 2016-07-05 08:25:31.857, foo, 0}
2016-07-05 08:25:31,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 08:25:31.858, foo, 2016-07-05 08:25:31.858, foo, 0}
2016-07-05 08:25:31,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 08:25:31.88, foo, 2016-07-05 08:25:31.88, foo, 0}
2016-07-05 08:25:31,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 08:25:31.881, foo, 2016-07-05 08:25:31.881, foo, 0}
2016-07-05 08:25:31,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 08:25:31.882, foo, 2016-07-05 08:25:31.882, foo, 0}
2016-07-05 08:25:31,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 08:25:31.883, foo, 2016-07-05 08:25:31.883, foo, 0}
2016-07-05 08:25:31,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 08:25:31.884, foo, 2016-07-05 08:25:31.884, foo, 0}
2016-07-05 08:25:31,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 08:25:31.885, foo, 2016-07-05 08:25:31.885, foo, 0}
2016-07-05 08:25:31,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 08:25:31.885, foo, 2016-07-05 08:25:31.885, foo, 0}
2016-07-05 08:25:31,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 08:25:31.886, foo, 2016-07-05 08:25:31.886, foo, 0}
2016-07-05 08:25:31,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 08:25:31.887, foo, 2016-07-05 08:25:31.887, foo, 0}
2016-07-05 08:25:31,905 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 08:25:31,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 08:25:31.906, foo, 2016-07-05 08:25:31.906, foo}
2016-07-05 08:25:31,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 08:25:31.908, foo, 2016-07-05 08:25:31.908, foo}
2016-07-05 08:25:31,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 08:25:31.909, foo, 2016-07-05 08:25:31.909, foo}
2016-07-05 08:25:31,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 08:25:31.91, foo, 2016-07-05 08:25:31.91, foo}
2016-07-05 08:25:31,916 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 08:25:31,917 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 08:25:31,917 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 08:25:31,918 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 08:25:31,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 08:25:31.974, foo, 2016-07-05 08:25:31.974, foo, 0}
2016-07-05 08:25:31,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 08:25:31.977, foo, 2016-07-05 08:25:31.977, foo, 0}
2016-07-05 08:25:31,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 08:25:31.978, foo, 2016-07-05 08:25:31.978, foo, 0}
2016-07-05 08:25:31,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 08:25:31.978, foo, 2016-07-05 08:25:31.979, foo, 0}
2016-07-05 08:25:31,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 08:25:31.98, foo, 2016-07-05 08:25:31.98, foo, 0}
2016-07-05 08:25:31,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 08:25:31.981, foo, 2016-07-05 08:25:31.981, foo, 0}
2016-07-05 08:25:31,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 08:25:31.991, foo, 2016-07-05 08:25:31.991, foo, 0}
2016-07-05 08:25:31,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 08:25:31.992, foo, 2016-07-05 08:25:31.992, foo, 0}
2016-07-05 08:25:31,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 08:25:31.993, foo, 2016-07-05 08:25:31.993, foo, 0}
2016-07-05 08:25:31,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 08:25:31.993, foo, 2016-07-05 08:25:31.993, foo, 0}
2016-07-05 08:25:31,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 08:25:31.994, foo, 2016-07-05 08:25:31.994, foo, 0}
2016-07-05 08:25:32,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 08:25:32.014, foo, 2016-07-05 08:25:32.014, foo, 0}
2016-07-05 08:25:32,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 08:25:32.015, foo, 2016-07-05 08:25:32.015, foo, 0}
2016-07-05 08:25:32,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 08:25:32.016, foo, 2016-07-05 08:25:32.016, foo, 0}
2016-07-05 08:25:32,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 08:25:32.016, foo, 2016-07-05 08:25:32.016, foo, 0}
2016-07-05 08:25:32,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 08:25:32.017, foo, 2016-07-05 08:25:32.017, foo, 0}
2016-07-05 08:25:32,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 08:25:32.019, foo, 2016-07-05 08:25:32.019, foo, 0}
2016-07-05 08:25:32,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 08:25:32.02, foo, 2016-07-05 08:25:32.02, foo, 0}
2016-07-05 08:25:32,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 08:25:32.021, foo, 2016-07-05 08:25:32.021, foo, 0}
2016-07-05 08:25:32,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 08:25:32.022, foo, 2016-07-05 08:25:32.022, foo, 0}
2016-07-05 08:25:32,045 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 08:25:32,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 08:25:32.047, foo, 2016-07-05 08:25:32.047, foo, 0}
2016-07-05 08:25:32,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 08:25:32.049, foo, 2016-07-05 08:25:32.049, foo, 0}
2016-07-05 08:25:32,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 08:25:32.05, foo, 2016-07-05 08:25:32.05, foo, 0}
2016-07-05 08:25:32,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 08:25:32.052, foo, 2016-07-05 08:25:32.052, foo, 0}
2016-07-05 08:25:32,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 08:25:32.053, foo, 2016-07-05 08:25:32.053, foo, 0}
2016-07-05 08:25:32,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 08:25:32.056, foo, 2016-07-05 08:25:32.056, foo, 0}
2016-07-05 08:25:32,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 08:25:32.057, foo, 2016-07-05 08:25:32.057, foo, 0}
2016-07-05 08:25:32,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 08:25:32.06, foo, 2016-07-05 08:25:32.06, foo, 0}
2016-07-05 08:25:32,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 08:25:32.062, foo, 2016-07-05 08:25:32.062, foo, 0}
2016-07-05 08:25:32,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 08:25:32.063, foo, 2016-07-05 08:25:32.063, foo, 0}
2016-07-05 08:25:32,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 08:25:32.065, foo, 2016-07-05 08:25:32.065, foo, 0}
2016-07-05 08:25:32,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 08:25:32.066, foo, 2016-07-05 08:25:32.066, foo, 0}
2016-07-05 08:25:32,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 08:25:32.068, foo, 2016-07-05 08:25:32.068, foo, 0}
2016-07-05 08:25:32,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 08:25:32.069, foo, 2016-07-05 08:25:32.069, foo, 0}
2016-07-05 08:25:32,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 08:25:32.07, foo, 2016-07-05 08:25:32.07, foo, 0}
2016-07-05 08:25:32,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 08:25:32.071, foo, 2016-07-05 08:25:32.071, foo, 0}
2016-07-05 08:25:32,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 08:25:32.073, foo, 2016-07-05 08:25:32.073, foo, 0}
2016-07-05 08:25:32,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 08:25:32.074, foo, 2016-07-05 08:25:32.074, foo, 0}
2016-07-05 08:25:32,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 08:25:32.076, foo, 2016-07-05 08:25:32.076, foo, 0}
2016-07-05 08:25:32,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 08:25:32.077, foo, 2016-07-05 08:25:32.078, foo, 0}
2016-07-05 08:25:32,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 08:25:32.086, foo, 2016-07-05 08:25:32.086, foo, 0}
2016-07-05 08:25:32,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 08:25:32.087, foo, 2016-07-05 08:25:32.087, foo, 0}
2016-07-05 08:25:32,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 08:25:32.089, foo, 2016-07-05 08:25:32.089, foo, 0}
2016-07-05 08:25:32,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 08:25:32.091, foo, 2016-07-05 08:25:32.091, foo, 0}
2016-07-05 08:25:32,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 08:25:32.093, foo, 2016-07-05 08:25:32.093, foo, 0}
2016-07-05 08:25:32,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 08:25:32.094, foo, 2016-07-05 08:25:32.094, foo, 0}
2016-07-05 08:25:32,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 08:25:32.096, foo, 2016-07-05 08:25:32.096, foo, 0}
2016-07-05 08:25:32,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 08:25:32.097, foo, 2016-07-05 08:25:32.097, foo, 0}
2016-07-05 08:25:32,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 08:25:32.098, foo, 2016-07-05 08:25:32.098, foo, 0}
2016-07-05 08:25:32,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 08:25:32.099, foo, 2016-07-05 08:25:32.099, foo, 0}
2016-07-05 08:25:32,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 08:25:32.1, foo, 2016-07-05 08:25:32.1, foo, 0}
2016-07-05 08:25:32,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 08:25:32.102, foo, 2016-07-05 08:25:32.102, foo, 0}
2016-07-05 08:25:32,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 08:25:32.103, foo, 2016-07-05 08:25:32.103, foo, 0}
2016-07-05 08:25:32,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:25:32.104, foo, 2016-07-05 08:25:32.104, foo, 0}
2016-07-05 08:25:32,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 08:25:32.11, foo, 2016-07-05 08:25:32.11, foo, 0}
2016-07-05 08:25:32,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:25:32.113, foo, 2016-07-05 08:25:32.113, foo, 0}
2016-07-05 08:25:32,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 08:25:32.115, foo, 2016-07-05 08:25:32.115, foo, 0}
2016-07-05 08:25:32,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 08:25:32.116, foo, 2016-07-05 08:25:32.116, foo, 0}
2016-07-05 08:25:32,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 08:25:32.118, foo, 2016-07-05 08:25:32.118, foo, 0}
2016-07-05 08:25:32,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 08:25:32.119, foo, 2016-07-05 08:25:32.119, foo, 0}
2016-07-05 08:25:32,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 08:25:32.121, foo, 2016-07-05 08:25:32.121, foo, 0}
2016-07-05 08:25:32,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 08:25:32.122, foo, 2016-07-05 08:25:32.122, foo, 0}
2016-07-05 08:25:32,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 08:25:32.123, foo, 2016-07-05 08:25:32.123, foo, 0}
2016-07-05 08:25:32,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 08:25:32.128, foo, 2016-07-05 08:25:32.128, foo, 0}
2016-07-05 08:25:32,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:25:32.129, foo, 2016-07-05 08:25:32.129, foo, 0}
2016-07-05 08:25:32,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 08:25:32.13, foo, 2016-07-05 08:25:32.13, foo, 0}
2016-07-05 08:25:32,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:25:32.131, foo, 2016-07-05 08:25:32.131, foo, 0}
2016-07-05 08:25:32,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 08:25:32.134, foo, 2016-07-05 08:25:32.134, foo, 0}
2016-07-05 08:25:32,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 08:25:32.135, foo, 2016-07-05 08:25:32.135, foo, 0}
2016-07-05 08:25:32,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 08:25:32.137, foo, 2016-07-05 08:25:32.137, foo, 0}
2016-07-05 08:25:32,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 08:25:32.142, foo, 2016-07-05 08:25:32.142, foo, 0}
2016-07-05 08:25:32,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 08:25:32.145, foo, 2016-07-05 08:25:32.145, foo, 0}
2016-07-05 08:25:32,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 08:25:32.149, foo, 2016-07-05 08:25:32.149, foo, 0}
2016-07-05 08:25:32,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 08:25:32.151, foo, 2016-07-05 08:25:32.151, foo, 0}
2016-07-05 08:25:32,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 08:25:32.152, foo, 2016-07-05 08:25:32.152, foo, 0}
2016-07-05 08:25:32,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 08:25:32.153, foo, 2016-07-05 08:25:32.153, foo, 0}
2016-07-05 08:25:32,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 08:25:32.155, foo, 2016-07-05 08:25:32.155, foo, 0}
2016-07-05 08:25:32,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 08:25:32.157, foo, 2016-07-05 08:25:32.157, foo, 0}
2016-07-05 08:25:32,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 08:25:32.158, foo, 2016-07-05 08:25:32.158, foo, 0}
2016-07-05 08:25:32,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 08:25:32.159, foo, 2016-07-05 08:25:32.159, foo, 0}
2016-07-05 08:25:32,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 08:25:32.161, foo, 2016-07-05 08:25:32.161, foo, 0}
2016-07-05 08:25:32,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 08:25:32.163, foo, 2016-07-05 08:25:32.163, foo, 0}
2016-07-05 08:25:32,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 08:25:32.167, foo, 2016-07-05 08:25:32.167, foo, 0}
2016-07-05 08:25:32,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 08:25:32.168, foo, 2016-07-05 08:25:32.168, foo, 0}
2016-07-05 08:25:32,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 08:25:32.171, foo, 2016-07-05 08:25:32.171, foo, 0}
2016-07-05 08:25:32,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 08:25:32.175, foo, 2016-07-05 08:25:32.175, foo, 0}
2016-07-05 08:25:32,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 08:25:32.176, foo, 2016-07-05 08:25:32.176, foo, 0}
2016-07-05 08:25:32,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 08:25:32.18, foo, 2016-07-05 08:25:32.18, foo, 0}
2016-07-05 08:25:32,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 08:25:32.183, foo, 2016-07-05 08:25:32.183, foo, 0}
2016-07-05 08:25:32,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 08:25:32.184, foo, 2016-07-05 08:25:32.184, foo, 0}
2016-07-05 08:25:32,267 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 08:25:32,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 08:25:32.268, foo, 2016-07-05 08:25:32.268, foo}
2016-07-05 08:25:32,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 08:25:32.271, foo, 2016-07-05 08:25:32.271, foo}
2016-07-05 08:25:32,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 08:25:32.272, foo, 2016-07-05 08:25:32.272, foo}
2016-07-05 08:25:32,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 08:25:32.273, foo, 2016-07-05 08:25:32.273, foo}
2016-07-05 08:25:32,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 08:25:32.275, foo, 2016-07-05 08:25:32.275, foo}
2016-07-05 08:25:32,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 08:25:32.276, foo, 2016-07-05 08:25:32.276, foo}
2016-07-05 08:25:32,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 08:25:32.278, foo, 2016-07-05 08:25:32.278, foo}
2016-07-05 08:25:32,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 08:25:32.279, foo, 2016-07-05 08:25:32.279, foo}
2016-07-05 08:25:32,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 08:25:32.28, foo, 2016-07-05 08:25:32.28, foo}
2016-07-05 08:25:32,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 08:25:32.281, foo, 2016-07-05 08:25:32.281, foo}
2016-07-05 08:25:32,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 08:25:32.282, foo, 2016-07-05 08:25:32.282, foo}
2016-07-05 08:25:32,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 08:25:32.284, foo, 2016-07-05 08:25:32.284, foo}
2016-07-05 08:25:32,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 08:25:32.286, foo, 2016-07-05 08:25:32.286, foo}
2016-07-05 08:25:32,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 08:25:32.288, foo, 2016-07-05 08:25:32.288, foo}
2016-07-05 08:25:32,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 08:25:32.289, foo, 2016-07-05 08:25:32.289, foo}
2016-07-05 08:25:32,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 08:25:32.291, foo, 2016-07-05 08:25:32.291, foo}
2016-07-05 08:25:32,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 08:25:32.293, foo, 2016-07-05 08:25:32.293, foo}
2016-07-05 08:25:32,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 08:25:32.294, foo, 2016-07-05 08:25:32.294, foo}
2016-07-05 08:25:32,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 08:25:32.297, foo, 2016-07-05 08:25:32.297, foo}
2016-07-05 08:25:32,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 08:25:32.299, foo, 2016-07-05 08:25:32.299, foo}
2016-07-05 08:25:32,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 08:25:32.301, foo, 2016-07-05 08:25:32.301, foo}
2016-07-05 08:25:32,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 08:25:32.302, foo, 2016-07-05 08:25:32.302, foo}
2016-07-05 08:25:32,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 08:25:32.303, foo, 2016-07-05 08:25:32.303, foo}
2016-07-05 08:25:32,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 08:25:32.304, foo, 2016-07-05 08:25:32.304, foo}
2016-07-05 08:25:32,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 08:25:32.305, foo, 2016-07-05 08:25:32.305, foo}
2016-07-05 08:25:32,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 08:25:32.307, foo, 2016-07-05 08:25:32.307, foo}
2016-07-05 08:25:32,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 08:25:32.308, foo, 2016-07-05 08:25:32.308, foo}
2016-07-05 08:25:32,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 08:25:32.309, foo, 2016-07-05 08:25:32.309, foo}
2016-07-05 08:25:32,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 08:25:32.31, foo, 2016-07-05 08:25:32.31, foo}
2016-07-05 08:25:32,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:25:32.311, foo, 2016-07-05 08:25:32.311, foo}
2016-07-05 08:25:32,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:25:32.313, foo, 2016-07-05 08:25:32.313, foo}
2016-07-05 08:25:32,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 08:25:32.314, foo, 2016-07-05 08:25:32.314, foo}
2016-07-05 08:25:32,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 08:25:32.315, foo, 2016-07-05 08:25:32.315, foo}
2016-07-05 08:25:32,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 08:25:32.326, foo, 2016-07-05 08:25:32.326, foo}
2016-07-05 08:25:32,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 08:25:32.328, foo, 2016-07-05 08:25:32.328, foo}
2016-07-05 08:25:32,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 08:25:32.329, foo, 2016-07-05 08:25:32.329, foo}
2016-07-05 08:25:32,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 08:25:32.331, foo, 2016-07-05 08:25:32.331, foo}
2016-07-05 08:25:32,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 08:25:32.332, foo, 2016-07-05 08:25:32.332, foo}
2016-07-05 08:25:32,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 08:25:32.333, foo, 2016-07-05 08:25:32.333, foo}
2016-07-05 08:25:32,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 08:25:32.334, foo, 2016-07-05 08:25:32.335, foo}
2016-07-05 08:25:32,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 08:25:32.336, foo, 2016-07-05 08:25:32.336, foo}
2016-07-05 08:25:32,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 08:25:32.337, foo, 2016-07-05 08:25:32.337, foo}
2016-07-05 08:25:32,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 08:25:32.338, foo, 2016-07-05 08:25:32.338, foo}
2016-07-05 08:25:32,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 08:25:32.339, foo, 2016-07-05 08:25:32.339, foo}
2016-07-05 08:25:32,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 08:25:32.34, foo, 2016-07-05 08:25:32.34, foo}
2016-07-05 08:25:32,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 08:25:32.342, foo, 2016-07-05 08:25:32.342, foo}
2016-07-05 08:25:32,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 08:25:32.343, foo, 2016-07-05 08:25:32.343, foo}
2016-07-05 08:25:32,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 08:25:32.344, foo, 2016-07-05 08:25:32.344, foo}
2016-07-05 08:25:32,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 08:25:32.345, foo, 2016-07-05 08:25:32.345, foo}
2016-07-05 08:25:32,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 08:25:32.346, foo, 2016-07-05 08:25:32.346, foo}
2016-07-05 08:25:32,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 08:25:32.347, foo, 2016-07-05 08:25:32.347, foo}
2016-07-05 08:25:32,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 08:25:32.348, foo, 2016-07-05 08:25:32.348, foo}
2016-07-05 08:25:32,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 08:25:32.349, foo, 2016-07-05 08:25:32.349, foo}
2016-07-05 08:25:32,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 08:25:32.365, foo, 2016-07-05 08:25:32.365, foo}
2016-07-05 08:25:32,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 08:25:32.369, foo, 2016-07-05 08:25:32.369, foo}
2016-07-05 08:25:32,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 08:25:32.375, foo, 2016-07-05 08:25:32.375, foo}
2016-07-05 08:25:32,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 08:25:32.376, foo, 2016-07-05 08:25:32.376, foo}
2016-07-05 08:25:32,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 08:25:32.377, foo, 2016-07-05 08:25:32.377, foo}
2016-07-05 08:25:32,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 08:25:32.378, foo, 2016-07-05 08:25:32.378, foo}
2016-07-05 08:25:32,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 08:25:32.38, foo, 2016-07-05 08:25:32.38, foo}
2016-07-05 08:25:32,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 08:25:32.381, foo, 2016-07-05 08:25:32.381, foo}
2016-07-05 08:25:32,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 08:25:32.382, foo, 2016-07-05 08:25:32.382, foo}
2016-07-05 08:25:32,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 08:25:32.383, foo, 2016-07-05 08:25:32.383, foo}
2016-07-05 08:25:32,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 08:25:32.384, foo, 2016-07-05 08:25:32.384, foo}
2016-07-05 08:25:32,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 08:25:32.392, foo, 2016-07-05 08:25:32.392, foo}
2016-07-05 08:25:32,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 08:25:32.393, foo, 2016-07-05 08:25:32.393, foo}
2016-07-05 08:25:32,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 08:25:32.394, foo, 2016-07-05 08:25:32.394, foo}
2016-07-05 08:25:32,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 08:25:32.395, foo, 2016-07-05 08:25:32.395, foo}
2016-07-05 08:25:32,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 08:25:32.396, foo, 2016-07-05 08:25:32.396, foo}
2016-07-05 08:25:32,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 08:25:32.397, foo, 2016-07-05 08:25:32.397, foo}
2016-07-05 08:25:32,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 08:25:32.397, foo, 2016-07-05 08:25:32.398, foo}
2016-07-05 08:25:32,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 08:25:32.398, foo, 2016-07-05 08:25:32.398, foo}
2016-07-05 08:25:32,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 08:25:32.399, foo, 2016-07-05 08:25:32.399, foo}
2016-07-05 08:25:32,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 08:25:32.401, foo, 2016-07-05 08:25:32.401, foo}
2016-07-05 08:25:32,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 08:25:32.402, foo, 2016-07-05 08:25:32.402, foo}
2016-07-05 08:25:32,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 08:25:32.405, foo, 2016-07-05 08:25:32.405, foo}
2016-07-05 08:25:32,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 08:25:32.409, foo, 2016-07-05 08:25:32.409, foo}
2016-07-05 08:25:32,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 08:25:32.418, foo, 2016-07-05 08:25:32.418, foo}
2016-07-05 08:25:32,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 08:25:32.419, foo, 2016-07-05 08:25:32.419, foo}
2016-07-05 08:25:32,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 08:25:32.42, foo, 2016-07-05 08:25:32.42, foo}
2016-07-05 08:25:32,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 08:25:32.422, foo, 2016-07-05 08:25:32.422, foo}
2016-07-05 08:25:32,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 08:25:32.425, foo, 2016-07-05 08:25:32.425, foo}
2016-07-05 08:25:32,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:25:32.426, foo, 2016-07-05 08:25:32.426, foo}
2016-07-05 08:25:32,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:25:32.428, foo, 2016-07-05 08:25:32.428, foo}
2016-07-05 08:25:32,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:25:32.429, foo, 2016-07-05 08:25:32.429, foo}
2016-07-05 08:25:32,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 08:25:32.43, foo, 2016-07-05 08:25:32.43, foo}
2016-07-05 08:25:32,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 08:25:32.431, foo, 2016-07-05 08:25:32.431, foo}
2016-07-05 08:25:32,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 08:25:32.432, foo, 2016-07-05 08:25:32.432, foo}
2016-07-05 08:25:32,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 08:25:32.433, foo, 2016-07-05 08:25:32.433, foo}
2016-07-05 08:25:32,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 08:25:32.434, foo, 2016-07-05 08:25:32.434, foo}
2016-07-05 08:25:32,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 08:25:32.435, foo, 2016-07-05 08:25:32.435, foo}
2016-07-05 08:25:32,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 08:25:32.436, foo, 2016-07-05 08:25:32.436, foo}
2016-07-05 08:25:32,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 08:25:32.442, foo, 2016-07-05 08:25:32.442, foo}
2016-07-05 08:25:32,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 08:25:32.444, foo, 2016-07-05 08:25:32.444, foo}
2016-07-05 08:25:32,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 08:25:32.447, foo, 2016-07-05 08:25:32.447, foo}
2016-07-05 08:25:32,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 08:25:32.449, foo, 2016-07-05 08:25:32.449, foo}
2016-07-05 08:25:32,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 08:25:32.45, foo, 2016-07-05 08:25:32.45, foo}
2016-07-05 08:25:32,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 08:25:32.451, foo, 2016-07-05 08:25:32.451, foo}
2016-07-05 08:25:32,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 08:25:32.453, foo, 2016-07-05 08:25:32.453, foo}
2016-07-05 08:25:32,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 08:25:32.454, foo, 2016-07-05 08:25:32.454, foo}
2016-07-05 08:25:32,513 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 08:25:32,513 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 08:25:32,526 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:32,534 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:25:32,544 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:25:32,547 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:25:32,551 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:25:32,555 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:25:32,558 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:25:32,569 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 08:25:32,572 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 08:25:32,576 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 08:25:32,588 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 08:25:32,592 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 08:25:32,600 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 08:25:32,601 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 08:25:32,601 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 08:25:32,601 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 08:25:32,602 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 08:25:32,602 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 08:25:32,615 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 08:25:32,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 08:25:32,621 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 08:25:32,625 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 08:25:32,626 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 08:25:32,628 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 08:25:32,629 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 08:25:32,630 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:32,634 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s653ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 08:25:33,676 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 08:25:33,679 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 08:25:33,680 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 08:25:33,680 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 08:25:33,681 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 08:25:33,717 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:33,718 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:33,718 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:33,718 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:33,786 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 08:25:33,786 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 08:25:33,787 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 08:25:33,804 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:33,969 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 08:25:34,004 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:34,575 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:34,576 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:34,577 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 08:25:34,579 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:25:34,580 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:34,580 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:25:34,596 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 08:25:34,600 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 08:25:34,620 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 08:25:34,621 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:25:34,621 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 08:25:34,622 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 08:25:34,690 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 08:25:34,710 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 08:25:34,732 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 08:25:34,752 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 08:25:34,769 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 08:25:34,780 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 08:25:34,794 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 08:25:34,809 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 08:25:34,822 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 08:25:34,830 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 08:25:34,844 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 08:25:34,856 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 08:25:34,864 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 08:25:34,874 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 08:25:34,883 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 08:25:34,884 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 08:25:34,884 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 08:25:34,884 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 08:25:34,884 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 08:25:34,886 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 08:25:34,891 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 08:25:34,892 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 08:25:34,892 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 08:25:34,946 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 08:25:34,948 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:35,040 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 08:25:35,040 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:35,051 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s401ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 08:25:35,947 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 08:25:35,953 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 08:25:35,955 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 08:25:35,956 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 08:25:35,956 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 08:25:35,991 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:35,992 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:35,992 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:35,993 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:35,996 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 08:25:35,996 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 08:25:35,997 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 08:25:35,997 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 08:25:35,997 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 08:25:35,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 08:25:36,060 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:36,173 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 08:25:36,353 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 08:25:36,362 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:25:36,362 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:25:36,363 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:25:36,365 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:25:36,365 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:25:36,366 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:25:36,368 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:25:36,369 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:25:36,372 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:25:36,377 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:36,378 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:25:36,378 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:25:36,378 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:25:36,380 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:36,380 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:25:36,380 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:25:36,381 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:25:36,394 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:36,733 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:25:36,737 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:25:36,740 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:25:36,743 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:25:36,748 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:25:36,751 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:25:36,758 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 08:25:36,786 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 08:25:37,220 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 08:25:37,221 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 08:25:37,227 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:37,241 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:37,242 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:37,313 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:25:37,319 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:25:37,320 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:25:37,321 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:25:37,321 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:25:37,322 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:25:37,377 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:25:37,393 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:37,398 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s473ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 08:25:40,103 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 08:25:40,106 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 08:25:40,106 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 08:25:40,106 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 08:25:40,106 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 08:25:40,137 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:40,137 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:40,138 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:40,138 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:40,163 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 08:25:40,164 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 08:25:40,210 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:40,291 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 08:25:40,579 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 08:25:40,584 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:25:40,584 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:25:40,586 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:25:40,588 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:25:40,588 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:25:40,590 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:25:40,593 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:25:40,594 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:25:40,597 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:25:40,610 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:40,610 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:25:40,611 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:25:40,611 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:25:40,612 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:40,612 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:25:40,612 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:25:40,613 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:25:40,626 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:40,981 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:25:40,985 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:25:40,988 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:25:40,992 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:25:40,997 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:25:41,001 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:25:41,016 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 08:25:41,017 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 08:25:41,017 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 08:25:41,017 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 08:25:41,017 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 08:25:41,018 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 08:25:41,018 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 08:25:41,018 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 08:25:41,019 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 08:25:41,019 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 08:25:41,041 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 08:25:41,043 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 08:25:41,099 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 08:25:41,103 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 08:25:41,123 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 08:25:41,130 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 08:25:41,153 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 08:25:41,177 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 08:25:41,187 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 08:25:41,201 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 08:25:41,214 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 08:25:41,219 [main] INFO  (Database#info():2711) - }
2016-07-05 08:25:41,219 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 08:25:41,220 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 08:25:41,246 [main] INFO  (Database#info():2711) - }
2016-07-05 08:25:41,255 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 08:25:41,309 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:25:41,310 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 08:25:41,312 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 08:25:41,870 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 08:25:42,144 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 08:25:42,369 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 08:25:42,564 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 08:25:42,761 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 08:25:42,963 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 08:25:43,136 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 08:25:43,358 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 08:25:43,540 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 08:25:43,697 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 08:25:43,878 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 08:25:44,019 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 08:25:44,123 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 08:25:44,262 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 08:25:44,390 [main] INFO  (Database#info():2711) - }
2016-07-05 08:25:44,391 [main] INFO  (Database#info():2711) -  
2016-07-05 08:25:44,460 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:25:44,469 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s381ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 08:25:45,286 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 08:25:45,288 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 08:25:45,288 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 08:25:45,289 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 08:25:45,289 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 08:25:45,312 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:45,313 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:45,313 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:45,313 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:45,346 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:25:45,351 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:45,677 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:45,678 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:45,707 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:25:45,716 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:25:45,716 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:25:45,719 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:25:45,722 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:25:45,722 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:25:45,724 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:25:45,728 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:25:45,728 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:25:45,730 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 08:25:45,737 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:25:45,738 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:25:45,738 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:45,746 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s472ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 08:25:46,479 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 08:25:46,481 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 08:25:46,482 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 08:25:46,482 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 08:25:46,482 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 08:25:46,506 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:46,507 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:46,507 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:46,507 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:46,519 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 08:25:46,520 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 08:25:46,527 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:46,622 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:25:46,628 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:46,946 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:46,946 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:46,949 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:25:47,004 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:25:47,005 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:25:47,006 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:25:47,017 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:25:47,017 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:25:47,020 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:25:47,028 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:25:47,029 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:25:47,030 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 08:25:47,047 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:25:47,048 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:25:47,058 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 08:25:47,058 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 08:25:47,114 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:25:47,118 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:25:47,119 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:25:47,119 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:25:47,120 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:25:47,120 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:25:47,152 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 08:25:47,184 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 08:25:47,194 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 08:25:47,195 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:25:47,195 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 08:25:47,196 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 08:25:47,197 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 08:25:47,198 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 08:25:47,199 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 08:25:47,200 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 08:25:47,200 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 08:25:47,201 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 08:25:47,201 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 08:25:47,202 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 08:25:47,226 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 08:25:47,226 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 08:25:47,227 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 08:25:47,227 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 08:25:47,227 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 08:25:47,242 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 08:25:47,243 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 08:25:47,243 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 08:25:47,243 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 08:25:47,244 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 08:25:47,254 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 08:25:47,432 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:47,440 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:25:47,444 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:25:47,446 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:25:47,448 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:25:47,450 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:25:47,452 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:25:47,473 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 08:25:47,478 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 08:25:47,503 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:25:47,504 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 08:25:47,650 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 08:25:47,722 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 08:25:47,747 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 08:25:47,808 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 08:25:47,894 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 08:25:47,949 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 08:25:47,987 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 08:25:47,988 [main] INFO  (Database#info():2711) - }
2016-07-05 08:25:47,990 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 08:25:47,994 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 08:25:48,028 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 08:25:48,051 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 08:25:48,068 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 08:25:48,088 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 08:25:48,105 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 08:25:48,124 [main] INFO  (Database#info():2711) - }
2016-07-05 08:25:48,166 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 08:25:48,179 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:25:48,185 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:48,193 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s729ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 08:25:54,808 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 08:25:54,812 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 08:25:54,813 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 08:25:54,813 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 08:25:54,814 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 08:25:54,848 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:54,849 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:54,850 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:54,850 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:54,909 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 08:25:54,909 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 08:25:54,911 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 08:25:54,939 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:55,111 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 08:25:55,118 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:55,704 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:55,706 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:55,708 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 08:25:55,711 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 08:25:55,711 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:55,712 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 08:25:55,734 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 08:25:55,738 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 08:25:55,764 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 08:25:55,765 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:25:55,765 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 08:25:55,766 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 08:25:55,836 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 08:25:55,855 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 08:25:55,884 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 08:25:55,921 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 08:25:55,948 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 08:25:55,961 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 08:25:55,976 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 08:25:55,993 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 08:25:56,005 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 08:25:56,016 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 08:25:56,032 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 08:25:56,048 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 08:25:56,057 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 08:25:56,069 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 08:25:56,079 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 08:25:56,080 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 08:25:56,080 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 08:25:56,081 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 08:25:56,081 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 08:25:56,083 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 08:25:56,088 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 08:25:56,089 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 08:25:56,090 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 08:25:56,139 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 08:25:56,142 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:56,249 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 08:25:56,249 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:56,261 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s477ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 08:25:57,363 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 08:25:57,365 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 08:25:57,366 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 08:25:57,366 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 08:25:57,367 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 08:25:57,402 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:25:57,403 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:25:57,403 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:25:57,404 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:25:57,407 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 08:25:57,407 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 08:25:57,408 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 08:25:57,408 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 08:25:57,408 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 08:25:57,409 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 08:25:57,458 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:25:57,581 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 08:25:57,780 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 08:25:57,788 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:25:57,788 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:25:57,790 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:25:57,791 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:25:57,791 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:25:57,793 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:25:57,795 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:25:57,795 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:25:57,798 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:25:57,803 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:57,804 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:25:57,804 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:25:57,805 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:25:57,805 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:25:57,806 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:25:57,806 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:25:57,806 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:25:57,816 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:25:58,156 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:25:58,163 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:25:58,168 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:25:58,174 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:25:58,183 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:25:58,187 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:25:58,201 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 08:25:58,241 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 08:25:58,828 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 08:25:58,829 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 08:25:58,840 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:25:58,862 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:25:58,863 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:25:58,928 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:25:58,936 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:25:58,938 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:25:58,939 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:25:58,941 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:25:58,941 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:25:58,987 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:25:59,008 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:25:59,014 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s670ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 08:26:02,167 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 08:26:02,170 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 08:26:02,171 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 08:26:02,171 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 08:26:02,172 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 08:26:02,211 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:26:02,212 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:26:02,212 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:26:02,212 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:26:02,232 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 08:26:02,233 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 08:26:02,284 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:26:02,378 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 08:26:02,657 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 08:26:02,662 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 08:26:02,663 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 08:26:02,664 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 08:26:02,666 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 08:26:02,667 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 08:26:02,668 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 08:26:02,674 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 08:26:02,675 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 08:26:02,679 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 08:26:02,695 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:26:02,696 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 08:26:02,696 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 08:26:02,697 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 08:26:02,697 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 08:26:02,698 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 08:26:02,699 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 08:26:02,699 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 08:26:02,711 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:26:03,164 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
