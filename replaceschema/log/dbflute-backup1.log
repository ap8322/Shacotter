2016-07-05 08:26:03,175 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:26:03,184 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:26:03,187 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:26:03,195 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:26:03,199 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:26:03,218 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 08:26:03,219 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 08:26:03,220 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 08:26:03,220 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 08:26:03,221 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 08:26:03,222 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 08:26:03,222 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 08:26:03,223 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 08:26:03,224 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 08:26:03,224 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 08:26:03,244 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 08:26:03,247 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 08:26:03,311 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 08:26:03,315 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 08:26:03,332 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 08:26:03,338 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 08:26:03,358 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 08:26:03,382 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 08:26:03,390 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 08:26:03,399 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 08:26:03,406 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 08:26:03,410 [main] INFO  (Database#info():2711) - }
2016-07-05 08:26:03,411 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 08:26:03,412 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 08:26:03,431 [main] INFO  (Database#info():2711) - }
2016-07-05 08:26:03,438 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 08:26:03,482 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:26:03,485 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 08:26:03,487 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 08:26:04,027 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 08:26:04,284 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 08:26:04,490 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 08:26:04,665 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 08:26:04,873 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 08:26:05,081 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 08:26:05,288 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 08:26:05,519 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 08:26:05,706 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 08:26:05,844 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 08:26:06,060 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 08:26:06,206 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 08:26:06,328 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 08:26:06,479 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 08:26:06,628 [main] INFO  (Database#info():2711) - }
2016-07-05 08:26:06,629 [main] INFO  (Database#info():2711) -  
2016-07-05 08:26:06,683 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:26:06,693 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s545ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 08:26:07,693 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 08:26:07,698 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 08:26:07,698 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 08:26:07,699 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 08:26:07,699 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 08:26:07,719 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:26:07,720 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:26:07,720 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:26:07,720 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:26:07,752 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:26:07,757 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:26:08,077 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:26:08,078 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:26:08,105 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:26:08,117 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:26:08,118 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:26:08,121 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:26:08,125 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:26:08,125 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:26:08,128 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:26:08,135 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:26:08,136 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:26:08,139 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 08:26:08,167 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 08:26:08,168 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:26:08,168 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:26:08,175 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s497ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 08:26:08,896 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 08:26:08,898 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 08:26:08,898 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 08:26:08,898 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 08:26:08,899 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 08:26:08,919 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 08:26:08,920 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 08:26:08,920 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 08:26:08,920 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 08:26:08,938 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 08:26:08,938 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 08:26:08,945 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 08:26:09,043 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 08:26:09,050 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 08:26:09,411 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 08:26:09,412 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 08:26:09,415 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 08:26:09,467 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:26:09,468 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 08:26:09,470 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 08:26:09,480 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:26:09,481 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 08:26:09,482 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 08:26:09,506 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:26:09,506 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 08:26:09,507 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 08:26:09,544 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 08:26:09,545 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 08:26:09,556 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 08:26:09,556 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 08:26:09,615 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 08:26:09,621 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 08:26:09,622 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 08:26:09,623 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 08:26:09,623 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 08:26:09,624 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 08:26:09,655 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 08:26:09,685 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 08:26:09,698 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 08:26:09,698 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 08:26:09,699 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 08:26:09,701 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 08:26:09,702 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 08:26:09,702 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 08:26:09,703 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 08:26:09,704 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 08:26:09,705 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 08:26:09,705 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 08:26:09,706 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 08:26:09,706 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 08:26:09,731 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 08:26:09,732 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 08:26:09,732 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 08:26:09,733 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 08:26:09,733 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 08:26:09,749 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 08:26:09,750 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 08:26:09,751 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 08:26:09,751 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 08:26:09,752 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 08:26:09,755 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 08:26:09,942 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 08:26:09,950 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 08:26:09,953 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 08:26:09,955 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 08:26:09,957 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 08:26:09,959 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 08:26:09,961 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 08:26:09,973 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 08:26:09,977 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 08:26:09,992 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 08:26:09,993 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 08:26:10,122 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 08:26:10,183 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 08:26:10,199 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 08:26:10,255 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 08:26:10,316 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 08:26:10,364 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 08:26:10,409 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 08:26:10,410 [main] INFO  (Database#info():2711) - }
2016-07-05 08:26:10,411 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 08:26:10,416 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 08:26:10,452 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 08:26:10,476 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 08:26:10,493 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 08:26:10,519 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 08:26:10,540 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 08:26:10,560 [main] INFO  (Database#info():2711) - }
2016-07-05 08:26:10,602 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 08:26:10,611 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 08:26:10,615 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 08:26:10,621 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s733ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:33:24,223 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:33:24,227 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:33:24,228 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:33:24,234 [main] INFO  (DfReplaceSchemaTask#begin():98) - |              (SavePrevious)              |
2016-07-05 20:33:24,235 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:33:24,235 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:33:24,237 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:33:25,717 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:33:25,718 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:33:25,718 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:33:25,718 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:33:25,731 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:33:25,973 [main] INFO  (DfReplaceSchemaTask#setupLazyConnection():143) - ...Being a lazy connection: Failed to connect: url=jdbc:mysql://localhost:4...
2016-07-05 20:33:25,987 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDataSourceNotFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Not found the data source for AlterCheck.

[Advice]
Make sure your database process works
or your connection settings are correct.
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.throwAlterCheckDataSourceNotFoundException(DfAlterCheckProcess.java:127)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.<init>(DfAlterCheckProcess.java:114)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.createAsMain(DfAlterCheckProcess.java:131)
	at org.dbflute.task.DfReplaceSchemaTask.createAlterCheckProcess(DfReplaceSchemaTask.java:210)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:189)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 20:33:26,006 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s799ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$


_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:33:56,206 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:33:56,211 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:33:56,212 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:33:56,218 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:33:56,219 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:33:56,221 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:33:59,368 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:33:59,369 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:33:59,369 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:33:59,370 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:33:59,378 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:33:59,913 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:33:59,913 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:33:59,940 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:33:59,941 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:33:59,941 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:33:59,943 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:33:59,944 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:33:59,944 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:33:59,979 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:33:59,980 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:33:59,980 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:34:00,037 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:34:00,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:34:00,050 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:34:00,058 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:34:00,072 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:34:00,094 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:34:00,123 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:34:00,144 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:34:00,157 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:34:00,179 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:34:00,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:34:00,220 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:34:00,239 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:34:00,256 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:34:00,280 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:34:00,296 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:34:00,322 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:34:00,337 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:34:00,359 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:34:00,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:34:00,396 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:34:00,421 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:34:00,442 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:34:00,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:34:00,449 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:34:00,453 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:34:00,458 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:34:00,461 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:34:00,467 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:34:00,470 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:34:00,475 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:34:00,479 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:34:00,482 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:34:00,487 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:34:00,491 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:34:00,495 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:34:00,498 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:34:00,639 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:34:00,642 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:34:00,645 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:34:00,646 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:34:00,646 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:34:00,646 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:34:00,647 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:34:00,647 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:34:00,651 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:34:00,655 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:34:00,656 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:34:00,657 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:34:00,667 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:34:00,667 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:34:00,669 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:34:00,669 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:34:00,672 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:34:00,675 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:34:00,676 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:34:00,676 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:34:00,677 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:34:00,677 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:34:00,681 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:34:00,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:34:00,776 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:34:00,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:34:00,840 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:34:00,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:34:00,917 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:34:00,986 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:34:00,999 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:34:01,061 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:34:01,073 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:34:01,084 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:34:01,131 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:34:01,143 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:34:01,176 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:34:01,185 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:34:01,202 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:34:01,244 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:34:01,265 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,284 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:34:01,327 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,351 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:34:01,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:34:01,417 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:34:01,447 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:34:01,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:34:01,507 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:34:01,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:34:01,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:34:01,591 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:34:01,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:34:01,628 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:34:01,647 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:34:01,671 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:34:01,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:34:01,709 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:34:01,728 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:34:01,748 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:34:01,748 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:34:01,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:34:01,752 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:34:01,754 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:34:01,754 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:34:01,755 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:34:01,867 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:34:01,868 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:34:01,868 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:34:01,868 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:34:01,869 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:34:01,869 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:34:01,910 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:34:01,910 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:34:01,911 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:34:02,227 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:34:02,227 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:02,228 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:34:02,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:34:02,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:34:02,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:34:02,319 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:34:02,332 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:34:02,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:34:02,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:34:02,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:34:02,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:34:02,348 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:34:02,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:34:02,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:34:02,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:34:02,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:34:02,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:34:02,365 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:34:02,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:34:02,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:34:02,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:34:02,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:34:02,375 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:34:02,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:34:02,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:34:02,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:34:02,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:34:02,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:34:02,385 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:34:02,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:34:02,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:34:02,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:34:02,393 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:34:02,396 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:34:02,397 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:34:02,397 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:34:02,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:34:02.486, foo, 2016-07-05 20:34:02.486, foo, 0}
2016-07-05 20:34:02,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:34:02.498, foo, 2016-07-05 20:34:02.498, foo, 0}
2016-07-05 20:34:02,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:34:02.5, foo, 2016-07-05 20:34:02.5, foo, 0}
2016-07-05 20:34:02,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:34:02.503, foo, 2016-07-05 20:34:02.503, foo, 0}
2016-07-05 20:34:02,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:34:02.506, foo, 2016-07-05 20:34:02.506, foo, 0}
2016-07-05 20:34:02,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:34:02.508, foo, 2016-07-05 20:34:02.508, foo, 0}
2016-07-05 20:34:02,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:34:02.512, foo, 2016-07-05 20:34:02.512, foo, 0}
2016-07-05 20:34:02,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:34:02.514, foo, 2016-07-05 20:34:02.514, foo, 0}
2016-07-05 20:34:02,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:34:02.516, foo, 2016-07-05 20:34:02.516, foo, 0}
2016-07-05 20:34:02,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:34:02.518, foo, 2016-07-05 20:34:02.518, foo, 0}
2016-07-05 20:34:02,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:34:02.533, foo, 2016-07-05 20:34:02.533, foo, 0}
2016-07-05 20:34:02,545 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:34:02.545, foo, 2016-07-05 20:34:02.545, foo, 0}
2016-07-05 20:34:02,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:34:02.548, foo, 2016-07-05 20:34:02.548, foo, 0}
2016-07-05 20:34:02,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:34:02.552, foo, 2016-07-05 20:34:02.552, foo, 0}
2016-07-05 20:34:02,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:34:02.554, foo, 2016-07-05 20:34:02.554, foo, 0}
2016-07-05 20:34:02,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:34:02.557, foo, 2016-07-05 20:34:02.557, foo, 0}
2016-07-05 20:34:02,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:34:02.558, foo, 2016-07-05 20:34:02.558, foo, 0}
2016-07-05 20:34:02,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:34:02.561, foo, 2016-07-05 20:34:02.561, foo, 0}
2016-07-05 20:34:02,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:34:02.563, foo, 2016-07-05 20:34:02.563, foo, 0}
2016-07-05 20:34:02,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:34:02.575, foo, 2016-07-05 20:34:02.575, foo, 0}
2016-07-05 20:34:02,607 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:34:02,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:34:02.608, foo, 2016-07-05 20:34:02.608, foo, 0}
2016-07-05 20:34:02,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:34:02.612, foo, 2016-07-05 20:34:02.612, foo, 0}
2016-07-05 20:34:02,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:34:02.615, foo, 2016-07-05 20:34:02.615, foo, 0}
2016-07-05 20:34:02,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:34:02.617, foo, 2016-07-05 20:34:02.617, foo, 0}
2016-07-05 20:34:02,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:34:02.62, foo, 2016-07-05 20:34:02.62, foo, 0}
2016-07-05 20:34:02,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:34:02.623, foo, 2016-07-05 20:34:02.623, foo, 0}
2016-07-05 20:34:02,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:34:02.626, foo, 2016-07-05 20:34:02.626, foo, 0}
2016-07-05 20:34:02,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:34:02.63, foo, 2016-07-05 20:34:02.63, foo, 0}
2016-07-05 20:34:02,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:34:02.633, foo, 2016-07-05 20:34:02.633, foo, 0}
2016-07-05 20:34:02,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:34:02.635, foo, 2016-07-05 20:34:02.636, foo, 0}
2016-07-05 20:34:02,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:34:02.638, foo, 2016-07-05 20:34:02.638, foo, 0}
2016-07-05 20:34:02,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:34:02.642, foo, 2016-07-05 20:34:02.642, foo, 0}
2016-07-05 20:34:02,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:34:02.646, foo, 2016-07-05 20:34:02.646, foo, 0}
2016-07-05 20:34:02,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:34:02.648, foo, 2016-07-05 20:34:02.648, foo, 0}
2016-07-05 20:34:02,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:34:02.651, foo, 2016-07-05 20:34:02.651, foo, 0}
2016-07-05 20:34:02,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:34:02.653, foo, 2016-07-05 20:34:02.653, foo, 0}
2016-07-05 20:34:02,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:34:02.655, foo, 2016-07-05 20:34:02.655, foo, 0}
2016-07-05 20:34:02,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:34:02.657, foo, 2016-07-05 20:34:02.657, foo, 0}
2016-07-05 20:34:02,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:34:02.661, foo, 2016-07-05 20:34:02.661, foo, 0}
2016-07-05 20:34:02,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:34:02.663, foo, 2016-07-05 20:34:02.663, foo, 0}
2016-07-05 20:34:02,682 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:34:02,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:34:02,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:34:02,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:34:02,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:34:02,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:34:02,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:34:02,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:34:02,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:34:02,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:34:02,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:34:02,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:34:02,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:34:02,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:34:02,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:34:02,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:34:02,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:34:02,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:34:02,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:34:02,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:34:02,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:34:02,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:34:02,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:34:02,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:34:02,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:34:02,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:34:02,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:34:02,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:34:02,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:34:02,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:34:02,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:34:02,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:34:02,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:34:02,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:34:02,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:34:02,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:34:02,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:34:02,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:34:02,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:34:02,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:34:02,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:34:02,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:34:02,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:34:02,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:34:02,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:34:02,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:34:02,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:34:02,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:34:02,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:34:02,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:34:02,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:34:02,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:34:02,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:34:02,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:34:02,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:34:02,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:34:02,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:34:02,800 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:34:02,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 20:34:02.801, foo, 2016-07-05 20:34:02.801, foo, 0}
2016-07-05 20:34:02,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 20:34:02.803, foo, 2016-07-05 20:34:02.803, foo, 0}
2016-07-05 20:34:02,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 20:34:02.804, foo, 2016-07-05 20:34:02.804, foo, 0}
2016-07-05 20:34:02,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 20:34:02.805, foo, 2016-07-05 20:34:02.805, foo, 0}
2016-07-05 20:34:02,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 20:34:02.806, foo, 2016-07-05 20:34:02.806, foo, 0}
2016-07-05 20:34:02,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 20:34:02.807, foo, 2016-07-05 20:34:02.807, foo, 0}
2016-07-05 20:34:02,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 20:34:02.808, foo, 2016-07-05 20:34:02.808, foo, 0}
2016-07-05 20:34:02,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 20:34:02.809, foo, 2016-07-05 20:34:02.809, foo, 0}
2016-07-05 20:34:02,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 20:34:02.81, foo, 2016-07-05 20:34:02.81, foo, 0}
2016-07-05 20:34:02,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 20:34:02.811, foo, 2016-07-05 20:34:02.811, foo, 0}
2016-07-05 20:34:02,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 20:34:02.812, foo, 2016-07-05 20:34:02.812, foo, 0}
2016-07-05 20:34:02,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 20:34:02.812, foo, 2016-07-05 20:34:02.812, foo, 0}
2016-07-05 20:34:02,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 20:34:02.813, foo, 2016-07-05 20:34:02.813, foo, 0}
2016-07-05 20:34:02,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 20:34:02.814, foo, 2016-07-05 20:34:02.814, foo, 0}
2016-07-05 20:34:02,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 20:34:02.816, foo, 2016-07-05 20:34:02.816, foo, 0}
2016-07-05 20:34:02,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 20:34:02.817, foo, 2016-07-05 20:34:02.817, foo, 0}
2016-07-05 20:34:02,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 20:34:02.818, foo, 2016-07-05 20:34:02.818, foo, 0}
2016-07-05 20:34:02,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 20:34:02.818, foo, 2016-07-05 20:34:02.818, foo, 0}
2016-07-05 20:34:02,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 20:34:02.819, foo, 2016-07-05 20:34:02.819, foo, 0}
2016-07-05 20:34:02,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 20:34:02.82, foo, 2016-07-05 20:34:02.82, foo, 0}
2016-07-05 20:34:02,851 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:34:02,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 20:34:02.852, foo, 2016-07-05 20:34:02.852, foo, 0}
2016-07-05 20:34:02,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 20:34:02.854, foo, 2016-07-05 20:34:02.854, foo, 0}
2016-07-05 20:34:02,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 20:34:02.855, foo, 2016-07-05 20:34:02.855, foo, 0}
2016-07-05 20:34:02,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 20:34:02.856, foo, 2016-07-05 20:34:02.856, foo, 0}
2016-07-05 20:34:02,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 20:34:02.857, foo, 2016-07-05 20:34:02.857, foo, 0}
2016-07-05 20:34:02,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 20:34:02.857, foo, 2016-07-05 20:34:02.857, foo, 0}
2016-07-05 20:34:02,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 20:34:02.858, foo, 2016-07-05 20:34:02.858, foo, 0}
2016-07-05 20:34:02,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 20:34:02.859, foo, 2016-07-05 20:34:02.859, foo, 0}
2016-07-05 20:34:02,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 20:34:02.86, foo, 2016-07-05 20:34:02.86, foo, 0}
2016-07-05 20:34:02,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 20:34:02.861, foo, 2016-07-05 20:34:02.861, foo, 0}
2016-07-05 20:34:02,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 20:34:02.862, foo, 2016-07-05 20:34:02.862, foo, 0}
2016-07-05 20:34:02,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 20:34:02.863, foo, 2016-07-05 20:34:02.863, foo, 0}
2016-07-05 20:34:02,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 20:34:02.879, foo, 2016-07-05 20:34:02.879, foo, 0}
2016-07-05 20:34:02,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 20:34:02.88, foo, 2016-07-05 20:34:02.88, foo, 0}
2016-07-05 20:34:02,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 20:34:02.881, foo, 2016-07-05 20:34:02.881, foo, 0}
2016-07-05 20:34:02,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 20:34:02.882, foo, 2016-07-05 20:34:02.882, foo, 0}
2016-07-05 20:34:02,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 20:34:02.883, foo, 2016-07-05 20:34:02.883, foo, 0}
2016-07-05 20:34:02,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 20:34:02.884, foo, 2016-07-05 20:34:02.884, foo, 0}
2016-07-05 20:34:02,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 20:34:02.885, foo, 2016-07-05 20:34:02.885, foo, 0}
2016-07-05 20:34:02,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 20:34:02.885, foo, 2016-07-05 20:34:02.885, foo, 0}
2016-07-05 20:34:02,906 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:34:02,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:34:02.907, foo, 2016-07-05 20:34:02.907, foo}
2016-07-05 20:34:02,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:34:02.909, foo, 2016-07-05 20:34:02.909, foo}
2016-07-05 20:34:02,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:34:02.91, foo, 2016-07-05 20:34:02.911, foo}
2016-07-05 20:34:02,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:34:02.912, foo, 2016-07-05 20:34:02.912, foo}
2016-07-05 20:34:02,930 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:34:02,930 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:34:02,931 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:34:02,931 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:34:02,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:34:02.994, foo, 2016-07-05 20:34:02.994, foo, 0}
2016-07-05 20:34:02,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:34:02.997, foo, 2016-07-05 20:34:02.997, foo, 0}
2016-07-05 20:34:02,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:34:02.998, foo, 2016-07-05 20:34:02.998, foo, 0}
2016-07-05 20:34:02,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:34:02.999, foo, 2016-07-05 20:34:02.999, foo, 0}
2016-07-05 20:34:03,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:34:03.0, foo, 2016-07-05 20:34:03.0, foo, 0}
2016-07-05 20:34:03,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:34:03.001, foo, 2016-07-05 20:34:03.001, foo, 0}
2016-07-05 20:34:03,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:34:03.002, foo, 2016-07-05 20:34:03.002, foo, 0}
2016-07-05 20:34:03,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:34:03.004, foo, 2016-07-05 20:34:03.004, foo, 0}
2016-07-05 20:34:03,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:34:03.005, foo, 2016-07-05 20:34:03.005, foo, 0}
2016-07-05 20:34:03,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:34:03.006, foo, 2016-07-05 20:34:03.006, foo, 0}
2016-07-05 20:34:03,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:34:03.023, foo, 2016-07-05 20:34:03.023, foo, 0}
2016-07-05 20:34:03,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:34:03.026, foo, 2016-07-05 20:34:03.026, foo, 0}
2016-07-05 20:34:03,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:34:03.028, foo, 2016-07-05 20:34:03.028, foo, 0}
2016-07-05 20:34:03,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:34:03.03, foo, 2016-07-05 20:34:03.03, foo, 0}
2016-07-05 20:34:03,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:34:03.031, foo, 2016-07-05 20:34:03.031, foo, 0}
2016-07-05 20:34:03,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:34:03.032, foo, 2016-07-05 20:34:03.032, foo, 0}
2016-07-05 20:34:03,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:34:03.033, foo, 2016-07-05 20:34:03.033, foo, 0}
2016-07-05 20:34:03,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:34:03.033, foo, 2016-07-05 20:34:03.033, foo, 0}
2016-07-05 20:34:03,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:34:03.034, foo, 2016-07-05 20:34:03.034, foo, 0}
2016-07-05 20:34:03,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:34:03.054, foo, 2016-07-05 20:34:03.054, foo, 0}
2016-07-05 20:34:03,079 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:34:03,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:34:03.08, foo, 2016-07-05 20:34:03.08, foo, 0}
2016-07-05 20:34:03,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:34:03.082, foo, 2016-07-05 20:34:03.082, foo, 0}
2016-07-05 20:34:03,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:34:03.084, foo, 2016-07-05 20:34:03.084, foo, 0}
2016-07-05 20:34:03,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:34:03.085, foo, 2016-07-05 20:34:03.085, foo, 0}
2016-07-05 20:34:03,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:34:03.087, foo, 2016-07-05 20:34:03.087, foo, 0}
2016-07-05 20:34:03,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:34:03.088, foo, 2016-07-05 20:34:03.088, foo, 0}
2016-07-05 20:34:03,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:34:03.089, foo, 2016-07-05 20:34:03.089, foo, 0}
2016-07-05 20:34:03,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:34:03.091, foo, 2016-07-05 20:34:03.091, foo, 0}
2016-07-05 20:34:03,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:34:03.093, foo, 2016-07-05 20:34:03.093, foo, 0}
2016-07-05 20:34:03,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:34:03.095, foo, 2016-07-05 20:34:03.095, foo, 0}
2016-07-05 20:34:03,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:34:03.097, foo, 2016-07-05 20:34:03.097, foo, 0}
2016-07-05 20:34:03,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:34:03.104, foo, 2016-07-05 20:34:03.104, foo, 0}
2016-07-05 20:34:03,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:34:03.106, foo, 2016-07-05 20:34:03.106, foo, 0}
2016-07-05 20:34:03,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:34:03.108, foo, 2016-07-05 20:34:03.108, foo, 0}
2016-07-05 20:34:03,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:34:03.11, foo, 2016-07-05 20:34:03.11, foo, 0}
2016-07-05 20:34:03,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:34:03.112, foo, 2016-07-05 20:34:03.112, foo, 0}
2016-07-05 20:34:03,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:34:03.114, foo, 2016-07-05 20:34:03.114, foo, 0}
2016-07-05 20:34:03,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:34:03.116, foo, 2016-07-05 20:34:03.116, foo, 0}
2016-07-05 20:34:03,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:34:03.117, foo, 2016-07-05 20:34:03.117, foo, 0}
2016-07-05 20:34:03,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:34:03.118, foo, 2016-07-05 20:34:03.118, foo, 0}
2016-07-05 20:34:03,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:34:03.121, foo, 2016-07-05 20:34:03.121, foo, 0}
2016-07-05 20:34:03,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:34:03.123, foo, 2016-07-05 20:34:03.123, foo, 0}
2016-07-05 20:34:03,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:34:03.125, foo, 2016-07-05 20:34:03.125, foo, 0}
2016-07-05 20:34:03,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:34:03.128, foo, 2016-07-05 20:34:03.128, foo, 0}
2016-07-05 20:34:03,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:34:03.131, foo, 2016-07-05 20:34:03.131, foo, 0}
2016-07-05 20:34:03,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:34:03.132, foo, 2016-07-05 20:34:03.132, foo, 0}
2016-07-05 20:34:03,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:34:03.134, foo, 2016-07-05 20:34:03.134, foo, 0}
2016-07-05 20:34:03,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:34:03.135, foo, 2016-07-05 20:34:03.135, foo, 0}
2016-07-05 20:34:03,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:34:03.136, foo, 2016-07-05 20:34:03.136, foo, 0}
2016-07-05 20:34:03,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:34:03.137, foo, 2016-07-05 20:34:03.137, foo, 0}
2016-07-05 20:34:03,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:34:03.138, foo, 2016-07-05 20:34:03.138, foo, 0}
2016-07-05 20:34:03,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:34:03.139, foo, 2016-07-05 20:34:03.139, foo, 0}
2016-07-05 20:34:03,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:34:03.146, foo, 2016-07-05 20:34:03.146, foo, 0}
2016-07-05 20:34:03,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:34:03.147, foo, 2016-07-05 20:34:03.147, foo, 0}
2016-07-05 20:34:03,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:34:03.148, foo, 2016-07-05 20:34:03.148, foo, 0}
2016-07-05 20:34:03,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:34:03.149, foo, 2016-07-05 20:34:03.149, foo, 0}
2016-07-05 20:34:03,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:34:03.15, foo, 2016-07-05 20:34:03.15, foo, 0}
2016-07-05 20:34:03,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:34:03.151, foo, 2016-07-05 20:34:03.151, foo, 0}
2016-07-05 20:34:03,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:34:03.152, foo, 2016-07-05 20:34:03.152, foo, 0}
2016-07-05 20:34:03,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:34:03.153, foo, 2016-07-05 20:34:03.153, foo, 0}
2016-07-05 20:34:03,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:34:03.154, foo, 2016-07-05 20:34:03.154, foo, 0}
2016-07-05 20:34:03,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:34:03.155, foo, 2016-07-05 20:34:03.155, foo, 0}
2016-07-05 20:34:03,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:34:03.155, foo, 2016-07-05 20:34:03.155, foo, 0}
2016-07-05 20:34:03,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:34:03.156, foo, 2016-07-05 20:34:03.156, foo, 0}
2016-07-05 20:34:03,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:34:03.158, foo, 2016-07-05 20:34:03.158, foo, 0}
2016-07-05 20:34:03,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:34:03.16, foo, 2016-07-05 20:34:03.16, foo, 0}
2016-07-05 20:34:03,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:34:03.162, foo, 2016-07-05 20:34:03.162, foo, 0}
2016-07-05 20:34:03,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:34:03.163, foo, 2016-07-05 20:34:03.163, foo, 0}
2016-07-05 20:34:03,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:34:03.164, foo, 2016-07-05 20:34:03.164, foo, 0}
2016-07-05 20:34:03,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:34:03.165, foo, 2016-07-05 20:34:03.165, foo, 0}
2016-07-05 20:34:03,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:34:03.166, foo, 2016-07-05 20:34:03.166, foo, 0}
2016-07-05 20:34:03,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:34:03.167, foo, 2016-07-05 20:34:03.167, foo, 0}
2016-07-05 20:34:03,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:34:03.168, foo, 2016-07-05 20:34:03.168, foo, 0}
2016-07-05 20:34:03,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:34:03.169, foo, 2016-07-05 20:34:03.169, foo, 0}
2016-07-05 20:34:03,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:34:03.17, foo, 2016-07-05 20:34:03.17, foo, 0}
2016-07-05 20:34:03,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:34:03.171, foo, 2016-07-05 20:34:03.171, foo, 0}
2016-07-05 20:34:03,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:34:03.172, foo, 2016-07-05 20:34:03.172, foo, 0}
2016-07-05 20:34:03,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:34:03.179, foo, 2016-07-05 20:34:03.179, foo, 0}
2016-07-05 20:34:03,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:34:03.181, foo, 2016-07-05 20:34:03.181, foo, 0}
2016-07-05 20:34:03,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:34:03.182, foo, 2016-07-05 20:34:03.182, foo, 0}
2016-07-05 20:34:03,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:34:03.183, foo, 2016-07-05 20:34:03.183, foo, 0}
2016-07-05 20:34:03,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:34:03.185, foo, 2016-07-05 20:34:03.185, foo, 0}
2016-07-05 20:34:03,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:34:03.186, foo, 2016-07-05 20:34:03.186, foo, 0}
2016-07-05 20:34:03,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:34:03.187, foo, 2016-07-05 20:34:03.187, foo, 0}
2016-07-05 20:34:03,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:34:03.189, foo, 2016-07-05 20:34:03.189, foo, 0}
2016-07-05 20:34:03,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:34:03.19, foo, 2016-07-05 20:34:03.19, foo, 0}
2016-07-05 20:34:03,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:34:03.193, foo, 2016-07-05 20:34:03.193, foo, 0}
2016-07-05 20:34:03,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:34:03.195, foo, 2016-07-05 20:34:03.195, foo, 0}
2016-07-05 20:34:03,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:34:03.197, foo, 2016-07-05 20:34:03.197, foo, 0}
2016-07-05 20:34:03,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:34:03.199, foo, 2016-07-05 20:34:03.199, foo, 0}
2016-07-05 20:34:03,257 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:34:03,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:34:03.259, foo, 2016-07-05 20:34:03.259, foo}
2016-07-05 20:34:03,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:34:03.261, foo, 2016-07-05 20:34:03.262, foo}
2016-07-05 20:34:03,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:34:03.263, foo, 2016-07-05 20:34:03.263, foo}
2016-07-05 20:34:03,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:34:03.265, foo, 2016-07-05 20:34:03.265, foo}
2016-07-05 20:34:03,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:34:03.266, foo, 2016-07-05 20:34:03.266, foo}
2016-07-05 20:34:03,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:34:03.267, foo, 2016-07-05 20:34:03.267, foo}
2016-07-05 20:34:03,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:34:03.268, foo, 2016-07-05 20:34:03.268, foo}
2016-07-05 20:34:03,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:34:03.271, foo, 2016-07-05 20:34:03.271, foo}
2016-07-05 20:34:03,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:34:03.272, foo, 2016-07-05 20:34:03.272, foo}
2016-07-05 20:34:03,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:34:03.273, foo, 2016-07-05 20:34:03.273, foo}
2016-07-05 20:34:03,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:34:03.274, foo, 2016-07-05 20:34:03.274, foo}
2016-07-05 20:34:03,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:34:03.277, foo, 2016-07-05 20:34:03.277, foo}
2016-07-05 20:34:03,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:34:03.278, foo, 2016-07-05 20:34:03.278, foo}
2016-07-05 20:34:03,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:34:03.279, foo, 2016-07-05 20:34:03.279, foo}
2016-07-05 20:34:03,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:34:03.28, foo, 2016-07-05 20:34:03.28, foo}
2016-07-05 20:34:03,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:34:03.281, foo, 2016-07-05 20:34:03.281, foo}
2016-07-05 20:34:03,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:34:03.282, foo, 2016-07-05 20:34:03.282, foo}
2016-07-05 20:34:03,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:34:03.283, foo, 2016-07-05 20:34:03.283, foo}
2016-07-05 20:34:03,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:34:03.285, foo, 2016-07-05 20:34:03.285, foo}
2016-07-05 20:34:03,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:34:03.286, foo, 2016-07-05 20:34:03.286, foo}
2016-07-05 20:34:03,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:34:03.287, foo, 2016-07-05 20:34:03.287, foo}
2016-07-05 20:34:03,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:34:03.289, foo, 2016-07-05 20:34:03.289, foo}
2016-07-05 20:34:03,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:34:03.29, foo, 2016-07-05 20:34:03.29, foo}
2016-07-05 20:34:03,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:34:03.292, foo, 2016-07-05 20:34:03.292, foo}
2016-07-05 20:34:03,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:34:03.294, foo, 2016-07-05 20:34:03.294, foo}
2016-07-05 20:34:03,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:34:03.296, foo, 2016-07-05 20:34:03.296, foo}
2016-07-05 20:34:03,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:34:03.298, foo, 2016-07-05 20:34:03.298, foo}
2016-07-05 20:34:03,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:34:03.299, foo, 2016-07-05 20:34:03.299, foo}
2016-07-05 20:34:03,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:34:03.3, foo, 2016-07-05 20:34:03.3, foo}
2016-07-05 20:34:03,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:34:03.301, foo, 2016-07-05 20:34:03.301, foo}
2016-07-05 20:34:03,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:34:03.302, foo, 2016-07-05 20:34:03.302, foo}
2016-07-05 20:34:03,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:34:03.302, foo, 2016-07-05 20:34:03.302, foo}
2016-07-05 20:34:03,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:34:03.303, foo, 2016-07-05 20:34:03.303, foo}
2016-07-05 20:34:03,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:34:03.304, foo, 2016-07-05 20:34:03.304, foo}
2016-07-05 20:34:03,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:34:03.31, foo, 2016-07-05 20:34:03.31, foo}
2016-07-05 20:34:03,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:34:03.311, foo, 2016-07-05 20:34:03.311, foo}
2016-07-05 20:34:03,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:34:03.313, foo, 2016-07-05 20:34:03.313, foo}
2016-07-05 20:34:03,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:34:03.314, foo, 2016-07-05 20:34:03.314, foo}
2016-07-05 20:34:03,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:34:03.315, foo, 2016-07-05 20:34:03.315, foo}
2016-07-05 20:34:03,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:34:03.317, foo, 2016-07-05 20:34:03.317, foo}
2016-07-05 20:34:03,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:34:03.318, foo, 2016-07-05 20:34:03.318, foo}
2016-07-05 20:34:03,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:34:03.319, foo, 2016-07-05 20:34:03.319, foo}
2016-07-05 20:34:03,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:34:03.338, foo, 2016-07-05 20:34:03.338, foo}
2016-07-05 20:34:03,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:34:03.342, foo, 2016-07-05 20:34:03.342, foo}
2016-07-05 20:34:03,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:34:03.345, foo, 2016-07-05 20:34:03.345, foo}
2016-07-05 20:34:03,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:34:03.346, foo, 2016-07-05 20:34:03.346, foo}
2016-07-05 20:34:03,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:34:03.347, foo, 2016-07-05 20:34:03.347, foo}
2016-07-05 20:34:03,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:34:03.348, foo, 2016-07-05 20:34:03.348, foo}
2016-07-05 20:34:03,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:34:03.349, foo, 2016-07-05 20:34:03.349, foo}
2016-07-05 20:34:03,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:34:03.35, foo, 2016-07-05 20:34:03.35, foo}
2016-07-05 20:34:03,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:34:03.351, foo, 2016-07-05 20:34:03.351, foo}
2016-07-05 20:34:03,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:34:03.352, foo, 2016-07-05 20:34:03.352, foo}
2016-07-05 20:34:03,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:34:03.353, foo, 2016-07-05 20:34:03.353, foo}
2016-07-05 20:34:03,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:34:03.354, foo, 2016-07-05 20:34:03.354, foo}
2016-07-05 20:34:03,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:34:03.355, foo, 2016-07-05 20:34:03.355, foo}
2016-07-05 20:34:03,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:34:03.356, foo, 2016-07-05 20:34:03.356, foo}
2016-07-05 20:34:03,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:34:03.357, foo, 2016-07-05 20:34:03.357, foo}
2016-07-05 20:34:03,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:34:03.358, foo, 2016-07-05 20:34:03.358, foo}
2016-07-05 20:34:03,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:34:03.36, foo, 2016-07-05 20:34:03.36, foo}
2016-07-05 20:34:03,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:34:03.361, foo, 2016-07-05 20:34:03.361, foo}
2016-07-05 20:34:03,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:34:03.362, foo, 2016-07-05 20:34:03.362, foo}
2016-07-05 20:34:03,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:34:03.363, foo, 2016-07-05 20:34:03.363, foo}
2016-07-05 20:34:03,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:34:03.364, foo, 2016-07-05 20:34:03.364, foo}
2016-07-05 20:34:03,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:34:03.365, foo, 2016-07-05 20:34:03.365, foo}
2016-07-05 20:34:03,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:34:03.366, foo, 2016-07-05 20:34:03.366, foo}
2016-07-05 20:34:03,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:34:03.367, foo, 2016-07-05 20:34:03.367, foo}
2016-07-05 20:34:03,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:34:03.368, foo, 2016-07-05 20:34:03.368, foo}
2016-07-05 20:34:03,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:34:03.369, foo, 2016-07-05 20:34:03.369, foo}
2016-07-05 20:34:03,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:34:03.37, foo, 2016-07-05 20:34:03.37, foo}
2016-07-05 20:34:03,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:34:03.371, foo, 2016-07-05 20:34:03.371, foo}
2016-07-05 20:34:03,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:34:03.38, foo, 2016-07-05 20:34:03.38, foo}
2016-07-05 20:34:03,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:34:03.381, foo, 2016-07-05 20:34:03.381, foo}
2016-07-05 20:34:03,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:34:03.382, foo, 2016-07-05 20:34:03.382, foo}
2016-07-05 20:34:03,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:34:03.383, foo, 2016-07-05 20:34:03.383, foo}
2016-07-05 20:34:03,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:34:03.384, foo, 2016-07-05 20:34:03.384, foo}
2016-07-05 20:34:03,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:34:03.385, foo, 2016-07-05 20:34:03.385, foo}
2016-07-05 20:34:03,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:34:03.386, foo, 2016-07-05 20:34:03.386, foo}
2016-07-05 20:34:03,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:34:03.387, foo, 2016-07-05 20:34:03.387, foo}
2016-07-05 20:34:03,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:34:03.387, foo, 2016-07-05 20:34:03.387, foo}
2016-07-05 20:34:03,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:34:03.388, foo, 2016-07-05 20:34:03.388, foo}
2016-07-05 20:34:03,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:34:03.389, foo, 2016-07-05 20:34:03.389, foo}
2016-07-05 20:34:03,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:34:03.39, foo, 2016-07-05 20:34:03.39, foo}
2016-07-05 20:34:03,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:34:03.392, foo, 2016-07-05 20:34:03.392, foo}
2016-07-05 20:34:03,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:34:03.393, foo, 2016-07-05 20:34:03.393, foo}
2016-07-05 20:34:03,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:34:03.394, foo, 2016-07-05 20:34:03.394, foo}
2016-07-05 20:34:03,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:34:03.396, foo, 2016-07-05 20:34:03.396, foo}
2016-07-05 20:34:03,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:34:03.397, foo, 2016-07-05 20:34:03.397, foo}
2016-07-05 20:34:03,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:34:03.398, foo, 2016-07-05 20:34:03.398, foo}
2016-07-05 20:34:03,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:34:03.399, foo, 2016-07-05 20:34:03.399, foo}
2016-07-05 20:34:03,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:34:03.4, foo, 2016-07-05 20:34:03.4, foo}
2016-07-05 20:34:03,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:34:03.401, foo, 2016-07-05 20:34:03.401, foo}
2016-07-05 20:34:03,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:34:03.402, foo, 2016-07-05 20:34:03.402, foo}
2016-07-05 20:34:03,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:34:03.403, foo, 2016-07-05 20:34:03.403, foo}
2016-07-05 20:34:03,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:34:03.404, foo, 2016-07-05 20:34:03.404, foo}
2016-07-05 20:34:03,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:34:03.405, foo, 2016-07-05 20:34:03.405, foo}
2016-07-05 20:34:03,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:34:03.412, foo, 2016-07-05 20:34:03.412, foo}
2016-07-05 20:34:03,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:34:03.413, foo, 2016-07-05 20:34:03.413, foo}
2016-07-05 20:34:03,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:34:03.414, foo, 2016-07-05 20:34:03.414, foo}
2016-07-05 20:34:03,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:34:03.415, foo, 2016-07-05 20:34:03.415, foo}
2016-07-05 20:34:03,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:34:03.416, foo, 2016-07-05 20:34:03.416, foo}
2016-07-05 20:34:03,488 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:34:03,489 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:34:03,517 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:03,528 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:03,537 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:03,540 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:03,545 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:03,548 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:03,553 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:03,567 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:34:03,568 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:34:03,570 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:34:03,572 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:34:03,574 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:34:03,579 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:34:03,580 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:34:03,580 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:34:03,580 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:34:03,580 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:34:03,581 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:34:03,590 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:34:03,592 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:34:03,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:34:03,600 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:34:03,601 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:34:03,610 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:34:03,610 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:34:03,611 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:03,615 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m07s434ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:34:04,526 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 20:34:04,530 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 20:34:04,531 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 20:34:04,531 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 20:34:04,531 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 20:34:04,558 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:04,558 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:04,559 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:04,559 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:04,633 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:34:04,634 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:34:04,634 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 20:34:04,650 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:04,821 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:34:04,825 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:05,383 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:05,383 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:05,385 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:34:05,387 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:34:05,387 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:05,387 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:34:05,407 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:34:05,410 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:34:05,435 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:34:05,435 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:34:05,435 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:34:05,436 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:34:05,495 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:34:05,512 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:34:05,530 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:34:05,552 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:34:05,574 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:34:05,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:34:05,599 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:34:05,612 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:34:05,621 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:34:05,629 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:34:05,644 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:34:05,659 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:34:05,667 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:34:05,677 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:34:05,687 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:34:05,688 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:34:05,688 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:34:05,689 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:34:05,689 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:34:05,693 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:34:05,702 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:34:05,703 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 20:34:05,703 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:34:05,754 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 20:34:05,757 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:05,840 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 20:34:05,840 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:05,851 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s350ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 20:34:06,776 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:34:06,780 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:34:06,780 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:34:06,781 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:34:06,781 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:34:06,825 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:06,825 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:06,826 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:06,826 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:06,829 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 20:34:06,829 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 20:34:06,830 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 20:34:06,830 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 20:34:06,831 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 20:34:06,831 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 20:34:06,898 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:07,003 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:34:07,236 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:34:07,245 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:34:07,246 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:34:07,247 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:34:07,249 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:34:07,249 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:34:07,250 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:34:07,253 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:34:07,253 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:34:07,256 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:34:07,261 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:07,262 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:34:07,262 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:34:07,263 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:34:07,263 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:07,263 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:34:07,264 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:34:07,264 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:34:07,276 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:07,603 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:07,608 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:07,611 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:07,614 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:07,619 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:07,622 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:07,630 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:34:07,660 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 20:34:08,095 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 20:34:08,095 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 20:34:08,102 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:08,114 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:08,115 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:08,185 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:34:08,194 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:34:08,195 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:34:08,195 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:34:08,196 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:34:08,196 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:34:08,242 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:08,290 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:08,311 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s551ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:34:10,937 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 20:34:10,939 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 20:34:10,940 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 20:34:10,940 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 20:34:10,940 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 20:34:10,967 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:10,968 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:10,969 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:10,969 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:10,988 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 20:34:10,988 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 20:34:11,027 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:11,104 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 20:34:11,368 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 20:34:11,373 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:34:11,374 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:34:11,375 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:34:11,377 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:34:11,377 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:34:11,379 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:34:11,383 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:34:11,383 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:34:11,386 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:34:11,404 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:11,405 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:34:11,406 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:34:11,406 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:34:11,406 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:11,407 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:34:11,407 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:34:11,408 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:34:11,420 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:11,767 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:11,771 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:11,773 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:11,776 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:11,781 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:11,784 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:11,805 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 20:34:11,805 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 20:34:11,806 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 20:34:11,806 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 20:34:11,806 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 20:34:11,807 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 20:34:11,807 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 20:34:11,807 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 20:34:11,808 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 20:34:11,809 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 20:34:11,831 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 20:34:11,834 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 20:34:11,893 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 20:34:11,898 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 20:34:11,919 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 20:34:11,933 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 20:34:11,954 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 20:34:11,981 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 20:34:11,990 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 20:34:12,012 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 20:34:12,023 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 20:34:12,033 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:12,034 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 20:34:12,035 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 20:34:12,057 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:12,065 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 20:34:12,116 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:34:12,117 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 20:34:12,118 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 20:34:12,647 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 20:34:12,928 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 20:34:13,152 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 20:34:13,349 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 20:34:13,547 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 20:34:13,731 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 20:34:13,911 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 20:34:14,138 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 20:34:14,303 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 20:34:14,428 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 20:34:14,621 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 20:34:14,760 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 20:34:14,878 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 20:34:14,991 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 20:34:15,111 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:15,112 [main] INFO  (Database#info():2711) -  
2016-07-05 20:34:15,154 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:15,167 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s247ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 20:34:16,404 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 20:34:16,408 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 20:34:16,408 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 20:34:16,408 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 20:34:16,409 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 20:34:16,440 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:16,440 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:16,441 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:16,441 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:16,493 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:34:16,504 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:16,938 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:16,939 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:16,999 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:34:17,004 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:17,005 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:34:17,009 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:34:17,013 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:17,014 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:34:17,016 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:34:17,021 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:17,021 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:34:17,025 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:34:17,033 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:17,033 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:34:17,034 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:17,046 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s654ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 20:34:18,001 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 20:34:18,003 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 20:34:18,003 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 20:34:18,004 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 20:34:18,004 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 20:34:18,027 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:18,027 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:18,028 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:18,028 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:18,046 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 20:34:18,047 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 20:34:18,053 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:18,142 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:34:18,149 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:18,460 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:18,460 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:18,463 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:34:18,520 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:18,521 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:34:18,522 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:34:18,534 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:18,535 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:34:18,536 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:34:18,564 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:18,565 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:34:18,566 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:34:18,574 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:18,574 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:34:18,583 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 20:34:18,583 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 20:34:18,634 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:34:18,637 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:34:18,638 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:34:18,639 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:34:18,639 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:34:18,639 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:34:18,667 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 20:34:18,692 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 20:34:18,706 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 20:34:18,706 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:34:18,706 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 20:34:18,707 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 20:34:18,708 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 20:34:18,708 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 20:34:18,708 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 20:34:18,709 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 20:34:18,709 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 20:34:18,710 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 20:34:18,710 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 20:34:18,710 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 20:34:18,739 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 20:34:18,740 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 20:34:18,740 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 20:34:18,740 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 20:34:18,741 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 20:34:18,753 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 20:34:18,754 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 20:34:18,755 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 20:34:18,755 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 20:34:18,756 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 20:34:18,760 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 20:34:18,940 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:18,947 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:18,950 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:18,952 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:18,954 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:18,956 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:18,958 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:18,974 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 20:34:18,980 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 20:34:18,996 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:34:18,997 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 20:34:19,129 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 20:34:19,185 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 20:34:19,200 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 20:34:19,266 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 20:34:19,348 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 20:34:19,399 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 20:34:19,447 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 20:34:19,448 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:19,450 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 20:34:19,454 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 20:34:19,496 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 20:34:19,514 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 20:34:19,529 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 20:34:19,549 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 20:34:19,563 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 20:34:19,582 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:19,618 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 20:34:19,627 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:19,635 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:19,643 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s650ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:34:27,381 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 20:34:27,388 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 20:34:27,388 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 20:34:27,389 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 20:34:27,390 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 20:34:27,431 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:27,431 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:27,432 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:27,433 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:27,481 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:34:27,481 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:34:27,482 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 20:34:27,496 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:27,651 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:34:27,661 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:28,207 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:28,209 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:28,211 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:34:28,213 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:34:28,214 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:28,214 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:34:28,237 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:34:28,241 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:34:28,270 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:34:28,271 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:34:28,271 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:34:28,272 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:34:28,342 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:34:28,361 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:34:28,379 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:34:28,396 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:34:28,412 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:34:28,428 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:34:28,446 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:34:28,465 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:34:28,478 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:34:28,490 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:34:28,508 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:34:28,523 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:34:28,532 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:34:28,545 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:34:28,557 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:34:28,558 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:34:28,558 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:34:28,559 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:34:28,559 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:34:28,561 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:34:28,575 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:34:28,576 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 20:34:28,576 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:34:28,628 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 20:34:28,632 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:28,720 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 20:34:28,720 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:28,734 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s376ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 20:34:29,710 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:34:29,714 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:34:29,714 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:34:29,715 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:34:29,715 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:34:29,751 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:29,752 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:29,752 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:29,753 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:29,756 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 20:34:29,757 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 20:34:29,757 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 20:34:29,758 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 20:34:29,758 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 20:34:29,759 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 20:34:29,800 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:29,916 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:34:30,078 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:34:30,087 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:34:30,088 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:34:30,089 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:34:30,092 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:34:30,092 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:34:30,094 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:34:30,096 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:34:30,097 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:34:30,100 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:34:30,105 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:30,106 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:34:30,106 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:34:30,107 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:34:30,107 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:30,108 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:34:30,108 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:34:30,108 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:34:30,117 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:30,450 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:30,459 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:30,463 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:30,466 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:30,473 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:30,477 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:30,485 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:34:30,518 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=2
2016-07-05 20:34:31,011 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 20:34:31,011 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 20:34:31,018 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:31,039 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:31,039 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:31,115 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:34:31,121 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:34:31,123 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:34:31,124 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:34:31,125 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:34:31,125 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:34:31,174 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:31,205 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:31,210 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s512ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:34:34,127 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 20:34:34,130 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 20:34:34,133 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 20:34:34,139 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 20:34:34,139 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 20:34:34,180 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:34,181 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:34,181 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:34,182 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:34,212 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 20:34:34,214 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 20:34:34,273 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:34,393 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 20:34:34,713 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 20:34:34,719 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:34:34,719 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:34:34,721 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:34:34,723 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:34:34,723 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:34:34,727 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:34:34,733 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:34:34,733 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:34:34,736 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:34:34,752 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:34,753 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:34:34,754 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:34:34,754 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:34:34,755 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:34:34,755 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:34:34,756 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:34:34,756 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:34:34,771 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:35,201 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:35,206 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:35,211 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:35,214 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:35,220 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:35,228 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:35,247 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 20:34:35,249 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 20:34:35,250 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 20:34:35,251 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 20:34:35,251 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 20:34:35,252 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 20:34:35,252 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 20:34:35,252 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 20:34:35,253 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 20:34:35,254 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 20:34:35,275 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 20:34:35,277 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 20:34:35,329 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 20:34:35,332 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 20:34:35,350 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 20:34:35,356 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 20:34:35,375 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 20:34:35,396 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 20:34:35,407 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 20:34:35,419 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 20:34:35,426 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 20:34:35,438 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:35,439 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 20:34:35,440 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 20:34:35,459 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:35,466 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 20:34:35,519 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:34:35,521 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 20:34:35,522 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 20:34:36,064 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 20:34:36,363 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 20:34:36,581 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 20:34:36,750 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 20:34:36,964 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 20:34:37,140 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 20:34:37,321 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 20:34:37,524 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 20:34:37,680 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 20:34:37,789 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 20:34:37,975 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 20:34:38,089 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 20:34:38,184 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 20:34:38,311 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 20:34:38,430 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:38,431 [main] INFO  (Database#info():2711) -  
2016-07-05 20:34:38,469 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:38,479 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s392ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 20:34:39,703 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 20:34:39,706 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 20:34:39,706 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 20:34:39,707 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 20:34:39,707 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 20:34:39,727 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:39,727 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:39,728 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:39,728 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:39,759 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:34:39,766 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:40,082 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:40,082 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:40,115 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:34:40,121 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:40,122 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:34:40,125 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:34:40,150 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:40,150 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:34:40,152 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:34:40,158 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:40,159 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:34:40,162 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:34:40,188 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:34:40,189 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:34:40,189 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:40,199 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s506ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 20:34:40,923 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 20:34:40,925 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 20:34:40,925 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 20:34:40,926 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 20:34:40,926 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 20:34:40,960 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:40,960 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:40,961 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:40,961 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:40,974 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 20:34:40,975 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 20:34:40,984 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:34:41,076 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:34:41,083 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:34:41,403 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:34:41,403 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:34:41,406 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:34:41,464 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:41,465 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:34:41,466 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:34:41,477 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:41,478 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:34:41,480 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:34:41,488 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:41,488 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:34:41,490 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:34:41,501 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:34:41,519 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:34:41,526 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 20:34:41,526 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 20:34:41,590 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:34:41,596 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:34:41,597 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:34:41,598 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:34:41,598 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:34:41,599 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:34:41,627 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 20:34:41,654 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 20:34:41,665 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 20:34:41,665 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:34:41,666 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 20:34:41,667 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 20:34:41,667 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 20:34:41,668 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 20:34:41,668 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 20:34:41,668 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 20:34:41,669 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 20:34:41,669 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 20:34:41,670 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 20:34:41,670 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 20:34:41,699 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 20:34:41,699 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 20:34:41,700 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 20:34:41,700 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 20:34:41,700 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 20:34:41,713 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 20:34:41,715 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 20:34:41,715 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 20:34:41,715 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 20:34:41,716 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 20:34:41,719 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 20:34:41,885 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:34:41,894 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:34:41,898 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:34:41,901 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:34:41,903 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:34:41,906 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:34:41,910 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:34:41,925 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 20:34:41,931 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 20:34:41,951 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:34:41,951 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 20:34:42,078 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 20:34:42,142 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 20:34:42,158 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 20:34:42,217 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 20:34:42,284 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 20:34:42,329 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 20:34:42,366 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 20:34:42,367 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:42,369 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 20:34:42,372 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 20:34:42,404 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 20:34:42,434 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 20:34:42,450 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 20:34:42,469 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 20:34:42,493 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 20:34:42,511 [main] INFO  (Database#info():2711) - }
2016-07-05 20:34:42,553 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 20:34:42,562 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:34:42,571 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:34:42,580 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s669ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:34:53,545 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:34:53,552 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:34:53,552 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:34:53,553 [main] INFO  (TorqueDocumentationTask#begin():182) - |            (SchemaSyncCheck)             |
2016-07-05 20:34:53,553 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:34:53,554 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:34:53,590 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:34:53,590 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:34:53,591 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:34:53,591 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:34:53,600 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'Doc'.

[Advice]
Check the exception messages and the stack traces.
* * * * * * * * * */
org.dbflute.exception.DfRequiredPropertyNotFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Not found the property for SchemaSyncCheck.

[Advice]
You should set the property like this:
[documentDefinitionMap.dfprop]
  ; schemaSyncCheckMap = map:{
      ; url = jdbc:...
      ; schema = EXAMPLEDB
      ; user = exampuser
      ; password = exampword
  }
* * * * * * * * * */
	at org.apache.torque.task.TorqueDocumentationTask.throwSchemaSyncCheckPropertyNotFoundException(TorqueDocumentationTask.java:351)
	at org.apache.torque.task.TorqueDocumentationTask.processSubTask(TorqueDocumentationTask.java:234)
	at org.apache.torque.task.TorqueDocumentationTask.doExecute(TorqueDocumentationTask.java:214)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 20:34:53,633 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s096ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:35:27,409 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:35:27,413 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:35:27,414 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:35:27,420 [main] INFO  (DfReplaceSchemaTask#begin():98) - |              (SavePrevious)              |
2016-07-05 20:35:27,421 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:35:27,422 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:35:27,424 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:35:29,176 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:35:29,177 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:35:29,177 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:35:29,177 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:35:29,189 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:35:29,599 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:35:29,600 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:35:29,616 [main] INFO  (DfAlterCheckProcess#savePrevious():144) - 
2016-07-05 20:35:29,617 [main] INFO  (DfAlterCheckProcess#savePrevious():145) - +-------------------+
2016-07-05 20:35:29,619 [main] INFO  (DfAlterCheckProcess#savePrevious():146) - |                   |
2016-07-05 20:35:29,620 [main] INFO  (DfAlterCheckProcess#savePrevious():147) - |   Save Previous   |
2016-07-05 20:35:29,620 [main] INFO  (DfAlterCheckProcess#savePrevious():148) - |                   |
2016-07-05 20:35:29,620 [main] INFO  (DfAlterCheckProcess#savePrevious():149) - +-------------------+
2016-07-05 20:35:29,631 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:35:29,738 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:35:29,739 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:35:29,740 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/take-finally.sql
2016-07-05 20:35:29,742 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:35:29,743 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:35:29,744 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:35:29,745 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:35:29,747 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:35:29,748 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:35:29,749 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:35:29,750 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:35:29,751 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:35:29,752 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:35:29,753 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/.DS_Store
2016-07-05 20:35:29,788 [main] INFO  (DfAlterCheckProcess#compressPreviousResource():229) - ...Compressing the previous resources to zip: playsql/migration/previous/previous-20160705-2035.zip
2016-07-05 20:35:29,804 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data
2016-07-05 20:35:29,805 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:35:29,813 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common
2016-07-05 20:35:29,814 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:35:29,815 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls
2016-07-05 20:35:29,816 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:35:29,817 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:35:29,818 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:35:29,819 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut
2016-07-05 20:35:29,819 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:35:29,820 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls
2016-07-05 20:35:29,820 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:35:29,821 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:35:29,824 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:35:29,827 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:35:29,830 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:35:29,831 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:35:29,831 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:35:29,833 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:35:29,834 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:35:29,843 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:35:29,844 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2035.zip
2016-07-05 20:35:29,846 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:35:29,848 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:35:29,849 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:35:29,849 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:35:29,851 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:35:29,852 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:35:29,853 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:35:29,854 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:35:29,855 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:35:29,857 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:35:29,857 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:35:29,858 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:35:29,859 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:35:29,860 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:35:29,861 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:35:29,862 [main] INFO  (DfAlterCheckProcess#checkSavedPreviousResource():340) - ...Checking the previous resources by replacing
2016-07-05 20:35:29,874 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:35:29,874 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:35:29,874 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:35:29,875 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:35:29,875 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:35:29,875 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:35:29,894 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:35:29,894 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:35:29,895 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:35:29,927 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:35:29,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:35:29,938 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:35:29,943 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:35:29,950 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:35:29,966 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:35:29,987 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:35:30,007 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:35:30,021 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:35:30,037 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:35:30,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:35:30,064 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:35:30,084 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:35:30,101 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:35:30,127 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:35:30,141 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:35:30,163 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:35:30,183 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:35:30,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:35:30,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:35:30,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:35:30,263 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:35:30,288 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:35:30,293 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:35:30,298 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:35:30,303 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:35:30,308 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:35:30,313 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:35:30,317 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:35:30,322 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:35:30,329 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:35:30,333 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:35:30,338 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:35:30,343 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:35:30,349 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:35:30,353 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:35:30,362 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:35:30,439 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:35:30,442 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:35:30,445 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:35:30,445 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:35:30,445 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:35:30,445 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:35:30,446 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:35:30,446 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:35:30,452 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:35:30,456 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:35:30,458 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:35:30,459 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:35:30,474 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:35:30,474 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:35:30,476 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:35:30,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:35:30,478 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:35:30,484 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:35:30,485 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:35:30,485 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:35:30,485 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:35:30,486 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:35:30,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:35:30,513 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:35:30,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:35:30,552 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:35:30,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:35:30,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:35:30,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:35:30,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:35:30,841 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:35:30,852 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:35:30,898 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:35:30,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:35:30,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:35:30,960 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:35:30,971 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:35:31,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:35:31,027 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,048 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:35:31,067 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:35:31,087 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,107 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,129 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:35:31,147 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,178 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,205 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:35:31,241 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:35:31,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:35:31,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:35:31,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:35:31,349 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:35:31,373 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:35:31,399 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:35:31,424 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:35:31,443 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:35:31,463 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:35:31,483 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:35:31,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:35:31,523 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:35:31,543 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:35:31,562 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:35:31,582 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:35:31,583 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:35:31,595 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:35:31,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:35:31,599 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:35:31,600 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:35:31,600 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:35:31,692 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:35:31,693 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:35:31,693 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:35:31,693 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:35:31,693 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:35:31,694 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:35:31,726 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:35:31,727 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 20:35:31,727 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:35:32,043 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:35:32,044 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:35:32,044 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:35:32,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:35:32,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:35:32,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:35:32,120 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:35:32,124 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:35:32,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:35:32,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:35:32,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:35:32,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:35:32,130 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:35:32,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:35:32,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:35:32,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:35:32,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:35:32,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:35:32,139 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:35:32,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:35:32,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:35:32,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:35:32,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:35:32,146 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:35:32,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:35:32,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:35:32,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:35:32,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:35:32,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:35:32,154 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:35:32,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:35:32,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:35:32,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:35:32,159 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:35:32,161 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:35:32,162 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 20:35:32,162 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:35:32,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:35:32.239, foo, 2016-07-05 20:35:32.239, foo, 0}
2016-07-05 20:35:32,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:35:32.246, foo, 2016-07-05 20:35:32.246, foo, 0}
2016-07-05 20:35:32,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:35:32.248, foo, 2016-07-05 20:35:32.248, foo, 0}
2016-07-05 20:35:32,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:35:32.25, foo, 2016-07-05 20:35:32.25, foo, 0}
2016-07-05 20:35:32,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:35:32.252, foo, 2016-07-05 20:35:32.252, foo, 0}
2016-07-05 20:35:32,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:35:32.254, foo, 2016-07-05 20:35:32.254, foo, 0}
2016-07-05 20:35:32,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:35:32.256, foo, 2016-07-05 20:35:32.256, foo, 0}
2016-07-05 20:35:32,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:35:32.258, foo, 2016-07-05 20:35:32.258, foo, 0}
2016-07-05 20:35:32,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:35:32.259, foo, 2016-07-05 20:35:32.259, foo, 0}
2016-07-05 20:35:32,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:35:32.263, foo, 2016-07-05 20:35:32.263, foo, 0}
2016-07-05 20:35:32,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:35:32.265, foo, 2016-07-05 20:35:32.265, foo, 0}
2016-07-05 20:35:32,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:35:32.267, foo, 2016-07-05 20:35:32.267, foo, 0}
2016-07-05 20:35:32,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:35:32.271, foo, 2016-07-05 20:35:32.271, foo, 0}
2016-07-05 20:35:32,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:35:32.274, foo, 2016-07-05 20:35:32.274, foo, 0}
2016-07-05 20:35:32,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:35:32.276, foo, 2016-07-05 20:35:32.276, foo, 0}
2016-07-05 20:35:32,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:35:32.278, foo, 2016-07-05 20:35:32.278, foo, 0}
2016-07-05 20:35:32,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:35:32.28, foo, 2016-07-05 20:35:32.28, foo, 0}
2016-07-05 20:35:32,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:35:32.282, foo, 2016-07-05 20:35:32.282, foo, 0}
2016-07-05 20:35:32,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:35:32.284, foo, 2016-07-05 20:35:32.284, foo, 0}
2016-07-05 20:35:32,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:35:32.292, foo, 2016-07-05 20:35:32.292, foo, 0}
2016-07-05 20:35:32,311 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:35:32,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:35:32.312, foo, 2016-07-05 20:35:32.312, foo, 0}
2016-07-05 20:35:32,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:35:32.316, foo, 2016-07-05 20:35:32.316, foo, 0}
2016-07-05 20:35:32,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:35:32.318, foo, 2016-07-05 20:35:32.318, foo, 0}
2016-07-05 20:35:32,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:35:32.32, foo, 2016-07-05 20:35:32.32, foo, 0}
2016-07-05 20:35:32,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:35:32.324, foo, 2016-07-05 20:35:32.324, foo, 0}
2016-07-05 20:35:32,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:35:32.327, foo, 2016-07-05 20:35:32.327, foo, 0}
2016-07-05 20:35:32,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:35:32.329, foo, 2016-07-05 20:35:32.329, foo, 0}
2016-07-05 20:35:32,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:35:32.332, foo, 2016-07-05 20:35:32.332, foo, 0}
2016-07-05 20:35:32,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:35:32.334, foo, 2016-07-05 20:35:32.334, foo, 0}
2016-07-05 20:35:32,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:35:32.337, foo, 2016-07-05 20:35:32.337, foo, 0}
2016-07-05 20:35:32,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:35:32.34, foo, 2016-07-05 20:35:32.34, foo, 0}
2016-07-05 20:35:32,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:35:32.342, foo, 2016-07-05 20:35:32.342, foo, 0}
2016-07-05 20:35:32,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:35:32.345, foo, 2016-07-05 20:35:32.345, foo, 0}
2016-07-05 20:35:32,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:35:32.347, foo, 2016-07-05 20:35:32.347, foo, 0}
2016-07-05 20:35:32,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:35:32.35, foo, 2016-07-05 20:35:32.35, foo, 0}
2016-07-05 20:35:32,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:35:32.352, foo, 2016-07-05 20:35:32.352, foo, 0}
2016-07-05 20:35:32,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:35:32.355, foo, 2016-07-05 20:35:32.355, foo, 0}
2016-07-05 20:35:32,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:35:32.357, foo, 2016-07-05 20:35:32.357, foo, 0}
2016-07-05 20:35:32,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:35:32.359, foo, 2016-07-05 20:35:32.359, foo, 0}
2016-07-05 20:35:32,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:35:32.363, foo, 2016-07-05 20:35:32.363, foo, 0}
2016-07-05 20:35:32,379 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:35:32,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:35:32,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:35:32,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:35:32,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:35:32,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:35:32,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:35:32,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:35:32,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:35:32,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:35:32,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:35:32,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:35:32,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:35:32,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:35:32,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:35:32,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:35:32,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:35:32,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:35:32,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:35:32,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:35:32,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:35:32,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:35:32,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:35:32,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:35:32,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:35:32,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:35:32,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:35:32,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:35:32,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:35:32,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:35:32,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:35:32,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:35:32,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:35:32,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:35:32,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:35:32,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:35:32,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:35:32,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:35:32,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:35:32,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:35:32,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:35:32,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:35:32,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:35:32,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:35:32,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:35:32,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:35:32,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:35:32,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:35:32,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:35:32,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:35:32,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:35:32,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:35:32,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:35:32,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:35:32,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:35:32,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:35:32,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:35:32,481 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:35:32,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 20:35:32.482, foo, 2016-07-05 20:35:32.482, foo, 0}
2016-07-05 20:35:32,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 20:35:32.483, foo, 2016-07-05 20:35:32.483, foo, 0}
2016-07-05 20:35:32,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 20:35:32.484, foo, 2016-07-05 20:35:32.484, foo, 0}
2016-07-05 20:35:32,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 20:35:32.485, foo, 2016-07-05 20:35:32.485, foo, 0}
2016-07-05 20:35:32,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 20:35:32.485, foo, 2016-07-05 20:35:32.485, foo, 0}
2016-07-05 20:35:32,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 20:35:32.486, foo, 2016-07-05 20:35:32.486, foo, 0}
2016-07-05 20:35:32,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 20:35:32.486, foo, 2016-07-05 20:35:32.486, foo, 0}
2016-07-05 20:35:32,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 20:35:32.487, foo, 2016-07-05 20:35:32.488, foo, 0}
2016-07-05 20:35:32,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 20:35:32.488, foo, 2016-07-05 20:35:32.488, foo, 0}
2016-07-05 20:35:32,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 20:35:32.489, foo, 2016-07-05 20:35:32.489, foo, 0}
2016-07-05 20:35:32,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 20:35:32.49, foo, 2016-07-05 20:35:32.49, foo, 0}
2016-07-05 20:35:32,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 20:35:32.49, foo, 2016-07-05 20:35:32.49, foo, 0}
2016-07-05 20:35:32,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 20:35:32.491, foo, 2016-07-05 20:35:32.491, foo, 0}
2016-07-05 20:35:32,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 20:35:32.492, foo, 2016-07-05 20:35:32.492, foo, 0}
2016-07-05 20:35:32,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 20:35:32.493, foo, 2016-07-05 20:35:32.493, foo, 0}
2016-07-05 20:35:32,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 20:35:32.494, foo, 2016-07-05 20:35:32.494, foo, 0}
2016-07-05 20:35:32,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 20:35:32.496, foo, 2016-07-05 20:35:32.496, foo, 0}
2016-07-05 20:35:32,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 20:35:32.497, foo, 2016-07-05 20:35:32.497, foo, 0}
2016-07-05 20:35:32,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 20:35:32.498, foo, 2016-07-05 20:35:32.498, foo, 0}
2016-07-05 20:35:32,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 20:35:32.499, foo, 2016-07-05 20:35:32.499, foo, 0}
2016-07-05 20:35:32,522 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:35:32,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 20:35:32.523, foo, 2016-07-05 20:35:32.523, foo, 0}
2016-07-05 20:35:32,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 20:35:32.525, foo, 2016-07-05 20:35:32.525, foo, 0}
2016-07-05 20:35:32,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 20:35:32.526, foo, 2016-07-05 20:35:32.526, foo, 0}
2016-07-05 20:35:32,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 20:35:32.527, foo, 2016-07-05 20:35:32.527, foo, 0}
2016-07-05 20:35:32,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 20:35:32.528, foo, 2016-07-05 20:35:32.528, foo, 0}
2016-07-05 20:35:32,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 20:35:32.529, foo, 2016-07-05 20:35:32.529, foo, 0}
2016-07-05 20:35:32,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 20:35:32.53, foo, 2016-07-05 20:35:32.53, foo, 0}
2016-07-05 20:35:32,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 20:35:32.53, foo, 2016-07-05 20:35:32.53, foo, 0}
2016-07-05 20:35:32,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 20:35:32.531, foo, 2016-07-05 20:35:32.531, foo, 0}
2016-07-05 20:35:32,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 20:35:32.531, foo, 2016-07-05 20:35:32.531, foo, 0}
2016-07-05 20:35:32,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 20:35:32.532, foo, 2016-07-05 20:35:32.532, foo, 0}
2016-07-05 20:35:32,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 20:35:32.532, foo, 2016-07-05 20:35:32.532, foo, 0}
2016-07-05 20:35:32,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 20:35:32.558, foo, 2016-07-05 20:35:32.558, foo, 0}
2016-07-05 20:35:32,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 20:35:32.559, foo, 2016-07-05 20:35:32.559, foo, 0}
2016-07-05 20:35:32,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 20:35:32.56, foo, 2016-07-05 20:35:32.56, foo, 0}
2016-07-05 20:35:32,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 20:35:32.561, foo, 2016-07-05 20:35:32.561, foo, 0}
2016-07-05 20:35:32,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 20:35:32.562, foo, 2016-07-05 20:35:32.562, foo, 0}
2016-07-05 20:35:32,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 20:35:32.563, foo, 2016-07-05 20:35:32.563, foo, 0}
2016-07-05 20:35:32,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 20:35:32.563, foo, 2016-07-05 20:35:32.563, foo, 0}
2016-07-05 20:35:32,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 20:35:32.564, foo, 2016-07-05 20:35:32.564, foo, 0}
2016-07-05 20:35:32,577 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:35:32,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:35:32.578, foo, 2016-07-05 20:35:32.578, foo}
2016-07-05 20:35:32,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:35:32.58, foo, 2016-07-05 20:35:32.58, foo}
2016-07-05 20:35:32,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:35:32.581, foo, 2016-07-05 20:35:32.581, foo}
2016-07-05 20:35:32,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:35:32.582, foo, 2016-07-05 20:35:32.582, foo}
2016-07-05 20:35:32,586 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:35:32,587 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:35:32,587 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 20:35:32,587 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:35:32,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:35:32.638, foo, 2016-07-05 20:35:32.638, foo, 0}
2016-07-05 20:35:32,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:35:32.64, foo, 2016-07-05 20:35:32.64, foo, 0}
2016-07-05 20:35:32,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:35:32.641, foo, 2016-07-05 20:35:32.641, foo, 0}
2016-07-05 20:35:32,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:35:32.642, foo, 2016-07-05 20:35:32.642, foo, 0}
2016-07-05 20:35:32,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:35:32.642, foo, 2016-07-05 20:35:32.642, foo, 0}
2016-07-05 20:35:32,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:35:32.643, foo, 2016-07-05 20:35:32.643, foo, 0}
2016-07-05 20:35:32,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:35:32.644, foo, 2016-07-05 20:35:32.644, foo, 0}
2016-07-05 20:35:32,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:35:32.645, foo, 2016-07-05 20:35:32.645, foo, 0}
2016-07-05 20:35:32,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:35:32.674, foo, 2016-07-05 20:35:32.674, foo, 0}
2016-07-05 20:35:32,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:35:32.676, foo, 2016-07-05 20:35:32.676, foo, 0}
2016-07-05 20:35:32,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:35:32.685, foo, 2016-07-05 20:35:32.685, foo, 0}
2016-07-05 20:35:32,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:35:32.688, foo, 2016-07-05 20:35:32.688, foo, 0}
2016-07-05 20:35:32,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:35:32.689, foo, 2016-07-05 20:35:32.689, foo, 0}
2016-07-05 20:35:32,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:35:32.69, foo, 2016-07-05 20:35:32.69, foo, 0}
2016-07-05 20:35:32,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:35:32.69, foo, 2016-07-05 20:35:32.69, foo, 0}
2016-07-05 20:35:32,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:35:32.707, foo, 2016-07-05 20:35:32.707, foo, 0}
2016-07-05 20:35:32,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:35:32.708, foo, 2016-07-05 20:35:32.708, foo, 0}
2016-07-05 20:35:32,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:35:32.709, foo, 2016-07-05 20:35:32.709, foo, 0}
2016-07-05 20:35:32,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:35:32.71, foo, 2016-07-05 20:35:32.71, foo, 0}
2016-07-05 20:35:32,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:35:32.711, foo, 2016-07-05 20:35:32.711, foo, 0}
2016-07-05 20:35:32,734 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:35:32,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:35:32.735, foo, 2016-07-05 20:35:32.735, foo, 0}
2016-07-05 20:35:32,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:35:32.737, foo, 2016-07-05 20:35:32.737, foo, 0}
2016-07-05 20:35:32,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:35:32.738, foo, 2016-07-05 20:35:32.738, foo, 0}
2016-07-05 20:35:32,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:35:32.742, foo, 2016-07-05 20:35:32.742, foo, 0}
2016-07-05 20:35:32,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:35:32.749, foo, 2016-07-05 20:35:32.749, foo, 0}
2016-07-05 20:35:32,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:35:32.75, foo, 2016-07-05 20:35:32.75, foo, 0}
2016-07-05 20:35:32,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:35:32.751, foo, 2016-07-05 20:35:32.751, foo, 0}
2016-07-05 20:35:32,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:35:32.752, foo, 2016-07-05 20:35:32.752, foo, 0}
2016-07-05 20:35:32,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:35:32.753, foo, 2016-07-05 20:35:32.753, foo, 0}
2016-07-05 20:35:32,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:35:32.762, foo, 2016-07-05 20:35:32.762, foo, 0}
2016-07-05 20:35:32,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:35:32.763, foo, 2016-07-05 20:35:32.764, foo, 0}
2016-07-05 20:35:32,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:35:32.765, foo, 2016-07-05 20:35:32.765, foo, 0}
2016-07-05 20:35:32,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:35:32.766, foo, 2016-07-05 20:35:32.766, foo, 0}
2016-07-05 20:35:32,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:35:32.767, foo, 2016-07-05 20:35:32.767, foo, 0}
2016-07-05 20:35:32,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:35:32.768, foo, 2016-07-05 20:35:32.768, foo, 0}
2016-07-05 20:35:32,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:35:32.77, foo, 2016-07-05 20:35:32.77, foo, 0}
2016-07-05 20:35:32,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:35:32.786, foo, 2016-07-05 20:35:32.786, foo, 0}
2016-07-05 20:35:32,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:35:32.787, foo, 2016-07-05 20:35:32.787, foo, 0}
2016-07-05 20:35:32,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:35:32.789, foo, 2016-07-05 20:35:32.789, foo, 0}
2016-07-05 20:35:32,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:35:32.791, foo, 2016-07-05 20:35:32.791, foo, 0}
2016-07-05 20:35:32,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:35:32.792, foo, 2016-07-05 20:35:32.792, foo, 0}
2016-07-05 20:35:32,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:35:32.793, foo, 2016-07-05 20:35:32.793, foo, 0}
2016-07-05 20:35:32,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:35:32.795, foo, 2016-07-05 20:35:32.795, foo, 0}
2016-07-05 20:35:32,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:35:32.796, foo, 2016-07-05 20:35:32.796, foo, 0}
2016-07-05 20:35:32,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:35:32.802, foo, 2016-07-05 20:35:32.802, foo, 0}
2016-07-05 20:35:32,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:35:32.804, foo, 2016-07-05 20:35:32.804, foo, 0}
2016-07-05 20:35:32,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:35:32.805, foo, 2016-07-05 20:35:32.805, foo, 0}
2016-07-05 20:35:32,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:35:32.807, foo, 2016-07-05 20:35:32.807, foo, 0}
2016-07-05 20:35:32,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:35:32.809, foo, 2016-07-05 20:35:32.809, foo, 0}
2016-07-05 20:35:32,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:35:32.811, foo, 2016-07-05 20:35:32.811, foo, 0}
2016-07-05 20:35:32,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:35:32.813, foo, 2016-07-05 20:35:32.813, foo, 0}
2016-07-05 20:35:32,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:35:32.815, foo, 2016-07-05 20:35:32.815, foo, 0}
2016-07-05 20:35:32,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:35:32.816, foo, 2016-07-05 20:35:32.816, foo, 0}
2016-07-05 20:35:32,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:35:32.818, foo, 2016-07-05 20:35:32.818, foo, 0}
2016-07-05 20:35:32,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:35:32.819, foo, 2016-07-05 20:35:32.819, foo, 0}
2016-07-05 20:35:32,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:35:32.82, foo, 2016-07-05 20:35:32.82, foo, 0}
2016-07-05 20:35:32,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:35:32.821, foo, 2016-07-05 20:35:32.821, foo, 0}
2016-07-05 20:35:32,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:35:32.823, foo, 2016-07-05 20:35:32.823, foo, 0}
2016-07-05 20:35:32,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:35:32.824, foo, 2016-07-05 20:35:32.824, foo, 0}
2016-07-05 20:35:32,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:35:32.825, foo, 2016-07-05 20:35:32.825, foo, 0}
2016-07-05 20:35:32,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:35:32.826, foo, 2016-07-05 20:35:32.826, foo, 0}
2016-07-05 20:35:32,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:35:32.831, foo, 2016-07-05 20:35:32.831, foo, 0}
2016-07-05 20:35:32,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:35:32.832, foo, 2016-07-05 20:35:32.832, foo, 0}
2016-07-05 20:35:32,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:35:32.833, foo, 2016-07-05 20:35:32.833, foo, 0}
2016-07-05 20:35:32,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:35:32.834, foo, 2016-07-05 20:35:32.834, foo, 0}
2016-07-05 20:35:32,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:35:32.835, foo, 2016-07-05 20:35:32.835, foo, 0}
2016-07-05 20:35:32,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:35:32.836, foo, 2016-07-05 20:35:32.836, foo, 0}
2016-07-05 20:35:32,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:35:32.837, foo, 2016-07-05 20:35:32.837, foo, 0}
2016-07-05 20:35:32,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:35:32.838, foo, 2016-07-05 20:35:32.838, foo, 0}
2016-07-05 20:35:32,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:35:32.839, foo, 2016-07-05 20:35:32.839, foo, 0}
2016-07-05 20:35:32,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:35:32.841, foo, 2016-07-05 20:35:32.841, foo, 0}
2016-07-05 20:35:32,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:35:32.843, foo, 2016-07-05 20:35:32.843, foo, 0}
2016-07-05 20:35:32,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:35:32.844, foo, 2016-07-05 20:35:32.844, foo, 0}
2016-07-05 20:35:32,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:35:32.846, foo, 2016-07-05 20:35:32.846, foo, 0}
2016-07-05 20:35:32,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:35:32.847, foo, 2016-07-05 20:35:32.847, foo, 0}
2016-07-05 20:35:32,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:35:32.848, foo, 2016-07-05 20:35:32.848, foo, 0}
2016-07-05 20:35:32,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:35:32.849, foo, 2016-07-05 20:35:32.849, foo, 0}
2016-07-05 20:35:32,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:35:32.85, foo, 2016-07-05 20:35:32.85, foo, 0}
2016-07-05 20:35:32,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:35:32.851, foo, 2016-07-05 20:35:32.851, foo, 0}
2016-07-05 20:35:32,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:35:32.852, foo, 2016-07-05 20:35:32.852, foo, 0}
2016-07-05 20:35:32,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:35:32.853, foo, 2016-07-05 20:35:32.853, foo, 0}
2016-07-05 20:35:32,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:35:32.854, foo, 2016-07-05 20:35:32.854, foo, 0}
2016-07-05 20:35:32,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:35:32.854, foo, 2016-07-05 20:35:32.854, foo, 0}
2016-07-05 20:35:32,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:35:32.855, foo, 2016-07-05 20:35:32.855, foo, 0}
2016-07-05 20:35:32,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:35:32.856, foo, 2016-07-05 20:35:32.856, foo, 0}
2016-07-05 20:35:32,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:35:32.857, foo, 2016-07-05 20:35:32.857, foo, 0}
2016-07-05 20:35:32,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:35:32.861, foo, 2016-07-05 20:35:32.861, foo, 0}
2016-07-05 20:35:32,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:35:32.862, foo, 2016-07-05 20:35:32.862, foo, 0}
2016-07-05 20:35:32,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:35:32.863, foo, 2016-07-05 20:35:32.863, foo, 0}
2016-07-05 20:35:32,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:35:32.864, foo, 2016-07-05 20:35:32.864, foo, 0}
2016-07-05 20:35:32,923 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:35:32,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:35:32.924, foo, 2016-07-05 20:35:32.924, foo}
2016-07-05 20:35:32,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:35:32.926, foo, 2016-07-05 20:35:32.926, foo}
2016-07-05 20:35:32,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:35:32.927, foo, 2016-07-05 20:35:32.927, foo}
2016-07-05 20:35:32,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:35:32.928, foo, 2016-07-05 20:35:32.928, foo}
2016-07-05 20:35:32,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:35:32.93, foo, 2016-07-05 20:35:32.93, foo}
2016-07-05 20:35:32,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:35:32.931, foo, 2016-07-05 20:35:32.931, foo}
2016-07-05 20:35:32,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:35:32.933, foo, 2016-07-05 20:35:32.933, foo}
2016-07-05 20:35:32,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:35:32.934, foo, 2016-07-05 20:35:32.934, foo}
2016-07-05 20:35:32,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:35:32.936, foo, 2016-07-05 20:35:32.936, foo}
2016-07-05 20:35:32,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:35:32.937, foo, 2016-07-05 20:35:32.937, foo}
2016-07-05 20:35:32,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:35:32.938, foo, 2016-07-05 20:35:32.938, foo}
2016-07-05 20:35:32,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:35:32.939, foo, 2016-07-05 20:35:32.939, foo}
2016-07-05 20:35:32,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:35:32.941, foo, 2016-07-05 20:35:32.941, foo}
2016-07-05 20:35:32,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:35:32.942, foo, 2016-07-05 20:35:32.942, foo}
2016-07-05 20:35:32,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:35:32.943, foo, 2016-07-05 20:35:32.943, foo}
2016-07-05 20:35:32,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:35:32.944, foo, 2016-07-05 20:35:32.944, foo}
2016-07-05 20:35:32,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:35:32.946, foo, 2016-07-05 20:35:32.946, foo}
2016-07-05 20:35:32,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:35:32.947, foo, 2016-07-05 20:35:32.947, foo}
2016-07-05 20:35:32,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:35:32.948, foo, 2016-07-05 20:35:32.948, foo}
2016-07-05 20:35:32,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:35:32.949, foo, 2016-07-05 20:35:32.949, foo}
2016-07-05 20:35:32,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:35:32.95, foo, 2016-07-05 20:35:32.95, foo}
2016-07-05 20:35:32,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:35:32.951, foo, 2016-07-05 20:35:32.951, foo}
2016-07-05 20:35:32,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:35:32.952, foo, 2016-07-05 20:35:32.952, foo}
2016-07-05 20:35:32,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:35:32.953, foo, 2016-07-05 20:35:32.953, foo}
2016-07-05 20:35:32,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:35:32.954, foo, 2016-07-05 20:35:32.954, foo}
2016-07-05 20:35:32,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:35:32.955, foo, 2016-07-05 20:35:32.955, foo}
2016-07-05 20:35:32,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:35:32.955, foo, 2016-07-05 20:35:32.955, foo}
2016-07-05 20:35:32,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:35:32.956, foo, 2016-07-05 20:35:32.956, foo}
2016-07-05 20:35:32,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:35:32.965, foo, 2016-07-05 20:35:32.965, foo}
2016-07-05 20:35:32,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:35:32.967, foo, 2016-07-05 20:35:32.967, foo}
2016-07-05 20:35:32,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:35:32.968, foo, 2016-07-05 20:35:32.968, foo}
2016-07-05 20:35:32,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:35:32.969, foo, 2016-07-05 20:35:32.969, foo}
2016-07-05 20:35:32,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:35:32.97, foo, 2016-07-05 20:35:32.97, foo}
2016-07-05 20:35:32,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:35:32.971, foo, 2016-07-05 20:35:32.971, foo}
2016-07-05 20:35:32,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:35:32.971, foo, 2016-07-05 20:35:32.971, foo}
2016-07-05 20:35:32,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:35:32.972, foo, 2016-07-05 20:35:32.972, foo}
2016-07-05 20:35:32,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:35:32.974, foo, 2016-07-05 20:35:32.974, foo}
2016-07-05 20:35:32,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:35:32.975, foo, 2016-07-05 20:35:32.975, foo}
2016-07-05 20:35:32,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:35:32.977, foo, 2016-07-05 20:35:32.977, foo}
2016-07-05 20:35:32,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:35:32.979, foo, 2016-07-05 20:35:32.979, foo}
2016-07-05 20:35:32,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:35:32.981, foo, 2016-07-05 20:35:32.981, foo}
2016-07-05 20:35:32,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:35:32.984, foo, 2016-07-05 20:35:32.984, foo}
2016-07-05 20:35:32,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:35:32.985, foo, 2016-07-05 20:35:32.985, foo}
2016-07-05 20:35:32,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:35:32.986, foo, 2016-07-05 20:35:32.986, foo}
2016-07-05 20:35:32,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:35:32.987, foo, 2016-07-05 20:35:32.987, foo}
2016-07-05 20:35:32,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:35:32.988, foo, 2016-07-05 20:35:32.988, foo}
2016-07-05 20:35:32,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:35:32.989, foo, 2016-07-05 20:35:32.989, foo}
2016-07-05 20:35:32,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:35:32.99, foo, 2016-07-05 20:35:32.99, foo}
2016-07-05 20:35:32,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:35:32.994, foo, 2016-07-05 20:35:32.994, foo}
2016-07-05 20:35:33,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:35:33.0, foo, 2016-07-05 20:35:33.0, foo}
2016-07-05 20:35:33,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:35:33.001, foo, 2016-07-05 20:35:33.001, foo}
2016-07-05 20:35:33,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:35:33.002, foo, 2016-07-05 20:35:33.002, foo}
2016-07-05 20:35:33,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:35:33.003, foo, 2016-07-05 20:35:33.003, foo}
2016-07-05 20:35:33,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:35:33.004, foo, 2016-07-05 20:35:33.004, foo}
2016-07-05 20:35:33,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:35:33.005, foo, 2016-07-05 20:35:33.005, foo}
2016-07-05 20:35:33,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:35:33.007, foo, 2016-07-05 20:35:33.007, foo}
2016-07-05 20:35:33,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:35:33.008, foo, 2016-07-05 20:35:33.008, foo}
2016-07-05 20:35:33,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:35:33.009, foo, 2016-07-05 20:35:33.009, foo}
2016-07-05 20:35:33,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:35:33.011, foo, 2016-07-05 20:35:33.011, foo}
2016-07-05 20:35:33,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:35:33.012, foo, 2016-07-05 20:35:33.012, foo}
2016-07-05 20:35:33,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:35:33.013, foo, 2016-07-05 20:35:33.013, foo}
2016-07-05 20:35:33,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:35:33.014, foo, 2016-07-05 20:35:33.014, foo}
2016-07-05 20:35:33,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:35:33.015, foo, 2016-07-05 20:35:33.015, foo}
2016-07-05 20:35:33,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:35:33.016, foo, 2016-07-05 20:35:33.016, foo}
2016-07-05 20:35:33,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:35:33.017, foo, 2016-07-05 20:35:33.017, foo}
2016-07-05 20:35:33,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:35:33.018, foo, 2016-07-05 20:35:33.018, foo}
2016-07-05 20:35:33,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:35:33.019, foo, 2016-07-05 20:35:33.019, foo}
2016-07-05 20:35:33,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:35:33.02, foo, 2016-07-05 20:35:33.02, foo}
2016-07-05 20:35:33,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:35:33.021, foo, 2016-07-05 20:35:33.021, foo}
2016-07-05 20:35:33,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:35:33.022, foo, 2016-07-05 20:35:33.022, foo}
2016-07-05 20:35:33,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:35:33.023, foo, 2016-07-05 20:35:33.023, foo}
2016-07-05 20:35:33,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:35:33.023, foo, 2016-07-05 20:35:33.023, foo}
2016-07-05 20:35:33,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:35:33.024, foo, 2016-07-05 20:35:33.024, foo}
2016-07-05 20:35:33,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:35:33.025, foo, 2016-07-05 20:35:33.025, foo}
2016-07-05 20:35:33,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:35:33.034, foo, 2016-07-05 20:35:33.034, foo}
2016-07-05 20:35:33,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:35:33.035, foo, 2016-07-05 20:35:33.035, foo}
2016-07-05 20:35:33,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:35:33.036, foo, 2016-07-05 20:35:33.036, foo}
2016-07-05 20:35:33,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:35:33.037, foo, 2016-07-05 20:35:33.037, foo}
2016-07-05 20:35:33,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:35:33.037, foo, 2016-07-05 20:35:33.037, foo}
2016-07-05 20:35:33,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:35:33.038, foo, 2016-07-05 20:35:33.038, foo}
2016-07-05 20:35:33,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:35:33.039, foo, 2016-07-05 20:35:33.039, foo}
2016-07-05 20:35:33,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:35:33.04, foo, 2016-07-05 20:35:33.04, foo}
2016-07-05 20:35:33,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:35:33.042, foo, 2016-07-05 20:35:33.042, foo}
2016-07-05 20:35:33,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:35:33.044, foo, 2016-07-05 20:35:33.044, foo}
2016-07-05 20:35:33,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:35:33.046, foo, 2016-07-05 20:35:33.046, foo}
2016-07-05 20:35:33,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:35:33.047, foo, 2016-07-05 20:35:33.047, foo}
2016-07-05 20:35:33,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:35:33.048, foo, 2016-07-05 20:35:33.048, foo}
2016-07-05 20:35:33,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:35:33.05, foo, 2016-07-05 20:35:33.05, foo}
2016-07-05 20:35:33,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:35:33.051, foo, 2016-07-05 20:35:33.051, foo}
2016-07-05 20:35:33,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:35:33.053, foo, 2016-07-05 20:35:33.053, foo}
2016-07-05 20:35:33,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:35:33.054, foo, 2016-07-05 20:35:33.054, foo}
2016-07-05 20:35:33,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:35:33.055, foo, 2016-07-05 20:35:33.055, foo}
2016-07-05 20:35:33,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:35:33.056, foo, 2016-07-05 20:35:33.056, foo}
2016-07-05 20:35:33,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:35:33.057, foo, 2016-07-05 20:35:33.057, foo}
2016-07-05 20:35:33,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:35:33.057, foo, 2016-07-05 20:35:33.057, foo}
2016-07-05 20:35:33,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:35:33.065, foo, 2016-07-05 20:35:33.065, foo}
2016-07-05 20:35:33,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:35:33.065, foo, 2016-07-05 20:35:33.065, foo}
2016-07-05 20:35:33,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:35:33.066, foo, 2016-07-05 20:35:33.066, foo}
2016-07-05 20:35:33,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:35:33.067, foo, 2016-07-05 20:35:33.067, foo}
2016-07-05 20:35:33,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:35:33.067, foo, 2016-07-05 20:35:33.067, foo}
2016-07-05 20:35:33,135 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:35:33,140 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:35:33,140 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:35:33,140 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:35:33,141 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:35:33,141 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:35:33,141 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:35:33,146 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:35:33,148 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:35:33,153 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:35:33,163 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:35:33,164 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:35:33,166 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:35:33,166 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:35:33,168 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:35:33,170 [main] INFO  (DfAlterCheckProcess#markPreviousOK():416) - ...Marking previous-OK: playsql/migration/previous-OK.dfmark
2016-07-05 20:35:33,183 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:35:33,202 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:35:33,246 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s829ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql

 {Save Previous}
  o (all resources saved)
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:48:17,923 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:48:17,928 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:48:17,929 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:48:17,935 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:48:17,935 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:48:17,937 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:48:19,849 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:48:19,850 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:48:19,851 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:48:19,851 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:48:19,861 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:48:20,287 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:48:20,287 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:48:20,311 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:48:20,312 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:48:20,313 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:48:20,315 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:48:20,316 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:48:20,316 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:48:20,339 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:48:20,339 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:48:20,340 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:48:20,484 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:48:20,489 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:48:20,496 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:48:20,506 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:48:20,518 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:48:20,537 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:48:20,558 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:48:20,586 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:48:20,600 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:48:20,622 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:48:20,639 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:48:20,664 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:48:20,684 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:48:20,700 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:48:20,723 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:48:20,739 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:48:20,766 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:48:20,792 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:48:20,812 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:48:20,835 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:48:20,851 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:48:20,871 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:48:20,895 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:48:20,900 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:48:20,904 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:48:20,908 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:48:20,911 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:48:20,915 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:48:20,920 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:48:20,923 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:48:20,927 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:48:20,931 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:48:20,935 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:48:20,939 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:48:20,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:48:20,945 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:48:20,949 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:48:21,083 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:48:21,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:48:21,090 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:48:21,090 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:48:21,091 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:48:21,091 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:48:21,091 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:48:21,092 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:48:21,096 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:48:21,101 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:48:21,101 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:48:21,103 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:48:21,113 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:48:21,113 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:48:21,115 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:48:21,115 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:48:21,117 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:48:21,121 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:48:21,122 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:48:21,122 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:48:21,123 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:48:21,123 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:48:21,128 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:48:21,153 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:48:21,234 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:48:21,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:48:21,295 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:48:21,305 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:48:21,376 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:48:21,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:48:21,462 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:48:21,518 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:48:21,532 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:48:21,542 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:48:21,591 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:48:21,603 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:48:21,638 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:48:21,650 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:48:21,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:48:21,716 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:48:21,735 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,757 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,776 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:48:21,796 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,838 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:48:21,855 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:48:21,881 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:48:21,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:48:21,928 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:48:21,949 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:48:21,983 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:48:22,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:48:22,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:48:22,051 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:48:22,072 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2016-07-05 20:48:22,076 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=36 failure=1 *break (in 3 files)
2016-07-05 20:48:22,076 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:48:22,162 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.SQLFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute the SQL!

[SQL File]
playsql/replace-schema-10-basic.sql

[Executed SQL]
create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)

[SQLState]
42000

[ErrorCode]
1072

[SQLException]
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
* * * * * * * * * */
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.throwSQLFailureException(DfSqlFileRunnerBase.java:587)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:80)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.createSchema(DfCreateSchemaProcess.java:274)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess.execute(DfCreateSchemaProcess.java:143)
	at org.dbflute.task.DfReplaceSchemaTask.createSchema(DfReplaceSchemaTask.java:261)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:246)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:237)
	at org.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:230)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:157)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Key column 'AKIRAKANI_OKASHII_KARAMU_MEI' doesn't exist in table
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2526)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:848)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:742)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.processNonDispatch(DfSqlFileRunnerExecute.java:98)
	at org.dbflute.logic.replaceschema.process.DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema.processNonDispatch(DfCreateSchemaProcess.java:460)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:66)
	... 43 more
2016-07-05 20:48:22,169 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:48:22,174 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s277ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=36 failure=1 *break (in 3 files)
  o replace-schema-00-system.sql
  x replace-schema-10-basic.sql
   >> (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:49:53,346 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:49:53,350 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:49:53,351 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:49:53,355 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:49:53,356 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:49:53,358 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:49:54,605 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:49:54,606 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:49:54,606 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:49:54,607 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:49:54,621 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:49:55,056 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:49:55,057 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:49:55,082 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:49:55,083 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:49:55,083 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:49:55,085 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:49:55,086 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:49:55,086 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:49:55,108 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:49:55,109 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:49:55,109 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:49:55,266 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:49:55,271 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:49:55,277 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:49:55,287 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:49:55,294 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:49:55,308 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:49:55,330 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:49:55,347 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:49:55,363 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:49:55,385 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:49:55,401 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:49:55,425 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:49:55,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:49:55,474 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:49:55,494 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:49:55,512 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:49:55,536 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:49:55,551 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:49:55,577 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:49:55,594 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:49:55,612 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:49:55,635 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:49:55,656 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:49:55,661 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:49:55,664 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:49:55,668 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:49:55,670 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:49:55,674 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:49:55,679 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:49:55,684 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:49:55,688 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:49:55,691 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:49:55,695 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:49:55,699 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:49:55,702 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:49:55,705 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:49:55,709 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:49:55,739 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:49:55,739 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:49:55,740 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:49:55,740 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:49:55,740 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:49:55,741 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:49:55,749 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:49:55,752 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:49:55,753 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:49:55,755 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:49:55,834 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:49:55,835 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:49:55,837 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:49:55,837 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:49:55,840 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:49:55,843 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:49:55,844 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:49:55,845 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:49:55,845 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:49:55,845 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:49:55,850 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:49:55,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:49:55,888 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:49:55,899 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:49:55,974 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:49:56,051 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:49:56,060 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:49:56,125 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:49:56,187 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:49:56,202 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:49:56,250 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:49:56,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:49:56,274 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:49:56,317 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:49:56,329 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:49:56,369 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:49:56,391 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,417 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:49:56,438 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:49:56,457 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,477 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,496 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:49:56,521 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,569 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:49:56,600 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:49:56,621 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:49:56,652 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:49:56,677 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:49:56,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:49:56,722 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:49:56,751 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:49:56,773 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:49:56,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:49:56,813 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:49:56,833 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:49:56,853 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:49:56,872 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:49:56,892 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:49:56,915 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:49:56,932 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:49:56,933 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:49:56,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:49:56,936 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:49:56,938 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:49:56,939 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:49:56,939 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:49:57,057 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:49:57,057 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:49:57,057 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:49:57,058 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:49:57,058 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:49:57,058 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:49:57,087 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:49:57,087 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:49:57,087 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:49:57,362 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:49:57,362 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:49:57,363 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:49:57,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:49:57,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:49:57,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:49:57,454 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:49:57,460 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:49:57,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:49:57,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:49:57,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:49:57,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:49:57,471 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:49:57,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:49:57,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:49:57,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:49:57,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:49:57,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:49:57,515 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:49:57,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:49:57,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:49:57,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:49:57,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:49:57,525 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:49:57,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:49:57,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:49:57,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:49:57,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:49:57,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:49:57,532 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:49:57,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:49:57,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:49:57,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:49:57,538 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:49:57,540 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:49:57,540 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:49:57,541 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:49:57,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:49:57.619, foo, 2016-07-05 20:49:57.619, foo, 0}
2016-07-05 20:49:57,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:49:57.626, foo, 2016-07-05 20:49:57.626, foo, 0}
2016-07-05 20:49:57,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:49:57.632, foo, 2016-07-05 20:49:57.632, foo, 0}
2016-07-05 20:49:57,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:49:57.634, foo, 2016-07-05 20:49:57.634, foo, 0}
2016-07-05 20:49:57,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:49:57.637, foo, 2016-07-05 20:49:57.637, foo, 0}
2016-07-05 20:49:57,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:49:57.638, foo, 2016-07-05 20:49:57.638, foo, 0}
2016-07-05 20:49:57,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:49:57.64, foo, 2016-07-05 20:49:57.64, foo, 0}
2016-07-05 20:49:57,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:49:57.641, foo, 2016-07-05 20:49:57.641, foo, 0}
2016-07-05 20:49:57,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:49:57.642, foo, 2016-07-05 20:49:57.643, foo, 0}
2016-07-05 20:49:57,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:49:57.646, foo, 2016-07-05 20:49:57.646, foo, 0}
2016-07-05 20:49:57,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:49:57.647, foo, 2016-07-05 20:49:57.647, foo, 0}
2016-07-05 20:49:57,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:49:57.649, foo, 2016-07-05 20:49:57.649, foo, 0}
2016-07-05 20:49:57,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:49:57.651, foo, 2016-07-05 20:49:57.651, foo, 0}
2016-07-05 20:49:57,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:49:57.653, foo, 2016-07-05 20:49:57.653, foo, 0}
2016-07-05 20:49:57,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:49:57.656, foo, 2016-07-05 20:49:57.656, foo, 0}
2016-07-05 20:49:57,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:49:57.658, foo, 2016-07-05 20:49:57.658, foo, 0}
2016-07-05 20:49:57,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:49:57.66, foo, 2016-07-05 20:49:57.66, foo, 0}
2016-07-05 20:49:57,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:49:57.662, foo, 2016-07-05 20:49:57.662, foo, 0}
2016-07-05 20:49:57,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:49:57.665, foo, 2016-07-05 20:49:57.665, foo, 0}
2016-07-05 20:49:57,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:49:57.668, foo, 2016-07-05 20:49:57.668, foo, 0}
2016-07-05 20:49:57,692 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:49:57,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:49:57.693, foo, 2016-07-05 20:49:57.693, foo, 0}
2016-07-05 20:49:57,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:49:57.697, foo, 2016-07-05 20:49:57.697, foo, 0}
2016-07-05 20:49:57,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:49:57.7, foo, 2016-07-05 20:49:57.7, foo, 0}
2016-07-05 20:49:57,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:49:57.703, foo, 2016-07-05 20:49:57.703, foo, 0}
2016-07-05 20:49:57,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:49:57.705, foo, 2016-07-05 20:49:57.705, foo, 0}
2016-07-05 20:49:57,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:49:57.708, foo, 2016-07-05 20:49:57.708, foo, 0}
2016-07-05 20:49:57,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:49:57.711, foo, 2016-07-05 20:49:57.711, foo, 0}
2016-07-05 20:49:57,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:49:57.714, foo, 2016-07-05 20:49:57.714, foo, 0}
2016-07-05 20:49:57,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:49:57.717, foo, 2016-07-05 20:49:57.717, foo, 0}
2016-07-05 20:49:57,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:49:57.721, foo, 2016-07-05 20:49:57.721, foo, 0}
2016-07-05 20:49:57,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:49:57.723, foo, 2016-07-05 20:49:57.723, foo, 0}
2016-07-05 20:49:57,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:49:57.726, foo, 2016-07-05 20:49:57.726, foo, 0}
2016-07-05 20:49:57,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:49:57.728, foo, 2016-07-05 20:49:57.728, foo, 0}
2016-07-05 20:49:57,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:49:57.732, foo, 2016-07-05 20:49:57.732, foo, 0}
2016-07-05 20:49:57,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:49:57.734, foo, 2016-07-05 20:49:57.734, foo, 0}
2016-07-05 20:49:57,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:49:57.736, foo, 2016-07-05 20:49:57.736, foo, 0}
2016-07-05 20:49:57,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:49:57.737, foo, 2016-07-05 20:49:57.737, foo, 0}
2016-07-05 20:49:57,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:49:57.739, foo, 2016-07-05 20:49:57.739, foo, 0}
2016-07-05 20:49:57,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:49:57.741, foo, 2016-07-05 20:49:57.741, foo, 0}
2016-07-05 20:49:57,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:49:57.742, foo, 2016-07-05 20:49:57.742, foo, 0}
2016-07-05 20:49:57,763 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:49:57,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:49:57,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:49:57,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:49:57,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:49:57,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:49:57,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:49:57,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:49:57,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:49:57,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:49:57,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:49:57,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:49:57,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:49:57,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:49:57,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:49:57,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:49:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:49:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:49:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:49:57,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:49:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:49:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:49:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:49:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:49:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:49:57,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:49:57,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:49:57,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:49:57,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:49:57,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:49:57,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:49:57,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:49:57,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:49:57,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:49:57,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:49:57,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:49:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:49:57,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:49:57,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:49:57,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:49:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:49:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:49:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:49:57,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:49:57,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:49:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:49:57,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:49:57,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:49:57,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:49:57,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:49:57,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:49:57,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:49:57,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:49:57,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:49:57,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:49:57,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:49:57,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:49:57,867 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:49:57,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:49:57.868, foo, 2016-07-05 20:49:57.868, foo, 0}
2016-07-05 20:49:57,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:49:57.87, foo, 2016-07-05 20:49:57.87, foo, 0}
2016-07-05 20:49:57,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:49:57.871, foo, 2016-07-05 20:49:57.871, foo, 0}
2016-07-05 20:49:57,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:49:57.872, foo, 2016-07-05 20:49:57.872, foo, 0}
2016-07-05 20:49:57,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:49:57.872, foo, 2016-07-05 20:49:57.872, foo, 0}
2016-07-05 20:49:57,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:49:57.873, foo, 2016-07-05 20:49:57.873, foo, 0}
2016-07-05 20:49:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:49:57.874, foo, 2016-07-05 20:49:57.874, foo, 0}
2016-07-05 20:49:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:49:57.875, foo, 2016-07-05 20:49:57.875, foo, 0}
2016-07-05 20:49:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:49:57.876, foo, 2016-07-05 20:49:57.876, foo, 0}
2016-07-05 20:49:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:49:57.878, foo, 2016-07-05 20:49:57.878, foo, 0}
2016-07-05 20:49:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:49:57.879, foo, 2016-07-05 20:49:57.879, foo, 0}
2016-07-05 20:49:57,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:49:57.88, foo, 2016-07-05 20:49:57.88, foo, 0}
2016-07-05 20:49:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:49:57.882, foo, 2016-07-05 20:49:57.882, foo, 0}
2016-07-05 20:49:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:49:57.883, foo, 2016-07-05 20:49:57.883, foo, 0}
2016-07-05 20:49:57,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:49:57.891, foo, 2016-07-05 20:49:57.891, foo, 0}
2016-07-05 20:49:57,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:49:57.892, foo, 2016-07-05 20:49:57.892, foo, 0}
2016-07-05 20:49:57,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:49:57.893, foo, 2016-07-05 20:49:57.893, foo, 0}
2016-07-05 20:49:57,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:49:57.894, foo, 2016-07-05 20:49:57.894, foo, 0}
2016-07-05 20:49:57,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:49:57.895, foo, 2016-07-05 20:49:57.895, foo, 0}
2016-07-05 20:49:57,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:49:57.896, foo, 2016-07-05 20:49:57.896, foo, 0}
2016-07-05 20:49:57,917 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:49:57,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:49:57.919, foo, 2016-07-05 20:49:57.919, foo, 0}
2016-07-05 20:49:57,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:49:57.921, foo, 2016-07-05 20:49:57.921, foo, 0}
2016-07-05 20:49:57,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:49:57.922, foo, 2016-07-05 20:49:57.922, foo, 0}
2016-07-05 20:49:57,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:49:57.922, foo, 2016-07-05 20:49:57.923, foo, 0}
2016-07-05 20:49:57,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:49:57.923, foo, 2016-07-05 20:49:57.923, foo, 0}
2016-07-05 20:49:57,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:49:57.924, foo, 2016-07-05 20:49:57.924, foo, 0}
2016-07-05 20:49:57,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:49:57.924, foo, 2016-07-05 20:49:57.924, foo, 0}
2016-07-05 20:49:57,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:49:57.925, foo, 2016-07-05 20:49:57.925, foo, 0}
2016-07-05 20:49:57,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:49:57.926, foo, 2016-07-05 20:49:57.926, foo, 0}
2016-07-05 20:49:57,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:49:57.926, foo, 2016-07-05 20:49:57.926, foo, 0}
2016-07-05 20:49:57,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:49:57.926, foo, 2016-07-05 20:49:57.926, foo, 0}
2016-07-05 20:49:57,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:49:57.959, foo, 2016-07-05 20:49:57.959, foo, 0}
2016-07-05 20:49:57,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:49:57.96, foo, 2016-07-05 20:49:57.96, foo, 0}
2016-07-05 20:49:57,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:49:57.961, foo, 2016-07-05 20:49:57.961, foo, 0}
2016-07-05 20:49:57,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:49:57.962, foo, 2016-07-05 20:49:57.962, foo, 0}
2016-07-05 20:49:57,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:49:57.963, foo, 2016-07-05 20:49:57.963, foo, 0}
2016-07-05 20:49:57,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:49:57.963, foo, 2016-07-05 20:49:57.963, foo, 0}
2016-07-05 20:49:57,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:49:57.964, foo, 2016-07-05 20:49:57.964, foo, 0}
2016-07-05 20:49:57,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:49:57.965, foo, 2016-07-05 20:49:57.965, foo, 0}
2016-07-05 20:49:57,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:49:57.966, foo, 2016-07-05 20:49:57.966, foo, 0}
2016-07-05 20:49:58,013 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:49:58,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:49:58.014, foo, 2016-07-05 20:49:58.014, foo}
2016-07-05 20:49:58,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:49:58.016, foo, 2016-07-05 20:49:58.016, foo}
2016-07-05 20:49:58,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:49:58.018, foo, 2016-07-05 20:49:58.018, foo}
2016-07-05 20:49:58,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:49:58.019, foo, 2016-07-05 20:49:58.019, foo}
2016-07-05 20:49:58,025 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:49:58,025 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:49:58,025 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:49:58,026 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:49:58,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:49:58.092, foo, 2016-07-05 20:49:58.092, foo, 0}
2016-07-05 20:49:58,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:49:58.094, foo, 2016-07-05 20:49:58.094, foo, 0}
2016-07-05 20:49:58,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:49:58.095, foo, 2016-07-05 20:49:58.095, foo, 0}
2016-07-05 20:49:58,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:49:58.097, foo, 2016-07-05 20:49:58.097, foo, 0}
2016-07-05 20:49:58,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:49:58.098, foo, 2016-07-05 20:49:58.098, foo, 0}
2016-07-05 20:49:58,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:49:58.1, foo, 2016-07-05 20:49:58.1, foo, 0}
2016-07-05 20:49:58,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:49:58.102, foo, 2016-07-05 20:49:58.102, foo, 0}
2016-07-05 20:49:58,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:49:58.105, foo, 2016-07-05 20:49:58.105, foo, 0}
2016-07-05 20:49:58,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:49:58.106, foo, 2016-07-05 20:49:58.106, foo, 0}
2016-07-05 20:49:58,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:49:58.107, foo, 2016-07-05 20:49:58.107, foo, 0}
2016-07-05 20:49:58,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:49:58.122, foo, 2016-07-05 20:49:58.122, foo, 0}
2016-07-05 20:49:58,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:49:58.123, foo, 2016-07-05 20:49:58.123, foo, 0}
2016-07-05 20:49:58,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:49:58.124, foo, 2016-07-05 20:49:58.124, foo, 0}
2016-07-05 20:49:58,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:49:58.125, foo, 2016-07-05 20:49:58.125, foo, 0}
2016-07-05 20:49:58,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:49:58.125, foo, 2016-07-05 20:49:58.125, foo, 0}
2016-07-05 20:49:58,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:49:58.126, foo, 2016-07-05 20:49:58.126, foo, 0}
2016-07-05 20:49:58,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:49:58.127, foo, 2016-07-05 20:49:58.127, foo, 0}
2016-07-05 20:49:58,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:49:58.149, foo, 2016-07-05 20:49:58.149, foo, 0}
2016-07-05 20:49:58,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:49:58.15, foo, 2016-07-05 20:49:58.15, foo, 0}
2016-07-05 20:49:58,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:49:58.151, foo, 2016-07-05 20:49:58.151, foo, 0}
2016-07-05 20:49:58,175 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:49:58,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:49:58.177, foo, 2016-07-05 20:49:58.177, foo, 0}
2016-07-05 20:49:58,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:49:58.179, foo, 2016-07-05 20:49:58.179, foo, 0}
2016-07-05 20:49:58,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:49:58.181, foo, 2016-07-05 20:49:58.181, foo, 0}
2016-07-05 20:49:58,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:49:58.183, foo, 2016-07-05 20:49:58.183, foo, 0}
2016-07-05 20:49:58,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:49:58.185, foo, 2016-07-05 20:49:58.185, foo, 0}
2016-07-05 20:49:58,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:49:58.191, foo, 2016-07-05 20:49:58.191, foo, 0}
2016-07-05 20:49:58,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:49:58.193, foo, 2016-07-05 20:49:58.193, foo, 0}
2016-07-05 20:49:58,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:49:58.194, foo, 2016-07-05 20:49:58.194, foo, 0}
2016-07-05 20:49:58,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:49:58.195, foo, 2016-07-05 20:49:58.195, foo, 0}
2016-07-05 20:49:58,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:49:58.196, foo, 2016-07-05 20:49:58.196, foo, 0}
2016-07-05 20:49:58,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:49:58.202, foo, 2016-07-05 20:49:58.202, foo, 0}
2016-07-05 20:49:58,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:49:58.204, foo, 2016-07-05 20:49:58.204, foo, 0}
2016-07-05 20:49:58,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:49:58.206, foo, 2016-07-05 20:49:58.206, foo, 0}
2016-07-05 20:49:58,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:49:58.207, foo, 2016-07-05 20:49:58.207, foo, 0}
2016-07-05 20:49:58,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:49:58.208, foo, 2016-07-05 20:49:58.208, foo, 0}
2016-07-05 20:49:58,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:49:58.209, foo, 2016-07-05 20:49:58.209, foo, 0}
2016-07-05 20:49:58,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:49:58.21, foo, 2016-07-05 20:49:58.21, foo, 0}
2016-07-05 20:49:58,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:49:58.215, foo, 2016-07-05 20:49:58.215, foo, 0}
2016-07-05 20:49:58,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:49:58.218, foo, 2016-07-05 20:49:58.218, foo, 0}
2016-07-05 20:49:58,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:49:58.22, foo, 2016-07-05 20:49:58.22, foo, 0}
2016-07-05 20:49:58,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:49:58.221, foo, 2016-07-05 20:49:58.221, foo, 0}
2016-07-05 20:49:58,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:49:58.223, foo, 2016-07-05 20:49:58.223, foo, 0}
2016-07-05 20:49:58,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:49:58.224, foo, 2016-07-05 20:49:58.224, foo, 0}
2016-07-05 20:49:58,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:49:58.225, foo, 2016-07-05 20:49:58.225, foo, 0}
2016-07-05 20:49:58,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:49:58.226, foo, 2016-07-05 20:49:58.226, foo, 0}
2016-07-05 20:49:58,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:49:58.228, foo, 2016-07-05 20:49:58.228, foo, 0}
2016-07-05 20:49:58,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:49:58.229, foo, 2016-07-05 20:49:58.229, foo, 0}
2016-07-05 20:49:58,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:49:58.234, foo, 2016-07-05 20:49:58.234, foo, 0}
2016-07-05 20:49:58,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:49:58.235, foo, 2016-07-05 20:49:58.235, foo, 0}
2016-07-05 20:49:58,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:49:58.236, foo, 2016-07-05 20:49:58.236, foo, 0}
2016-07-05 20:49:58,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:49:58.237, foo, 2016-07-05 20:49:58.237, foo, 0}
2016-07-05 20:49:58,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:49:58.238, foo, 2016-07-05 20:49:58.238, foo, 0}
2016-07-05 20:49:58,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:49:58.24, foo, 2016-07-05 20:49:58.24, foo, 0}
2016-07-05 20:49:58,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:49:58.241, foo, 2016-07-05 20:49:58.241, foo, 0}
2016-07-05 20:49:58,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:49:58.242, foo, 2016-07-05 20:49:58.242, foo, 0}
2016-07-05 20:49:58,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:49:58.247, foo, 2016-07-05 20:49:58.247, foo, 0}
2016-07-05 20:49:58,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:49:58.255, foo, 2016-07-05 20:49:58.255, foo, 0}
2016-07-05 20:49:58,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:49:58.257, foo, 2016-07-05 20:49:58.257, foo, 0}
2016-07-05 20:49:58,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:49:58.258, foo, 2016-07-05 20:49:58.258, foo, 0}
2016-07-05 20:49:58,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:49:58.26, foo, 2016-07-05 20:49:58.26, foo, 0}
2016-07-05 20:49:58,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:49:58.261, foo, 2016-07-05 20:49:58.261, foo, 0}
2016-07-05 20:49:58,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:49:58.263, foo, 2016-07-05 20:49:58.263, foo, 0}
2016-07-05 20:49:58,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:49:58.264, foo, 2016-07-05 20:49:58.264, foo, 0}
2016-07-05 20:49:58,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:49:58.266, foo, 2016-07-05 20:49:58.266, foo, 0}
2016-07-05 20:49:58,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:49:58.268, foo, 2016-07-05 20:49:58.268, foo, 0}
2016-07-05 20:49:58,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:49:58.269, foo, 2016-07-05 20:49:58.269, foo, 0}
2016-07-05 20:49:58,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:49:58.27, foo, 2016-07-05 20:49:58.27, foo, 0}
2016-07-05 20:49:58,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:49:58.272, foo, 2016-07-05 20:49:58.272, foo, 0}
2016-07-05 20:49:58,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:49:58.273, foo, 2016-07-05 20:49:58.273, foo, 0}
2016-07-05 20:49:58,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:49:58.274, foo, 2016-07-05 20:49:58.274, foo, 0}
2016-07-05 20:49:58,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:49:58.275, foo, 2016-07-05 20:49:58.275, foo, 0}
2016-07-05 20:49:58,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:49:58.283, foo, 2016-07-05 20:49:58.283, foo, 0}
2016-07-05 20:49:58,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:49:58.287, foo, 2016-07-05 20:49:58.287, foo, 0}
2016-07-05 20:49:58,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:49:58.288, foo, 2016-07-05 20:49:58.288, foo, 0}
2016-07-05 20:49:58,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:49:58.289, foo, 2016-07-05 20:49:58.289, foo, 0}
2016-07-05 20:49:58,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:49:58.291, foo, 2016-07-05 20:49:58.291, foo, 0}
2016-07-05 20:49:58,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:49:58.292, foo, 2016-07-05 20:49:58.292, foo, 0}
2016-07-05 20:49:58,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:49:58.293, foo, 2016-07-05 20:49:58.293, foo, 0}
2016-07-05 20:49:58,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:49:58.295, foo, 2016-07-05 20:49:58.295, foo, 0}
2016-07-05 20:49:58,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:49:58.297, foo, 2016-07-05 20:49:58.297, foo, 0}
2016-07-05 20:49:58,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:49:58.298, foo, 2016-07-05 20:49:58.298, foo, 0}
2016-07-05 20:49:58,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:49:58.299, foo, 2016-07-05 20:49:58.299, foo, 0}
2016-07-05 20:49:58,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:49:58.301, foo, 2016-07-05 20:49:58.301, foo, 0}
2016-07-05 20:49:58,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:49:58.302, foo, 2016-07-05 20:49:58.302, foo, 0}
2016-07-05 20:49:58,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:49:58.303, foo, 2016-07-05 20:49:58.303, foo, 0}
2016-07-05 20:49:58,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:49:58.304, foo, 2016-07-05 20:49:58.304, foo, 0}
2016-07-05 20:49:58,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:49:58.305, foo, 2016-07-05 20:49:58.305, foo, 0}
2016-07-05 20:49:58,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:49:58.307, foo, 2016-07-05 20:49:58.307, foo, 0}
2016-07-05 20:49:58,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:49:58.308, foo, 2016-07-05 20:49:58.308, foo, 0}
2016-07-05 20:49:58,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:49:58.309, foo, 2016-07-05 20:49:58.309, foo, 0}
2016-07-05 20:49:58,369 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:49:58,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:49:58.37, foo, 2016-07-05 20:49:58.37, foo}
2016-07-05 20:49:58,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:49:58.373, foo, 2016-07-05 20:49:58.373, foo}
2016-07-05 20:49:58,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:49:58.374, foo, 2016-07-05 20:49:58.374, foo}
2016-07-05 20:49:58,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:49:58.375, foo, 2016-07-05 20:49:58.375, foo}
2016-07-05 20:49:58,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:49:58.376, foo, 2016-07-05 20:49:58.376, foo}
2016-07-05 20:49:58,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:49:58.378, foo, 2016-07-05 20:49:58.378, foo}
2016-07-05 20:49:58,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:49:58.38, foo, 2016-07-05 20:49:58.38, foo}
2016-07-05 20:49:58,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:49:58.381, foo, 2016-07-05 20:49:58.381, foo}
2016-07-05 20:49:58,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:49:58.382, foo, 2016-07-05 20:49:58.382, foo}
2016-07-05 20:49:58,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:49:58.383, foo, 2016-07-05 20:49:58.383, foo}
2016-07-05 20:49:58,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:49:58.384, foo, 2016-07-05 20:49:58.384, foo}
2016-07-05 20:49:58,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:49:58.385, foo, 2016-07-05 20:49:58.385, foo}
2016-07-05 20:49:58,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:49:58.386, foo, 2016-07-05 20:49:58.386, foo}
2016-07-05 20:49:58,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:49:58.387, foo, 2016-07-05 20:49:58.387, foo}
2016-07-05 20:49:58,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:49:58.388, foo, 2016-07-05 20:49:58.388, foo}
2016-07-05 20:49:58,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:49:58.388, foo, 2016-07-05 20:49:58.388, foo}
2016-07-05 20:49:58,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:49:58.389, foo, 2016-07-05 20:49:58.389, foo}
2016-07-05 20:49:58,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:49:58.397, foo, 2016-07-05 20:49:58.397, foo}
2016-07-05 20:49:58,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:49:58.4, foo, 2016-07-05 20:49:58.4, foo}
2016-07-05 20:49:58,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:49:58.402, foo, 2016-07-05 20:49:58.402, foo}
2016-07-05 20:49:58,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:49:58.406, foo, 2016-07-05 20:49:58.407, foo}
2016-07-05 20:49:58,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:49:58.408, foo, 2016-07-05 20:49:58.408, foo}
2016-07-05 20:49:58,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:49:58.411, foo, 2016-07-05 20:49:58.411, foo}
2016-07-05 20:49:58,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:49:58.412, foo, 2016-07-05 20:49:58.412, foo}
2016-07-05 20:49:58,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:49:58.413, foo, 2016-07-05 20:49:58.413, foo}
2016-07-05 20:49:58,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:49:58.414, foo, 2016-07-05 20:49:58.414, foo}
2016-07-05 20:49:58,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:49:58.415, foo, 2016-07-05 20:49:58.415, foo}
2016-07-05 20:49:58,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:49:58.416, foo, 2016-07-05 20:49:58.416, foo}
2016-07-05 20:49:58,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:49:58.417, foo, 2016-07-05 20:49:58.417, foo}
2016-07-05 20:49:58,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:49:58.418, foo, 2016-07-05 20:49:58.418, foo}
2016-07-05 20:49:58,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:49:58.419, foo, 2016-07-05 20:49:58.419, foo}
2016-07-05 20:49:58,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:49:58.419, foo, 2016-07-05 20:49:58.419, foo}
2016-07-05 20:49:58,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:49:58.42, foo, 2016-07-05 20:49:58.42, foo}
2016-07-05 20:49:58,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:49:58.421, foo, 2016-07-05 20:49:58.421, foo}
2016-07-05 20:49:58,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:49:58.422, foo, 2016-07-05 20:49:58.422, foo}
2016-07-05 20:49:58,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:49:58.426, foo, 2016-07-05 20:49:58.426, foo}
2016-07-05 20:49:58,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:49:58.426, foo, 2016-07-05 20:49:58.426, foo}
2016-07-05 20:49:58,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:49:58.428, foo, 2016-07-05 20:49:58.428, foo}
2016-07-05 20:49:58,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:49:58.429, foo, 2016-07-05 20:49:58.429, foo}
2016-07-05 20:49:58,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:49:58.431, foo, 2016-07-05 20:49:58.431, foo}
2016-07-05 20:49:58,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:49:58.433, foo, 2016-07-05 20:49:58.433, foo}
2016-07-05 20:49:58,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:49:58.434, foo, 2016-07-05 20:49:58.434, foo}
2016-07-05 20:49:58,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:49:58.436, foo, 2016-07-05 20:49:58.436, foo}
2016-07-05 20:49:58,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:49:58.437, foo, 2016-07-05 20:49:58.437, foo}
2016-07-05 20:49:58,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:49:58.438, foo, 2016-07-05 20:49:58.438, foo}
2016-07-05 20:49:58,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:49:58.439, foo, 2016-07-05 20:49:58.439, foo}
2016-07-05 20:49:58,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:49:58.44, foo, 2016-07-05 20:49:58.44, foo}
2016-07-05 20:49:58,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:49:58.44, foo, 2016-07-05 20:49:58.44, foo}
2016-07-05 20:49:58,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:49:58.441, foo, 2016-07-05 20:49:58.441, foo}
2016-07-05 20:49:58,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:49:58.442, foo, 2016-07-05 20:49:58.442, foo}
2016-07-05 20:49:58,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:49:58.443, foo, 2016-07-05 20:49:58.443, foo}
2016-07-05 20:49:58,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:49:58.444, foo, 2016-07-05 20:49:58.444, foo}
2016-07-05 20:49:58,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:49:58.445, foo, 2016-07-05 20:49:58.445, foo}
2016-07-05 20:49:58,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:49:58.445, foo, 2016-07-05 20:49:58.445, foo}
2016-07-05 20:49:58,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:49:58.457, foo, 2016-07-05 20:49:58.457, foo}
2016-07-05 20:49:58,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:49:58.463, foo, 2016-07-05 20:49:58.463, foo}
2016-07-05 20:49:58,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:49:58.465, foo, 2016-07-05 20:49:58.465, foo}
2016-07-05 20:49:58,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:49:58.467, foo, 2016-07-05 20:49:58.467, foo}
2016-07-05 20:49:58,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:49:58.47, foo, 2016-07-05 20:49:58.47, foo}
2016-07-05 20:49:58,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:49:58.471, foo, 2016-07-05 20:49:58.471, foo}
2016-07-05 20:49:58,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:49:58.472, foo, 2016-07-05 20:49:58.472, foo}
2016-07-05 20:49:58,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:49:58.473, foo, 2016-07-05 20:49:58.473, foo}
2016-07-05 20:49:58,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:49:58.474, foo, 2016-07-05 20:49:58.474, foo}
2016-07-05 20:49:58,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:49:58.475, foo, 2016-07-05 20:49:58.475, foo}
2016-07-05 20:49:58,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:49:58.476, foo, 2016-07-05 20:49:58.476, foo}
2016-07-05 20:49:58,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:49:58.477, foo, 2016-07-05 20:49:58.477, foo}
2016-07-05 20:49:58,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:49:58.478, foo, 2016-07-05 20:49:58.478, foo}
2016-07-05 20:49:58,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:49:58.479, foo, 2016-07-05 20:49:58.479, foo}
2016-07-05 20:49:58,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:49:58.48, foo, 2016-07-05 20:49:58.48, foo}
2016-07-05 20:49:58,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:49:58.481, foo, 2016-07-05 20:49:58.481, foo}
2016-07-05 20:49:58,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:49:58.482, foo, 2016-07-05 20:49:58.482, foo}
2016-07-05 20:49:58,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:49:58.483, foo, 2016-07-05 20:49:58.483, foo}
2016-07-05 20:49:58,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:49:58.484, foo, 2016-07-05 20:49:58.484, foo}
2016-07-05 20:49:58,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:49:58.484, foo, 2016-07-05 20:49:58.484, foo}
2016-07-05 20:49:58,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:49:58.485, foo, 2016-07-05 20:49:58.485, foo}
2016-07-05 20:49:58,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:49:58.487, foo, 2016-07-05 20:49:58.487, foo}
2016-07-05 20:49:58,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:49:58.487, foo, 2016-07-05 20:49:58.487, foo}
2016-07-05 20:49:58,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:49:58.492, foo, 2016-07-05 20:49:58.492, foo}
2016-07-05 20:49:58,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:49:58.493, foo, 2016-07-05 20:49:58.493, foo}
2016-07-05 20:49:58,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:49:58.494, foo, 2016-07-05 20:49:58.494, foo}
2016-07-05 20:49:58,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:49:58.494, foo, 2016-07-05 20:49:58.494, foo}
2016-07-05 20:49:58,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:49:58.496, foo, 2016-07-05 20:49:58.496, foo}
2016-07-05 20:49:58,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:49:58.497, foo, 2016-07-05 20:49:58.497, foo}
2016-07-05 20:49:58,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:49:58.498, foo, 2016-07-05 20:49:58.498, foo}
2016-07-05 20:49:58,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:49:58.5, foo, 2016-07-05 20:49:58.5, foo}
2016-07-05 20:49:58,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:49:58.501, foo, 2016-07-05 20:49:58.501, foo}
2016-07-05 20:49:58,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:49:58.503, foo, 2016-07-05 20:49:58.503, foo}
2016-07-05 20:49:58,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:49:58.504, foo, 2016-07-05 20:49:58.504, foo}
2016-07-05 20:49:58,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:49:58.505, foo, 2016-07-05 20:49:58.505, foo}
2016-07-05 20:49:58,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:49:58.506, foo, 2016-07-05 20:49:58.506, foo}
2016-07-05 20:49:58,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:49:58.507, foo, 2016-07-05 20:49:58.507, foo}
2016-07-05 20:49:58,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:49:58.508, foo, 2016-07-05 20:49:58.508, foo}
2016-07-05 20:49:58,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:49:58.509, foo, 2016-07-05 20:49:58.509, foo}
2016-07-05 20:49:58,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:49:58.51, foo, 2016-07-05 20:49:58.51, foo}
2016-07-05 20:49:58,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:49:58.513, foo, 2016-07-05 20:49:58.513, foo}
2016-07-05 20:49:58,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:49:58.519, foo, 2016-07-05 20:49:58.519, foo}
2016-07-05 20:49:58,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:49:58.52, foo, 2016-07-05 20:49:58.52, foo}
2016-07-05 20:49:58,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:49:58.521, foo, 2016-07-05 20:49:58.521, foo}
2016-07-05 20:49:58,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:49:58.522, foo, 2016-07-05 20:49:58.522, foo}
2016-07-05 20:49:58,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:49:58.523, foo, 2016-07-05 20:49:58.523, foo}
2016-07-05 20:49:58,595 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:49:58,596 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:49:58,621 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:49:58,636 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:49:58,648 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:49:58,651 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:49:58,655 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:49:58,660 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:49:58,664 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:49:58,676 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:49:58,678 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:49:58,681 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:49:58,685 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:49:58,688 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:49:58,695 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:49:58,695 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:49:58,695 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:49:58,696 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:49:58,696 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:49:58,696 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:49:58,704 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:49:58,705 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:49:58,709 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:49:58,710 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:49:58,711 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:49:58,714 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:49:58,714 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:49:58,715 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:49:58,721 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s407ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:49:59,655 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 20:49:59,659 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 20:49:59,659 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 20:49:59,660 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 20:49:59,660 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 20:49:59,697 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:49:59,697 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:49:59,698 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:49:59,698 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:49:59,761 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:49:59,762 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:49:59,762 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 20:49:59,775 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:49:59,940 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:49:59,975 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:50:00,509 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:50:00,510 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:50:00,511 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:50:00,514 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:50:00,515 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:50:00,515 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:50:00,533 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:50:00,539 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:50:00,559 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:50:00,560 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:50:00,560 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:50:00,561 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:50:00,632 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:50:00,652 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:50:00,667 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:50:00,682 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:50:00,700 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:50:00,711 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:50:00,729 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:50:00,749 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:50:00,761 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:50:00,770 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:50:00,788 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:50:00,800 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:50:00,810 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:50:00,819 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:50:00,828 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:50:00,829 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:50:00,829 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:50:00,829 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:50:00,829 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:50:00,831 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:50:00,835 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:50:00,836 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 20:50:00,836 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:50:00,877 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 20:50:00,880 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:50:00,984 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1483) -  -> different from previous (schema diff)
2016-07-05 20:50:00,987 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1485) - ...Serializing schema-diff:
2016-07-05 20:50:00,987 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1486) -   filePath = ./schema/project-history-maihamadb.diffmap
2016-07-05 20:50:00,992 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:50:01,004 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s365ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 20:50:02,064 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:50:02,067 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:50:02,067 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:50:02,068 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:50:02,068 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:50:02,112 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:50:02,113 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:50:02,113 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:50:02,113 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:50:02,116 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 20:50:02,116 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 20:50:02,117 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 20:50:02,117 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 20:50:02,118 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 20:50:02,118 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 20:50:02,165 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:50:02,301 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:50:02,521 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:50:02,533 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:50:02,534 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:50:02,536 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:50:02,538 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:50:02,538 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:50:02,540 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:50:02,546 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:50:02,546 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:50:02,552 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:50:02,562 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:50:02,563 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:50:02,564 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:50:02,564 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:50:02,565 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:50:02,566 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:50:02,566 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:50:02,567 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:50:02,591 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:50:02,986 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:50:02,990 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:50:02,993 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:50:02,996 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:50:03,001 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:50:03,003 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:50:03,011 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:50:03,049 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=3
2016-07-05 20:50:03,568 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 20:50:03,569 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 20:50:03,576 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:50:03,601 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:50:03,602 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:50:03,691 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:50:03,697 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:50:03,699 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:50:03,699 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:50:03,700 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:50:03,700 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:50:03,746 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:50:03,761 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:50:03,766 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s720ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:50:06,461 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 20:50:06,464 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 20:50:06,464 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 20:50:06,465 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 20:50:06,465 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 20:50:06,492 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:50:06,493 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:50:06,493 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:50:06,493 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:50:06,514 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 20:50:06,514 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 20:50:06,556 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:50:06,641 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 20:50:06,896 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 20:50:06,900 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:50:06,901 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:50:06,902 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:50:06,903 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:50:06,904 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:50:06,905 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:50:06,908 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:50:06,909 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:50:06,913 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:50:06,926 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:50:06,926 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:50:06,927 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:50:06,927 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:50:06,928 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:50:06,928 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:50:06,928 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:50:06,928 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:50:06,943 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:50:07,306 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:50:07,310 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:50:07,313 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:50:07,316 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:50:07,320 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:50:07,324 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:50:07,342 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 20:50:07,342 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 20:50:07,342 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 20:50:07,343 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 20:50:07,343 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 20:50:07,344 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 20:50:07,344 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 20:50:07,345 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 20:50:07,345 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 20:50:07,345 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 20:50:07,365 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 20:50:07,367 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 20:50:07,422 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 20:50:07,425 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 20:50:07,442 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 20:50:07,447 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 20:50:07,474 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 20:50:07,492 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 20:50:07,501 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 20:50:07,514 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 20:50:07,522 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 20:50:07,526 [main] INFO  (Database#info():2711) - }
2016-07-05 20:50:07,527 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 20:50:07,528 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 20:50:07,548 [main] INFO  (Database#info():2711) - }
2016-07-05 20:50:07,556 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 20:50:07,600 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:50:07,601 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 20:50:07,602 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 20:50:08,174 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 20:50:08,437 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 20:50:08,633 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 20:50:08,812 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 20:50:09,015 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 20:50:09,196 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 20:50:09,395 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 20:50:09,622 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 20:50:09,787 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 20:50:09,918 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 20:50:10,110 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 20:50:10,239 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 20:50:10,344 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 20:50:10,474 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 20:50:10,593 [main] INFO  (Database#info():2711) - }
2016-07-05 20:50:10,594 [main] INFO  (Database#info():2711) -  
2016-07-05 20:50:10,650 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:50:10,660 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s211ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 20:50:12,545 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 20:50:12,549 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 20:50:12,549 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 20:50:12,551 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 20:50:12,552 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 20:50:12,613 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:50:12,613 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:50:12,614 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:50:12,614 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:50:12,675 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:50:12,684 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:50:13,059 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:50:13,060 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:50:13,094 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:50:13,101 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:50:13,102 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:50:13,105 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:50:13,109 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:50:13,109 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:50:13,111 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:50:13,140 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:50:13,140 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:50:13,142 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:50:13,148 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:50:13,148 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:50:13,173 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:50:13,180 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s668ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 20:50:13,902 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 20:50:13,906 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 20:50:13,906 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 20:50:13,906 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 20:50:13,907 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 20:50:13,926 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:50:13,926 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:50:13,927 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:50:13,927 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:50:13,944 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 20:50:13,944 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 20:50:13,951 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:50:14,054 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:50:14,060 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:50:14,385 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:50:14,385 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:50:14,389 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:50:14,443 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:50:14,443 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:50:14,444 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:50:14,457 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:50:14,457 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:50:14,460 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:50:14,469 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:50:14,470 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:50:14,471 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:50:14,478 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:50:14,479 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:50:14,488 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 20:50:14,488 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 20:50:14,543 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:50:14,547 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:50:14,548 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:50:14,549 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:50:14,549 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:50:14,549 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:50:14,578 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 20:50:14,610 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 20:50:14,622 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 20:50:14,623 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:50:14,623 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 20:50:14,624 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 20:50:14,624 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 20:50:14,625 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 20:50:14,625 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 20:50:14,626 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 20:50:14,626 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 20:50:14,627 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 20:50:14,628 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 20:50:14,628 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 20:50:14,657 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 20:50:14,658 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 20:50:14,658 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 20:50:14,658 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 20:50:14,658 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 20:50:14,673 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 20:50:14,674 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 20:50:14,674 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 20:50:14,674 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 20:50:14,675 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 20:50:14,679 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 20:50:14,854 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:50:14,862 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:50:14,865 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:50:14,867 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:50:14,869 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:50:14,871 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:50:14,873 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:50:14,886 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 20:50:14,891 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 20:50:14,910 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:50:14,910 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 20:50:15,047 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 20:50:15,110 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 20:50:15,123 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 20:50:15,186 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 20:50:15,270 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 20:50:15,323 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 20:50:15,390 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 20:50:15,391 [main] INFO  (Database#info():2711) - }
2016-07-05 20:50:15,393 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 20:50:15,397 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 20:50:15,433 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 20:50:15,459 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 20:50:15,480 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 20:50:15,496 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 20:50:15,513 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 20:50:15,530 [main] INFO  (Database#info():2711) - }
2016-07-05 20:50:15,566 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 20:50:15,581 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:50:15,586 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:50:15,596 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s703ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:51:15,071 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:51:15,076 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:51:15,077 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:51:15,082 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 20:51:15,082 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:51:15,083 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:51:15,085 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:51:16,865 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:51:16,865 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:51:16,866 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:51:16,866 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:51:16,875 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:51:17,298 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:51:17,299 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:51:17,321 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 20:51:17,322 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 20:51:17,324 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 20:51:17,324 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 20:51:17,325 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 20:51:17,325 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 20:51:17,336 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:51:17,336 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:51:17,337 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:51:17,337 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:51:17,337 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:51:17,338 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:51:17,358 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:17,359 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:17,360 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:17,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:51:17,398 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:51:17,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:51:17,411 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:51:17,424 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:51:17,437 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:51:17,458 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:51:17,482 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:51:17,495 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:51:17,521 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:51:17,535 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:51:17,559 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:51:17,579 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:51:17,595 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:51:17,610 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:51:17,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:51:17,638 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:51:17,655 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:51:17,668 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:51:17,690 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:51:17,706 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:51:17,729 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:51:17,754 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:51:17,758 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:51:17,763 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:51:17,767 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:51:17,771 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:51:17,774 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:51:17,778 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:51:17,784 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:51:17,789 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:51:17,792 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:51:17,797 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:51:17,801 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:51:17,804 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:51:17,808 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:51:17,812 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:51:17,873 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:51:17,875 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:51:17,878 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:51:17,879 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:51:17,879 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:51:17,880 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:51:17,880 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:51:17,881 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:51:17,887 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:51:17,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:51:17,894 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:51:17,897 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:51:17,910 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:51:17,911 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:51:17,913 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:51:17,915 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:51:17,918 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:51:17,924 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:51:17,924 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:51:17,925 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:51:17,925 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:51:17,925 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:51:17,931 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:51:17,951 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:51:17,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:51:17,983 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:51:17,999 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:51:18,034 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:51:18,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:51:18,073 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:51:18,084 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:51:18,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:51:18,134 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:51:18,144 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:51:18,155 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:51:18,175 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:51:18,188 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:51:18,199 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:51:18,216 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,241 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:51:18,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:51:18,282 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,303 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,323 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:51:18,343 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,361 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,381 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:51:18,404 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:18,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:51:18,457 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:51:18,483 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:51:18,513 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:51:18,535 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:51:18,562 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:51:18,579 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:51:18,597 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:51:18,620 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:51:18,636 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:51:18,648 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:51:18,667 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:51:18,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:51:18,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:51:18,727 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:51:18,728 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:51:18,729 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:51:18,730 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:51:18,732 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:51:18,732 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:51:18,732 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:51:18,853 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:51:18,853 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:51:18,853 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:51:18,853 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:51:18,854 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:51:18,854 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:51:18,878 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:18,879 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:51:18,879 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:19,132 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:19,132 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:19,133 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:19,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:51:19,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:51:19,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:51:19,287 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:51:19,291 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:51:19,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:51:19,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:51:19,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:51:19,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:51:19,301 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:51:19,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:51:19,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:51:19,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:51:19,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:51:19,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:51:19,311 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:51:19,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:51:19,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:51:19,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:51:19,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:51:19,319 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:51:19,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:51:19,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:51:19,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:51:19,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:51:19,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:51:19,328 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:51:19,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:51:19,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:51:19,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:51:19,334 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:51:19,337 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:19,337 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:51:19,337 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:19,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:51:19.424, foo, 2016-07-05 20:51:19.424, foo, 0}
2016-07-05 20:51:19,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:51:19.431, foo, 2016-07-05 20:51:19.431, foo, 0}
2016-07-05 20:51:19,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:51:19.434, foo, 2016-07-05 20:51:19.434, foo, 0}
2016-07-05 20:51:19,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:51:19.437, foo, 2016-07-05 20:51:19.437, foo, 0}
2016-07-05 20:51:19,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:51:19.439, foo, 2016-07-05 20:51:19.439, foo, 0}
2016-07-05 20:51:19,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:51:19.44, foo, 2016-07-05 20:51:19.44, foo, 0}
2016-07-05 20:51:19,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:51:19.443, foo, 2016-07-05 20:51:19.443, foo, 0}
2016-07-05 20:51:19,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:51:19.444, foo, 2016-07-05 20:51:19.444, foo, 0}
2016-07-05 20:51:19,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:51:19.446, foo, 2016-07-05 20:51:19.446, foo, 0}
2016-07-05 20:51:19,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:51:19.454, foo, 2016-07-05 20:51:19.454, foo, 0}
2016-07-05 20:51:19,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:51:19.455, foo, 2016-07-05 20:51:19.455, foo, 0}
2016-07-05 20:51:19,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:51:19.459, foo, 2016-07-05 20:51:19.459, foo, 0}
2016-07-05 20:51:19,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:51:19.461, foo, 2016-07-05 20:51:19.461, foo, 0}
2016-07-05 20:51:19,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:51:19.464, foo, 2016-07-05 20:51:19.464, foo, 0}
2016-07-05 20:51:19,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:51:19.466, foo, 2016-07-05 20:51:19.466, foo, 0}
2016-07-05 20:51:19,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:51:19.469, foo, 2016-07-05 20:51:19.469, foo, 0}
2016-07-05 20:51:19,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:51:19.472, foo, 2016-07-05 20:51:19.472, foo, 0}
2016-07-05 20:51:19,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:51:19.474, foo, 2016-07-05 20:51:19.474, foo, 0}
2016-07-05 20:51:19,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:51:19.476, foo, 2016-07-05 20:51:19.476, foo, 0}
2016-07-05 20:51:19,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:51:19.489, foo, 2016-07-05 20:51:19.489, foo, 0}
2016-07-05 20:51:19,512 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:51:19,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:51:19.514, foo, 2016-07-05 20:51:19.514, foo, 0}
2016-07-05 20:51:19,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:51:19.524, foo, 2016-07-05 20:51:19.524, foo, 0}
2016-07-05 20:51:19,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:51:19.526, foo, 2016-07-05 20:51:19.526, foo, 0}
2016-07-05 20:51:19,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:51:19.529, foo, 2016-07-05 20:51:19.529, foo, 0}
2016-07-05 20:51:19,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:51:19.531, foo, 2016-07-05 20:51:19.531, foo, 0}
2016-07-05 20:51:19,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:51:19.534, foo, 2016-07-05 20:51:19.534, foo, 0}
2016-07-05 20:51:19,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:51:19.536, foo, 2016-07-05 20:51:19.536, foo, 0}
2016-07-05 20:51:19,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:51:19.538, foo, 2016-07-05 20:51:19.538, foo, 0}
2016-07-05 20:51:19,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:51:19.54, foo, 2016-07-05 20:51:19.54, foo, 0}
2016-07-05 20:51:19,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:51:19.541, foo, 2016-07-05 20:51:19.541, foo, 0}
2016-07-05 20:51:19,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:51:19.543, foo, 2016-07-05 20:51:19.543, foo, 0}
2016-07-05 20:51:19,545 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:51:19.545, foo, 2016-07-05 20:51:19.545, foo, 0}
2016-07-05 20:51:19,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:51:19.549, foo, 2016-07-05 20:51:19.549, foo, 0}
2016-07-05 20:51:19,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:51:19.555, foo, 2016-07-05 20:51:19.555, foo, 0}
2016-07-05 20:51:19,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:51:19.557, foo, 2016-07-05 20:51:19.557, foo, 0}
2016-07-05 20:51:19,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:51:19.56, foo, 2016-07-05 20:51:19.56, foo, 0}
2016-07-05 20:51:19,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:51:19.562, foo, 2016-07-05 20:51:19.562, foo, 0}
2016-07-05 20:51:19,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:51:19.564, foo, 2016-07-05 20:51:19.564, foo, 0}
2016-07-05 20:51:19,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:51:19.566, foo, 2016-07-05 20:51:19.566, foo, 0}
2016-07-05 20:51:19,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:51:19.568, foo, 2016-07-05 20:51:19.568, foo, 0}
2016-07-05 20:51:19,584 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:51:19,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:51:19,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:51:19,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:51:19,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:51:19,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:51:19,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:51:19,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:51:19,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:51:19,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:51:19,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:51:19,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:51:19,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:51:19,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:51:19,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:51:19,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:51:19,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:51:19,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:51:19,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:51:19,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:51:19,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:51:19,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:51:19,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:51:19,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:51:19,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:51:19,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:51:19,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:51:19,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:51:19,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:51:19,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:51:19,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:51:19,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:51:19,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:51:19,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:51:19,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:51:19,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:51:19,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:51:19,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:51:19,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:51:19,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:51:19,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:51:19,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:51:19,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:51:19,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:51:19,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:51:19,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:51:19,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:51:19,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:51:19,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:51:19,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:51:19,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:51:19,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:51:19,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:51:19,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:51:19,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:51:19,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:51:19,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:51:19,690 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:51:19,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:51:19.691, foo, 2016-07-05 20:51:19.691, foo, 0}
2016-07-05 20:51:19,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:51:19.692, foo, 2016-07-05 20:51:19.692, foo, 0}
2016-07-05 20:51:19,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:51:19.693, foo, 2016-07-05 20:51:19.693, foo, 0}
2016-07-05 20:51:19,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:51:19.695, foo, 2016-07-05 20:51:19.695, foo, 0}
2016-07-05 20:51:19,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:51:19.696, foo, 2016-07-05 20:51:19.696, foo, 0}
2016-07-05 20:51:19,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:51:19.697, foo, 2016-07-05 20:51:19.697, foo, 0}
2016-07-05 20:51:19,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:51:19.697, foo, 2016-07-05 20:51:19.697, foo, 0}
2016-07-05 20:51:19,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:51:19.698, foo, 2016-07-05 20:51:19.698, foo, 0}
2016-07-05 20:51:19,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:51:19.699, foo, 2016-07-05 20:51:19.699, foo, 0}
2016-07-05 20:51:19,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:51:19.7, foo, 2016-07-05 20:51:19.7, foo, 0}
2016-07-05 20:51:19,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:51:19.701, foo, 2016-07-05 20:51:19.701, foo, 0}
2016-07-05 20:51:19,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:51:19.701, foo, 2016-07-05 20:51:19.701, foo, 0}
2016-07-05 20:51:19,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:51:19.702, foo, 2016-07-05 20:51:19.702, foo, 0}
2016-07-05 20:51:19,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:51:19.703, foo, 2016-07-05 20:51:19.703, foo, 0}
2016-07-05 20:51:19,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:51:19.705, foo, 2016-07-05 20:51:19.705, foo, 0}
2016-07-05 20:51:19,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:51:19.706, foo, 2016-07-05 20:51:19.706, foo, 0}
2016-07-05 20:51:19,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:51:19.707, foo, 2016-07-05 20:51:19.707, foo, 0}
2016-07-05 20:51:19,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:51:19.708, foo, 2016-07-05 20:51:19.708, foo, 0}
2016-07-05 20:51:19,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:51:19.709, foo, 2016-07-05 20:51:19.709, foo, 0}
2016-07-05 20:51:19,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:51:19.711, foo, 2016-07-05 20:51:19.711, foo, 0}
2016-07-05 20:51:19,737 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:51:19,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:51:19.738, foo, 2016-07-05 20:51:19.738, foo, 0}
2016-07-05 20:51:19,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:51:19.74, foo, 2016-07-05 20:51:19.74, foo, 0}
2016-07-05 20:51:19,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:51:19.741, foo, 2016-07-05 20:51:19.741, foo, 0}
2016-07-05 20:51:19,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:51:19.742, foo, 2016-07-05 20:51:19.742, foo, 0}
2016-07-05 20:51:19,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:51:19.744, foo, 2016-07-05 20:51:19.744, foo, 0}
2016-07-05 20:51:19,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:51:19.744, foo, 2016-07-05 20:51:19.744, foo, 0}
2016-07-05 20:51:19,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:51:19.745, foo, 2016-07-05 20:51:19.745, foo, 0}
2016-07-05 20:51:19,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:51:19.746, foo, 2016-07-05 20:51:19.746, foo, 0}
2016-07-05 20:51:19,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:51:19.747, foo, 2016-07-05 20:51:19.747, foo, 0}
2016-07-05 20:51:19,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:51:19.748, foo, 2016-07-05 20:51:19.748, foo, 0}
2016-07-05 20:51:19,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:51:19.748, foo, 2016-07-05 20:51:19.748, foo, 0}
2016-07-05 20:51:19,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:51:19.758, foo, 2016-07-05 20:51:19.758, foo, 0}
2016-07-05 20:51:19,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:51:19.758, foo, 2016-07-05 20:51:19.758, foo, 0}
2016-07-05 20:51:19,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:51:19.759, foo, 2016-07-05 20:51:19.759, foo, 0}
2016-07-05 20:51:19,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:51:19.759, foo, 2016-07-05 20:51:19.759, foo, 0}
2016-07-05 20:51:19,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:51:19.76, foo, 2016-07-05 20:51:19.76, foo, 0}
2016-07-05 20:51:19,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:51:19.761, foo, 2016-07-05 20:51:19.761, foo, 0}
2016-07-05 20:51:19,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:51:19.761, foo, 2016-07-05 20:51:19.761, foo, 0}
2016-07-05 20:51:19,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:51:19.762, foo, 2016-07-05 20:51:19.762, foo, 0}
2016-07-05 20:51:19,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:51:19.762, foo, 2016-07-05 20:51:19.762, foo, 0}
2016-07-05 20:51:19,779 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:51:19,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:51:19.78, foo, 2016-07-05 20:51:19.78, foo}
2016-07-05 20:51:19,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:51:19.783, foo, 2016-07-05 20:51:19.783, foo}
2016-07-05 20:51:19,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:51:19.784, foo, 2016-07-05 20:51:19.784, foo}
2016-07-05 20:51:19,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:51:19.786, foo, 2016-07-05 20:51:19.786, foo}
2016-07-05 20:51:19,793 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:51:19,793 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:19,794 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:51:19,794 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:19,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:51:19.853, foo, 2016-07-05 20:51:19.853, foo, 0}
2016-07-05 20:51:19,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:51:19.855, foo, 2016-07-05 20:51:19.855, foo, 0}
2016-07-05 20:51:19,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:51:19.856, foo, 2016-07-05 20:51:19.856, foo, 0}
2016-07-05 20:51:19,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:51:19.857, foo, 2016-07-05 20:51:19.857, foo, 0}
2016-07-05 20:51:19,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:51:19.858, foo, 2016-07-05 20:51:19.858, foo, 0}
2016-07-05 20:51:19,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:51:19.859, foo, 2016-07-05 20:51:19.859, foo, 0}
2016-07-05 20:51:19,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:51:19.86, foo, 2016-07-05 20:51:19.86, foo, 0}
2016-07-05 20:51:19,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:51:19.865, foo, 2016-07-05 20:51:19.865, foo, 0}
2016-07-05 20:51:19,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:51:19.883, foo, 2016-07-05 20:51:19.883, foo, 0}
2016-07-05 20:51:19,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:51:19.884, foo, 2016-07-05 20:51:19.884, foo, 0}
2016-07-05 20:51:19,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:51:19.885, foo, 2016-07-05 20:51:19.885, foo, 0}
2016-07-05 20:51:19,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:51:19.887, foo, 2016-07-05 20:51:19.887, foo, 0}
2016-07-05 20:51:19,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:51:19.888, foo, 2016-07-05 20:51:19.888, foo, 0}
2016-07-05 20:51:19,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:51:19.889, foo, 2016-07-05 20:51:19.889, foo, 0}
2016-07-05 20:51:19,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:51:19.89, foo, 2016-07-05 20:51:19.89, foo, 0}
2016-07-05 20:51:19,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:51:19.891, foo, 2016-07-05 20:51:19.891, foo, 0}
2016-07-05 20:51:19,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:51:19.903, foo, 2016-07-05 20:51:19.903, foo, 0}
2016-07-05 20:51:19,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:51:19.904, foo, 2016-07-05 20:51:19.904, foo, 0}
2016-07-05 20:51:19,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:51:19.905, foo, 2016-07-05 20:51:19.905, foo, 0}
2016-07-05 20:51:19,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:51:19.906, foo, 2016-07-05 20:51:19.906, foo, 0}
2016-07-05 20:51:19,939 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:51:19,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:51:19.94, foo, 2016-07-05 20:51:19.94, foo, 0}
2016-07-05 20:51:19,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:51:19.942, foo, 2016-07-05 20:51:19.942, foo, 0}
2016-07-05 20:51:19,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:51:19.943, foo, 2016-07-05 20:51:19.943, foo, 0}
2016-07-05 20:51:19,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:51:19.944, foo, 2016-07-05 20:51:19.944, foo, 0}
2016-07-05 20:51:19,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:51:19.945, foo, 2016-07-05 20:51:19.945, foo, 0}
2016-07-05 20:51:19,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:51:19.947, foo, 2016-07-05 20:51:19.947, foo, 0}
2016-07-05 20:51:19,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:51:19.948, foo, 2016-07-05 20:51:19.948, foo, 0}
2016-07-05 20:51:19,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:51:19.949, foo, 2016-07-05 20:51:19.949, foo, 0}
2016-07-05 20:51:19,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:51:19.95, foo, 2016-07-05 20:51:19.95, foo, 0}
2016-07-05 20:51:19,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:51:19.951, foo, 2016-07-05 20:51:19.951, foo, 0}
2016-07-05 20:51:19,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:51:19.952, foo, 2016-07-05 20:51:19.952, foo, 0}
2016-07-05 20:51:19,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:51:19.958, foo, 2016-07-05 20:51:19.958, foo, 0}
2016-07-05 20:51:19,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:51:19.959, foo, 2016-07-05 20:51:19.959, foo, 0}
2016-07-05 20:51:19,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:51:19.96, foo, 2016-07-05 20:51:19.96, foo, 0}
2016-07-05 20:51:19,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:51:19.961, foo, 2016-07-05 20:51:19.961, foo, 0}
2016-07-05 20:51:19,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:51:19.963, foo, 2016-07-05 20:51:19.963, foo, 0}
2016-07-05 20:51:19,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:51:19.965, foo, 2016-07-05 20:51:19.965, foo, 0}
2016-07-05 20:51:19,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:51:19.967, foo, 2016-07-05 20:51:19.967, foo, 0}
2016-07-05 20:51:19,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:51:19.969, foo, 2016-07-05 20:51:19.969, foo, 0}
2016-07-05 20:51:19,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:51:19.979, foo, 2016-07-05 20:51:19.979, foo, 0}
2016-07-05 20:51:19,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:51:19.98, foo, 2016-07-05 20:51:19.98, foo, 0}
2016-07-05 20:51:19,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:51:19.982, foo, 2016-07-05 20:51:19.982, foo, 0}
2016-07-05 20:51:19,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:51:19.983, foo, 2016-07-05 20:51:19.983, foo, 0}
2016-07-05 20:51:19,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:51:19.985, foo, 2016-07-05 20:51:19.985, foo, 0}
2016-07-05 20:51:19,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:51:19.987, foo, 2016-07-05 20:51:19.987, foo, 0}
2016-07-05 20:51:19,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:51:19.989, foo, 2016-07-05 20:51:19.989, foo, 0}
2016-07-05 20:51:19,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:51:19.99, foo, 2016-07-05 20:51:19.99, foo, 0}
2016-07-05 20:51:19,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:51:19.991, foo, 2016-07-05 20:51:19.991, foo, 0}
2016-07-05 20:51:19,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:51:19.992, foo, 2016-07-05 20:51:19.992, foo, 0}
2016-07-05 20:51:19,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:51:19.993, foo, 2016-07-05 20:51:19.993, foo, 0}
2016-07-05 20:51:19,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:51:19.994, foo, 2016-07-05 20:51:19.994, foo, 0}
2016-07-05 20:51:19,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:51:19.995, foo, 2016-07-05 20:51:19.995, foo, 0}
2016-07-05 20:51:20,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:20.0, foo, 2016-07-05 20:51:20.0, foo, 0}
2016-07-05 20:51:20,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:20.003, foo, 2016-07-05 20:51:20.003, foo, 0}
2016-07-05 20:51:20,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:51:20.005, foo, 2016-07-05 20:51:20.005, foo, 0}
2016-07-05 20:51:20,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:20.006, foo, 2016-07-05 20:51:20.006, foo, 0}
2016-07-05 20:51:20,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:51:20.007, foo, 2016-07-05 20:51:20.007, foo, 0}
2016-07-05 20:51:20,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:51:20.007, foo, 2016-07-05 20:51:20.007, foo, 0}
2016-07-05 20:51:20,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:51:20.008, foo, 2016-07-05 20:51:20.008, foo, 0}
2016-07-05 20:51:20,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:51:20.009, foo, 2016-07-05 20:51:20.009, foo, 0}
2016-07-05 20:51:20,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:51:20.01, foo, 2016-07-05 20:51:20.01, foo, 0}
2016-07-05 20:51:20,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:51:20.012, foo, 2016-07-05 20:51:20.012, foo, 0}
2016-07-05 20:51:20,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:51:20.013, foo, 2016-07-05 20:51:20.013, foo, 0}
2016-07-05 20:51:20,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:20.016, foo, 2016-07-05 20:51:20.016, foo, 0}
2016-07-05 20:51:20,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:20.018, foo, 2016-07-05 20:51:20.018, foo, 0}
2016-07-05 20:51:20,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:51:20.019, foo, 2016-07-05 20:51:20.019, foo, 0}
2016-07-05 20:51:20,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:20.022, foo, 2016-07-05 20:51:20.022, foo, 0}
2016-07-05 20:51:20,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:51:20.023, foo, 2016-07-05 20:51:20.023, foo, 0}
2016-07-05 20:51:20,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:51:20.024, foo, 2016-07-05 20:51:20.024, foo, 0}
2016-07-05 20:51:20,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:51:20.025, foo, 2016-07-05 20:51:20.025, foo, 0}
2016-07-05 20:51:20,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:51:20.026, foo, 2016-07-05 20:51:20.026, foo, 0}
2016-07-05 20:51:20,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:51:20.027, foo, 2016-07-05 20:51:20.028, foo, 0}
2016-07-05 20:51:20,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:51:20.029, foo, 2016-07-05 20:51:20.029, foo, 0}
2016-07-05 20:51:20,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:20.03, foo, 2016-07-05 20:51:20.03, foo, 0}
2016-07-05 20:51:20,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:20.032, foo, 2016-07-05 20:51:20.032, foo, 0}
2016-07-05 20:51:20,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:51:20.034, foo, 2016-07-05 20:51:20.034, foo, 0}
2016-07-05 20:51:20,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:20.035, foo, 2016-07-05 20:51:20.035, foo, 0}
2016-07-05 20:51:20,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:51:20.037, foo, 2016-07-05 20:51:20.037, foo, 0}
2016-07-05 20:51:20,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:51:20.038, foo, 2016-07-05 20:51:20.038, foo, 0}
2016-07-05 20:51:20,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:51:20.039, foo, 2016-07-05 20:51:20.039, foo, 0}
2016-07-05 20:51:20,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:51:20.04, foo, 2016-07-05 20:51:20.041, foo, 0}
2016-07-05 20:51:20,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:51:20.042, foo, 2016-07-05 20:51:20.042, foo, 0}
2016-07-05 20:51:20,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:51:20.043, foo, 2016-07-05 20:51:20.043, foo, 0}
2016-07-05 20:51:20,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:51:20.044, foo, 2016-07-05 20:51:20.044, foo, 0}
2016-07-05 20:51:20,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:51:20.046, foo, 2016-07-05 20:51:20.046, foo, 0}
2016-07-05 20:51:20,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:51:20.047, foo, 2016-07-05 20:51:20.047, foo, 0}
2016-07-05 20:51:20,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:51:20.049, foo, 2016-07-05 20:51:20.049, foo, 0}
2016-07-05 20:51:20,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:51:20.051, foo, 2016-07-05 20:51:20.051, foo, 0}
2016-07-05 20:51:20,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:51:20.059, foo, 2016-07-05 20:51:20.059, foo, 0}
2016-07-05 20:51:20,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:51:20.061, foo, 2016-07-05 20:51:20.061, foo, 0}
2016-07-05 20:51:20,127 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:51:20,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:51:20.129, foo, 2016-07-05 20:51:20.129, foo}
2016-07-05 20:51:20,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:51:20.131, foo, 2016-07-05 20:51:20.131, foo}
2016-07-05 20:51:20,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:51:20.133, foo, 2016-07-05 20:51:20.133, foo}
2016-07-05 20:51:20,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:51:20.134, foo, 2016-07-05 20:51:20.134, foo}
2016-07-05 20:51:20,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:51:20.136, foo, 2016-07-05 20:51:20.136, foo}
2016-07-05 20:51:20,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:51:20.136, foo, 2016-07-05 20:51:20.136, foo}
2016-07-05 20:51:20,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:51:20.137, foo, 2016-07-05 20:51:20.137, foo}
2016-07-05 20:51:20,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:51:20.138, foo, 2016-07-05 20:51:20.138, foo}
2016-07-05 20:51:20,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:51:20.139, foo, 2016-07-05 20:51:20.139, foo}
2016-07-05 20:51:20,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:51:20.14, foo, 2016-07-05 20:51:20.14, foo}
2016-07-05 20:51:20,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:51:20.141, foo, 2016-07-05 20:51:20.141, foo}
2016-07-05 20:51:20,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:51:20.143, foo, 2016-07-05 20:51:20.143, foo}
2016-07-05 20:51:20,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:51:20.144, foo, 2016-07-05 20:51:20.144, foo}
2016-07-05 20:51:20,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:51:20.145, foo, 2016-07-05 20:51:20.145, foo}
2016-07-05 20:51:20,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:51:20.146, foo, 2016-07-05 20:51:20.146, foo}
2016-07-05 20:51:20,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:51:20.147, foo, 2016-07-05 20:51:20.148, foo}
2016-07-05 20:51:20,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:51:20.149, foo, 2016-07-05 20:51:20.149, foo}
2016-07-05 20:51:20,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:51:20.15, foo, 2016-07-05 20:51:20.15, foo}
2016-07-05 20:51:20,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:51:20.151, foo, 2016-07-05 20:51:20.151, foo}
2016-07-05 20:51:20,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:51:20.152, foo, 2016-07-05 20:51:20.152, foo}
2016-07-05 20:51:20,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:51:20.153, foo, 2016-07-05 20:51:20.153, foo}
2016-07-05 20:51:20,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:51:20.154, foo, 2016-07-05 20:51:20.154, foo}
2016-07-05 20:51:20,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:51:20.155, foo, 2016-07-05 20:51:20.155, foo}
2016-07-05 20:51:20,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:51:20.156, foo, 2016-07-05 20:51:20.156, foo}
2016-07-05 20:51:20,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:51:20.157, foo, 2016-07-05 20:51:20.157, foo}
2016-07-05 20:51:20,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:51:20.158, foo, 2016-07-05 20:51:20.158, foo}
2016-07-05 20:51:20,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:51:20.165, foo, 2016-07-05 20:51:20.165, foo}
2016-07-05 20:51:20,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:51:20.166, foo, 2016-07-05 20:51:20.166, foo}
2016-07-05 20:51:20,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:51:20.167, foo, 2016-07-05 20:51:20.167, foo}
2016-07-05 20:51:20,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:20.168, foo, 2016-07-05 20:51:20.168, foo}
2016-07-05 20:51:20,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:20.169, foo, 2016-07-05 20:51:20.169, foo}
2016-07-05 20:51:20,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:20.17, foo, 2016-07-05 20:51:20.17, foo}
2016-07-05 20:51:20,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:51:20.171, foo, 2016-07-05 20:51:20.171, foo}
2016-07-05 20:51:20,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:51:20.172, foo, 2016-07-05 20:51:20.172, foo}
2016-07-05 20:51:20,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:51:20.173, foo, 2016-07-05 20:51:20.173, foo}
2016-07-05 20:51:20,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:51:20.173, foo, 2016-07-05 20:51:20.173, foo}
2016-07-05 20:51:20,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:51:20.177, foo, 2016-07-05 20:51:20.177, foo}
2016-07-05 20:51:20,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:51:20.178, foo, 2016-07-05 20:51:20.178, foo}
2016-07-05 20:51:20,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:51:20.179, foo, 2016-07-05 20:51:20.179, foo}
2016-07-05 20:51:20,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:51:20.181, foo, 2016-07-05 20:51:20.181, foo}
2016-07-05 20:51:20,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:51:20.182, foo, 2016-07-05 20:51:20.182, foo}
2016-07-05 20:51:20,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:51:20.184, foo, 2016-07-05 20:51:20.184, foo}
2016-07-05 20:51:20,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:51:20.186, foo, 2016-07-05 20:51:20.186, foo}
2016-07-05 20:51:20,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:51:20.188, foo, 2016-07-05 20:51:20.188, foo}
2016-07-05 20:51:20,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:51:20.19, foo, 2016-07-05 20:51:20.19, foo}
2016-07-05 20:51:20,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:51:20.191, foo, 2016-07-05 20:51:20.191, foo}
2016-07-05 20:51:20,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:51:20.192, foo, 2016-07-05 20:51:20.192, foo}
2016-07-05 20:51:20,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:51:20.193, foo, 2016-07-05 20:51:20.193, foo}
2016-07-05 20:51:20,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:51:20.194, foo, 2016-07-05 20:51:20.194, foo}
2016-07-05 20:51:20,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:51:20.195, foo, 2016-07-05 20:51:20.195, foo}
2016-07-05 20:51:20,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:51:20.201, foo, 2016-07-05 20:51:20.201, foo}
2016-07-05 20:51:20,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:51:20.202, foo, 2016-07-05 20:51:20.202, foo}
2016-07-05 20:51:20,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:51:20.203, foo, 2016-07-05 20:51:20.203, foo}
2016-07-05 20:51:20,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:20.203, foo, 2016-07-05 20:51:20.203, foo}
2016-07-05 20:51:20,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:51:20.204, foo, 2016-07-05 20:51:20.204, foo}
2016-07-05 20:51:20,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:51:20.205, foo, 2016-07-05 20:51:20.205, foo}
2016-07-05 20:51:20,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:51:20.206, foo, 2016-07-05 20:51:20.206, foo}
2016-07-05 20:51:20,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:51:20.207, foo, 2016-07-05 20:51:20.207, foo}
2016-07-05 20:51:20,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:51:20.208, foo, 2016-07-05 20:51:20.208, foo}
2016-07-05 20:51:20,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:51:20.209, foo, 2016-07-05 20:51:20.209, foo}
2016-07-05 20:51:20,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:51:20.21, foo, 2016-07-05 20:51:20.21, foo}
2016-07-05 20:51:20,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:51:20.211, foo, 2016-07-05 20:51:20.211, foo}
2016-07-05 20:51:20,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:51:20.212, foo, 2016-07-05 20:51:20.212, foo}
2016-07-05 20:51:20,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:51:20.213, foo, 2016-07-05 20:51:20.213, foo}
2016-07-05 20:51:20,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:20.214, foo, 2016-07-05 20:51:20.214, foo}
2016-07-05 20:51:20,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:51:20.215, foo, 2016-07-05 20:51:20.215, foo}
2016-07-05 20:51:20,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:51:20.218, foo, 2016-07-05 20:51:20.218, foo}
2016-07-05 20:51:20,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:51:20.219, foo, 2016-07-05 20:51:20.219, foo}
2016-07-05 20:51:20,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:51:20.22, foo, 2016-07-05 20:51:20.22, foo}
2016-07-05 20:51:20,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:51:20.222, foo, 2016-07-05 20:51:20.222, foo}
2016-07-05 20:51:20,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:51:20.223, foo, 2016-07-05 20:51:20.223, foo}
2016-07-05 20:51:20,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:51:20.223, foo, 2016-07-05 20:51:20.223, foo}
2016-07-05 20:51:20,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:51:20.224, foo, 2016-07-05 20:51:20.224, foo}
2016-07-05 20:51:20,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:51:20.225, foo, 2016-07-05 20:51:20.225, foo}
2016-07-05 20:51:20,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:51:20.226, foo, 2016-07-05 20:51:20.226, foo}
2016-07-05 20:51:20,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:51:20.227, foo, 2016-07-05 20:51:20.227, foo}
2016-07-05 20:51:20,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:51:20.227, foo, 2016-07-05 20:51:20.227, foo}
2016-07-05 20:51:20,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:51:20.232, foo, 2016-07-05 20:51:20.232, foo}
2016-07-05 20:51:20,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:51:20.233, foo, 2016-07-05 20:51:20.233, foo}
2016-07-05 20:51:20,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:51:20.233, foo, 2016-07-05 20:51:20.233, foo}
2016-07-05 20:51:20,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:51:20.234, foo, 2016-07-05 20:51:20.234, foo}
2016-07-05 20:51:20,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:51:20.235, foo, 2016-07-05 20:51:20.235, foo}
2016-07-05 20:51:20,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:20.236, foo, 2016-07-05 20:51:20.236, foo}
2016-07-05 20:51:20,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:20.236, foo, 2016-07-05 20:51:20.236, foo}
2016-07-05 20:51:20,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:20.237, foo, 2016-07-05 20:51:20.237, foo}
2016-07-05 20:51:20,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:20.238, foo, 2016-07-05 20:51:20.238, foo}
2016-07-05 20:51:20,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:51:20.239, foo, 2016-07-05 20:51:20.239, foo}
2016-07-05 20:51:20,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:20.239, foo, 2016-07-05 20:51:20.239, foo}
2016-07-05 20:51:20,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:51:20.24, foo, 2016-07-05 20:51:20.24, foo}
2016-07-05 20:51:20,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:51:20.241, foo, 2016-07-05 20:51:20.241, foo}
2016-07-05 20:51:20,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:51:20.242, foo, 2016-07-05 20:51:20.242, foo}
2016-07-05 20:51:20,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:51:20.243, foo, 2016-07-05 20:51:20.243, foo}
2016-07-05 20:51:20,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:51:20.244, foo, 2016-07-05 20:51:20.244, foo}
2016-07-05 20:51:20,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:51:20.245, foo, 2016-07-05 20:51:20.245, foo}
2016-07-05 20:51:20,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:51:20.246, foo, 2016-07-05 20:51:20.246, foo}
2016-07-05 20:51:20,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:51:20.247, foo, 2016-07-05 20:51:20.247, foo}
2016-07-05 20:51:20,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:51:20.249, foo, 2016-07-05 20:51:20.249, foo}
2016-07-05 20:51:20,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:51:20.251, foo, 2016-07-05 20:51:20.251, foo}
2016-07-05 20:51:20,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:51:20.253, foo, 2016-07-05 20:51:20.253, foo}
2016-07-05 20:51:20,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:51:20.255, foo, 2016-07-05 20:51:20.255, foo}
2016-07-05 20:51:20,320 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:51:20,322 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:51:20,342 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:20,352 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:51:20,360 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:51:20,366 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:51:20,369 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:51:20,371 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:51:20,375 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:51:20,386 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:51:20,391 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:51:20,393 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:51:20,402 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:51:20,404 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:51:20,410 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:51:20,411 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:51:20,411 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:51:20,412 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:51:20,412 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:51:20,412 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:51:20,425 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:51:20,427 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:51:20,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:51:20,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:51:20,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:51:20,437 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:51:20,437 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:51:20,473 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:51:20,474 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:51:20,499 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:51:20,500 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:51:20,500 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:20,502 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:20,502 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:20,511 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:51:20,513 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:51:20,534 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:51:20,534 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:51:20,535 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:51:20,535 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:51:20,561 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:51:20,582 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:51:20,599 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:51:20,613 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:51:20,641 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:51:20,651 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:51:20,671 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:51:20,682 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:51:20,691 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:51:20,698 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:51:20,711 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:51:20,722 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:51:20,730 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:51:20,739 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:51:20,746 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:51:20,747 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:51:20,747 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:51:20,747 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:51:20,747 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:51:20,749 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:51:20,751 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:51:20,751 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:51:20,751 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:51:20,797 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 20:51:20,798 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 20:51:20,798 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 20:51:20,798 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 20:51:20,798 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 20:51:20,798 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 20:51:20,801 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:51:20,802 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2035.zip
2016-07-05 20:51:20,827 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:51:20,829 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:51:20,830 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:51:20,831 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:51:20,832 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:51:20,833 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:51:20,834 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:51:20,835 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:51:20,836 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:51:20,839 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:51:20,840 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:51:20,841 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:51:20,842 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:51:20,843 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:51:20,843 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:51:20,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:51:20,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:51:20,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:51:20,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:51:20,889 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:51:20,889 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:51:20,889 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:20,890 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:20,890 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:20,902 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:51:20,910 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:51:20,914 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:51:20,923 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:51:20,930 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:51:20,943 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:51:20,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:51:20,977 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:51:20,995 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:51:21,008 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:51:21,025 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:51:21,038 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:51:21,057 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:51:21,076 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:51:21,097 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:51:21,119 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:51:21,138 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:51:21,155 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:51:21,177 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:51:21,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:51:21,206 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:51:21,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:51:21,247 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:51:21,251 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:51:21,255 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:51:21,259 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:51:21,262 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:51:21,265 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:51:21,269 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:51:21,272 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:51:21,277 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:51:21,279 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:51:21,282 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:51:21,285 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:51:21,288 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:51:21,292 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:51:21,294 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:51:21,314 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:51:21,317 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:51:21,318 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:51:21,319 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:51:21,319 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:51:21,319 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:51:21,319 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:51:21,320 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:51:21,320 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:51:21,321 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:51:21,321 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:51:21,322 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:51:21,335 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:51:21,335 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:51:21,336 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:51:21,337 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:51:21,339 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:51:21,342 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:51:21,343 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:51:21,343 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:51:21,343 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:51:21,343 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:51:21,346 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:51:21,382 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:51:21,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:51:21,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:51:21,466 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:51:21,528 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:51:21,595 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:51:21,657 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:51:21,722 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:51:21,736 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:51:21,786 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:51:21,795 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:51:21,805 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:51:21,841 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:51:21,852 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:51:21,878 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:51:21,897 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:21,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:51:21,943 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:51:21,965 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:21,992 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:22,011 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:51:22,032 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:22,051 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:22,070 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:51:22,092 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:51:22,117 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:51:22,149 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:51:22,173 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:51:22,196 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:51:22,226 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:51:22,253 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:51:22,266 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:51:22,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:51:22,309 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:51:22,326 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:51:22,346 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:51:22,366 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:51:22,386 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:51:22,408 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:51:22,427 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:51:22,427 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:51:22,428 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:51:22,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:51:22,431 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:51:22,431 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:51:22,431 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:51:22,432 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:51:22,432 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:51:22,432 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:51:22,432 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:51:22,433 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:51:22,433 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:51:22,433 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:22,434 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 20:51:22,434 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:22,455 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:22,455 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:22,455 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:22,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:51:22,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:51:22,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:51:22,486 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:51:22,491 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:51:22,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:51:22,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:51:22,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:51:22,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:51:22,496 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:51:22,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:51:22,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:51:22,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:51:22,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:51:22,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:51:22,507 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:51:22,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:51:22,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:51:22,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:51:22,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:51:22,515 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:51:22,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:51:22,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:51:22,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:51:22,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:51:22,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:51:22,523 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:51:22,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:51:22,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:51:22,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:51:22,529 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:51:22,530 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:22,530 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 20:51:22,531 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:22,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:51:22.594, foo, 2016-07-05 20:51:22.594, foo, 0}
2016-07-05 20:51:22,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:51:22.596, foo, 2016-07-05 20:51:22.596, foo, 0}
2016-07-05 20:51:22,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:51:22.597, foo, 2016-07-05 20:51:22.597, foo, 0}
2016-07-05 20:51:22,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:51:22.597, foo, 2016-07-05 20:51:22.597, foo, 0}
2016-07-05 20:51:22,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:51:22.599, foo, 2016-07-05 20:51:22.599, foo, 0}
2016-07-05 20:51:22,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:51:22.599, foo, 2016-07-05 20:51:22.599, foo, 0}
2016-07-05 20:51:22,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:51:22.601, foo, 2016-07-05 20:51:22.601, foo, 0}
2016-07-05 20:51:22,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:51:22.602, foo, 2016-07-05 20:51:22.602, foo, 0}
2016-07-05 20:51:22,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:51:22.608, foo, 2016-07-05 20:51:22.608, foo, 0}
2016-07-05 20:51:22,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:51:22.61, foo, 2016-07-05 20:51:22.61, foo, 0}
2016-07-05 20:51:22,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:51:22.611, foo, 2016-07-05 20:51:22.611, foo, 0}
2016-07-05 20:51:22,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:51:22.612, foo, 2016-07-05 20:51:22.612, foo, 0}
2016-07-05 20:51:22,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:51:22.613, foo, 2016-07-05 20:51:22.613, foo, 0}
2016-07-05 20:51:22,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:51:22.614, foo, 2016-07-05 20:51:22.614, foo, 0}
2016-07-05 20:51:22,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:51:22.615, foo, 2016-07-05 20:51:22.615, foo, 0}
2016-07-05 20:51:22,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:51:22.616, foo, 2016-07-05 20:51:22.616, foo, 0}
2016-07-05 20:51:22,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:51:22.617, foo, 2016-07-05 20:51:22.617, foo, 0}
2016-07-05 20:51:22,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:51:22.618, foo, 2016-07-05 20:51:22.618, foo, 0}
2016-07-05 20:51:22,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:51:22.627, foo, 2016-07-05 20:51:22.627, foo, 0}
2016-07-05 20:51:22,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:51:22.628, foo, 2016-07-05 20:51:22.628, foo, 0}
2016-07-05 20:51:22,642 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:51:22,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:51:22.643, foo, 2016-07-05 20:51:22.643, foo, 0}
2016-07-05 20:51:22,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:51:22.646, foo, 2016-07-05 20:51:22.646, foo, 0}
2016-07-05 20:51:22,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:51:22.647, foo, 2016-07-05 20:51:22.647, foo, 0}
2016-07-05 20:51:22,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:51:22.648, foo, 2016-07-05 20:51:22.648, foo, 0}
2016-07-05 20:51:22,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:51:22.649, foo, 2016-07-05 20:51:22.649, foo, 0}
2016-07-05 20:51:22,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:51:22.65, foo, 2016-07-05 20:51:22.65, foo, 0}
2016-07-05 20:51:22,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:51:22.652, foo, 2016-07-05 20:51:22.652, foo, 0}
2016-07-05 20:51:22,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:51:22.652, foo, 2016-07-05 20:51:22.652, foo, 0}
2016-07-05 20:51:22,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:51:22.653, foo, 2016-07-05 20:51:22.653, foo, 0}
2016-07-05 20:51:22,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:51:22.654, foo, 2016-07-05 20:51:22.654, foo, 0}
2016-07-05 20:51:22,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:51:22.655, foo, 2016-07-05 20:51:22.655, foo, 0}
2016-07-05 20:51:22,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:51:22.656, foo, 2016-07-05 20:51:22.656, foo, 0}
2016-07-05 20:51:22,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:51:22.657, foo, 2016-07-05 20:51:22.657, foo, 0}
2016-07-05 20:51:22,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:51:22.658, foo, 2016-07-05 20:51:22.658, foo, 0}
2016-07-05 20:51:22,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:51:22.666, foo, 2016-07-05 20:51:22.666, foo, 0}
2016-07-05 20:51:22,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:51:22.667, foo, 2016-07-05 20:51:22.667, foo, 0}
2016-07-05 20:51:22,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:51:22.668, foo, 2016-07-05 20:51:22.668, foo, 0}
2016-07-05 20:51:22,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:51:22.669, foo, 2016-07-05 20:51:22.669, foo, 0}
2016-07-05 20:51:22,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:51:22.67, foo, 2016-07-05 20:51:22.67, foo, 0}
2016-07-05 20:51:22,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:51:22.672, foo, 2016-07-05 20:51:22.672, foo, 0}
2016-07-05 20:51:22,691 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:51:22,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:51:22,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:51:22,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:51:22,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:51:22,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:51:22,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:51:22,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:51:22,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:51:22,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:51:22,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:51:22,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:51:22,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:51:22,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:51:22,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:51:22,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:51:22,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:51:22,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:51:22,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:51:22,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:51:22,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:51:22,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:51:22,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:51:22,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:51:22,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:51:22,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:51:22,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:51:22,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:51:22,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:51:22,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:51:22,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:51:22,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:51:22,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:51:22,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:51:22,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:51:22,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:51:22,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:51:22,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:51:22,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:51:22,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:51:22,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:51:22,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:51:22,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:51:22,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:51:22,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:51:22,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:51:22,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:51:22,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:51:22,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:51:22,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:51:22,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:51:22,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:51:22,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:51:22,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:51:22,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:51:22,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:51:22,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:51:22,773 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:51:22,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 20:51:22.774, foo, 2016-07-05 20:51:22.774, foo, 0}
2016-07-05 20:51:22,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 20:51:22.776, foo, 2016-07-05 20:51:22.776, foo, 0}
2016-07-05 20:51:22,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 20:51:22.777, foo, 2016-07-05 20:51:22.777, foo, 0}
2016-07-05 20:51:22,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 20:51:22.778, foo, 2016-07-05 20:51:22.778, foo, 0}
2016-07-05 20:51:22,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 20:51:22.778, foo, 2016-07-05 20:51:22.778, foo, 0}
2016-07-05 20:51:22,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 20:51:22.779, foo, 2016-07-05 20:51:22.779, foo, 0}
2016-07-05 20:51:22,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 20:51:22.78, foo, 2016-07-05 20:51:22.78, foo, 0}
2016-07-05 20:51:22,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 20:51:22.781, foo, 2016-07-05 20:51:22.781, foo, 0}
2016-07-05 20:51:22,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 20:51:22.781, foo, 2016-07-05 20:51:22.781, foo, 0}
2016-07-05 20:51:22,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 20:51:22.782, foo, 2016-07-05 20:51:22.782, foo, 0}
2016-07-05 20:51:22,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 20:51:22.782, foo, 2016-07-05 20:51:22.782, foo, 0}
2016-07-05 20:51:22,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 20:51:22.783, foo, 2016-07-05 20:51:22.783, foo, 0}
2016-07-05 20:51:22,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 20:51:22.783, foo, 2016-07-05 20:51:22.783, foo, 0}
2016-07-05 20:51:22,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 20:51:22.784, foo, 2016-07-05 20:51:22.784, foo, 0}
2016-07-05 20:51:22,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 20:51:22.785, foo, 2016-07-05 20:51:22.785, foo, 0}
2016-07-05 20:51:22,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 20:51:22.786, foo, 2016-07-05 20:51:22.786, foo, 0}
2016-07-05 20:51:22,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 20:51:22.786, foo, 2016-07-05 20:51:22.786, foo, 0}
2016-07-05 20:51:22,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 20:51:22.787, foo, 2016-07-05 20:51:22.787, foo, 0}
2016-07-05 20:51:22,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 20:51:22.787, foo, 2016-07-05 20:51:22.787, foo, 0}
2016-07-05 20:51:22,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 20:51:22.788, foo, 2016-07-05 20:51:22.788, foo, 0}
2016-07-05 20:51:22,805 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:51:22,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 20:51:22.806, foo, 2016-07-05 20:51:22.806, foo, 0}
2016-07-05 20:51:22,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 20:51:22.808, foo, 2016-07-05 20:51:22.808, foo, 0}
2016-07-05 20:51:22,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 20:51:22.809, foo, 2016-07-05 20:51:22.809, foo, 0}
2016-07-05 20:51:22,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 20:51:22.809, foo, 2016-07-05 20:51:22.809, foo, 0}
2016-07-05 20:51:22,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 20:51:22.81, foo, 2016-07-05 20:51:22.81, foo, 0}
2016-07-05 20:51:22,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 20:51:22.81, foo, 2016-07-05 20:51:22.81, foo, 0}
2016-07-05 20:51:22,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 20:51:22.811, foo, 2016-07-05 20:51:22.811, foo, 0}
2016-07-05 20:51:22,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 20:51:22.811, foo, 2016-07-05 20:51:22.811, foo, 0}
2016-07-05 20:51:22,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 20:51:22.812, foo, 2016-07-05 20:51:22.812, foo, 0}
2016-07-05 20:51:22,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 20:51:22.812, foo, 2016-07-05 20:51:22.812, foo, 0}
2016-07-05 20:51:22,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 20:51:22.813, foo, 2016-07-05 20:51:22.813, foo, 0}
2016-07-05 20:51:22,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 20:51:22.813, foo, 2016-07-05 20:51:22.813, foo, 0}
2016-07-05 20:51:22,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 20:51:22.813, foo, 2016-07-05 20:51:22.813, foo, 0}
2016-07-05 20:51:22,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 20:51:22.814, foo, 2016-07-05 20:51:22.814, foo, 0}
2016-07-05 20:51:22,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 20:51:22.814, foo, 2016-07-05 20:51:22.815, foo, 0}
2016-07-05 20:51:22,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 20:51:22.815, foo, 2016-07-05 20:51:22.815, foo, 0}
2016-07-05 20:51:22,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 20:51:22.815, foo, 2016-07-05 20:51:22.815, foo, 0}
2016-07-05 20:51:22,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 20:51:22.816, foo, 2016-07-05 20:51:22.816, foo, 0}
2016-07-05 20:51:22,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 20:51:22.816, foo, 2016-07-05 20:51:22.816, foo, 0}
2016-07-05 20:51:22,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 20:51:22.817, foo, 2016-07-05 20:51:22.817, foo, 0}
2016-07-05 20:51:22,840 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:51:22,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:51:22.841, foo, 2016-07-05 20:51:22.841, foo}
2016-07-05 20:51:22,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:51:22.843, foo, 2016-07-05 20:51:22.843, foo}
2016-07-05 20:51:22,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:51:22.844, foo, 2016-07-05 20:51:22.844, foo}
2016-07-05 20:51:22,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:51:22.844, foo, 2016-07-05 20:51:22.844, foo}
2016-07-05 20:51:22,851 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:51:22,851 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:51:22,851 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 20:51:22,852 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:51:22,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:51:22.886, foo, 2016-07-05 20:51:22.886, foo, 0}
2016-07-05 20:51:22,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:51:22.887, foo, 2016-07-05 20:51:22.887, foo, 0}
2016-07-05 20:51:22,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:51:22.888, foo, 2016-07-05 20:51:22.888, foo, 0}
2016-07-05 20:51:22,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:51:22.894, foo, 2016-07-05 20:51:22.894, foo, 0}
2016-07-05 20:51:22,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:51:22.894, foo, 2016-07-05 20:51:22.894, foo, 0}
2016-07-05 20:51:22,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:51:22.895, foo, 2016-07-05 20:51:22.895, foo, 0}
2016-07-05 20:51:22,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:51:22.895, foo, 2016-07-05 20:51:22.895, foo, 0}
2016-07-05 20:51:22,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:51:22.896, foo, 2016-07-05 20:51:22.896, foo, 0}
2016-07-05 20:51:22,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:51:22.896, foo, 2016-07-05 20:51:22.896, foo, 0}
2016-07-05 20:51:22,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:51:22.896, foo, 2016-07-05 20:51:22.896, foo, 0}
2016-07-05 20:51:22,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:51:22.897, foo, 2016-07-05 20:51:22.897, foo, 0}
2016-07-05 20:51:22,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:51:22.897, foo, 2016-07-05 20:51:22.897, foo, 0}
2016-07-05 20:51:22,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:51:22.898, foo, 2016-07-05 20:51:22.898, foo, 0}
2016-07-05 20:51:22,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:51:22.909, foo, 2016-07-05 20:51:22.909, foo, 0}
2016-07-05 20:51:22,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:51:22.91, foo, 2016-07-05 20:51:22.91, foo, 0}
2016-07-05 20:51:22,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:51:22.91, foo, 2016-07-05 20:51:22.91, foo, 0}
2016-07-05 20:51:22,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:51:22.911, foo, 2016-07-05 20:51:22.911, foo, 0}
2016-07-05 20:51:22,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:51:22.911, foo, 2016-07-05 20:51:22.911, foo, 0}
2016-07-05 20:51:22,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:51:22.912, foo, 2016-07-05 20:51:22.912, foo, 0}
2016-07-05 20:51:22,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:51:22.912, foo, 2016-07-05 20:51:22.912, foo, 0}
2016-07-05 20:51:22,930 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:51:22,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:51:22.931, foo, 2016-07-05 20:51:22.931, foo, 0}
2016-07-05 20:51:22,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:51:22.935, foo, 2016-07-05 20:51:22.935, foo, 0}
2016-07-05 20:51:22,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:51:22.936, foo, 2016-07-05 20:51:22.936, foo, 0}
2016-07-05 20:51:22,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:51:22.937, foo, 2016-07-05 20:51:22.937, foo, 0}
2016-07-05 20:51:22,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:51:22.938, foo, 2016-07-05 20:51:22.938, foo, 0}
2016-07-05 20:51:22,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:51:22.939, foo, 2016-07-05 20:51:22.939, foo, 0}
2016-07-05 20:51:22,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:51:22.94, foo, 2016-07-05 20:51:22.94, foo, 0}
2016-07-05 20:51:22,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:51:22.941, foo, 2016-07-05 20:51:22.941, foo, 0}
2016-07-05 20:51:22,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:51:22.942, foo, 2016-07-05 20:51:22.942, foo, 0}
2016-07-05 20:51:22,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:51:22.956, foo, 2016-07-05 20:51:22.956, foo, 0}
2016-07-05 20:51:22,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:51:22.957, foo, 2016-07-05 20:51:22.957, foo, 0}
2016-07-05 20:51:22,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:51:22.957, foo, 2016-07-05 20:51:22.957, foo, 0}
2016-07-05 20:51:22,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:51:22.958, foo, 2016-07-05 20:51:22.958, foo, 0}
2016-07-05 20:51:22,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:51:22.959, foo, 2016-07-05 20:51:22.959, foo, 0}
2016-07-05 20:51:22,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:51:22.96, foo, 2016-07-05 20:51:22.96, foo, 0}
2016-07-05 20:51:22,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:51:22.961, foo, 2016-07-05 20:51:22.961, foo, 0}
2016-07-05 20:51:22,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:51:22.962, foo, 2016-07-05 20:51:22.962, foo, 0}
2016-07-05 20:51:22,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:51:22.983, foo, 2016-07-05 20:51:22.983, foo, 0}
2016-07-05 20:51:22,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:51:22.984, foo, 2016-07-05 20:51:22.984, foo, 0}
2016-07-05 20:51:22,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:51:22.984, foo, 2016-07-05 20:51:22.984, foo, 0}
2016-07-05 20:51:22,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:51:22.985, foo, 2016-07-05 20:51:22.985, foo, 0}
2016-07-05 20:51:22,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:51:22.986, foo, 2016-07-05 20:51:22.986, foo, 0}
2016-07-05 20:51:22,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:51:22.987, foo, 2016-07-05 20:51:22.987, foo, 0}
2016-07-05 20:51:22,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:51:22.988, foo, 2016-07-05 20:51:22.988, foo, 0}
2016-07-05 20:51:22,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:51:22.989, foo, 2016-07-05 20:51:22.989, foo, 0}
2016-07-05 20:51:22,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:51:22.99, foo, 2016-07-05 20:51:22.99, foo, 0}
2016-07-05 20:51:22,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:51:22.99, foo, 2016-07-05 20:51:22.99, foo, 0}
2016-07-05 20:51:22,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:51:22.991, foo, 2016-07-05 20:51:22.991, foo, 0}
2016-07-05 20:51:22,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:51:22.999, foo, 2016-07-05 20:51:22.999, foo, 0}
2016-07-05 20:51:23,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:51:23.0, foo, 2016-07-05 20:51:23.0, foo, 0}
2016-07-05 20:51:23,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:51:23.0, foo, 2016-07-05 20:51:23.0, foo, 0}
2016-07-05 20:51:23,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:51:23.001, foo, 2016-07-05 20:51:23.001, foo, 0}
2016-07-05 20:51:23,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:23.002, foo, 2016-07-05 20:51:23.002, foo, 0}
2016-07-05 20:51:23,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:23.002, foo, 2016-07-05 20:51:23.002, foo, 0}
2016-07-05 20:51:23,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:51:23.003, foo, 2016-07-05 20:51:23.003, foo, 0}
2016-07-05 20:51:23,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:23.003, foo, 2016-07-05 20:51:23.003, foo, 0}
2016-07-05 20:51:23,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:51:23.004, foo, 2016-07-05 20:51:23.004, foo, 0}
2016-07-05 20:51:23,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:51:23.005, foo, 2016-07-05 20:51:23.005, foo, 0}
2016-07-05 20:51:23,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:51:23.006, foo, 2016-07-05 20:51:23.006, foo, 0}
2016-07-05 20:51:23,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:51:23.007, foo, 2016-07-05 20:51:23.007, foo, 0}
2016-07-05 20:51:23,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:51:23.008, foo, 2016-07-05 20:51:23.008, foo, 0}
2016-07-05 20:51:23,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:51:23.009, foo, 2016-07-05 20:51:23.009, foo, 0}
2016-07-05 20:51:23,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:51:23.009, foo, 2016-07-05 20:51:23.009, foo, 0}
2016-07-05 20:51:23,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:23.01, foo, 2016-07-05 20:51:23.01, foo, 0}
2016-07-05 20:51:23,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:23.012, foo, 2016-07-05 20:51:23.012, foo, 0}
2016-07-05 20:51:23,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:51:23.013, foo, 2016-07-05 20:51:23.013, foo, 0}
2016-07-05 20:51:23,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:23.014, foo, 2016-07-05 20:51:23.014, foo, 0}
2016-07-05 20:51:23,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:51:23.014, foo, 2016-07-05 20:51:23.014, foo, 0}
2016-07-05 20:51:23,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:51:23.015, foo, 2016-07-05 20:51:23.015, foo, 0}
2016-07-05 20:51:23,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:51:23.016, foo, 2016-07-05 20:51:23.016, foo, 0}
2016-07-05 20:51:23,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:51:23.017, foo, 2016-07-05 20:51:23.017, foo, 0}
2016-07-05 20:51:23,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:51:23.017, foo, 2016-07-05 20:51:23.017, foo, 0}
2016-07-05 20:51:23,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:51:23.018, foo, 2016-07-05 20:51:23.018, foo, 0}
2016-07-05 20:51:23,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:51:23.019, foo, 2016-07-05 20:51:23.019, foo, 0}
2016-07-05 20:51:23,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:51:23.02, foo, 2016-07-05 20:51:23.02, foo, 0}
2016-07-05 20:51:23,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:51:23.021, foo, 2016-07-05 20:51:23.021, foo, 0}
2016-07-05 20:51:23,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:51:23.021, foo, 2016-07-05 20:51:23.021, foo, 0}
2016-07-05 20:51:23,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:51:23.022, foo, 2016-07-05 20:51:23.022, foo, 0}
2016-07-05 20:51:23,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:51:23.022, foo, 2016-07-05 20:51:23.022, foo, 0}
2016-07-05 20:51:23,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:51:23.033, foo, 2016-07-05 20:51:23.033, foo, 0}
2016-07-05 20:51:23,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:51:23.034, foo, 2016-07-05 20:51:23.034, foo, 0}
2016-07-05 20:51:23,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:51:23.035, foo, 2016-07-05 20:51:23.035, foo, 0}
2016-07-05 20:51:23,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:51:23.036, foo, 2016-07-05 20:51:23.036, foo, 0}
2016-07-05 20:51:23,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:51:23.036, foo, 2016-07-05 20:51:23.036, foo, 0}
2016-07-05 20:51:23,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:51:23.037, foo, 2016-07-05 20:51:23.037, foo, 0}
2016-07-05 20:51:23,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:51:23.038, foo, 2016-07-05 20:51:23.038, foo, 0}
2016-07-05 20:51:23,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:51:23.039, foo, 2016-07-05 20:51:23.039, foo, 0}
2016-07-05 20:51:23,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:51:23.04, foo, 2016-07-05 20:51:23.04, foo, 0}
2016-07-05 20:51:23,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:51:23.041, foo, 2016-07-05 20:51:23.041, foo, 0}
2016-07-05 20:51:23,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:51:23.042, foo, 2016-07-05 20:51:23.042, foo, 0}
2016-07-05 20:51:23,086 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:51:23,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:51:23.087, foo, 2016-07-05 20:51:23.087, foo}
2016-07-05 20:51:23,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:51:23.088, foo, 2016-07-05 20:51:23.088, foo}
2016-07-05 20:51:23,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:51:23.089, foo, 2016-07-05 20:51:23.089, foo}
2016-07-05 20:51:23,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:51:23.09, foo, 2016-07-05 20:51:23.09, foo}
2016-07-05 20:51:23,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:51:23.091, foo, 2016-07-05 20:51:23.091, foo}
2016-07-05 20:51:23,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:51:23.091, foo, 2016-07-05 20:51:23.091, foo}
2016-07-05 20:51:23,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:51:23.092, foo, 2016-07-05 20:51:23.092, foo}
2016-07-05 20:51:23,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:51:23.092, foo, 2016-07-05 20:51:23.092, foo}
2016-07-05 20:51:23,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:51:23.093, foo, 2016-07-05 20:51:23.093, foo}
2016-07-05 20:51:23,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:51:23.093, foo, 2016-07-05 20:51:23.093, foo}
2016-07-05 20:51:23,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:51:23.094, foo, 2016-07-05 20:51:23.094, foo}
2016-07-05 20:51:23,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:51:23.095, foo, 2016-07-05 20:51:23.095, foo}
2016-07-05 20:51:23,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:51:23.096, foo, 2016-07-05 20:51:23.096, foo}
2016-07-05 20:51:23,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:51:23.096, foo, 2016-07-05 20:51:23.096, foo}
2016-07-05 20:51:23,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:51:23.097, foo, 2016-07-05 20:51:23.097, foo}
2016-07-05 20:51:23,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:51:23.097, foo, 2016-07-05 20:51:23.097, foo}
2016-07-05 20:51:23,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:51:23.098, foo, 2016-07-05 20:51:23.098, foo}
2016-07-05 20:51:23,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:51:23.099, foo, 2016-07-05 20:51:23.099, foo}
2016-07-05 20:51:23,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:51:23.099, foo, 2016-07-05 20:51:23.099, foo}
2016-07-05 20:51:23,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:51:23.1, foo, 2016-07-05 20:51:23.1, foo}
2016-07-05 20:51:23,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:51:23.1, foo, 2016-07-05 20:51:23.1, foo}
2016-07-05 20:51:23,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:51:23.101, foo, 2016-07-05 20:51:23.101, foo}
2016-07-05 20:51:23,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:51:23.102, foo, 2016-07-05 20:51:23.102, foo}
2016-07-05 20:51:23,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:51:23.102, foo, 2016-07-05 20:51:23.102, foo}
2016-07-05 20:51:23,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:51:23.103, foo, 2016-07-05 20:51:23.103, foo}
2016-07-05 20:51:23,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:51:23.104, foo, 2016-07-05 20:51:23.104, foo}
2016-07-05 20:51:23,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:51:23.104, foo, 2016-07-05 20:51:23.104, foo}
2016-07-05 20:51:23,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:51:23.105, foo, 2016-07-05 20:51:23.105, foo}
2016-07-05 20:51:23,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:51:23.105, foo, 2016-07-05 20:51:23.106, foo}
2016-07-05 20:51:23,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:23.106, foo, 2016-07-05 20:51:23.106, foo}
2016-07-05 20:51:23,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:23.107, foo, 2016-07-05 20:51:23.107, foo}
2016-07-05 20:51:23,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:51:23.107, foo, 2016-07-05 20:51:23.107, foo}
2016-07-05 20:51:23,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:51:23.108, foo, 2016-07-05 20:51:23.108, foo}
2016-07-05 20:51:23,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:51:23.109, foo, 2016-07-05 20:51:23.109, foo}
2016-07-05 20:51:23,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:51:23.109, foo, 2016-07-05 20:51:23.109, foo}
2016-07-05 20:51:23,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:51:23.11, foo, 2016-07-05 20:51:23.11, foo}
2016-07-05 20:51:23,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:51:23.111, foo, 2016-07-05 20:51:23.111, foo}
2016-07-05 20:51:23,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:51:23.111, foo, 2016-07-05 20:51:23.111, foo}
2016-07-05 20:51:23,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:51:23.112, foo, 2016-07-05 20:51:23.112, foo}
2016-07-05 20:51:23,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:51:23.113, foo, 2016-07-05 20:51:23.113, foo}
2016-07-05 20:51:23,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:51:23.113, foo, 2016-07-05 20:51:23.113, foo}
2016-07-05 20:51:23,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:51:23.114, foo, 2016-07-05 20:51:23.114, foo}
2016-07-05 20:51:23,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:51:23.114, foo, 2016-07-05 20:51:23.114, foo}
2016-07-05 20:51:23,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:51:23.115, foo, 2016-07-05 20:51:23.115, foo}
2016-07-05 20:51:23,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:51:23.116, foo, 2016-07-05 20:51:23.116, foo}
2016-07-05 20:51:23,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:51:23.116, foo, 2016-07-05 20:51:23.116, foo}
2016-07-05 20:51:23,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:51:23.117, foo, 2016-07-05 20:51:23.117, foo}
2016-07-05 20:51:23,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:51:23.118, foo, 2016-07-05 20:51:23.118, foo}
2016-07-05 20:51:23,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:51:23.118, foo, 2016-07-05 20:51:23.118, foo}
2016-07-05 20:51:23,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:51:23.119, foo, 2016-07-05 20:51:23.119, foo}
2016-07-05 20:51:23,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:51:23.12, foo, 2016-07-05 20:51:23.12, foo}
2016-07-05 20:51:23,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:51:23.12, foo, 2016-07-05 20:51:23.12, foo}
2016-07-05 20:51:23,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:51:23.121, foo, 2016-07-05 20:51:23.121, foo}
2016-07-05 20:51:23,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:23.124, foo, 2016-07-05 20:51:23.124, foo}
2016-07-05 20:51:23,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:51:23.125, foo, 2016-07-05 20:51:23.125, foo}
2016-07-05 20:51:23,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:51:23.133, foo, 2016-07-05 20:51:23.133, foo}
2016-07-05 20:51:23,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:51:23.133, foo, 2016-07-05 20:51:23.133, foo}
2016-07-05 20:51:23,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:51:23.134, foo, 2016-07-05 20:51:23.134, foo}
2016-07-05 20:51:23,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:51:23.135, foo, 2016-07-05 20:51:23.135, foo}
2016-07-05 20:51:23,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:51:23.135, foo, 2016-07-05 20:51:23.135, foo}
2016-07-05 20:51:23,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:51:23.136, foo, 2016-07-05 20:51:23.136, foo}
2016-07-05 20:51:23,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:51:23.137, foo, 2016-07-05 20:51:23.137, foo}
2016-07-05 20:51:23,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:51:23.137, foo, 2016-07-05 20:51:23.137, foo}
2016-07-05 20:51:23,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:51:23.138, foo, 2016-07-05 20:51:23.138, foo}
2016-07-05 20:51:23,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:23.139, foo, 2016-07-05 20:51:23.139, foo}
2016-07-05 20:51:23,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:51:23.14, foo, 2016-07-05 20:51:23.14, foo}
2016-07-05 20:51:23,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:51:23.141, foo, 2016-07-05 20:51:23.141, foo}
2016-07-05 20:51:23,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:51:23.142, foo, 2016-07-05 20:51:23.142, foo}
2016-07-05 20:51:23,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:51:23.143, foo, 2016-07-05 20:51:23.143, foo}
2016-07-05 20:51:23,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:51:23.144, foo, 2016-07-05 20:51:23.144, foo}
2016-07-05 20:51:23,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:51:23.145, foo, 2016-07-05 20:51:23.145, foo}
2016-07-05 20:51:23,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:51:23.146, foo, 2016-07-05 20:51:23.146, foo}
2016-07-05 20:51:23,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:51:23.147, foo, 2016-07-05 20:51:23.147, foo}
2016-07-05 20:51:23,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:51:23.148, foo, 2016-07-05 20:51:23.148, foo}
2016-07-05 20:51:23,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:51:23.149, foo, 2016-07-05 20:51:23.149, foo}
2016-07-05 20:51:23,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:51:23.149, foo, 2016-07-05 20:51:23.149, foo}
2016-07-05 20:51:23,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:51:23.15, foo, 2016-07-05 20:51:23.15, foo}
2016-07-05 20:51:23,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:51:23.151, foo, 2016-07-05 20:51:23.151, foo}
2016-07-05 20:51:23,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:51:23.151, foo, 2016-07-05 20:51:23.151, foo}
2016-07-05 20:51:23,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:51:23.152, foo, 2016-07-05 20:51:23.152, foo}
2016-07-05 20:51:23,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:51:23.153, foo, 2016-07-05 20:51:23.153, foo}
2016-07-05 20:51:23,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:51:23.153, foo, 2016-07-05 20:51:23.153, foo}
2016-07-05 20:51:23,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:23.154, foo, 2016-07-05 20:51:23.154, foo}
2016-07-05 20:51:23,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:23.155, foo, 2016-07-05 20:51:23.155, foo}
2016-07-05 20:51:23,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:23.155, foo, 2016-07-05 20:51:23.155, foo}
2016-07-05 20:51:23,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:51:23.163, foo, 2016-07-05 20:51:23.163, foo}
2016-07-05 20:51:23,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:51:23.164, foo, 2016-07-05 20:51:23.164, foo}
2016-07-05 20:51:23,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:51:23.164, foo, 2016-07-05 20:51:23.165, foo}
2016-07-05 20:51:23,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:51:23.165, foo, 2016-07-05 20:51:23.165, foo}
2016-07-05 20:51:23,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:51:23.166, foo, 2016-07-05 20:51:23.166, foo}
2016-07-05 20:51:23,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:51:23.167, foo, 2016-07-05 20:51:23.167, foo}
2016-07-05 20:51:23,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:51:23.167, foo, 2016-07-05 20:51:23.167, foo}
2016-07-05 20:51:23,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:51:23.168, foo, 2016-07-05 20:51:23.168, foo}
2016-07-05 20:51:23,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:51:23.169, foo, 2016-07-05 20:51:23.169, foo}
2016-07-05 20:51:23,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:51:23.17, foo, 2016-07-05 20:51:23.17, foo}
2016-07-05 20:51:23,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:51:23.17, foo, 2016-07-05 20:51:23.17, foo}
2016-07-05 20:51:23,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:51:23.171, foo, 2016-07-05 20:51:23.171, foo}
2016-07-05 20:51:23,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:51:23.172, foo, 2016-07-05 20:51:23.172, foo}
2016-07-05 20:51:23,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:51:23.173, foo, 2016-07-05 20:51:23.173, foo}
2016-07-05 20:51:23,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:51:23.174, foo, 2016-07-05 20:51:23.174, foo}
2016-07-05 20:51:23,227 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:51:23,228 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:51:23,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:51:23,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:51:23,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:51:23,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:51:23,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:51:23,230 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:51:23,231 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:51:23,233 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:51:23,234 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:51:23,235 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:51:23,237 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:51:23,237 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:51:23,238 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:51:23,240 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 20:51:23,240 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 20:51:23,240 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 20:51:23,241 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 20:51:23,241 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 20:51:23,241 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 20:51:23,243 [main] INFO  (DfAlterCheckProcess#createEmptyAlterSqlFileIfNotExists():687) - ...Creating the alter SQL file as empty to playsql/migration/alter/alter-schema.sql
2016-07-05 20:51:23,246 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 20:51:23,247 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2016-07-05 20:51:23,247 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=0 failure=0 (in 1 files)
2016-07-05 20:51:23,248 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:51:23,249 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:51:23,249 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:51:23,249 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:51:23,249 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:51:23,250 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:51:23,250 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 20:51:23,250 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:51:23,251 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:51:23,251 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:51:23,251 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:51:23,252 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:51:23,252 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:51:23,252 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:51:23,255 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:51:23,257 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:51:23,270 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:51:23,271 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:51:23,271 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:51:23,271 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:51:23,284 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:51:23,294 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:51:23,303 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:51:23,314 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:51:23,323 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:51:23,331 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:51:23,339 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:51:23,350 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:51:23,358 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:51:23,367 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:51:23,378 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:51:23,400 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:51:23,410 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:51:23,418 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:51:23,425 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:51:23,426 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:51:23,426 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:51:23,426 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:51:23,426 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:51:23,427 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:51:23,427 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:51:23,427 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:51:23,427 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:51:23,437 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 20:51:23,438 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 20:51:23,438 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 20:51:23,438 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 20:51:23,438 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 20:51:23,438 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 20:51:23,464 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:51:23,593 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:51:23,673 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 20:51:23,673 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 20:51:23,673 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 20:51:23,674 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 20:51:23,674 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 20:51:23,674 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 20:51:23,675 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 20:51:23,678 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 20:51:23,680 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:51:23,680 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:51:23,726 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 20:51:23,727 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 20:51:23,737 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:51:23,978 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:51:23,989 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 20:51:23,991 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:51:23,993 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 20:51:24,061 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:51:24,090 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 20:51:23
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 20:51:24,098 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:51:24,100 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m09s052ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=0 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:52:03,696 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:52:03,702 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:52:03,702 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:52:03,707 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 20:52:03,708 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:52:03,708 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:52:03,712 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:52:05,522 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:52:05,523 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:52:05,523 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:52:05,524 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:52:05,531 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:52:05,956 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:52:05,957 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:52:05,968 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 20:52:05,978 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 20:52:05,983 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 20:52:05,984 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 20:52:05,984 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 20:52:05,984 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 20:52:05,985 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 20:52:05,996 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:52:05,996 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:52:05,997 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:52:05,997 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:52:05,997 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:52:05,998 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:52:06,017 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:06,017 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:06,018 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:06,050 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:52:06,056 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:52:06,061 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:52:06,065 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:52:06,077 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:52:06,092 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:52:06,112 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:52:06,131 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:52:06,148 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:52:06,173 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:52:06,188 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:52:06,213 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:52:06,231 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:52:06,249 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:52:06,263 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:52:06,279 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:52:06,301 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:52:06,318 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:52:06,341 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:52:06,362 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:52:06,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:52:06,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:52:06,424 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:52:06,428 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:52:06,431 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:52:06,434 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:52:06,438 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:52:06,443 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:52:06,448 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:52:06,452 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:52:06,455 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:52:06,459 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:52:06,462 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:52:06,465 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:52:06,468 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:52:06,472 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:52:06,476 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:52:06,535 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:52:06,538 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:52:06,540 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:52:06,541 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:52:06,541 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:52:06,541 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:52:06,542 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:52:06,542 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:52:06,546 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:52:06,550 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:52:06,551 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:52:06,553 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:52:06,568 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:52:06,569 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:52:06,571 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:52:06,572 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:52:06,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:52:06,580 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:52:06,580 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:52:06,581 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:52:06,581 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:52:06,581 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:52:06,589 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:52:06,612 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:52:06,627 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:52:06,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:52:06,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:52:06,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:52:06,901 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:52:06,964 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:52:06,974 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:52:07,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:52:07,092 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:52:07,103 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:52:07,114 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:52:07,156 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:52:07,198 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:52:07,209 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:52:07,225 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:52:07,266 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:52:07,290 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,313 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,333 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:52:07,352 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,370 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:52:07,414 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:07,434 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:52:07,456 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:52:07,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:52:07,504 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:52:07,525 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:52:07,552 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:52:07,566 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:52:07,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:52:07,596 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:52:07,616 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:52:07,637 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:52:07,656 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:52:07,679 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:52:07,696 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:52:07,717 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:52:07,717 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:52:07,719 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:52:07,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:52:07,722 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:52:07,722 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:52:07,722 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:52:07,847 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:52:07,848 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:52:07,848 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:52:07,848 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:52:07,848 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:52:07,849 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:52:07,870 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:07,870 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:52:07,871 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:08,125 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:08,125 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:08,126 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:08,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:52:08,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:52:08,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:52:08,278 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:52:08,286 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:52:08,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:52:08,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:52:08,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:52:08,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:52:08,297 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:52:08,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:52:08,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:52:08,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:52:08,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:52:08,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:52:08,308 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:52:08,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:52:08,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:52:08,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:52:08,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:52:08,320 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:52:08,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:52:08,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:52:08,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:52:08,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:52:08,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:52:08,330 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:52:08,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:52:08,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:52:08,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:52:08,336 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:52:08,339 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:08,339 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:52:08,339 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:08,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:52:08.431, foo, 2016-07-05 20:52:08.431, foo, 0}
2016-07-05 20:52:08,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:52:08.442, foo, 2016-07-05 20:52:08.442, foo, 0}
2016-07-05 20:52:08,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:52:08.445, foo, 2016-07-05 20:52:08.445, foo, 0}
2016-07-05 20:52:08,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:52:08.448, foo, 2016-07-05 20:52:08.448, foo, 0}
2016-07-05 20:52:08,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:52:08.451, foo, 2016-07-05 20:52:08.451, foo, 0}
2016-07-05 20:52:08,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:52:08.452, foo, 2016-07-05 20:52:08.452, foo, 0}
2016-07-05 20:52:08,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:52:08.455, foo, 2016-07-05 20:52:08.455, foo, 0}
2016-07-05 20:52:08,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:52:08.456, foo, 2016-07-05 20:52:08.456, foo, 0}
2016-07-05 20:52:08,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:52:08.458, foo, 2016-07-05 20:52:08.458, foo, 0}
2016-07-05 20:52:08,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:52:08.46, foo, 2016-07-05 20:52:08.46, foo, 0}
2016-07-05 20:52:08,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:52:08.466, foo, 2016-07-05 20:52:08.466, foo, 0}
2016-07-05 20:52:08,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:52:08.469, foo, 2016-07-05 20:52:08.469, foo, 0}
2016-07-05 20:52:08,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:52:08.471, foo, 2016-07-05 20:52:08.471, foo, 0}
2016-07-05 20:52:08,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:52:08.473, foo, 2016-07-05 20:52:08.473, foo, 0}
2016-07-05 20:52:08,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:52:08.476, foo, 2016-07-05 20:52:08.476, foo, 0}
2016-07-05 20:52:08,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:52:08.48, foo, 2016-07-05 20:52:08.48, foo, 0}
2016-07-05 20:52:08,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:52:08.486, foo, 2016-07-05 20:52:08.486, foo, 0}
2016-07-05 20:52:08,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:52:08.488, foo, 2016-07-05 20:52:08.488, foo, 0}
2016-07-05 20:52:08,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:52:08.49, foo, 2016-07-05 20:52:08.49, foo, 0}
2016-07-05 20:52:08,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:52:08.493, foo, 2016-07-05 20:52:08.493, foo, 0}
2016-07-05 20:52:08,521 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:52:08,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:52:08.523, foo, 2016-07-05 20:52:08.523, foo, 0}
2016-07-05 20:52:08,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:52:08.526, foo, 2016-07-05 20:52:08.526, foo, 0}
2016-07-05 20:52:08,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:52:08.529, foo, 2016-07-05 20:52:08.529, foo, 0}
2016-07-05 20:52:08,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:52:08.533, foo, 2016-07-05 20:52:08.533, foo, 0}
2016-07-05 20:52:08,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:52:08.535, foo, 2016-07-05 20:52:08.535, foo, 0}
2016-07-05 20:52:08,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:52:08.538, foo, 2016-07-05 20:52:08.538, foo, 0}
2016-07-05 20:52:08,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:52:08.54, foo, 2016-07-05 20:52:08.54, foo, 0}
2016-07-05 20:52:08,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:52:08.543, foo, 2016-07-05 20:52:08.543, foo, 0}
2016-07-05 20:52:08,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:52:08.546, foo, 2016-07-05 20:52:08.546, foo, 0}
2016-07-05 20:52:08,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:52:08.549, foo, 2016-07-05 20:52:08.549, foo, 0}
2016-07-05 20:52:08,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:52:08.552, foo, 2016-07-05 20:52:08.552, foo, 0}
2016-07-05 20:52:08,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:52:08.554, foo, 2016-07-05 20:52:08.554, foo, 0}
2016-07-05 20:52:08,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:52:08.557, foo, 2016-07-05 20:52:08.557, foo, 0}
2016-07-05 20:52:08,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:52:08.559, foo, 2016-07-05 20:52:08.559, foo, 0}
2016-07-05 20:52:08,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:52:08.561, foo, 2016-07-05 20:52:08.561, foo, 0}
2016-07-05 20:52:08,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:52:08.564, foo, 2016-07-05 20:52:08.564, foo, 0}
2016-07-05 20:52:08,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:52:08.567, foo, 2016-07-05 20:52:08.567, foo, 0}
2016-07-05 20:52:08,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:52:08.569, foo, 2016-07-05 20:52:08.569, foo, 0}
2016-07-05 20:52:08,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:52:08.571, foo, 2016-07-05 20:52:08.571, foo, 0}
2016-07-05 20:52:08,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:52:08.574, foo, 2016-07-05 20:52:08.574, foo, 0}
2016-07-05 20:52:08,599 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:52:08,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:52:08,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:52:08,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:52:08,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:52:08,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:52:08,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:52:08,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:52:08,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:52:08,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:52:08,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:52:08,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:52:08,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:52:08,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:52:08,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:52:08,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:52:08,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:52:08,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:52:08,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:52:08,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:52:08,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:52:08,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:52:08,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:52:08,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:52:08,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:52:08,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:52:08,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:52:08,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:52:08,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:52:08,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:52:08,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:52:08,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:52:08,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:52:08,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:52:08,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:52:08,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:52:08,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:52:08,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:52:08,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:52:08,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:52:08,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:52:08,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:52:08,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:52:08,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:52:08,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:52:08,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:52:08,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:52:08,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:52:08,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:52:08,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:52:08,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:52:08,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:52:08,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:52:08,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:52:08,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:52:08,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:52:08,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:52:08,700 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:52:08,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:52:08.701, foo, 2016-07-05 20:52:08.701, foo, 0}
2016-07-05 20:52:08,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:52:08.703, foo, 2016-07-05 20:52:08.703, foo, 0}
2016-07-05 20:52:08,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:52:08.704, foo, 2016-07-05 20:52:08.704, foo, 0}
2016-07-05 20:52:08,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:52:08.705, foo, 2016-07-05 20:52:08.705, foo, 0}
2016-07-05 20:52:08,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:52:08.706, foo, 2016-07-05 20:52:08.706, foo, 0}
2016-07-05 20:52:08,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:52:08.707, foo, 2016-07-05 20:52:08.707, foo, 0}
2016-07-05 20:52:08,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:52:08.708, foo, 2016-07-05 20:52:08.708, foo, 0}
2016-07-05 20:52:08,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:52:08.709, foo, 2016-07-05 20:52:08.709, foo, 0}
2016-07-05 20:52:08,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:52:08.71, foo, 2016-07-05 20:52:08.71, foo, 0}
2016-07-05 20:52:08,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:52:08.711, foo, 2016-07-05 20:52:08.711, foo, 0}
2016-07-05 20:52:08,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:52:08.713, foo, 2016-07-05 20:52:08.713, foo, 0}
2016-07-05 20:52:08,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:52:08.715, foo, 2016-07-05 20:52:08.715, foo, 0}
2016-07-05 20:52:08,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:52:08.716, foo, 2016-07-05 20:52:08.716, foo, 0}
2016-07-05 20:52:08,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:52:08.717, foo, 2016-07-05 20:52:08.717, foo, 0}
2016-07-05 20:52:08,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:52:08.718, foo, 2016-07-05 20:52:08.718, foo, 0}
2016-07-05 20:52:08,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:52:08.719, foo, 2016-07-05 20:52:08.719, foo, 0}
2016-07-05 20:52:08,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:52:08.72, foo, 2016-07-05 20:52:08.72, foo, 0}
2016-07-05 20:52:08,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:52:08.721, foo, 2016-07-05 20:52:08.721, foo, 0}
2016-07-05 20:52:08,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:52:08.721, foo, 2016-07-05 20:52:08.721, foo, 0}
2016-07-05 20:52:08,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:52:08.723, foo, 2016-07-05 20:52:08.723, foo, 0}
2016-07-05 20:52:08,764 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:52:08,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:52:08.766, foo, 2016-07-05 20:52:08.766, foo, 0}
2016-07-05 20:52:08,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:52:08.768, foo, 2016-07-05 20:52:08.768, foo, 0}
2016-07-05 20:52:08,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:52:08.769, foo, 2016-07-05 20:52:08.769, foo, 0}
2016-07-05 20:52:08,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:52:08.77, foo, 2016-07-05 20:52:08.77, foo, 0}
2016-07-05 20:52:08,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:52:08.771, foo, 2016-07-05 20:52:08.771, foo, 0}
2016-07-05 20:52:08,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:52:08.772, foo, 2016-07-05 20:52:08.772, foo, 0}
2016-07-05 20:52:08,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:52:08.773, foo, 2016-07-05 20:52:08.773, foo, 0}
2016-07-05 20:52:08,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:52:08.773, foo, 2016-07-05 20:52:08.773, foo, 0}
2016-07-05 20:52:08,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:52:08.774, foo, 2016-07-05 20:52:08.774, foo, 0}
2016-07-05 20:52:08,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:52:08.774, foo, 2016-07-05 20:52:08.774, foo, 0}
2016-07-05 20:52:08,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:52:08.778, foo, 2016-07-05 20:52:08.778, foo, 0}
2016-07-05 20:52:08,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:52:08.791, foo, 2016-07-05 20:52:08.791, foo, 0}
2016-07-05 20:52:08,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:52:08.792, foo, 2016-07-05 20:52:08.792, foo, 0}
2016-07-05 20:52:08,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:52:08.793, foo, 2016-07-05 20:52:08.793, foo, 0}
2016-07-05 20:52:08,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:52:08.794, foo, 2016-07-05 20:52:08.794, foo, 0}
2016-07-05 20:52:08,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:52:08.795, foo, 2016-07-05 20:52:08.795, foo, 0}
2016-07-05 20:52:08,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:52:08.796, foo, 2016-07-05 20:52:08.796, foo, 0}
2016-07-05 20:52:08,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:52:08.797, foo, 2016-07-05 20:52:08.797, foo, 0}
2016-07-05 20:52:08,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:52:08.798, foo, 2016-07-05 20:52:08.798, foo, 0}
2016-07-05 20:52:08,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:52:08.799, foo, 2016-07-05 20:52:08.799, foo, 0}
2016-07-05 20:52:08,846 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:52:08,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:52:08.848, foo, 2016-07-05 20:52:08.848, foo}
2016-07-05 20:52:08,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:52:08.85, foo, 2016-07-05 20:52:08.85, foo}
2016-07-05 20:52:08,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:52:08.851, foo, 2016-07-05 20:52:08.851, foo}
2016-07-05 20:52:08,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:52:08.852, foo, 2016-07-05 20:52:08.852, foo}
2016-07-05 20:52:08,872 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:52:08,872 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:08,873 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:52:08,873 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:08,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:52:08.945, foo, 2016-07-05 20:52:08.945, foo, 0}
2016-07-05 20:52:08,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:52:08.946, foo, 2016-07-05 20:52:08.946, foo, 0}
2016-07-05 20:52:08,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:52:08.947, foo, 2016-07-05 20:52:08.947, foo, 0}
2016-07-05 20:52:08,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:52:08.948, foo, 2016-07-05 20:52:08.948, foo, 0}
2016-07-05 20:52:08,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:52:08.949, foo, 2016-07-05 20:52:08.949, foo, 0}
2016-07-05 20:52:08,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:52:08.95, foo, 2016-07-05 20:52:08.95, foo, 0}
2016-07-05 20:52:08,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:52:08.95, foo, 2016-07-05 20:52:08.95, foo, 0}
2016-07-05 20:52:08,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:52:08.96, foo, 2016-07-05 20:52:08.96, foo, 0}
2016-07-05 20:52:08,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:52:08.961, foo, 2016-07-05 20:52:08.961, foo, 0}
2016-07-05 20:52:08,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:52:08.961, foo, 2016-07-05 20:52:08.961, foo, 0}
2016-07-05 20:52:08,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:52:08.962, foo, 2016-07-05 20:52:08.962, foo, 0}
2016-07-05 20:52:08,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:52:08.963, foo, 2016-07-05 20:52:08.963, foo, 0}
2016-07-05 20:52:08,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:52:08.963, foo, 2016-07-05 20:52:08.963, foo, 0}
2016-07-05 20:52:08,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:52:08.965, foo, 2016-07-05 20:52:08.965, foo, 0}
2016-07-05 20:52:08,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:52:08.971, foo, 2016-07-05 20:52:08.971, foo, 0}
2016-07-05 20:52:08,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:52:08.972, foo, 2016-07-05 20:52:08.972, foo, 0}
2016-07-05 20:52:08,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:52:08.973, foo, 2016-07-05 20:52:08.973, foo, 0}
2016-07-05 20:52:08,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:52:08.973, foo, 2016-07-05 20:52:08.973, foo, 0}
2016-07-05 20:52:08,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:52:08.974, foo, 2016-07-05 20:52:08.974, foo, 0}
2016-07-05 20:52:08,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:52:08.975, foo, 2016-07-05 20:52:08.975, foo, 0}
2016-07-05 20:52:09,009 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:52:09,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:52:09.01, foo, 2016-07-05 20:52:09.01, foo, 0}
2016-07-05 20:52:09,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:52:09.012, foo, 2016-07-05 20:52:09.012, foo, 0}
2016-07-05 20:52:09,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:52:09.013, foo, 2016-07-05 20:52:09.013, foo, 0}
2016-07-05 20:52:09,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:52:09.015, foo, 2016-07-05 20:52:09.015, foo, 0}
2016-07-05 20:52:09,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:52:09.016, foo, 2016-07-05 20:52:09.016, foo, 0}
2016-07-05 20:52:09,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:52:09.018, foo, 2016-07-05 20:52:09.018, foo, 0}
2016-07-05 20:52:09,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:52:09.019, foo, 2016-07-05 20:52:09.019, foo, 0}
2016-07-05 20:52:09,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:52:09.02, foo, 2016-07-05 20:52:09.02, foo, 0}
2016-07-05 20:52:09,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:52:09.021, foo, 2016-07-05 20:52:09.021, foo, 0}
2016-07-05 20:52:09,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:52:09.025, foo, 2016-07-05 20:52:09.025, foo, 0}
2016-07-05 20:52:09,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:52:09.027, foo, 2016-07-05 20:52:09.027, foo, 0}
2016-07-05 20:52:09,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:52:09.029, foo, 2016-07-05 20:52:09.029, foo, 0}
2016-07-05 20:52:09,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:52:09.03, foo, 2016-07-05 20:52:09.03, foo, 0}
2016-07-05 20:52:09,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:52:09.032, foo, 2016-07-05 20:52:09.032, foo, 0}
2016-07-05 20:52:09,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:52:09.033, foo, 2016-07-05 20:52:09.033, foo, 0}
2016-07-05 20:52:09,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:52:09.035, foo, 2016-07-05 20:52:09.035, foo, 0}
2016-07-05 20:52:09,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:52:09.036, foo, 2016-07-05 20:52:09.036, foo, 0}
2016-07-05 20:52:09,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:52:09.043, foo, 2016-07-05 20:52:09.043, foo, 0}
2016-07-05 20:52:09,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:52:09.044, foo, 2016-07-05 20:52:09.044, foo, 0}
2016-07-05 20:52:09,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:52:09.045, foo, 2016-07-05 20:52:09.045, foo, 0}
2016-07-05 20:52:09,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:52:09.046, foo, 2016-07-05 20:52:09.046, foo, 0}
2016-07-05 20:52:09,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:52:09.048, foo, 2016-07-05 20:52:09.048, foo, 0}
2016-07-05 20:52:09,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:52:09.048, foo, 2016-07-05 20:52:09.048, foo, 0}
2016-07-05 20:52:09,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:52:09.05, foo, 2016-07-05 20:52:09.05, foo, 0}
2016-07-05 20:52:09,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:52:09.051, foo, 2016-07-05 20:52:09.051, foo, 0}
2016-07-05 20:52:09,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:52:09.052, foo, 2016-07-05 20:52:09.052, foo, 0}
2016-07-05 20:52:09,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:52:09.053, foo, 2016-07-05 20:52:09.053, foo, 0}
2016-07-05 20:52:09,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:52:09.053, foo, 2016-07-05 20:52:09.053, foo, 0}
2016-07-05 20:52:09,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:52:09.054, foo, 2016-07-05 20:52:09.054, foo, 0}
2016-07-05 20:52:09,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:52:09.072, foo, 2016-07-05 20:52:09.072, foo, 0}
2016-07-05 20:52:09,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:52:09.073, foo, 2016-07-05 20:52:09.073, foo, 0}
2016-07-05 20:52:09,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:52:09.076, foo, 2016-07-05 20:52:09.076, foo, 0}
2016-07-05 20:52:09,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:09.077, foo, 2016-07-05 20:52:09.077, foo, 0}
2016-07-05 20:52:09,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:09.079, foo, 2016-07-05 20:52:09.079, foo, 0}
2016-07-05 20:52:09,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:52:09.081, foo, 2016-07-05 20:52:09.081, foo, 0}
2016-07-05 20:52:09,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:09.083, foo, 2016-07-05 20:52:09.083, foo, 0}
2016-07-05 20:52:09,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:52:09.084, foo, 2016-07-05 20:52:09.084, foo, 0}
2016-07-05 20:52:09,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:52:09.085, foo, 2016-07-05 20:52:09.085, foo, 0}
2016-07-05 20:52:09,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:52:09.087, foo, 2016-07-05 20:52:09.087, foo, 0}
2016-07-05 20:52:09,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:52:09.088, foo, 2016-07-05 20:52:09.088, foo, 0}
2016-07-05 20:52:09,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:52:09.089, foo, 2016-07-05 20:52:09.089, foo, 0}
2016-07-05 20:52:09,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:52:09.09, foo, 2016-07-05 20:52:09.09, foo, 0}
2016-07-05 20:52:09,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:52:09.091, foo, 2016-07-05 20:52:09.091, foo, 0}
2016-07-05 20:52:09,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:09.097, foo, 2016-07-05 20:52:09.097, foo, 0}
2016-07-05 20:52:09,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:09.098, foo, 2016-07-05 20:52:09.098, foo, 0}
2016-07-05 20:52:09,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:52:09.099, foo, 2016-07-05 20:52:09.099, foo, 0}
2016-07-05 20:52:09,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:09.1, foo, 2016-07-05 20:52:09.1, foo, 0}
2016-07-05 20:52:09,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:52:09.102, foo, 2016-07-05 20:52:09.102, foo, 0}
2016-07-05 20:52:09,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:52:09.103, foo, 2016-07-05 20:52:09.103, foo, 0}
2016-07-05 20:52:09,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:52:09.104, foo, 2016-07-05 20:52:09.104, foo, 0}
2016-07-05 20:52:09,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:52:09.105, foo, 2016-07-05 20:52:09.105, foo, 0}
2016-07-05 20:52:09,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:52:09.106, foo, 2016-07-05 20:52:09.106, foo, 0}
2016-07-05 20:52:09,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:52:09.107, foo, 2016-07-05 20:52:09.107, foo, 0}
2016-07-05 20:52:09,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:09.109, foo, 2016-07-05 20:52:09.109, foo, 0}
2016-07-05 20:52:09,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:09.111, foo, 2016-07-05 20:52:09.111, foo, 0}
2016-07-05 20:52:09,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:52:09.114, foo, 2016-07-05 20:52:09.114, foo, 0}
2016-07-05 20:52:09,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:09.116, foo, 2016-07-05 20:52:09.116, foo, 0}
2016-07-05 20:52:09,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:52:09.118, foo, 2016-07-05 20:52:09.118, foo, 0}
2016-07-05 20:52:09,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:52:09.12, foo, 2016-07-05 20:52:09.12, foo, 0}
2016-07-05 20:52:09,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:52:09.121, foo, 2016-07-05 20:52:09.121, foo, 0}
2016-07-05 20:52:09,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:52:09.122, foo, 2016-07-05 20:52:09.122, foo, 0}
2016-07-05 20:52:09,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:52:09.123, foo, 2016-07-05 20:52:09.123, foo, 0}
2016-07-05 20:52:09,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:52:09.124, foo, 2016-07-05 20:52:09.124, foo, 0}
2016-07-05 20:52:09,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:52:09.125, foo, 2016-07-05 20:52:09.125, foo, 0}
2016-07-05 20:52:09,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:52:09.129, foo, 2016-07-05 20:52:09.129, foo, 0}
2016-07-05 20:52:09,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:52:09.13, foo, 2016-07-05 20:52:09.131, foo, 0}
2016-07-05 20:52:09,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:52:09.132, foo, 2016-07-05 20:52:09.132, foo, 0}
2016-07-05 20:52:09,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:52:09.133, foo, 2016-07-05 20:52:09.133, foo, 0}
2016-07-05 20:52:09,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:52:09.134, foo, 2016-07-05 20:52:09.134, foo, 0}
2016-07-05 20:52:09,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:52:09.135, foo, 2016-07-05 20:52:09.135, foo, 0}
2016-07-05 20:52:09,196 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:52:09,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:52:09.197, foo, 2016-07-05 20:52:09.197, foo}
2016-07-05 20:52:09,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:52:09.199, foo, 2016-07-05 20:52:09.199, foo}
2016-07-05 20:52:09,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:52:09.2, foo, 2016-07-05 20:52:09.2, foo}
2016-07-05 20:52:09,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:52:09.201, foo, 2016-07-05 20:52:09.201, foo}
2016-07-05 20:52:09,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:52:09.202, foo, 2016-07-05 20:52:09.202, foo}
2016-07-05 20:52:09,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:52:09.203, foo, 2016-07-05 20:52:09.203, foo}
2016-07-05 20:52:09,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:52:09.206, foo, 2016-07-05 20:52:09.206, foo}
2016-07-05 20:52:09,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:52:09.207, foo, 2016-07-05 20:52:09.207, foo}
2016-07-05 20:52:09,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:52:09.208, foo, 2016-07-05 20:52:09.208, foo}
2016-07-05 20:52:09,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:52:09.209, foo, 2016-07-05 20:52:09.209, foo}
2016-07-05 20:52:09,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:52:09.21, foo, 2016-07-05 20:52:09.21, foo}
2016-07-05 20:52:09,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:52:09.211, foo, 2016-07-05 20:52:09.211, foo}
2016-07-05 20:52:09,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:52:09.213, foo, 2016-07-05 20:52:09.213, foo}
2016-07-05 20:52:09,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:52:09.214, foo, 2016-07-05 20:52:09.214, foo}
2016-07-05 20:52:09,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:52:09.215, foo, 2016-07-05 20:52:09.215, foo}
2016-07-05 20:52:09,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:52:09.217, foo, 2016-07-05 20:52:09.217, foo}
2016-07-05 20:52:09,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:52:09.218, foo, 2016-07-05 20:52:09.218, foo}
2016-07-05 20:52:09,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:52:09.219, foo, 2016-07-05 20:52:09.219, foo}
2016-07-05 20:52:09,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:52:09.22, foo, 2016-07-05 20:52:09.22, foo}
2016-07-05 20:52:09,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:52:09.221, foo, 2016-07-05 20:52:09.221, foo}
2016-07-05 20:52:09,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:52:09.221, foo, 2016-07-05 20:52:09.221, foo}
2016-07-05 20:52:09,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:52:09.222, foo, 2016-07-05 20:52:09.222, foo}
2016-07-05 20:52:09,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:52:09.224, foo, 2016-07-05 20:52:09.224, foo}
2016-07-05 20:52:09,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:52:09.23, foo, 2016-07-05 20:52:09.23, foo}
2016-07-05 20:52:09,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:52:09.231, foo, 2016-07-05 20:52:09.231, foo}
2016-07-05 20:52:09,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:52:09.232, foo, 2016-07-05 20:52:09.232, foo}
2016-07-05 20:52:09,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:52:09.234, foo, 2016-07-05 20:52:09.234, foo}
2016-07-05 20:52:09,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:52:09.235, foo, 2016-07-05 20:52:09.235, foo}
2016-07-05 20:52:09,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:52:09.236, foo, 2016-07-05 20:52:09.236, foo}
2016-07-05 20:52:09,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:09.237, foo, 2016-07-05 20:52:09.237, foo}
2016-07-05 20:52:09,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:09.239, foo, 2016-07-05 20:52:09.239, foo}
2016-07-05 20:52:09,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:09.24, foo, 2016-07-05 20:52:09.24, foo}
2016-07-05 20:52:09,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:52:09.241, foo, 2016-07-05 20:52:09.241, foo}
2016-07-05 20:52:09,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:52:09.242, foo, 2016-07-05 20:52:09.242, foo}
2016-07-05 20:52:09,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:52:09.243, foo, 2016-07-05 20:52:09.243, foo}
2016-07-05 20:52:09,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:52:09.244, foo, 2016-07-05 20:52:09.244, foo}
2016-07-05 20:52:09,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:52:09.246, foo, 2016-07-05 20:52:09.246, foo}
2016-07-05 20:52:09,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:52:09.247, foo, 2016-07-05 20:52:09.247, foo}
2016-07-05 20:52:09,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:52:09.248, foo, 2016-07-05 20:52:09.248, foo}
2016-07-05 20:52:09,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:52:09.25, foo, 2016-07-05 20:52:09.25, foo}
2016-07-05 20:52:09,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:52:09.251, foo, 2016-07-05 20:52:09.251, foo}
2016-07-05 20:52:09,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:52:09.252, foo, 2016-07-05 20:52:09.252, foo}
2016-07-05 20:52:09,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:52:09.253, foo, 2016-07-05 20:52:09.253, foo}
2016-07-05 20:52:09,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:52:09.254, foo, 2016-07-05 20:52:09.254, foo}
2016-07-05 20:52:09,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:52:09.254, foo, 2016-07-05 20:52:09.254, foo}
2016-07-05 20:52:09,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:52:09.255, foo, 2016-07-05 20:52:09.255, foo}
2016-07-05 20:52:09,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:52:09.256, foo, 2016-07-05 20:52:09.256, foo}
2016-07-05 20:52:09,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:52:09.262, foo, 2016-07-05 20:52:09.262, foo}
2016-07-05 20:52:09,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:52:09.263, foo, 2016-07-05 20:52:09.263, foo}
2016-07-05 20:52:09,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:52:09.264, foo, 2016-07-05 20:52:09.264, foo}
2016-07-05 20:52:09,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:52:09.264, foo, 2016-07-05 20:52:09.264, foo}
2016-07-05 20:52:09,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:52:09.265, foo, 2016-07-05 20:52:09.265, foo}
2016-07-05 20:52:09,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:52:09.266, foo, 2016-07-05 20:52:09.266, foo}
2016-07-05 20:52:09,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:09.267, foo, 2016-07-05 20:52:09.267, foo}
2016-07-05 20:52:09,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:52:09.268, foo, 2016-07-05 20:52:09.268, foo}
2016-07-05 20:52:09,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:52:09.269, foo, 2016-07-05 20:52:09.269, foo}
2016-07-05 20:52:09,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:52:09.27, foo, 2016-07-05 20:52:09.27, foo}
2016-07-05 20:52:09,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:52:09.271, foo, 2016-07-05 20:52:09.271, foo}
2016-07-05 20:52:09,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:52:09.272, foo, 2016-07-05 20:52:09.272, foo}
2016-07-05 20:52:09,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:52:09.273, foo, 2016-07-05 20:52:09.273, foo}
2016-07-05 20:52:09,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:52:09.274, foo, 2016-07-05 20:52:09.274, foo}
2016-07-05 20:52:09,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:52:09.275, foo, 2016-07-05 20:52:09.275, foo}
2016-07-05 20:52:09,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:52:09.276, foo, 2016-07-05 20:52:09.276, foo}
2016-07-05 20:52:09,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:52:09.277, foo, 2016-07-05 20:52:09.277, foo}
2016-07-05 20:52:09,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:09.278, foo, 2016-07-05 20:52:09.278, foo}
2016-07-05 20:52:09,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:52:09.279, foo, 2016-07-05 20:52:09.279, foo}
2016-07-05 20:52:09,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:52:09.281, foo, 2016-07-05 20:52:09.281, foo}
2016-07-05 20:52:09,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:52:09.282, foo, 2016-07-05 20:52:09.282, foo}
2016-07-05 20:52:09,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:52:09.283, foo, 2016-07-05 20:52:09.283, foo}
2016-07-05 20:52:09,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:52:09.284, foo, 2016-07-05 20:52:09.284, foo}
2016-07-05 20:52:09,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:52:09.285, foo, 2016-07-05 20:52:09.285, foo}
2016-07-05 20:52:09,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:52:09.286, foo, 2016-07-05 20:52:09.286, foo}
2016-07-05 20:52:09,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:52:09.287, foo, 2016-07-05 20:52:09.287, foo}
2016-07-05 20:52:09,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:52:09.287, foo, 2016-07-05 20:52:09.287, foo}
2016-07-05 20:52:09,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:52:09.288, foo, 2016-07-05 20:52:09.288, foo}
2016-07-05 20:52:09,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:52:09.288, foo, 2016-07-05 20:52:09.288, foo}
2016-07-05 20:52:09,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:52:09.289, foo, 2016-07-05 20:52:09.289, foo}
2016-07-05 20:52:09,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:52:09.29, foo, 2016-07-05 20:52:09.29, foo}
2016-07-05 20:52:09,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:52:09.296, foo, 2016-07-05 20:52:09.296, foo}
2016-07-05 20:52:09,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:52:09.296, foo, 2016-07-05 20:52:09.296, foo}
2016-07-05 20:52:09,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:52:09.297, foo, 2016-07-05 20:52:09.297, foo}
2016-07-05 20:52:09,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:52:09.298, foo, 2016-07-05 20:52:09.298, foo}
2016-07-05 20:52:09,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:09.299, foo, 2016-07-05 20:52:09.299, foo}
2016-07-05 20:52:09,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:09.3, foo, 2016-07-05 20:52:09.3, foo}
2016-07-05 20:52:09,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:09.3, foo, 2016-07-05 20:52:09.3, foo}
2016-07-05 20:52:09,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:09.301, foo, 2016-07-05 20:52:09.301, foo}
2016-07-05 20:52:09,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:52:09.302, foo, 2016-07-05 20:52:09.302, foo}
2016-07-05 20:52:09,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:09.303, foo, 2016-07-05 20:52:09.303, foo}
2016-07-05 20:52:09,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:52:09.303, foo, 2016-07-05 20:52:09.303, foo}
2016-07-05 20:52:09,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:52:09.304, foo, 2016-07-05 20:52:09.304, foo}
2016-07-05 20:52:09,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:52:09.305, foo, 2016-07-05 20:52:09.305, foo}
2016-07-05 20:52:09,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:52:09.306, foo, 2016-07-05 20:52:09.306, foo}
2016-07-05 20:52:09,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:52:09.308, foo, 2016-07-05 20:52:09.308, foo}
2016-07-05 20:52:09,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:52:09.309, foo, 2016-07-05 20:52:09.309, foo}
2016-07-05 20:52:09,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:52:09.311, foo, 2016-07-05 20:52:09.311, foo}
2016-07-05 20:52:09,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:52:09.315, foo, 2016-07-05 20:52:09.315, foo}
2016-07-05 20:52:09,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:52:09.318, foo, 2016-07-05 20:52:09.318, foo}
2016-07-05 20:52:09,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:52:09.319, foo, 2016-07-05 20:52:09.319, foo}
2016-07-05 20:52:09,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:52:09.32, foo, 2016-07-05 20:52:09.32, foo}
2016-07-05 20:52:09,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:52:09.321, foo, 2016-07-05 20:52:09.321, foo}
2016-07-05 20:52:09,386 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:52:09,387 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:52:09,405 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:09,414 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:52:09,420 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:52:09,425 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:52:09,428 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:52:09,431 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:52:09,434 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:52:09,442 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:52:09,445 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:52:09,449 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:52:09,452 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:52:09,453 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:52:09,459 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:52:09,459 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:52:09,459 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:52:09,460 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:52:09,461 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:52:09,461 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:52:09,466 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:52:09,467 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:52:09,470 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:52:09,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:52:09,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:52:09,474 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:52:09,474 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:52:09,516 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:52:09,517 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:52:09,540 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:52:09,540 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:52:09,541 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:09,541 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:09,541 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:09,553 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:52:09,556 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:52:09,568 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:52:09,569 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:52:09,569 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:52:09,569 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:52:09,593 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:52:09,618 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:52:09,631 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:52:09,643 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:52:09,664 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:52:09,672 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:52:09,685 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:52:09,700 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:52:09,708 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:52:09,716 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:52:09,728 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:52:09,738 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:52:09,744 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:52:09,754 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:52:09,763 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:52:09,763 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:52:09,763 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:52:09,763 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:52:09,764 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:52:09,765 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:52:09,766 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:52:09,766 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:52:09,767 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:52:09,802 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 20:52:09,802 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 20:52:09,802 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 20:52:09,802 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 20:52:09,803 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 20:52:09,803 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 20:52:09,806 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:52:09,806 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2035.zip
2016-07-05 20:52:09,828 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:52:09,830 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:52:09,830 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:52:09,831 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:52:09,832 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:52:09,833 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:52:09,837 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:52:09,838 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:52:09,838 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:52:09,840 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:52:09,840 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:52:09,841 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:52:09,841 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:52:09,842 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:52:09,843 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:52:09,844 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:52:09,845 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:52:09,845 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:52:09,846 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:52:09,846 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:52:09,846 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:52:09,847 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:09,847 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:09,848 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:09,860 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:52:09,866 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:52:09,870 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:52:09,875 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:52:09,882 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:52:09,892 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:52:09,898 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:52:09,919 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:52:09,936 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:52:09,957 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:52:09,975 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:52:09,988 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:52:10,006 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:52:10,025 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:52:10,038 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:52:10,056 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:52:10,076 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:52:10,096 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:52:10,116 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:52:10,138 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:52:10,155 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:52:10,176 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:52:10,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:52:10,206 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:52:10,208 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:52:10,212 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:52:10,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:52:10,218 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:52:10,221 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:52:10,224 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:52:10,227 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:52:10,230 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:52:10,234 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:52:10,238 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:52:10,241 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:52:10,243 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:52:10,246 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:52:10,262 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:52:10,264 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:52:10,267 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:52:10,267 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:52:10,268 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:52:10,268 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:52:10,268 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:52:10,269 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:52:10,269 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:52:10,271 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:52:10,271 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:52:10,271 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:52:10,280 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:52:10,281 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:52:10,281 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:52:10,282 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:52:10,284 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:52:10,286 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:52:10,286 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:52:10,286 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:52:10,287 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:52:10,287 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:52:10,290 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:52:10,308 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:52:10,319 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:52:10,329 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:52:10,339 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:52:10,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:52:10,405 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:52:10,416 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:52:10,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:52:10,478 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:52:10,489 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:52:10,498 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:52:10,507 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:52:10,535 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:52:10,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:52:10,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:52:10,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,601 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:52:10,622 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:52:10,643 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,680 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:52:10,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,741 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:52:10,761 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:10,784 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:52:10,817 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:52:10,842 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:52:10,863 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:52:10,888 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:52:10,912 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:52:10,926 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:52:10,946 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:52:10,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:52:10,989 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:52:11,007 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:52:11,027 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:52:11,046 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:52:11,067 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:52:11,089 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:52:11,089 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:52:11,090 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:52:11,091 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:52:11,092 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:52:11,093 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:52:11,093 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:52:11,093 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:52:11,094 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:52:11,094 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:52:11,094 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:52:11,094 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:52:11,094 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:52:11,095 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:11,095 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 20:52:11,096 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:11,118 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:11,118 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:11,118 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:11,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:52:11,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:52:11,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:52:11,142 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:52:11,146 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:52:11,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:52:11,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:52:11,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:52:11,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:52:11,151 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:52:11,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:52:11,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:52:11,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:52:11,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:52:11,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:52:11,160 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:52:11,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:52:11,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:52:11,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:52:11,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:52:11,170 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:52:11,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:52:11,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:52:11,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:52:11,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:52:11,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:52:11,177 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:52:11,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:52:11,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:52:11,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:52:11,183 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:52:11,185 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:11,185 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 20:52:11,186 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:11,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:52:11.227, foo, 2016-07-05 20:52:11.227, foo, 0}
2016-07-05 20:52:11,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:52:11.229, foo, 2016-07-05 20:52:11.229, foo, 0}
2016-07-05 20:52:11,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:52:11.23, foo, 2016-07-05 20:52:11.23, foo, 0}
2016-07-05 20:52:11,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:52:11.231, foo, 2016-07-05 20:52:11.231, foo, 0}
2016-07-05 20:52:11,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:52:11.232, foo, 2016-07-05 20:52:11.232, foo, 0}
2016-07-05 20:52:11,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:52:11.234, foo, 2016-07-05 20:52:11.234, foo, 0}
2016-07-05 20:52:11,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:52:11.236, foo, 2016-07-05 20:52:11.236, foo, 0}
2016-07-05 20:52:11,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:52:11.237, foo, 2016-07-05 20:52:11.237, foo, 0}
2016-07-05 20:52:11,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:52:11.239, foo, 2016-07-05 20:52:11.239, foo, 0}
2016-07-05 20:52:11,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:52:11.24, foo, 2016-07-05 20:52:11.24, foo, 0}
2016-07-05 20:52:11,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:52:11.241, foo, 2016-07-05 20:52:11.241, foo, 0}
2016-07-05 20:52:11,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:52:11.259, foo, 2016-07-05 20:52:11.259, foo, 0}
2016-07-05 20:52:11,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:52:11.26, foo, 2016-07-05 20:52:11.26, foo, 0}
2016-07-05 20:52:11,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:52:11.261, foo, 2016-07-05 20:52:11.261, foo, 0}
2016-07-05 20:52:11,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:52:11.262, foo, 2016-07-05 20:52:11.262, foo, 0}
2016-07-05 20:52:11,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:52:11.263, foo, 2016-07-05 20:52:11.263, foo, 0}
2016-07-05 20:52:11,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:52:11.264, foo, 2016-07-05 20:52:11.264, foo, 0}
2016-07-05 20:52:11,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:52:11.265, foo, 2016-07-05 20:52:11.265, foo, 0}
2016-07-05 20:52:11,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:52:11.266, foo, 2016-07-05 20:52:11.266, foo, 0}
2016-07-05 20:52:11,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:52:11.268, foo, 2016-07-05 20:52:11.268, foo, 0}
2016-07-05 20:52:11,285 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:52:11,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:52:11.286, foo, 2016-07-05 20:52:11.286, foo, 0}
2016-07-05 20:52:11,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:52:11.287, foo, 2016-07-05 20:52:11.287, foo, 0}
2016-07-05 20:52:11,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:52:11.293, foo, 2016-07-05 20:52:11.293, foo, 0}
2016-07-05 20:52:11,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:52:11.294, foo, 2016-07-05 20:52:11.294, foo, 0}
2016-07-05 20:52:11,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:52:11.295, foo, 2016-07-05 20:52:11.295, foo, 0}
2016-07-05 20:52:11,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:52:11.296, foo, 2016-07-05 20:52:11.296, foo, 0}
2016-07-05 20:52:11,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:52:11.297, foo, 2016-07-05 20:52:11.297, foo, 0}
2016-07-05 20:52:11,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:52:11.299, foo, 2016-07-05 20:52:11.299, foo, 0}
2016-07-05 20:52:11,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:52:11.3, foo, 2016-07-05 20:52:11.3, foo, 0}
2016-07-05 20:52:11,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:52:11.302, foo, 2016-07-05 20:52:11.302, foo, 0}
2016-07-05 20:52:11,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:52:11.316, foo, 2016-07-05 20:52:11.316, foo, 0}
2016-07-05 20:52:11,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:52:11.317, foo, 2016-07-05 20:52:11.317, foo, 0}
2016-07-05 20:52:11,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:52:11.318, foo, 2016-07-05 20:52:11.318, foo, 0}
2016-07-05 20:52:11,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:52:11.319, foo, 2016-07-05 20:52:11.32, foo, 0}
2016-07-05 20:52:11,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:52:11.321, foo, 2016-07-05 20:52:11.321, foo, 0}
2016-07-05 20:52:11,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:52:11.322, foo, 2016-07-05 20:52:11.322, foo, 0}
2016-07-05 20:52:11,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:52:11.323, foo, 2016-07-05 20:52:11.323, foo, 0}
2016-07-05 20:52:11,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:52:11.324, foo, 2016-07-05 20:52:11.324, foo, 0}
2016-07-05 20:52:11,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:52:11.325, foo, 2016-07-05 20:52:11.325, foo, 0}
2016-07-05 20:52:11,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:52:11.344, foo, 2016-07-05 20:52:11.344, foo, 0}
2016-07-05 20:52:11,363 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:52:11,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:52:11,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:52:11,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:52:11,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:52:11,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:52:11,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:52:11,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:52:11,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:52:11,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:52:11,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:52:11,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:52:11,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:52:11,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:52:11,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:52:11,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:52:11,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:52:11,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:52:11,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:52:11,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:52:11,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:52:11,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:52:11,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:52:11,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:52:11,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:52:11,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:52:11,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:52:11,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:52:11,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:52:11,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:52:11,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:52:11,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:52:11,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:52:11,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:52:11,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:52:11,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:52:11,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:52:11,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:52:11,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:52:11,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:52:11,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:52:11,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:52:11,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:52:11,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:52:11,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:52:11,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:52:11,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:52:11,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:52:11,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:52:11,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:52:11,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:52:11,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:52:11,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:52:11,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:52:11,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:52:11,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:52:11,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:52:11,450 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:52:11,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 20:52:11.451, foo, 2016-07-05 20:52:11.451, foo, 0}
2016-07-05 20:52:11,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 20:52:11.452, foo, 2016-07-05 20:52:11.452, foo, 0}
2016-07-05 20:52:11,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 20:52:11.453, foo, 2016-07-05 20:52:11.453, foo, 0}
2016-07-05 20:52:11,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 20:52:11.453, foo, 2016-07-05 20:52:11.453, foo, 0}
2016-07-05 20:52:11,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 20:52:11.453, foo, 2016-07-05 20:52:11.453, foo, 0}
2016-07-05 20:52:11,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 20:52:11.454, foo, 2016-07-05 20:52:11.454, foo, 0}
2016-07-05 20:52:11,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 20:52:11.454, foo, 2016-07-05 20:52:11.454, foo, 0}
2016-07-05 20:52:11,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 20:52:11.455, foo, 2016-07-05 20:52:11.455, foo, 0}
2016-07-05 20:52:11,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 20:52:11.455, foo, 2016-07-05 20:52:11.455, foo, 0}
2016-07-05 20:52:11,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 20:52:11.456, foo, 2016-07-05 20:52:11.456, foo, 0}
2016-07-05 20:52:11,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 20:52:11.456, foo, 2016-07-05 20:52:11.456, foo, 0}
2016-07-05 20:52:11,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 20:52:11.457, foo, 2016-07-05 20:52:11.457, foo, 0}
2016-07-05 20:52:11,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 20:52:11.457, foo, 2016-07-05 20:52:11.457, foo, 0}
2016-07-05 20:52:11,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 20:52:11.458, foo, 2016-07-05 20:52:11.458, foo, 0}
2016-07-05 20:52:11,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 20:52:11.458, foo, 2016-07-05 20:52:11.458, foo, 0}
2016-07-05 20:52:11,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 20:52:11.458, foo, 2016-07-05 20:52:11.458, foo, 0}
2016-07-05 20:52:11,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 20:52:11.459, foo, 2016-07-05 20:52:11.459, foo, 0}
2016-07-05 20:52:11,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 20:52:11.459, foo, 2016-07-05 20:52:11.459, foo, 0}
2016-07-05 20:52:11,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 20:52:11.46, foo, 2016-07-05 20:52:11.46, foo, 0}
2016-07-05 20:52:11,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 20:52:11.46, foo, 2016-07-05 20:52:11.46, foo, 0}
2016-07-05 20:52:11,471 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:52:11,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 20:52:11.472, foo, 2016-07-05 20:52:11.472, foo, 0}
2016-07-05 20:52:11,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 20:52:11.474, foo, 2016-07-05 20:52:11.474, foo, 0}
2016-07-05 20:52:11,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 20:52:11.475, foo, 2016-07-05 20:52:11.475, foo, 0}
2016-07-05 20:52:11,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 20:52:11.475, foo, 2016-07-05 20:52:11.475, foo, 0}
2016-07-05 20:52:11,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 20:52:11.476, foo, 2016-07-05 20:52:11.476, foo, 0}
2016-07-05 20:52:11,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 20:52:11.476, foo, 2016-07-05 20:52:11.476, foo, 0}
2016-07-05 20:52:11,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 20:52:11.477, foo, 2016-07-05 20:52:11.477, foo, 0}
2016-07-05 20:52:11,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 20:52:11.477, foo, 2016-07-05 20:52:11.477, foo, 0}
2016-07-05 20:52:11,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 20:52:11.478, foo, 2016-07-05 20:52:11.478, foo, 0}
2016-07-05 20:52:11,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 20:52:11.478, foo, 2016-07-05 20:52:11.478, foo, 0}
2016-07-05 20:52:11,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 20:52:11.479, foo, 2016-07-05 20:52:11.479, foo, 0}
2016-07-05 20:52:11,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 20:52:11.479, foo, 2016-07-05 20:52:11.479, foo, 0}
2016-07-05 20:52:11,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 20:52:11.48, foo, 2016-07-05 20:52:11.48, foo, 0}
2016-07-05 20:52:11,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 20:52:11.48, foo, 2016-07-05 20:52:11.48, foo, 0}
2016-07-05 20:52:11,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 20:52:11.481, foo, 2016-07-05 20:52:11.481, foo, 0}
2016-07-05 20:52:11,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 20:52:11.481, foo, 2016-07-05 20:52:11.481, foo, 0}
2016-07-05 20:52:11,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 20:52:11.482, foo, 2016-07-05 20:52:11.482, foo, 0}
2016-07-05 20:52:11,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 20:52:11.482, foo, 2016-07-05 20:52:11.482, foo, 0}
2016-07-05 20:52:11,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 20:52:11.483, foo, 2016-07-05 20:52:11.483, foo, 0}
2016-07-05 20:52:11,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 20:52:11.483, foo, 2016-07-05 20:52:11.483, foo, 0}
2016-07-05 20:52:11,502 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:52:11,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:52:11.502, foo, 2016-07-05 20:52:11.502, foo}
2016-07-05 20:52:11,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:52:11.504, foo, 2016-07-05 20:52:11.504, foo}
2016-07-05 20:52:11,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:52:11.504, foo, 2016-07-05 20:52:11.504, foo}
2016-07-05 20:52:11,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:52:11.505, foo, 2016-07-05 20:52:11.505, foo}
2016-07-05 20:52:11,534 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:52:11,535 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:52:11,535 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 20:52:11,535 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:52:11,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:52:11.559, foo, 2016-07-05 20:52:11.559, foo, 0}
2016-07-05 20:52:11,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:52:11.56, foo, 2016-07-05 20:52:11.56, foo, 0}
2016-07-05 20:52:11,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:52:11.56, foo, 2016-07-05 20:52:11.56, foo, 0}
2016-07-05 20:52:11,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:52:11.561, foo, 2016-07-05 20:52:11.561, foo, 0}
2016-07-05 20:52:11,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:52:11.561, foo, 2016-07-05 20:52:11.561, foo, 0}
2016-07-05 20:52:11,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:52:11.576, foo, 2016-07-05 20:52:11.576, foo, 0}
2016-07-05 20:52:11,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:52:11.577, foo, 2016-07-05 20:52:11.577, foo, 0}
2016-07-05 20:52:11,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:52:11.577, foo, 2016-07-05 20:52:11.577, foo, 0}
2016-07-05 20:52:11,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:52:11.578, foo, 2016-07-05 20:52:11.578, foo, 0}
2016-07-05 20:52:11,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:52:11.578, foo, 2016-07-05 20:52:11.578, foo, 0}
2016-07-05 20:52:11,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:52:11.579, foo, 2016-07-05 20:52:11.579, foo, 0}
2016-07-05 20:52:11,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:52:11.58, foo, 2016-07-05 20:52:11.58, foo, 0}
2016-07-05 20:52:11,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:52:11.58, foo, 2016-07-05 20:52:11.58, foo, 0}
2016-07-05 20:52:11,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:52:11.58, foo, 2016-07-05 20:52:11.58, foo, 0}
2016-07-05 20:52:11,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:52:11.581, foo, 2016-07-05 20:52:11.581, foo, 0}
2016-07-05 20:52:11,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:52:11.609, foo, 2016-07-05 20:52:11.609, foo, 0}
2016-07-05 20:52:11,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:52:11.609, foo, 2016-07-05 20:52:11.609, foo, 0}
2016-07-05 20:52:11,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:52:11.61, foo, 2016-07-05 20:52:11.61, foo, 0}
2016-07-05 20:52:11,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:52:11.61, foo, 2016-07-05 20:52:11.61, foo, 0}
2016-07-05 20:52:11,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:52:11.611, foo, 2016-07-05 20:52:11.611, foo, 0}
2016-07-05 20:52:11,628 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:52:11,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:52:11.63, foo, 2016-07-05 20:52:11.63, foo, 0}
2016-07-05 20:52:11,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:52:11.631, foo, 2016-07-05 20:52:11.631, foo, 0}
2016-07-05 20:52:11,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:52:11.632, foo, 2016-07-05 20:52:11.632, foo, 0}
2016-07-05 20:52:11,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:52:11.633, foo, 2016-07-05 20:52:11.633, foo, 0}
2016-07-05 20:52:11,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:52:11.634, foo, 2016-07-05 20:52:11.634, foo, 0}
2016-07-05 20:52:11,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:52:11.634, foo, 2016-07-05 20:52:11.634, foo, 0}
2016-07-05 20:52:11,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:52:11.635, foo, 2016-07-05 20:52:11.635, foo, 0}
2016-07-05 20:52:11,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:52:11.636, foo, 2016-07-05 20:52:11.636, foo, 0}
2016-07-05 20:52:11,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:52:11.636, foo, 2016-07-05 20:52:11.636, foo, 0}
2016-07-05 20:52:11,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:52:11.637, foo, 2016-07-05 20:52:11.637, foo, 0}
2016-07-05 20:52:11,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:52:11.638, foo, 2016-07-05 20:52:11.638, foo, 0}
2016-07-05 20:52:11,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:52:11.639, foo, 2016-07-05 20:52:11.639, foo, 0}
2016-07-05 20:52:11,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:52:11.661, foo, 2016-07-05 20:52:11.661, foo, 0}
2016-07-05 20:52:11,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:52:11.661, foo, 2016-07-05 20:52:11.661, foo, 0}
2016-07-05 20:52:11,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:52:11.662, foo, 2016-07-05 20:52:11.662, foo, 0}
2016-07-05 20:52:11,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:52:11.663, foo, 2016-07-05 20:52:11.663, foo, 0}
2016-07-05 20:52:11,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:52:11.664, foo, 2016-07-05 20:52:11.664, foo, 0}
2016-07-05 20:52:11,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:52:11.664, foo, 2016-07-05 20:52:11.664, foo, 0}
2016-07-05 20:52:11,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:52:11.665, foo, 2016-07-05 20:52:11.665, foo, 0}
2016-07-05 20:52:11,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:52:11.677, foo, 2016-07-05 20:52:11.677, foo, 0}
2016-07-05 20:52:11,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:52:11.677, foo, 2016-07-05 20:52:11.677, foo, 0}
2016-07-05 20:52:11,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:52:11.678, foo, 2016-07-05 20:52:11.678, foo, 0}
2016-07-05 20:52:11,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:52:11.678, foo, 2016-07-05 20:52:11.678, foo, 0}
2016-07-05 20:52:11,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:52:11.679, foo, 2016-07-05 20:52:11.679, foo, 0}
2016-07-05 20:52:11,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:52:11.68, foo, 2016-07-05 20:52:11.68, foo, 0}
2016-07-05 20:52:11,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:52:11.68, foo, 2016-07-05 20:52:11.68, foo, 0}
2016-07-05 20:52:11,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:52:11.681, foo, 2016-07-05 20:52:11.681, foo, 0}
2016-07-05 20:52:11,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:52:11.682, foo, 2016-07-05 20:52:11.682, foo, 0}
2016-07-05 20:52:11,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:52:11.683, foo, 2016-07-05 20:52:11.683, foo, 0}
2016-07-05 20:52:11,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:52:11.684, foo, 2016-07-05 20:52:11.685, foo, 0}
2016-07-05 20:52:11,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:52:11.686, foo, 2016-07-05 20:52:11.686, foo, 0}
2016-07-05 20:52:11,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:52:11.687, foo, 2016-07-05 20:52:11.687, foo, 0}
2016-07-05 20:52:11,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:11.688, foo, 2016-07-05 20:52:11.688, foo, 0}
2016-07-05 20:52:11,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:11.69, foo, 2016-07-05 20:52:11.69, foo, 0}
2016-07-05 20:52:11,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:52:11.691, foo, 2016-07-05 20:52:11.691, foo, 0}
2016-07-05 20:52:11,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:11.691, foo, 2016-07-05 20:52:11.691, foo, 0}
2016-07-05 20:52:11,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:52:11.695, foo, 2016-07-05 20:52:11.695, foo, 0}
2016-07-05 20:52:11,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:52:11.696, foo, 2016-07-05 20:52:11.696, foo, 0}
2016-07-05 20:52:11,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:52:11.699, foo, 2016-07-05 20:52:11.699, foo, 0}
2016-07-05 20:52:11,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:52:11.7, foo, 2016-07-05 20:52:11.7, foo, 0}
2016-07-05 20:52:11,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:52:11.7, foo, 2016-07-05 20:52:11.7, foo, 0}
2016-07-05 20:52:11,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:52:11.701, foo, 2016-07-05 20:52:11.701, foo, 0}
2016-07-05 20:52:11,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:52:11.702, foo, 2016-07-05 20:52:11.702, foo, 0}
2016-07-05 20:52:11,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:11.703, foo, 2016-07-05 20:52:11.703, foo, 0}
2016-07-05 20:52:11,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:11.704, foo, 2016-07-05 20:52:11.704, foo, 0}
2016-07-05 20:52:11,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:52:11.705, foo, 2016-07-05 20:52:11.705, foo, 0}
2016-07-05 20:52:11,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:11.706, foo, 2016-07-05 20:52:11.706, foo, 0}
2016-07-05 20:52:11,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:52:11.707, foo, 2016-07-05 20:52:11.707, foo, 0}
2016-07-05 20:52:11,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:52:11.708, foo, 2016-07-05 20:52:11.708, foo, 0}
2016-07-05 20:52:11,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:52:11.708, foo, 2016-07-05 20:52:11.708, foo, 0}
2016-07-05 20:52:11,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:52:11.709, foo, 2016-07-05 20:52:11.709, foo, 0}
2016-07-05 20:52:11,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:52:11.71, foo, 2016-07-05 20:52:11.71, foo, 0}
2016-07-05 20:52:11,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:52:11.71, foo, 2016-07-05 20:52:11.71, foo, 0}
2016-07-05 20:52:11,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:52:11.711, foo, 2016-07-05 20:52:11.711, foo, 0}
2016-07-05 20:52:11,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:52:11.712, foo, 2016-07-05 20:52:11.712, foo, 0}
2016-07-05 20:52:11,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:52:11.712, foo, 2016-07-05 20:52:11.712, foo, 0}
2016-07-05 20:52:11,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:52:11.713, foo, 2016-07-05 20:52:11.713, foo, 0}
2016-07-05 20:52:11,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:52:11.714, foo, 2016-07-05 20:52:11.714, foo, 0}
2016-07-05 20:52:11,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:52:11.714, foo, 2016-07-05 20:52:11.714, foo, 0}
2016-07-05 20:52:11,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:52:11.715, foo, 2016-07-05 20:52:11.715, foo, 0}
2016-07-05 20:52:11,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:52:11.716, foo, 2016-07-05 20:52:11.716, foo, 0}
2016-07-05 20:52:11,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:52:11.717, foo, 2016-07-05 20:52:11.717, foo, 0}
2016-07-05 20:52:11,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:52:11.718, foo, 2016-07-05 20:52:11.718, foo, 0}
2016-07-05 20:52:11,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:52:11.718, foo, 2016-07-05 20:52:11.718, foo, 0}
2016-07-05 20:52:11,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:52:11.719, foo, 2016-07-05 20:52:11.719, foo, 0}
2016-07-05 20:52:11,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:52:11.719, foo, 2016-07-05 20:52:11.719, foo, 0}
2016-07-05 20:52:11,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:52:11.72, foo, 2016-07-05 20:52:11.72, foo, 0}
2016-07-05 20:52:11,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:52:11.726, foo, 2016-07-05 20:52:11.726, foo, 0}
2016-07-05 20:52:11,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:52:11.727, foo, 2016-07-05 20:52:11.727, foo, 0}
2016-07-05 20:52:11,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:52:11.727, foo, 2016-07-05 20:52:11.727, foo, 0}
2016-07-05 20:52:11,779 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:52:11,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:52:11.78, foo, 2016-07-05 20:52:11.78, foo}
2016-07-05 20:52:11,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:52:11.781, foo, 2016-07-05 20:52:11.782, foo}
2016-07-05 20:52:11,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:52:11.782, foo, 2016-07-05 20:52:11.782, foo}
2016-07-05 20:52:11,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:52:11.783, foo, 2016-07-05 20:52:11.783, foo}
2016-07-05 20:52:11,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:52:11.784, foo, 2016-07-05 20:52:11.784, foo}
2016-07-05 20:52:11,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:52:11.784, foo, 2016-07-05 20:52:11.784, foo}
2016-07-05 20:52:11,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:52:11.785, foo, 2016-07-05 20:52:11.785, foo}
2016-07-05 20:52:11,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:52:11.786, foo, 2016-07-05 20:52:11.786, foo}
2016-07-05 20:52:11,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:52:11.786, foo, 2016-07-05 20:52:11.786, foo}
2016-07-05 20:52:11,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:52:11.787, foo, 2016-07-05 20:52:11.787, foo}
2016-07-05 20:52:11,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:52:11.787, foo, 2016-07-05 20:52:11.787, foo}
2016-07-05 20:52:11,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:52:11.788, foo, 2016-07-05 20:52:11.788, foo}
2016-07-05 20:52:11,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:52:11.789, foo, 2016-07-05 20:52:11.789, foo}
2016-07-05 20:52:11,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:52:11.789, foo, 2016-07-05 20:52:11.789, foo}
2016-07-05 20:52:11,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:52:11.79, foo, 2016-07-05 20:52:11.79, foo}
2016-07-05 20:52:11,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:52:11.791, foo, 2016-07-05 20:52:11.791, foo}
2016-07-05 20:52:11,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:52:11.791, foo, 2016-07-05 20:52:11.791, foo}
2016-07-05 20:52:11,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:52:11.792, foo, 2016-07-05 20:52:11.792, foo}
2016-07-05 20:52:11,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:52:11.792, foo, 2016-07-05 20:52:11.792, foo}
2016-07-05 20:52:11,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:52:11.793, foo, 2016-07-05 20:52:11.793, foo}
2016-07-05 20:52:11,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:52:11.794, foo, 2016-07-05 20:52:11.794, foo}
2016-07-05 20:52:11,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:52:11.794, foo, 2016-07-05 20:52:11.794, foo}
2016-07-05 20:52:11,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:52:11.795, foo, 2016-07-05 20:52:11.795, foo}
2016-07-05 20:52:11,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:52:11.796, foo, 2016-07-05 20:52:11.796, foo}
2016-07-05 20:52:11,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:52:11.796, foo, 2016-07-05 20:52:11.796, foo}
2016-07-05 20:52:11,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:52:11.797, foo, 2016-07-05 20:52:11.797, foo}
2016-07-05 20:52:11,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:52:11.798, foo, 2016-07-05 20:52:11.798, foo}
2016-07-05 20:52:11,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:52:11.798, foo, 2016-07-05 20:52:11.798, foo}
2016-07-05 20:52:11,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:52:11.799, foo, 2016-07-05 20:52:11.799, foo}
2016-07-05 20:52:11,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:11.8, foo, 2016-07-05 20:52:11.8, foo}
2016-07-05 20:52:11,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:11.8, foo, 2016-07-05 20:52:11.8, foo}
2016-07-05 20:52:11,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:52:11.801, foo, 2016-07-05 20:52:11.801, foo}
2016-07-05 20:52:11,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:52:11.802, foo, 2016-07-05 20:52:11.802, foo}
2016-07-05 20:52:11,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:52:11.803, foo, 2016-07-05 20:52:11.803, foo}
2016-07-05 20:52:11,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:52:11.803, foo, 2016-07-05 20:52:11.803, foo}
2016-07-05 20:52:11,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:52:11.804, foo, 2016-07-05 20:52:11.804, foo}
2016-07-05 20:52:11,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:52:11.805, foo, 2016-07-05 20:52:11.805, foo}
2016-07-05 20:52:11,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:52:11.805, foo, 2016-07-05 20:52:11.805, foo}
2016-07-05 20:52:11,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:52:11.806, foo, 2016-07-05 20:52:11.806, foo}
2016-07-05 20:52:11,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:52:11.806, foo, 2016-07-05 20:52:11.806, foo}
2016-07-05 20:52:11,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:52:11.807, foo, 2016-07-05 20:52:11.807, foo}
2016-07-05 20:52:11,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:52:11.808, foo, 2016-07-05 20:52:11.808, foo}
2016-07-05 20:52:11,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:52:11.808, foo, 2016-07-05 20:52:11.808, foo}
2016-07-05 20:52:11,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:52:11.809, foo, 2016-07-05 20:52:11.809, foo}
2016-07-05 20:52:11,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:52:11.809, foo, 2016-07-05 20:52:11.809, foo}
2016-07-05 20:52:11,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:52:11.81, foo, 2016-07-05 20:52:11.81, foo}
2016-07-05 20:52:11,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:52:11.811, foo, 2016-07-05 20:52:11.811, foo}
2016-07-05 20:52:11,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:52:11.811, foo, 2016-07-05 20:52:11.811, foo}
2016-07-05 20:52:11,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:52:11.812, foo, 2016-07-05 20:52:11.812, foo}
2016-07-05 20:52:11,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:52:11.812, foo, 2016-07-05 20:52:11.812, foo}
2016-07-05 20:52:11,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:52:11.813, foo, 2016-07-05 20:52:11.813, foo}
2016-07-05 20:52:11,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:52:11.814, foo, 2016-07-05 20:52:11.814, foo}
2016-07-05 20:52:11,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:52:11.818, foo, 2016-07-05 20:52:11.818, foo}
2016-07-05 20:52:11,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:11.819, foo, 2016-07-05 20:52:11.819, foo}
2016-07-05 20:52:11,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:52:11.819, foo, 2016-07-05 20:52:11.819, foo}
2016-07-05 20:52:11,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:52:11.82, foo, 2016-07-05 20:52:11.82, foo}
2016-07-05 20:52:11,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:52:11.821, foo, 2016-07-05 20:52:11.821, foo}
2016-07-05 20:52:11,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:52:11.821, foo, 2016-07-05 20:52:11.821, foo}
2016-07-05 20:52:11,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:52:11.822, foo, 2016-07-05 20:52:11.822, foo}
2016-07-05 20:52:11,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:52:11.822, foo, 2016-07-05 20:52:11.822, foo}
2016-07-05 20:52:11,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:52:11.823, foo, 2016-07-05 20:52:11.823, foo}
2016-07-05 20:52:11,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:52:11.824, foo, 2016-07-05 20:52:11.824, foo}
2016-07-05 20:52:11,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:52:11.83, foo, 2016-07-05 20:52:11.83, foo}
2016-07-05 20:52:11,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:52:11.831, foo, 2016-07-05 20:52:11.831, foo}
2016-07-05 20:52:11,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:11.832, foo, 2016-07-05 20:52:11.832, foo}
2016-07-05 20:52:11,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:52:11.833, foo, 2016-07-05 20:52:11.833, foo}
2016-07-05 20:52:11,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:52:11.833, foo, 2016-07-05 20:52:11.833, foo}
2016-07-05 20:52:11,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:52:11.834, foo, 2016-07-05 20:52:11.834, foo}
2016-07-05 20:52:11,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:52:11.835, foo, 2016-07-05 20:52:11.835, foo}
2016-07-05 20:52:11,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:52:11.836, foo, 2016-07-05 20:52:11.836, foo}
2016-07-05 20:52:11,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:52:11.837, foo, 2016-07-05 20:52:11.837, foo}
2016-07-05 20:52:11,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:52:11.838, foo, 2016-07-05 20:52:11.838, foo}
2016-07-05 20:52:11,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:52:11.839, foo, 2016-07-05 20:52:11.839, foo}
2016-07-05 20:52:11,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:52:11.84, foo, 2016-07-05 20:52:11.84, foo}
2016-07-05 20:52:11,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:52:11.841, foo, 2016-07-05 20:52:11.841, foo}
2016-07-05 20:52:11,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:52:11.841, foo, 2016-07-05 20:52:11.841, foo}
2016-07-05 20:52:11,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:52:11.842, foo, 2016-07-05 20:52:11.842, foo}
2016-07-05 20:52:11,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:52:11.843, foo, 2016-07-05 20:52:11.843, foo}
2016-07-05 20:52:11,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:52:11.843, foo, 2016-07-05 20:52:11.843, foo}
2016-07-05 20:52:11,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:52:11.844, foo, 2016-07-05 20:52:11.844, foo}
2016-07-05 20:52:11,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:52:11.845, foo, 2016-07-05 20:52:11.845, foo}
2016-07-05 20:52:11,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:52:11.845, foo, 2016-07-05 20:52:11.845, foo}
2016-07-05 20:52:11,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:11.846, foo, 2016-07-05 20:52:11.846, foo}
2016-07-05 20:52:11,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:11.846, foo, 2016-07-05 20:52:11.847, foo}
2016-07-05 20:52:11,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:11.847, foo, 2016-07-05 20:52:11.847, foo}
2016-07-05 20:52:11,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:52:11.848, foo, 2016-07-05 20:52:11.848, foo}
2016-07-05 20:52:11,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:52:11.849, foo, 2016-07-05 20:52:11.849, foo}
2016-07-05 20:52:11,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:52:11.849, foo, 2016-07-05 20:52:11.849, foo}
2016-07-05 20:52:11,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:52:11.85, foo, 2016-07-05 20:52:11.85, foo}
2016-07-05 20:52:11,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:52:11.851, foo, 2016-07-05 20:52:11.851, foo}
2016-07-05 20:52:11,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:52:11.851, foo, 2016-07-05 20:52:11.851, foo}
2016-07-05 20:52:11,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:52:11.852, foo, 2016-07-05 20:52:11.852, foo}
2016-07-05 20:52:11,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:52:11.852, foo, 2016-07-05 20:52:11.852, foo}
2016-07-05 20:52:11,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:52:11.853, foo, 2016-07-05 20:52:11.853, foo}
2016-07-05 20:52:11,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:52:11.861, foo, 2016-07-05 20:52:11.861, foo}
2016-07-05 20:52:11,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:52:11.862, foo, 2016-07-05 20:52:11.862, foo}
2016-07-05 20:52:11,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:52:11.863, foo, 2016-07-05 20:52:11.863, foo}
2016-07-05 20:52:11,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:52:11.864, foo, 2016-07-05 20:52:11.864, foo}
2016-07-05 20:52:11,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:52:11.864, foo, 2016-07-05 20:52:11.864, foo}
2016-07-05 20:52:11,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:52:11.866, foo, 2016-07-05 20:52:11.866, foo}
2016-07-05 20:52:11,919 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:52:11,920 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:52:11,920 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:52:11,920 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:52:11,921 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:52:11,921 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:52:11,921 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:52:11,921 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:52:11,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:52:11,924 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:52:11,926 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:52:11,927 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:52:11,928 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:52:11,928 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:52:11,929 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:52:11,931 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 20:52:11,931 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 20:52:11,932 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 20:52:11,932 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 20:52:11,932 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 20:52:11,932 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 20:52:11,935 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 20:52:11,936 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column
alter table MEMBER_SECURITY add REMINDER_USE_COUNT BIGINT NOT NULL after REMINDER_ANSWER
2016-07-05 20:52:11,983 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add identity column as primary key
alter table MEMBER_SERVICE add MEMBER_SERVICE_ID INTEGER NOT NULL
2016-07-05 20:52:12,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:52:12,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE drop primary key
2016-07-05 20:52:12,076 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update MEMBER_SERVICE set MEMBER_SERVICE_ID = MEMBER_ID
2016-07-05 20:52:12,077 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add primary key (MEMBER_SERVICE_ID)
2016-07-05 20:52:12,127 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:52:12,154 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE modify column MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL
2016-07-05 20:52:12,184 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE unique (MEMBER_ID)
2016-07-05 20:52:12,210 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=9 failure=0
2016-07-05 20:52:12,210 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=9 failure=0 (in 1 files)
2016-07-05 20:52:12,211 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:52:12,211 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:52:12,211 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:52:12,211 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:52:12,212 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:52:12,212 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:52:12,212 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 20:52:12,212 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:52:12,213 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:52:12,213 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:52:12,213 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:52:12,214 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:52:12,214 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:52:12,214 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:52:12,216 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:52:12,218 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:52:12,221 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:52:12,222 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:52:12,222 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:52:12,222 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:52:12,233 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:52:12,245 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:52:12,255 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:52:12,263 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:52:12,273 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:52:12,280 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:52:12,289 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:52:12,298 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:52:12,306 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:52:12,312 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:52:12,323 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:52:12,343 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:52:12,353 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:52:12,360 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:52:12,367 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:52:12,367 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:52:12,367 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:52:12,367 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:52:12,368 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:52:12,368 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:52:12,368 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:52:12,368 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:52:12,369 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:52:12,381 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck diffmap file: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 20:52:12,382 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck result file: playsql/migration/schema/alter-check-result.html
2016-07-05 20:52:12,382 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 20:52:12,382 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 20:52:12,383 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 20:52:12,383 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 20:52:12,406 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 20:52:12,408 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 20:52:12,427 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:52:12,521 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:52:12,602 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 20:52:12,602 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 20:52:12,602 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 20:52:12,602 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 20:52:12,603 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 20:52:12,603 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 20:52:12,604 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 20:52:12,608 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 20:52:12,610 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:52:12,611 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:52:12,651 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 20:52:12,652 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 20:52:12,659 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:52:12,857 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:52:12,862 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 20:52:12,864 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:52:12,866 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 20:52:12,954 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:52:12,969 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 20:52:12
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 20:52:12,975 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:52:12,977 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m09s304ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=9 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:54:04,510 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:54:04,515 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:54:04,515 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:54:04,520 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 20:54:04,520 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:54:04,521 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:54:04,522 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:54:05,602 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:54:05,602 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:54:05,603 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:54:05,603 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:54:05,614 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:54:06,027 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:54:06,027 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:54:06,038 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 20:54:06,049 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 20:54:06,051 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 20:54:06,051 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 20:54:06,052 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 20:54:06,052 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 20:54:06,052 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 20:54:06,064 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:54:06,065 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:54:06,066 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:54:06,066 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:54:06,066 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:54:06,067 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:54:06,083 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:06,084 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:06,085 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:06,114 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:54:06,120 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:54:06,125 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:54:06,130 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:54:06,141 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:54:06,155 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:54:06,176 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:54:06,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:54:06,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:54:06,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:54:06,252 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:54:06,265 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:54:06,286 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:54:06,301 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:54:06,326 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:54:06,342 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:54:06,366 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:54:06,382 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:54:06,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:54:06,426 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:54:06,444 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:54:06,464 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:54:06,489 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:54:06,494 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:54:06,497 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:54:06,502 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:54:06,506 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:54:06,509 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:54:06,513 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:54:06,517 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:54:06,521 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:54:06,524 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:54:06,527 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:54:06,531 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:54:06,535 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:54:06,538 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:54:06,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:54:06,601 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:54:06,603 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:54:06,606 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:54:06,607 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:54:06,607 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:54:06,607 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:54:06,608 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:54:06,608 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:54:06,613 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:54:06,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:54:06,619 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:54:06,620 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:54:06,634 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:54:06,635 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:54:06,638 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:54:06,639 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:54:06,641 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:54:06,646 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:54:06,647 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:54:06,648 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:54:06,648 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:54:06,649 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:54:06,655 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:54:06,678 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:54:06,715 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:54:06,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:54:06,834 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:54:06,902 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:54:06,962 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:54:07,031 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:54:07,090 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:54:07,102 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:54:07,153 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:54:07,166 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:54:07,177 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:54:07,207 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:54:07,245 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:54:07,257 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:54:07,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,312 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:54:07,332 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:54:07,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,403 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:54:07,424 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,442 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,461 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:54:07,486 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:07,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:54:07,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:54:07,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:54:07,594 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:54:07,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:54:07,642 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:54:07,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:54:07,679 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:54:07,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:54:07,718 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:54:07,737 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:54:07,759 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:54:07,778 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:54:07,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:54:07,818 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:54:07,819 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:54:07,821 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:54:07,823 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:54:07,826 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:54:07,826 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:54:07,827 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:54:07,965 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:54:07,966 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:54:07,966 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:54:07,966 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:54:07,967 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:54:07,967 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:54:07,989 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:07,990 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:54:07,990 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:08,259 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:08,260 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:08,260 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:08,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:54:08,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:54:08,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:54:08,411 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:54:08,417 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:54:08,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:54:08,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:54:08,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:54:08,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:54:08,429 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:54:08,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:54:08,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:54:08,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:54:08,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:54:08,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:54:08,439 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:54:08,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:54:08,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:54:08,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:54:08,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:54:08,448 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:54:08,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:54:08,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:54:08,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:54:08,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:54:08,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:54:08,459 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:54:08,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:54:08,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:54:08,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:54:08,468 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:54:08,472 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:08,473 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:54:08,473 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:08,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:54:08.572, foo, 2016-07-05 20:54:08.572, foo, 0}
2016-07-05 20:54:08,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:54:08.583, foo, 2016-07-05 20:54:08.583, foo, 0}
2016-07-05 20:54:08,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:54:08.585, foo, 2016-07-05 20:54:08.585, foo, 0}
2016-07-05 20:54:08,587 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:54:08.587, foo, 2016-07-05 20:54:08.587, foo, 0}
2016-07-05 20:54:08,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:54:08.589, foo, 2016-07-05 20:54:08.589, foo, 0}
2016-07-05 20:54:08,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:54:08.59, foo, 2016-07-05 20:54:08.59, foo, 0}
2016-07-05 20:54:08,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:54:08.593, foo, 2016-07-05 20:54:08.593, foo, 0}
2016-07-05 20:54:08,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:54:08.595, foo, 2016-07-05 20:54:08.595, foo, 0}
2016-07-05 20:54:08,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:54:08.599, foo, 2016-07-05 20:54:08.599, foo, 0}
2016-07-05 20:54:08,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:54:08.602, foo, 2016-07-05 20:54:08.602, foo, 0}
2016-07-05 20:54:08,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:54:08.604, foo, 2016-07-05 20:54:08.604, foo, 0}
2016-07-05 20:54:08,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:54:08.606, foo, 2016-07-05 20:54:08.606, foo, 0}
2016-07-05 20:54:08,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:54:08.608, foo, 2016-07-05 20:54:08.608, foo, 0}
2016-07-05 20:54:08,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:54:08.611, foo, 2016-07-05 20:54:08.611, foo, 0}
2016-07-05 20:54:08,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:54:08.613, foo, 2016-07-05 20:54:08.613, foo, 0}
2016-07-05 20:54:08,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:54:08.616, foo, 2016-07-05 20:54:08.616, foo, 0}
2016-07-05 20:54:08,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:54:08.617, foo, 2016-07-05 20:54:08.617, foo, 0}
2016-07-05 20:54:08,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:54:08.62, foo, 2016-07-05 20:54:08.62, foo, 0}
2016-07-05 20:54:08,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:54:08.623, foo, 2016-07-05 20:54:08.623, foo, 0}
2016-07-05 20:54:08,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:54:08.639, foo, 2016-07-05 20:54:08.639, foo, 0}
2016-07-05 20:54:08,670 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:54:08,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:54:08.671, foo, 2016-07-05 20:54:08.671, foo, 0}
2016-07-05 20:54:08,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:54:08.676, foo, 2016-07-05 20:54:08.676, foo, 0}
2016-07-05 20:54:08,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:54:08.677, foo, 2016-07-05 20:54:08.677, foo, 0}
2016-07-05 20:54:08,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:54:08.68, foo, 2016-07-05 20:54:08.68, foo, 0}
2016-07-05 20:54:08,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:54:08.682, foo, 2016-07-05 20:54:08.682, foo, 0}
2016-07-05 20:54:08,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:54:08.685, foo, 2016-07-05 20:54:08.685, foo, 0}
2016-07-05 20:54:08,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:54:08.688, foo, 2016-07-05 20:54:08.688, foo, 0}
2016-07-05 20:54:08,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:54:08.691, foo, 2016-07-05 20:54:08.691, foo, 0}
2016-07-05 20:54:08,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:54:08.693, foo, 2016-07-05 20:54:08.693, foo, 0}
2016-07-05 20:54:08,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:54:08.694, foo, 2016-07-05 20:54:08.694, foo, 0}
2016-07-05 20:54:08,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:54:08.696, foo, 2016-07-05 20:54:08.696, foo, 0}
2016-07-05 20:54:08,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:54:08.697, foo, 2016-07-05 20:54:08.697, foo, 0}
2016-07-05 20:54:08,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:54:08.699, foo, 2016-07-05 20:54:08.699, foo, 0}
2016-07-05 20:54:08,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:54:08.702, foo, 2016-07-05 20:54:08.702, foo, 0}
2016-07-05 20:54:08,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:54:08.704, foo, 2016-07-05 20:54:08.704, foo, 0}
2016-07-05 20:54:08,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:54:08.707, foo, 2016-07-05 20:54:08.707, foo, 0}
2016-07-05 20:54:08,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:54:08.709, foo, 2016-07-05 20:54:08.709, foo, 0}
2016-07-05 20:54:08,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:54:08.711, foo, 2016-07-05 20:54:08.711, foo, 0}
2016-07-05 20:54:08,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:54:08.713, foo, 2016-07-05 20:54:08.713, foo, 0}
2016-07-05 20:54:08,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:54:08.716, foo, 2016-07-05 20:54:08.716, foo, 0}
2016-07-05 20:54:08,738 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:54:08,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:54:08,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:54:08,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:54:08,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:54:08,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:54:08,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:54:08,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:54:08,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:54:08,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:54:08,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:54:08,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:54:08,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:54:08,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:54:08,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:54:08,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:54:08,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:54:08,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:54:08,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:54:08,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:54:08,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:54:08,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:54:08,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:54:08,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:54:08,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:54:08,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:54:08,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:54:08,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:54:08,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:54:08,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:54:08,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:54:08,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:54:08,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:54:08,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:54:08,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:54:08,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:54:08,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:54:08,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:54:08,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:54:08,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:54:08,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:54:08,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:54:08,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:54:08,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:54:08,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:54:08,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:54:08,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:54:08,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:54:08,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:54:08,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:54:08,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:54:08,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:54:08,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:54:08,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:54:08,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:54:08,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:54:08,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:54:08,843 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:54:08,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:54:08.844, foo, 2016-07-05 20:54:08.844, foo, 0}
2016-07-05 20:54:08,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:54:08.845, foo, 2016-07-05 20:54:08.845, foo, 0}
2016-07-05 20:54:08,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:54:08.846, foo, 2016-07-05 20:54:08.846, foo, 0}
2016-07-05 20:54:08,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:54:08.847, foo, 2016-07-05 20:54:08.847, foo, 0}
2016-07-05 20:54:08,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:54:08.848, foo, 2016-07-05 20:54:08.848, foo, 0}
2016-07-05 20:54:08,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:54:08.85, foo, 2016-07-05 20:54:08.85, foo, 0}
2016-07-05 20:54:08,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:54:08.851, foo, 2016-07-05 20:54:08.851, foo, 0}
2016-07-05 20:54:08,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:54:08.852, foo, 2016-07-05 20:54:08.852, foo, 0}
2016-07-05 20:54:08,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:54:08.853, foo, 2016-07-05 20:54:08.853, foo, 0}
2016-07-05 20:54:08,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:54:08.854, foo, 2016-07-05 20:54:08.855, foo, 0}
2016-07-05 20:54:08,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:54:08.856, foo, 2016-07-05 20:54:08.856, foo, 0}
2016-07-05 20:54:08,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:54:08.857, foo, 2016-07-05 20:54:08.857, foo, 0}
2016-07-05 20:54:08,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:54:08.858, foo, 2016-07-05 20:54:08.858, foo, 0}
2016-07-05 20:54:08,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:54:08.859, foo, 2016-07-05 20:54:08.859, foo, 0}
2016-07-05 20:54:08,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:54:08.86, foo, 2016-07-05 20:54:08.86, foo, 0}
2016-07-05 20:54:08,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:54:08.861, foo, 2016-07-05 20:54:08.861, foo, 0}
2016-07-05 20:54:08,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:54:08.861, foo, 2016-07-05 20:54:08.861, foo, 0}
2016-07-05 20:54:08,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:54:08.862, foo, 2016-07-05 20:54:08.862, foo, 0}
2016-07-05 20:54:08,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:54:08.865, foo, 2016-07-05 20:54:08.865, foo, 0}
2016-07-05 20:54:08,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:54:08.866, foo, 2016-07-05 20:54:08.866, foo, 0}
2016-07-05 20:54:08,890 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:54:08,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:54:08.891, foo, 2016-07-05 20:54:08.891, foo, 0}
2016-07-05 20:54:08,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:54:08.894, foo, 2016-07-05 20:54:08.894, foo, 0}
2016-07-05 20:54:08,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:54:08.895, foo, 2016-07-05 20:54:08.895, foo, 0}
2016-07-05 20:54:08,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:54:08.896, foo, 2016-07-05 20:54:08.896, foo, 0}
2016-07-05 20:54:08,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:54:08.897, foo, 2016-07-05 20:54:08.897, foo, 0}
2016-07-05 20:54:08,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:54:08.898, foo, 2016-07-05 20:54:08.898, foo, 0}
2016-07-05 20:54:08,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:54:08.9, foo, 2016-07-05 20:54:08.9, foo, 0}
2016-07-05 20:54:08,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:54:08.901, foo, 2016-07-05 20:54:08.901, foo, 0}
2016-07-05 20:54:08,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:54:08.902, foo, 2016-07-05 20:54:08.902, foo, 0}
2016-07-05 20:54:08,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:54:08.903, foo, 2016-07-05 20:54:08.903, foo, 0}
2016-07-05 20:54:08,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:54:08.903, foo, 2016-07-05 20:54:08.903, foo, 0}
2016-07-05 20:54:08,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:54:08.904, foo, 2016-07-05 20:54:08.904, foo, 0}
2016-07-05 20:54:08,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:54:08.906, foo, 2016-07-05 20:54:08.906, foo, 0}
2016-07-05 20:54:08,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:54:08.907, foo, 2016-07-05 20:54:08.907, foo, 0}
2016-07-05 20:54:08,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:54:08.933, foo, 2016-07-05 20:54:08.933, foo, 0}
2016-07-05 20:54:08,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:54:08.934, foo, 2016-07-05 20:54:08.934, foo, 0}
2016-07-05 20:54:08,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:54:08.935, foo, 2016-07-05 20:54:08.935, foo, 0}
2016-07-05 20:54:08,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:54:08.935, foo, 2016-07-05 20:54:08.935, foo, 0}
2016-07-05 20:54:08,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:54:08.936, foo, 2016-07-05 20:54:08.936, foo, 0}
2016-07-05 20:54:08,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:54:08.937, foo, 2016-07-05 20:54:08.937, foo, 0}
2016-07-05 20:54:08,958 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:54:08,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:54:08.959, foo, 2016-07-05 20:54:08.959, foo}
2016-07-05 20:54:08,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:54:08.961, foo, 2016-07-05 20:54:08.961, foo}
2016-07-05 20:54:08,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:54:08.973, foo, 2016-07-05 20:54:08.973, foo}
2016-07-05 20:54:08,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:54:08.975, foo, 2016-07-05 20:54:08.975, foo}
2016-07-05 20:54:08,987 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:54:08,988 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:08,989 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:54:08,989 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:09,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:54:09.045, foo, 2016-07-05 20:54:09.045, foo, 0}
2016-07-05 20:54:09,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:54:09.047, foo, 2016-07-05 20:54:09.047, foo, 0}
2016-07-05 20:54:09,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:54:09.048, foo, 2016-07-05 20:54:09.048, foo, 0}
2016-07-05 20:54:09,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:54:09.049, foo, 2016-07-05 20:54:09.049, foo, 0}
2016-07-05 20:54:09,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:54:09.05, foo, 2016-07-05 20:54:09.05, foo, 0}
2016-07-05 20:54:09,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:54:09.052, foo, 2016-07-05 20:54:09.052, foo, 0}
2016-07-05 20:54:09,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:54:09.053, foo, 2016-07-05 20:54:09.053, foo, 0}
2016-07-05 20:54:09,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:54:09.054, foo, 2016-07-05 20:54:09.054, foo, 0}
2016-07-05 20:54:09,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:54:09.054, foo, 2016-07-05 20:54:09.054, foo, 0}
2016-07-05 20:54:09,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:54:09.055, foo, 2016-07-05 20:54:09.055, foo, 0}
2016-07-05 20:54:09,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:54:09.056, foo, 2016-07-05 20:54:09.056, foo, 0}
2016-07-05 20:54:09,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:54:09.061, foo, 2016-07-05 20:54:09.061, foo, 0}
2016-07-05 20:54:09,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:54:09.062, foo, 2016-07-05 20:54:09.062, foo, 0}
2016-07-05 20:54:09,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:54:09.063, foo, 2016-07-05 20:54:09.063, foo, 0}
2016-07-05 20:54:09,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:54:09.063, foo, 2016-07-05 20:54:09.063, foo, 0}
2016-07-05 20:54:09,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:54:09.065, foo, 2016-07-05 20:54:09.065, foo, 0}
2016-07-05 20:54:09,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:54:09.066, foo, 2016-07-05 20:54:09.066, foo, 0}
2016-07-05 20:54:09,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:54:09.067, foo, 2016-07-05 20:54:09.067, foo, 0}
2016-07-05 20:54:09,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:54:09.068, foo, 2016-07-05 20:54:09.068, foo, 0}
2016-07-05 20:54:09,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:54:09.068, foo, 2016-07-05 20:54:09.068, foo, 0}
2016-07-05 20:54:09,104 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:54:09,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:54:09.105, foo, 2016-07-05 20:54:09.105, foo, 0}
2016-07-05 20:54:09,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:54:09.108, foo, 2016-07-05 20:54:09.108, foo, 0}
2016-07-05 20:54:09,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:54:09.109, foo, 2016-07-05 20:54:09.109, foo, 0}
2016-07-05 20:54:09,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:54:09.11, foo, 2016-07-05 20:54:09.11, foo, 0}
2016-07-05 20:54:09,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:54:09.111, foo, 2016-07-05 20:54:09.111, foo, 0}
2016-07-05 20:54:09,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:54:09.113, foo, 2016-07-05 20:54:09.113, foo, 0}
2016-07-05 20:54:09,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:54:09.114, foo, 2016-07-05 20:54:09.114, foo, 0}
2016-07-05 20:54:09,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:54:09.115, foo, 2016-07-05 20:54:09.115, foo, 0}
2016-07-05 20:54:09,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:54:09.116, foo, 2016-07-05 20:54:09.116, foo, 0}
2016-07-05 20:54:09,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:54:09.117, foo, 2016-07-05 20:54:09.117, foo, 0}
2016-07-05 20:54:09,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:54:09.118, foo, 2016-07-05 20:54:09.118, foo, 0}
2016-07-05 20:54:09,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:54:09.127, foo, 2016-07-05 20:54:09.127, foo, 0}
2016-07-05 20:54:09,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:54:09.128, foo, 2016-07-05 20:54:09.128, foo, 0}
2016-07-05 20:54:09,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:54:09.13, foo, 2016-07-05 20:54:09.13, foo, 0}
2016-07-05 20:54:09,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:54:09.131, foo, 2016-07-05 20:54:09.131, foo, 0}
2016-07-05 20:54:09,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:54:09.132, foo, 2016-07-05 20:54:09.132, foo, 0}
2016-07-05 20:54:09,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:54:09.134, foo, 2016-07-05 20:54:09.134, foo, 0}
2016-07-05 20:54:09,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:54:09.135, foo, 2016-07-05 20:54:09.135, foo, 0}
2016-07-05 20:54:09,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:54:09.137, foo, 2016-07-05 20:54:09.137, foo, 0}
2016-07-05 20:54:09,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:54:09.147, foo, 2016-07-05 20:54:09.147, foo, 0}
2016-07-05 20:54:09,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:54:09.148, foo, 2016-07-05 20:54:09.148, foo, 0}
2016-07-05 20:54:09,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:54:09.149, foo, 2016-07-05 20:54:09.149, foo, 0}
2016-07-05 20:54:09,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:54:09.151, foo, 2016-07-05 20:54:09.151, foo, 0}
2016-07-05 20:54:09,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:54:09.152, foo, 2016-07-05 20:54:09.152, foo, 0}
2016-07-05 20:54:09,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:54:09.154, foo, 2016-07-05 20:54:09.154, foo, 0}
2016-07-05 20:54:09,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:54:09.156, foo, 2016-07-05 20:54:09.156, foo, 0}
2016-07-05 20:54:09,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:54:09.158, foo, 2016-07-05 20:54:09.158, foo, 0}
2016-07-05 20:54:09,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:54:09.159, foo, 2016-07-05 20:54:09.159, foo, 0}
2016-07-05 20:54:09,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:54:09.16, foo, 2016-07-05 20:54:09.16, foo, 0}
2016-07-05 20:54:09,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:54:09.162, foo, 2016-07-05 20:54:09.162, foo, 0}
2016-07-05 20:54:09,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:54:09.163, foo, 2016-07-05 20:54:09.163, foo, 0}
2016-07-05 20:54:09,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:54:09.164, foo, 2016-07-05 20:54:09.164, foo, 0}
2016-07-05 20:54:09,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:09.165, foo, 2016-07-05 20:54:09.165, foo, 0}
2016-07-05 20:54:09,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:09.166, foo, 2016-07-05 20:54:09.166, foo, 0}
2016-07-05 20:54:09,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:54:09.169, foo, 2016-07-05 20:54:09.169, foo, 0}
2016-07-05 20:54:09,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:09.17, foo, 2016-07-05 20:54:09.17, foo, 0}
2016-07-05 20:54:09,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:54:09.171, foo, 2016-07-05 20:54:09.171, foo, 0}
2016-07-05 20:54:09,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:54:09.175, foo, 2016-07-05 20:54:09.175, foo, 0}
2016-07-05 20:54:09,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:54:09.176, foo, 2016-07-05 20:54:09.176, foo, 0}
2016-07-05 20:54:09,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:54:09.177, foo, 2016-07-05 20:54:09.177, foo, 0}
2016-07-05 20:54:09,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:54:09.178, foo, 2016-07-05 20:54:09.178, foo, 0}
2016-07-05 20:54:09,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:54:09.18, foo, 2016-07-05 20:54:09.18, foo, 0}
2016-07-05 20:54:09,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:54:09.184, foo, 2016-07-05 20:54:09.184, foo, 0}
2016-07-05 20:54:09,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:09.186, foo, 2016-07-05 20:54:09.186, foo, 0}
2016-07-05 20:54:09,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:09.188, foo, 2016-07-05 20:54:09.188, foo, 0}
2016-07-05 20:54:09,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:54:09.189, foo, 2016-07-05 20:54:09.189, foo, 0}
2016-07-05 20:54:09,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:09.191, foo, 2016-07-05 20:54:09.191, foo, 0}
2016-07-05 20:54:09,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:54:09.192, foo, 2016-07-05 20:54:09.192, foo, 0}
2016-07-05 20:54:09,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:54:09.193, foo, 2016-07-05 20:54:09.193, foo, 0}
2016-07-05 20:54:09,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:54:09.195, foo, 2016-07-05 20:54:09.195, foo, 0}
2016-07-05 20:54:09,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:54:09.196, foo, 2016-07-05 20:54:09.196, foo, 0}
2016-07-05 20:54:09,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:54:09.197, foo, 2016-07-05 20:54:09.197, foo, 0}
2016-07-05 20:54:09,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:54:09.198, foo, 2016-07-05 20:54:09.198, foo, 0}
2016-07-05 20:54:09,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:09.2, foo, 2016-07-05 20:54:09.2, foo, 0}
2016-07-05 20:54:09,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:09.201, foo, 2016-07-05 20:54:09.201, foo, 0}
2016-07-05 20:54:09,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:54:09.202, foo, 2016-07-05 20:54:09.202, foo, 0}
2016-07-05 20:54:09,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:09.203, foo, 2016-07-05 20:54:09.203, foo, 0}
2016-07-05 20:54:09,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:54:09.207, foo, 2016-07-05 20:54:09.207, foo, 0}
2016-07-05 20:54:09,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:54:09.208, foo, 2016-07-05 20:54:09.208, foo, 0}
2016-07-05 20:54:09,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:54:09.21, foo, 2016-07-05 20:54:09.21, foo, 0}
2016-07-05 20:54:09,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:54:09.212, foo, 2016-07-05 20:54:09.212, foo, 0}
2016-07-05 20:54:09,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:54:09.213, foo, 2016-07-05 20:54:09.213, foo, 0}
2016-07-05 20:54:09,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:54:09.218, foo, 2016-07-05 20:54:09.218, foo, 0}
2016-07-05 20:54:09,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:54:09.219, foo, 2016-07-05 20:54:09.219, foo, 0}
2016-07-05 20:54:09,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:54:09.221, foo, 2016-07-05 20:54:09.221, foo, 0}
2016-07-05 20:54:09,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:54:09.227, foo, 2016-07-05 20:54:09.227, foo, 0}
2016-07-05 20:54:09,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:54:09.228, foo, 2016-07-05 20:54:09.228, foo, 0}
2016-07-05 20:54:09,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:54:09.233, foo, 2016-07-05 20:54:09.233, foo, 0}
2016-07-05 20:54:09,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:54:09.235, foo, 2016-07-05 20:54:09.235, foo, 0}
2016-07-05 20:54:09,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:54:09.236, foo, 2016-07-05 20:54:09.236, foo, 0}
2016-07-05 20:54:09,304 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:54:09,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:54:09.305, foo, 2016-07-05 20:54:09.305, foo}
2016-07-05 20:54:09,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:54:09.307, foo, 2016-07-05 20:54:09.307, foo}
2016-07-05 20:54:09,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:54:09.308, foo, 2016-07-05 20:54:09.308, foo}
2016-07-05 20:54:09,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:54:09.309, foo, 2016-07-05 20:54:09.309, foo}
2016-07-05 20:54:09,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:54:09.31, foo, 2016-07-05 20:54:09.31, foo}
2016-07-05 20:54:09,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:54:09.311, foo, 2016-07-05 20:54:09.311, foo}
2016-07-05 20:54:09,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:54:09.312, foo, 2016-07-05 20:54:09.312, foo}
2016-07-05 20:54:09,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:54:09.313, foo, 2016-07-05 20:54:09.313, foo}
2016-07-05 20:54:09,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:54:09.314, foo, 2016-07-05 20:54:09.314, foo}
2016-07-05 20:54:09,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:54:09.315, foo, 2016-07-05 20:54:09.315, foo}
2016-07-05 20:54:09,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:54:09.316, foo, 2016-07-05 20:54:09.316, foo}
2016-07-05 20:54:09,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:54:09.318, foo, 2016-07-05 20:54:09.318, foo}
2016-07-05 20:54:09,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:54:09.319, foo, 2016-07-05 20:54:09.319, foo}
2016-07-05 20:54:09,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:54:09.32, foo, 2016-07-05 20:54:09.32, foo}
2016-07-05 20:54:09,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:54:09.321, foo, 2016-07-05 20:54:09.321, foo}
2016-07-05 20:54:09,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:54:09.322, foo, 2016-07-05 20:54:09.322, foo}
2016-07-05 20:54:09,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:54:09.324, foo, 2016-07-05 20:54:09.324, foo}
2016-07-05 20:54:09,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:54:09.326, foo, 2016-07-05 20:54:09.326, foo}
2016-07-05 20:54:09,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:54:09.327, foo, 2016-07-05 20:54:09.327, foo}
2016-07-05 20:54:09,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:54:09.328, foo, 2016-07-05 20:54:09.328, foo}
2016-07-05 20:54:09,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:54:09.329, foo, 2016-07-05 20:54:09.329, foo}
2016-07-05 20:54:09,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:54:09.33, foo, 2016-07-05 20:54:09.33, foo}
2016-07-05 20:54:09,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:54:09.331, foo, 2016-07-05 20:54:09.331, foo}
2016-07-05 20:54:09,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:54:09.332, foo, 2016-07-05 20:54:09.332, foo}
2016-07-05 20:54:09,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:54:09.333, foo, 2016-07-05 20:54:09.333, foo}
2016-07-05 20:54:09,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:54:09.334, foo, 2016-07-05 20:54:09.334, foo}
2016-07-05 20:54:09,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:54:09.335, foo, 2016-07-05 20:54:09.335, foo}
2016-07-05 20:54:09,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:54:09.335, foo, 2016-07-05 20:54:09.335, foo}
2016-07-05 20:54:09,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:54:09.34, foo, 2016-07-05 20:54:09.34, foo}
2016-07-05 20:54:09,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:09.342, foo, 2016-07-05 20:54:09.342, foo}
2016-07-05 20:54:09,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:09.343, foo, 2016-07-05 20:54:09.343, foo}
2016-07-05 20:54:09,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:09.344, foo, 2016-07-05 20:54:09.344, foo}
2016-07-05 20:54:09,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:54:09.345, foo, 2016-07-05 20:54:09.345, foo}
2016-07-05 20:54:09,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:54:09.345, foo, 2016-07-05 20:54:09.345, foo}
2016-07-05 20:54:09,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:54:09.346, foo, 2016-07-05 20:54:09.346, foo}
2016-07-05 20:54:09,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:54:09.347, foo, 2016-07-05 20:54:09.347, foo}
2016-07-05 20:54:09,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:54:09.348, foo, 2016-07-05 20:54:09.348, foo}
2016-07-05 20:54:09,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:54:09.349, foo, 2016-07-05 20:54:09.349, foo}
2016-07-05 20:54:09,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:54:09.351, foo, 2016-07-05 20:54:09.351, foo}
2016-07-05 20:54:09,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:54:09.352, foo, 2016-07-05 20:54:09.352, foo}
2016-07-05 20:54:09,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:54:09.353, foo, 2016-07-05 20:54:09.353, foo}
2016-07-05 20:54:09,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:54:09.355, foo, 2016-07-05 20:54:09.355, foo}
2016-07-05 20:54:09,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:54:09.357, foo, 2016-07-05 20:54:09.357, foo}
2016-07-05 20:54:09,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:54:09.358, foo, 2016-07-05 20:54:09.358, foo}
2016-07-05 20:54:09,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:54:09.359, foo, 2016-07-05 20:54:09.359, foo}
2016-07-05 20:54:09,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:54:09.361, foo, 2016-07-05 20:54:09.361, foo}
2016-07-05 20:54:09,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:54:09.362, foo, 2016-07-05 20:54:09.362, foo}
2016-07-05 20:54:09,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:54:09.363, foo, 2016-07-05 20:54:09.363, foo}
2016-07-05 20:54:09,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:54:09.364, foo, 2016-07-05 20:54:09.364, foo}
2016-07-05 20:54:09,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:54:09.365, foo, 2016-07-05 20:54:09.365, foo}
2016-07-05 20:54:09,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:54:09.365, foo, 2016-07-05 20:54:09.365, foo}
2016-07-05 20:54:09,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:54:09.366, foo, 2016-07-05 20:54:09.366, foo}
2016-07-05 20:54:09,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:54:09.367, foo, 2016-07-05 20:54:09.367, foo}
2016-07-05 20:54:09,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:09.368, foo, 2016-07-05 20:54:09.368, foo}
2016-07-05 20:54:09,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:54:09.372, foo, 2016-07-05 20:54:09.372, foo}
2016-07-05 20:54:09,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:54:09.373, foo, 2016-07-05 20:54:09.373, foo}
2016-07-05 20:54:09,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:54:09.374, foo, 2016-07-05 20:54:09.374, foo}
2016-07-05 20:54:09,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:54:09.375, foo, 2016-07-05 20:54:09.375, foo}
2016-07-05 20:54:09,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:54:09.376, foo, 2016-07-05 20:54:09.376, foo}
2016-07-05 20:54:09,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:54:09.377, foo, 2016-07-05 20:54:09.377, foo}
2016-07-05 20:54:09,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:54:09.377, foo, 2016-07-05 20:54:09.378, foo}
2016-07-05 20:54:09,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:54:09.378, foo, 2016-07-05 20:54:09.378, foo}
2016-07-05 20:54:09,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:54:09.379, foo, 2016-07-05 20:54:09.379, foo}
2016-07-05 20:54:09,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:54:09.38, foo, 2016-07-05 20:54:09.38, foo}
2016-07-05 20:54:09,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:09.38, foo, 2016-07-05 20:54:09.38, foo}
2016-07-05 20:54:09,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:54:09.381, foo, 2016-07-05 20:54:09.381, foo}
2016-07-05 20:54:09,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:54:09.381, foo, 2016-07-05 20:54:09.381, foo}
2016-07-05 20:54:09,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:54:09.382, foo, 2016-07-05 20:54:09.382, foo}
2016-07-05 20:54:09,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:54:09.384, foo, 2016-07-05 20:54:09.384, foo}
2016-07-05 20:54:09,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:54:09.385, foo, 2016-07-05 20:54:09.385, foo}
2016-07-05 20:54:09,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:54:09.386, foo, 2016-07-05 20:54:09.386, foo}
2016-07-05 20:54:09,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:54:09.388, foo, 2016-07-05 20:54:09.388, foo}
2016-07-05 20:54:09,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:54:09.39, foo, 2016-07-05 20:54:09.39, foo}
2016-07-05 20:54:09,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:54:09.391, foo, 2016-07-05 20:54:09.391, foo}
2016-07-05 20:54:09,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:54:09.392, foo, 2016-07-05 20:54:09.392, foo}
2016-07-05 20:54:09,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:54:09.393, foo, 2016-07-05 20:54:09.393, foo}
2016-07-05 20:54:09,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:54:09.394, foo, 2016-07-05 20:54:09.394, foo}
2016-07-05 20:54:09,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:54:09.395, foo, 2016-07-05 20:54:09.395, foo}
2016-07-05 20:54:09,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:54:09.396, foo, 2016-07-05 20:54:09.396, foo}
2016-07-05 20:54:09,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:54:09.396, foo, 2016-07-05 20:54:09.396, foo}
2016-07-05 20:54:09,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:54:09.397, foo, 2016-07-05 20:54:09.397, foo}
2016-07-05 20:54:09,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:54:09.398, foo, 2016-07-05 20:54:09.398, foo}
2016-07-05 20:54:09,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:09.399, foo, 2016-07-05 20:54:09.399, foo}
2016-07-05 20:54:09,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:09.4, foo, 2016-07-05 20:54:09.4, foo}
2016-07-05 20:54:09,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:09.401, foo, 2016-07-05 20:54:09.401, foo}
2016-07-05 20:54:09,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:09.401, foo, 2016-07-05 20:54:09.401, foo}
2016-07-05 20:54:09,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:54:09.405, foo, 2016-07-05 20:54:09.405, foo}
2016-07-05 20:54:09,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:09.406, foo, 2016-07-05 20:54:09.406, foo}
2016-07-05 20:54:09,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:54:09.406, foo, 2016-07-05 20:54:09.406, foo}
2016-07-05 20:54:09,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:54:09.408, foo, 2016-07-05 20:54:09.408, foo}
2016-07-05 20:54:09,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:54:09.408, foo, 2016-07-05 20:54:09.409, foo}
2016-07-05 20:54:09,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:54:09.41, foo, 2016-07-05 20:54:09.41, foo}
2016-07-05 20:54:09,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:54:09.411, foo, 2016-07-05 20:54:09.411, foo}
2016-07-05 20:54:09,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:54:09.411, foo, 2016-07-05 20:54:09.411, foo}
2016-07-05 20:54:09,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:54:09.412, foo, 2016-07-05 20:54:09.412, foo}
2016-07-05 20:54:09,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:54:09.413, foo, 2016-07-05 20:54:09.413, foo}
2016-07-05 20:54:09,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:54:09.414, foo, 2016-07-05 20:54:09.414, foo}
2016-07-05 20:54:09,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:54:09.415, foo, 2016-07-05 20:54:09.415, foo}
2016-07-05 20:54:09,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:54:09.416, foo, 2016-07-05 20:54:09.416, foo}
2016-07-05 20:54:09,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:54:09.417, foo, 2016-07-05 20:54:09.417, foo}
2016-07-05 20:54:09,477 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:54:09,479 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:54:09,499 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:09,511 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:54:09,521 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:54:09,525 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:54:09,528 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:54:09,531 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:54:09,534 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:54:09,543 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:54:09,546 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:54:09,548 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:54:09,552 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:54:09,554 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:54:09,560 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:54:09,561 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:54:09,561 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:54:09,561 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:54:09,561 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:54:09,562 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:54:09,570 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:54:09,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:54:09,579 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:54:09,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:54:09,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:54:09,583 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:54:09,583 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:54:09,627 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:54:09,628 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:54:09,654 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:54:09,655 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:54:09,655 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:09,655 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:09,656 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:09,664 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:54:09,666 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:54:09,682 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:54:09,682 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:54:09,682 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:54:09,683 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:54:09,706 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:54:09,719 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:54:09,729 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:54:09,742 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:54:09,754 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:54:09,761 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:54:09,774 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:54:09,785 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:54:09,793 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:54:09,800 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:54:09,813 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:54:09,823 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:54:09,831 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:54:09,839 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:54:09,846 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:54:09,847 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:54:09,847 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:54:09,847 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:54:09,847 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:54:09,849 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:54:09,851 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:54:09,851 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:54:09,851 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:54:09,887 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 20:54:09,887 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 20:54:09,888 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 20:54:09,888 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 20:54:09,888 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 20:54:09,889 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 20:54:09,891 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:54:09,892 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2035.zip
2016-07-05 20:54:09,918 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:54:09,919 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:54:09,920 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:54:09,921 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:54:09,922 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:54:09,946 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:54:09,946 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/.DS_Store
2016-07-05 20:54:09,947 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:54:09,948 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:54:09,950 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:54:09,950 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:54:09,951 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:54:09,952 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:54:09,954 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:54:09,956 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:54:09,957 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:54:09,994 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:54:09,996 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:54:09,996 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:54:09,996 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:54:09,997 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:54:09,997 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:09,997 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:09,997 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:10,009 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:54:10,019 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:54:10,031 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:54:10,038 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:54:10,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:54:10,061 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:54:10,069 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:54:10,083 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:54:10,101 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:54:10,111 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:54:10,131 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:54:10,141 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:54:10,162 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:54:10,180 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:54:10,203 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:54:10,223 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:54:10,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:54:10,262 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:54:10,282 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:54:10,303 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:54:10,321 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:54:10,345 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:54:10,363 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:54:10,366 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:54:10,370 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:54:10,374 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:54:10,377 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:54:10,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:54:10,382 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:54:10,385 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:54:10,389 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:54:10,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:54:10,396 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:54:10,399 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:54:10,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:54:10,406 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:54:10,409 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:54:10,429 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:54:10,431 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:54:10,433 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:54:10,433 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:54:10,433 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:54:10,434 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:54:10,434 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:54:10,434 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:54:10,435 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:54:10,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:54:10,436 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:54:10,436 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:54:10,445 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:54:10,446 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:54:10,446 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:54:10,446 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:54:10,448 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:54:10,450 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:54:10,450 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:54:10,450 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:54:10,450 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:54:10,451 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:54:10,453 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:54:10,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:54:10,491 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:54:10,530 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:54:10,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:54:10,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:54:10,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:54:10,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:54:10,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:54:10,732 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:54:10,740 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:54:10,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:54:10,806 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:54:10,846 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:54:10,855 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:54:10,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:54:10,900 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:10,927 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:54:10,950 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:54:10,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:10,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:11,007 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:54:11,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:11,047 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:11,067 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:54:11,086 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:11,113 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:54:11,139 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:54:11,168 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:54:11,187 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:54:11,212 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:54:11,237 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:54:11,253 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:54:11,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:54:11,294 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:54:11,313 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:54:11,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:54:11,353 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:54:11,372 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:54:11,393 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:54:11,413 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:54:11,413 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:54:11,414 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:54:11,415 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:54:11,416 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:54:11,417 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:54:11,417 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:54:11,417 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:54:11,418 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:54:11,418 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:54:11,418 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:54:11,418 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:54:11,418 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:54:11,419 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:11,419 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 20:54:11,420 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:11,439 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:11,439 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:11,440 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:11,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:54:11,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:54:11,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:54:11,469 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:54:11,473 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:54:11,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:54:11,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:54:11,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:54:11,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:54:11,479 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:54:11,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:54:11,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:54:11,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:54:11,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:54:11,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:54:11,487 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:54:11,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:54:11,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:54:11,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:54:11,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:54:11,497 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:54:11,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:54:11,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:54:11,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:54:11,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:54:11,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:54:11,504 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:54:11,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:54:11,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:54:11,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:54:11,510 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:54:11,511 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:11,512 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 20:54:11,512 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:11,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:54:11.553, foo, 2016-07-05 20:54:11.553, foo, 0}
2016-07-05 20:54:11,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:54:11.555, foo, 2016-07-05 20:54:11.555, foo, 0}
2016-07-05 20:54:11,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:54:11.556, foo, 2016-07-05 20:54:11.556, foo, 0}
2016-07-05 20:54:11,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:54:11.557, foo, 2016-07-05 20:54:11.557, foo, 0}
2016-07-05 20:54:11,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:54:11.558, foo, 2016-07-05 20:54:11.558, foo, 0}
2016-07-05 20:54:11,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:54:11.559, foo, 2016-07-05 20:54:11.559, foo, 0}
2016-07-05 20:54:11,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:54:11.56, foo, 2016-07-05 20:54:11.56, foo, 0}
2016-07-05 20:54:11,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:54:11.561, foo, 2016-07-05 20:54:11.561, foo, 0}
2016-07-05 20:54:11,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:54:11.566, foo, 2016-07-05 20:54:11.566, foo, 0}
2016-07-05 20:54:11,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:54:11.574, foo, 2016-07-05 20:54:11.574, foo, 0}
2016-07-05 20:54:11,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:54:11.574, foo, 2016-07-05 20:54:11.574, foo, 0}
2016-07-05 20:54:11,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:54:11.576, foo, 2016-07-05 20:54:11.576, foo, 0}
2016-07-05 20:54:11,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:54:11.577, foo, 2016-07-05 20:54:11.577, foo, 0}
2016-07-05 20:54:11,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:54:11.578, foo, 2016-07-05 20:54:11.578, foo, 0}
2016-07-05 20:54:11,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:54:11.58, foo, 2016-07-05 20:54:11.58, foo, 0}
2016-07-05 20:54:11,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:54:11.581, foo, 2016-07-05 20:54:11.581, foo, 0}
2016-07-05 20:54:11,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:54:11.6, foo, 2016-07-05 20:54:11.6, foo, 0}
2016-07-05 20:54:11,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:54:11.601, foo, 2016-07-05 20:54:11.601, foo, 0}
2016-07-05 20:54:11,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:54:11.602, foo, 2016-07-05 20:54:11.602, foo, 0}
2016-07-05 20:54:11,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:54:11.604, foo, 2016-07-05 20:54:11.604, foo, 0}
2016-07-05 20:54:11,620 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:54:11,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:54:11.621, foo, 2016-07-05 20:54:11.621, foo, 0}
2016-07-05 20:54:11,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:54:11.622, foo, 2016-07-05 20:54:11.622, foo, 0}
2016-07-05 20:54:11,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:54:11.623, foo, 2016-07-05 20:54:11.623, foo, 0}
2016-07-05 20:54:11,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:54:11.63, foo, 2016-07-05 20:54:11.63, foo, 0}
2016-07-05 20:54:11,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:54:11.631, foo, 2016-07-05 20:54:11.631, foo, 0}
2016-07-05 20:54:11,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:54:11.633, foo, 2016-07-05 20:54:11.633, foo, 0}
2016-07-05 20:54:11,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:54:11.634, foo, 2016-07-05 20:54:11.634, foo, 0}
2016-07-05 20:54:11,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:54:11.635, foo, 2016-07-05 20:54:11.635, foo, 0}
2016-07-05 20:54:11,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:54:11.636, foo, 2016-07-05 20:54:11.636, foo, 0}
2016-07-05 20:54:11,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:54:11.637, foo, 2016-07-05 20:54:11.637, foo, 0}
2016-07-05 20:54:11,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:54:11.638, foo, 2016-07-05 20:54:11.638, foo, 0}
2016-07-05 20:54:11,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:54:11.652, foo, 2016-07-05 20:54:11.653, foo, 0}
2016-07-05 20:54:11,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:54:11.654, foo, 2016-07-05 20:54:11.654, foo, 0}
2016-07-05 20:54:11,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:54:11.656, foo, 2016-07-05 20:54:11.656, foo, 0}
2016-07-05 20:54:11,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:54:11.657, foo, 2016-07-05 20:54:11.657, foo, 0}
2016-07-05 20:54:11,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:54:11.659, foo, 2016-07-05 20:54:11.659, foo, 0}
2016-07-05 20:54:11,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:54:11.661, foo, 2016-07-05 20:54:11.661, foo, 0}
2016-07-05 20:54:11,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:54:11.663, foo, 2016-07-05 20:54:11.663, foo, 0}
2016-07-05 20:54:11,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:54:11.664, foo, 2016-07-05 20:54:11.664, foo, 0}
2016-07-05 20:54:11,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:54:11.665, foo, 2016-07-05 20:54:11.665, foo, 0}
2016-07-05 20:54:11,679 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:54:11,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:54:11,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:54:11,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:54:11,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:54:11,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:54:11,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:54:11,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:54:11,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:54:11,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:54:11,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:54:11,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:54:11,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:54:11,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:54:11,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:54:11,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:54:11,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:54:11,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:54:11,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:54:11,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:54:11,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:54:11,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:54:11,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:54:11,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:54:11,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:54:11,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:54:11,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:54:11,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:54:11,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:54:11,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:54:11,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:54:11,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:54:11,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:54:11,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:54:11,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:54:11,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:54:11,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:54:11,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:54:11,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:54:11,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:54:11,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:54:11,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:54:11,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:54:11,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:54:11,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:54:11,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:54:11,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:54:11,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:54:11,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:54:11,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:54:11,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:54:11,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:54:11,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:54:11,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:54:11,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:54:11,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:54:11,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:54:11,764 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:54:11,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2016-07-05 20:54:11.766, foo, 2016-07-05 20:54:11.766, foo, 0}
2016-07-05 20:54:11,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2016-07-05 20:54:11.767, foo, 2016-07-05 20:54:11.767, foo, 0}
2016-07-05 20:54:11,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2016-07-05 20:54:11.768, foo, 2016-07-05 20:54:11.768, foo, 0}
2016-07-05 20:54:11,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2016-07-05 20:54:11.768, foo, 2016-07-05 20:54:11.768, foo, 0}
2016-07-05 20:54:11,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2016-07-05 20:54:11.769, foo, 2016-07-05 20:54:11.769, foo, 0}
2016-07-05 20:54:11,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2016-07-05 20:54:11.769, foo, 2016-07-05 20:54:11.769, foo, 0}
2016-07-05 20:54:11,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2016-07-05 20:54:11.77, foo, 2016-07-05 20:54:11.77, foo, 0}
2016-07-05 20:54:11,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2016-07-05 20:54:11.77, foo, 2016-07-05 20:54:11.77, foo, 0}
2016-07-05 20:54:11,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2016-07-05 20:54:11.771, foo, 2016-07-05 20:54:11.771, foo, 0}
2016-07-05 20:54:11,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2016-07-05 20:54:11.771, foo, 2016-07-05 20:54:11.771, foo, 0}
2016-07-05 20:54:11,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2016-07-05 20:54:11.772, foo, 2016-07-05 20:54:11.772, foo, 0}
2016-07-05 20:54:11,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2016-07-05 20:54:11.772, foo, 2016-07-05 20:54:11.772, foo, 0}
2016-07-05 20:54:11,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2016-07-05 20:54:11.773, foo, 2016-07-05 20:54:11.773, foo, 0}
2016-07-05 20:54:11,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2016-07-05 20:54:11.774, foo, 2016-07-05 20:54:11.774, foo, 0}
2016-07-05 20:54:11,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2016-07-05 20:54:11.774, foo, 2016-07-05 20:54:11.774, foo, 0}
2016-07-05 20:54:11,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2016-07-05 20:54:11.774, foo, 2016-07-05 20:54:11.774, foo, 0}
2016-07-05 20:54:11,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2016-07-05 20:54:11.775, foo, 2016-07-05 20:54:11.775, foo, 0}
2016-07-05 20:54:11,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2016-07-05 20:54:11.776, foo, 2016-07-05 20:54:11.776, foo, 0}
2016-07-05 20:54:11,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2016-07-05 20:54:11.776, foo, 2016-07-05 20:54:11.777, foo, 0}
2016-07-05 20:54:11,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2016-07-05 20:54:11.777, foo, 2016-07-05 20:54:11.777, foo, 0}
2016-07-05 20:54:11,792 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:54:11,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1234, PLT, 2016-07-05 20:54:11.793, foo, 2016-07-05 20:54:11.793, foo, 0}
2016-07-05 20:54:11,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2345, GLD, 2016-07-05 20:54:11.795, foo, 2016-07-05 20:54:11.795, foo, 0}
2016-07-05 20:54:11,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3456, GLD, 2016-07-05 20:54:11.795, foo, 2016-07-05 20:54:11.795, foo, 0}
2016-07-05 20:54:11,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 875, BRZ, 2016-07-05 20:54:11.796, foo, 2016-07-05 20:54:11.796, foo, 0}
2016-07-05 20:54:11,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 1111, BRZ, 2016-07-05 20:54:11.797, foo, 2016-07-05 20:54:11.797, foo, 0}
2016-07-05 20:54:11,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 5422, SIL, 2016-07-05 20:54:11.797, foo, 2016-07-05 20:54:11.797, foo, 0}
2016-07-05 20:54:11,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 24678, SIL, 2016-07-05 20:54:11.798, foo, 2016-07-05 20:54:11.798, foo, 0}
2016-07-05 20:54:11,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 234, SIL, 2016-07-05 20:54:11.798, foo, 2016-07-05 20:54:11.798, foo, 0}
2016-07-05 20:54:11,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 3, SIL, 2016-07-05 20:54:11.798, foo, 2016-07-05 20:54:11.798, foo, 0}
2016-07-05 20:54:11,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 98765, PLT, 2016-07-05 20:54:11.799, foo, 2016-07-05 20:54:11.799, foo, 0}
2016-07-05 20:54:11,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 34, GLD, 2016-07-05 20:54:11.834, foo, 2016-07-05 20:54:11.834, foo, 0}
2016-07-05 20:54:11,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 532, PLT, 2016-07-05 20:54:11.834, foo, 2016-07-05 20:54:11.834, foo, 0}
2016-07-05 20:54:11,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 23678, GLD, 2016-07-05 20:54:11.835, foo, 2016-07-05 20:54:11.835, foo, 0}
2016-07-05 20:54:11,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 432, GLD, 2016-07-05 20:54:11.835, foo, 2016-07-05 20:54:11.835, foo, 0}
2016-07-05 20:54:11,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 543, BRZ, 2016-07-05 20:54:11.835, foo, 2016-07-05 20:54:11.835, foo, 0}
2016-07-05 20:54:11,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 23545, PLT, 2016-07-05 20:54:11.836, foo, 2016-07-05 20:54:11.836, foo, 0}
2016-07-05 20:54:11,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 2345, GLD, 2016-07-05 20:54:11.836, foo, 2016-07-05 20:54:11.836, foo, 0}
2016-07-05 20:54:11,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 8763, SIL, 2016-07-05 20:54:11.837, foo, 2016-07-05 20:54:11.837, foo, 0}
2016-07-05 20:54:11,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 34567, SIL, 2016-07-05 20:54:11.837, foo, 2016-07-05 20:54:11.837, foo, 0}
2016-07-05 20:54:11,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 43, GLD, 2016-07-05 20:54:11.838, foo, 2016-07-05 20:54:11.838, foo, 0}
2016-07-05 20:54:11,855 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:54:11,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:54:11.856, foo, 2016-07-05 20:54:11.856, foo}
2016-07-05 20:54:11,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:54:11.857, foo, 2016-07-05 20:54:11.857, foo}
2016-07-05 20:54:11,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:54:11.858, foo, 2016-07-05 20:54:11.858, foo}
2016-07-05 20:54:11,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:54:11.859, foo, 2016-07-05 20:54:11.859, foo}
2016-07-05 20:54:11,875 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:54:11,875 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:54:11,876 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 20:54:11,876 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:54:11,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:54:11.904, foo, 2016-07-05 20:54:11.904, foo, 0}
2016-07-05 20:54:11,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:54:11.905, foo, 2016-07-05 20:54:11.905, foo, 0}
2016-07-05 20:54:11,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:54:11.907, foo, 2016-07-05 20:54:11.907, foo, 0}
2016-07-05 20:54:11,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:54:11.908, foo, 2016-07-05 20:54:11.908, foo, 0}
2016-07-05 20:54:11,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:54:11.908, foo, 2016-07-05 20:54:11.908, foo, 0}
2016-07-05 20:54:11,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:54:11.909, foo, 2016-07-05 20:54:11.909, foo, 0}
2016-07-05 20:54:11,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:54:11.91, foo, 2016-07-05 20:54:11.91, foo, 0}
2016-07-05 20:54:11,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:54:11.91, foo, 2016-07-05 20:54:11.91, foo, 0}
2016-07-05 20:54:11,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:54:11.942, foo, 2016-07-05 20:54:11.942, foo, 0}
2016-07-05 20:54:11,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:54:11.942, foo, 2016-07-05 20:54:11.942, foo, 0}
2016-07-05 20:54:11,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:54:11.943, foo, 2016-07-05 20:54:11.943, foo, 0}
2016-07-05 20:54:11,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:54:11.943, foo, 2016-07-05 20:54:11.943, foo, 0}
2016-07-05 20:54:11,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:54:11.944, foo, 2016-07-05 20:54:11.944, foo, 0}
2016-07-05 20:54:11,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:54:11.945, foo, 2016-07-05 20:54:11.945, foo, 0}
2016-07-05 20:54:11,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:54:11.945, foo, 2016-07-05 20:54:11.945, foo, 0}
2016-07-05 20:54:11,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:54:11.966, foo, 2016-07-05 20:54:11.966, foo, 0}
2016-07-05 20:54:11,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:54:11.966, foo, 2016-07-05 20:54:11.966, foo, 0}
2016-07-05 20:54:11,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:54:11.967, foo, 2016-07-05 20:54:11.967, foo, 0}
2016-07-05 20:54:11,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:54:11.967, foo, 2016-07-05 20:54:11.967, foo, 0}
2016-07-05 20:54:11,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:54:11.968, foo, 2016-07-05 20:54:11.968, foo, 0}
2016-07-05 20:54:11,985 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:54:11,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:54:11.986, foo, 2016-07-05 20:54:11.986, foo, 0}
2016-07-05 20:54:11,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:54:11.988, foo, 2016-07-05 20:54:11.988, foo, 0}
2016-07-05 20:54:11,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:54:11.989, foo, 2016-07-05 20:54:11.989, foo, 0}
2016-07-05 20:54:11,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:54:11.99, foo, 2016-07-05 20:54:11.99, foo, 0}
2016-07-05 20:54:11,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:54:11.991, foo, 2016-07-05 20:54:11.991, foo, 0}
2016-07-05 20:54:11,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:54:11.992, foo, 2016-07-05 20:54:11.992, foo, 0}
2016-07-05 20:54:11,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:54:11.992, foo, 2016-07-05 20:54:11.992, foo, 0}
2016-07-05 20:54:11,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:54:11.993, foo, 2016-07-05 20:54:11.993, foo, 0}
2016-07-05 20:54:11,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:54:11.994, foo, 2016-07-05 20:54:11.994, foo, 0}
2016-07-05 20:54:11,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:54:11.995, foo, 2016-07-05 20:54:11.995, foo, 0}
2016-07-05 20:54:11,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:54:11.996, foo, 2016-07-05 20:54:11.996, foo, 0}
2016-07-05 20:54:11,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:54:11.997, foo, 2016-07-05 20:54:11.997, foo, 0}
2016-07-05 20:54:11,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:54:11.998, foo, 2016-07-05 20:54:11.998, foo, 0}
2016-07-05 20:54:11,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:54:11.999, foo, 2016-07-05 20:54:11.999, foo, 0}
2016-07-05 20:54:11,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:54:11.999, foo, 2016-07-05 20:54:11.999, foo, 0}
2016-07-05 20:54:12,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:54:12.017, foo, 2016-07-05 20:54:12.017, foo, 0}
2016-07-05 20:54:12,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:54:12.018, foo, 2016-07-05 20:54:12.018, foo, 0}
2016-07-05 20:54:12,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:54:12.019, foo, 2016-07-05 20:54:12.019, foo, 0}
2016-07-05 20:54:12,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:54:12.02, foo, 2016-07-05 20:54:12.02, foo, 0}
2016-07-05 20:54:12,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:54:12.02, foo, 2016-07-05 20:54:12.02, foo, 0}
2016-07-05 20:54:12,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:54:12.021, foo, 2016-07-05 20:54:12.021, foo, 0}
2016-07-05 20:54:12,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:54:12.022, foo, 2016-07-05 20:54:12.022, foo, 0}
2016-07-05 20:54:12,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:54:12.022, foo, 2016-07-05 20:54:12.022, foo, 0}
2016-07-05 20:54:12,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:54:12.023, foo, 2016-07-05 20:54:12.023, foo, 0}
2016-07-05 20:54:12,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:54:12.024, foo, 2016-07-05 20:54:12.024, foo, 0}
2016-07-05 20:54:12,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:54:12.025, foo, 2016-07-05 20:54:12.025, foo, 0}
2016-07-05 20:54:12,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:54:12.026, foo, 2016-07-05 20:54:12.026, foo, 0}
2016-07-05 20:54:12,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:54:12.027, foo, 2016-07-05 20:54:12.027, foo, 0}
2016-07-05 20:54:12,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:54:12.028, foo, 2016-07-05 20:54:12.028, foo, 0}
2016-07-05 20:54:12,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:54:12.029, foo, 2016-07-05 20:54:12.029, foo, 0}
2016-07-05 20:54:12,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:54:12.03, foo, 2016-07-05 20:54:12.03, foo, 0}
2016-07-05 20:54:12,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:54:12.031, foo, 2016-07-05 20:54:12.031, foo, 0}
2016-07-05 20:54:12,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:12.031, foo, 2016-07-05 20:54:12.031, foo, 0}
2016-07-05 20:54:12,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:12.032, foo, 2016-07-05 20:54:12.032, foo, 0}
2016-07-05 20:54:12,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:54:12.033, foo, 2016-07-05 20:54:12.033, foo, 0}
2016-07-05 20:54:12,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:12.042, foo, 2016-07-05 20:54:12.042, foo, 0}
2016-07-05 20:54:12,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:54:12.043, foo, 2016-07-05 20:54:12.043, foo, 0}
2016-07-05 20:54:12,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:54:12.043, foo, 2016-07-05 20:54:12.043, foo, 0}
2016-07-05 20:54:12,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:54:12.044, foo, 2016-07-05 20:54:12.044, foo, 0}
2016-07-05 20:54:12,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:54:12.045, foo, 2016-07-05 20:54:12.045, foo, 0}
2016-07-05 20:54:12,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:54:12.046, foo, 2016-07-05 20:54:12.046, foo, 0}
2016-07-05 20:54:12,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:54:12.046, foo, 2016-07-05 20:54:12.046, foo, 0}
2016-07-05 20:54:12,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:54:12.047, foo, 2016-07-05 20:54:12.047, foo, 0}
2016-07-05 20:54:12,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:12.048, foo, 2016-07-05 20:54:12.048, foo, 0}
2016-07-05 20:54:12,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:12.049, foo, 2016-07-05 20:54:12.049, foo, 0}
2016-07-05 20:54:12,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:54:12.049, foo, 2016-07-05 20:54:12.049, foo, 0}
2016-07-05 20:54:12,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:12.05, foo, 2016-07-05 20:54:12.05, foo, 0}
2016-07-05 20:54:12,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:54:12.051, foo, 2016-07-05 20:54:12.051, foo, 0}
2016-07-05 20:54:12,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:54:12.052, foo, 2016-07-05 20:54:12.052, foo, 0}
2016-07-05 20:54:12,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:54:12.052, foo, 2016-07-05 20:54:12.052, foo, 0}
2016-07-05 20:54:12,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:54:12.053, foo, 2016-07-05 20:54:12.053, foo, 0}
2016-07-05 20:54:12,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:54:12.055, foo, 2016-07-05 20:54:12.055, foo, 0}
2016-07-05 20:54:12,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:54:12.057, foo, 2016-07-05 20:54:12.057, foo, 0}
2016-07-05 20:54:12,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:54:12.058, foo, 2016-07-05 20:54:12.058, foo, 0}
2016-07-05 20:54:12,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:54:12.059, foo, 2016-07-05 20:54:12.059, foo, 0}
2016-07-05 20:54:12,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:54:12.06, foo, 2016-07-05 20:54:12.06, foo, 0}
2016-07-05 20:54:12,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:54:12.061, foo, 2016-07-05 20:54:12.061, foo, 0}
2016-07-05 20:54:12,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:54:12.062, foo, 2016-07-05 20:54:12.062, foo, 0}
2016-07-05 20:54:12,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:54:12.063, foo, 2016-07-05 20:54:12.063, foo, 0}
2016-07-05 20:54:12,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:54:12.064, foo, 2016-07-05 20:54:12.064, foo, 0}
2016-07-05 20:54:12,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:54:12.065, foo, 2016-07-05 20:54:12.065, foo, 0}
2016-07-05 20:54:12,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:54:12.066, foo, 2016-07-05 20:54:12.066, foo, 0}
2016-07-05 20:54:12,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:54:12.066, foo, 2016-07-05 20:54:12.066, foo, 0}
2016-07-05 20:54:12,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:54:12.067, foo, 2016-07-05 20:54:12.067, foo, 0}
2016-07-05 20:54:12,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:54:12.068, foo, 2016-07-05 20:54:12.068, foo, 0}
2016-07-05 20:54:12,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:54:12.074, foo, 2016-07-05 20:54:12.074, foo, 0}
2016-07-05 20:54:12,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:54:12.075, foo, 2016-07-05 20:54:12.075, foo, 0}
2016-07-05 20:54:12,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:54:12.076, foo, 2016-07-05 20:54:12.076, foo, 0}
2016-07-05 20:54:12,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:54:12.077, foo, 2016-07-05 20:54:12.077, foo, 0}
2016-07-05 20:54:12,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:54:12.078, foo, 2016-07-05 20:54:12.078, foo, 0}
2016-07-05 20:54:12,124 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:54:12,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:54:12.126, foo, 2016-07-05 20:54:12.126, foo}
2016-07-05 20:54:12,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:54:12.128, foo, 2016-07-05 20:54:12.128, foo}
2016-07-05 20:54:12,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:54:12.129, foo, 2016-07-05 20:54:12.129, foo}
2016-07-05 20:54:12,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:54:12.13, foo, 2016-07-05 20:54:12.13, foo}
2016-07-05 20:54:12,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:54:12.131, foo, 2016-07-05 20:54:12.131, foo}
2016-07-05 20:54:12,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:54:12.131, foo, 2016-07-05 20:54:12.131, foo}
2016-07-05 20:54:12,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:54:12.132, foo, 2016-07-05 20:54:12.132, foo}
2016-07-05 20:54:12,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:54:12.133, foo, 2016-07-05 20:54:12.133, foo}
2016-07-05 20:54:12,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:54:12.133, foo, 2016-07-05 20:54:12.133, foo}
2016-07-05 20:54:12,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:54:12.134, foo, 2016-07-05 20:54:12.134, foo}
2016-07-05 20:54:12,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:54:12.134, foo, 2016-07-05 20:54:12.134, foo}
2016-07-05 20:54:12,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:54:12.135, foo, 2016-07-05 20:54:12.135, foo}
2016-07-05 20:54:12,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:54:12.136, foo, 2016-07-05 20:54:12.136, foo}
2016-07-05 20:54:12,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:54:12.137, foo, 2016-07-05 20:54:12.137, foo}
2016-07-05 20:54:12,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:54:12.138, foo, 2016-07-05 20:54:12.138, foo}
2016-07-05 20:54:12,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:54:12.139, foo, 2016-07-05 20:54:12.139, foo}
2016-07-05 20:54:12,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:54:12.139, foo, 2016-07-05 20:54:12.139, foo}
2016-07-05 20:54:12,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:54:12.14, foo, 2016-07-05 20:54:12.14, foo}
2016-07-05 20:54:12,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:54:12.141, foo, 2016-07-05 20:54:12.141, foo}
2016-07-05 20:54:12,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:54:12.141, foo, 2016-07-05 20:54:12.141, foo}
2016-07-05 20:54:12,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:54:12.142, foo, 2016-07-05 20:54:12.142, foo}
2016-07-05 20:54:12,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:54:12.143, foo, 2016-07-05 20:54:12.143, foo}
2016-07-05 20:54:12,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:54:12.143, foo, 2016-07-05 20:54:12.143, foo}
2016-07-05 20:54:12,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:54:12.144, foo, 2016-07-05 20:54:12.144, foo}
2016-07-05 20:54:12,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:54:12.145, foo, 2016-07-05 20:54:12.145, foo}
2016-07-05 20:54:12,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:54:12.145, foo, 2016-07-05 20:54:12.145, foo}
2016-07-05 20:54:12,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:54:12.146, foo, 2016-07-05 20:54:12.146, foo}
2016-07-05 20:54:12,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:54:12.147, foo, 2016-07-05 20:54:12.147, foo}
2016-07-05 20:54:12,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:54:12.148, foo, 2016-07-05 20:54:12.148, foo}
2016-07-05 20:54:12,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:12.149, foo, 2016-07-05 20:54:12.149, foo}
2016-07-05 20:54:12,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:12.149, foo, 2016-07-05 20:54:12.149, foo}
2016-07-05 20:54:12,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:54:12.15, foo, 2016-07-05 20:54:12.15, foo}
2016-07-05 20:54:12,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:54:12.151, foo, 2016-07-05 20:54:12.151, foo}
2016-07-05 20:54:12,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:54:12.152, foo, 2016-07-05 20:54:12.152, foo}
2016-07-05 20:54:12,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:54:12.152, foo, 2016-07-05 20:54:12.152, foo}
2016-07-05 20:54:12,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:54:12.153, foo, 2016-07-05 20:54:12.153, foo}
2016-07-05 20:54:12,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:54:12.154, foo, 2016-07-05 20:54:12.154, foo}
2016-07-05 20:54:12,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:54:12.154, foo, 2016-07-05 20:54:12.154, foo}
2016-07-05 20:54:12,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:54:12.155, foo, 2016-07-05 20:54:12.155, foo}
2016-07-05 20:54:12,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:54:12.156, foo, 2016-07-05 20:54:12.156, foo}
2016-07-05 20:54:12,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:54:12.157, foo, 2016-07-05 20:54:12.157, foo}
2016-07-05 20:54:12,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:54:12.158, foo, 2016-07-05 20:54:12.158, foo}
2016-07-05 20:54:12,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:54:12.159, foo, 2016-07-05 20:54:12.159, foo}
2016-07-05 20:54:12,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:54:12.16, foo, 2016-07-05 20:54:12.16, foo}
2016-07-05 20:54:12,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:54:12.16, foo, 2016-07-05 20:54:12.16, foo}
2016-07-05 20:54:12,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:54:12.161, foo, 2016-07-05 20:54:12.161, foo}
2016-07-05 20:54:12,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:54:12.162, foo, 2016-07-05 20:54:12.162, foo}
2016-07-05 20:54:12,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:54:12.162, foo, 2016-07-05 20:54:12.162, foo}
2016-07-05 20:54:12,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:54:12.163, foo, 2016-07-05 20:54:12.163, foo}
2016-07-05 20:54:12,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:54:12.164, foo, 2016-07-05 20:54:12.164, foo}
2016-07-05 20:54:12,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:54:12.164, foo, 2016-07-05 20:54:12.164, foo}
2016-07-05 20:54:12,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:54:12.178, foo, 2016-07-05 20:54:12.178, foo}
2016-07-05 20:54:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:54:12.178, foo, 2016-07-05 20:54:12.179, foo}
2016-07-05 20:54:12,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:12.179, foo, 2016-07-05 20:54:12.179, foo}
2016-07-05 20:54:12,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:54:12.18, foo, 2016-07-05 20:54:12.18, foo}
2016-07-05 20:54:12,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:54:12.181, foo, 2016-07-05 20:54:12.181, foo}
2016-07-05 20:54:12,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:54:12.182, foo, 2016-07-05 20:54:12.182, foo}
2016-07-05 20:54:12,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:54:12.182, foo, 2016-07-05 20:54:12.182, foo}
2016-07-05 20:54:12,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:54:12.183, foo, 2016-07-05 20:54:12.183, foo}
2016-07-05 20:54:12,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:54:12.184, foo, 2016-07-05 20:54:12.184, foo}
2016-07-05 20:54:12,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:54:12.185, foo, 2016-07-05 20:54:12.185, foo}
2016-07-05 20:54:12,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:54:12.185, foo, 2016-07-05 20:54:12.185, foo}
2016-07-05 20:54:12,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:54:12.186, foo, 2016-07-05 20:54:12.186, foo}
2016-07-05 20:54:12,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:54:12.187, foo, 2016-07-05 20:54:12.187, foo}
2016-07-05 20:54:12,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:12.188, foo, 2016-07-05 20:54:12.188, foo}
2016-07-05 20:54:12,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:54:12.189, foo, 2016-07-05 20:54:12.189, foo}
2016-07-05 20:54:12,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:54:12.19, foo, 2016-07-05 20:54:12.19, foo}
2016-07-05 20:54:12,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:54:12.192, foo, 2016-07-05 20:54:12.192, foo}
2016-07-05 20:54:12,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:54:12.192, foo, 2016-07-05 20:54:12.192, foo}
2016-07-05 20:54:12,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:54:12.193, foo, 2016-07-05 20:54:12.193, foo}
2016-07-05 20:54:12,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:54:12.194, foo, 2016-07-05 20:54:12.194, foo}
2016-07-05 20:54:12,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:54:12.195, foo, 2016-07-05 20:54:12.195, foo}
2016-07-05 20:54:12,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:54:12.197, foo, 2016-07-05 20:54:12.197, foo}
2016-07-05 20:54:12,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:54:12.198, foo, 2016-07-05 20:54:12.198, foo}
2016-07-05 20:54:12,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:54:12.199, foo, 2016-07-05 20:54:12.199, foo}
2016-07-05 20:54:12,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:54:12.199, foo, 2016-07-05 20:54:12.199, foo}
2016-07-05 20:54:12,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:54:12.2, foo, 2016-07-05 20:54:12.2, foo}
2016-07-05 20:54:12,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:54:12.201, foo, 2016-07-05 20:54:12.201, foo}
2016-07-05 20:54:12,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:54:12.202, foo, 2016-07-05 20:54:12.202, foo}
2016-07-05 20:54:12,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:54:12.202, foo, 2016-07-05 20:54:12.202, foo}
2016-07-05 20:54:12,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:54:12.203, foo, 2016-07-05 20:54:12.203, foo}
2016-07-05 20:54:12,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:54:12.209, foo, 2016-07-05 20:54:12.209, foo}
2016-07-05 20:54:12,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:12.21, foo, 2016-07-05 20:54:12.21, foo}
2016-07-05 20:54:12,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:12.21, foo, 2016-07-05 20:54:12.21, foo}
2016-07-05 20:54:12,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:12.211, foo, 2016-07-05 20:54:12.211, foo}
2016-07-05 20:54:12,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:54:12.211, foo, 2016-07-05 20:54:12.211, foo}
2016-07-05 20:54:12,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:54:12.212, foo, 2016-07-05 20:54:12.212, foo}
2016-07-05 20:54:12,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:54:12.213, foo, 2016-07-05 20:54:12.213, foo}
2016-07-05 20:54:12,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:54:12.213, foo, 2016-07-05 20:54:12.213, foo}
2016-07-05 20:54:12,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:54:12.214, foo, 2016-07-05 20:54:12.214, foo}
2016-07-05 20:54:12,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:54:12.215, foo, 2016-07-05 20:54:12.215, foo}
2016-07-05 20:54:12,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:54:12.215, foo, 2016-07-05 20:54:12.215, foo}
2016-07-05 20:54:12,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:54:12.216, foo, 2016-07-05 20:54:12.216, foo}
2016-07-05 20:54:12,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:54:12.217, foo, 2016-07-05 20:54:12.217, foo}
2016-07-05 20:54:12,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:54:12.217, foo, 2016-07-05 20:54:12.217, foo}
2016-07-05 20:54:12,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:54:12.218, foo, 2016-07-05 20:54:12.218, foo}
2016-07-05 20:54:12,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:54:12.219, foo, 2016-07-05 20:54:12.219, foo}
2016-07-05 20:54:12,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:54:12.219, foo, 2016-07-05 20:54:12.219, foo}
2016-07-05 20:54:12,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:54:12.22, foo, 2016-07-05 20:54:12.22, foo}
2016-07-05 20:54:12,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:54:12.221, foo, 2016-07-05 20:54:12.221, foo}
2016-07-05 20:54:12,279 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:54:12,280 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:54:12,280 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:54:12,281 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:54:12,281 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:54:12,281 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:54:12,281 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:54:12,282 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:54:12,283 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:54:12,285 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:54:12,287 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:54:12,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:54:12,291 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:54:12,291 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:54:12,293 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:54:12,295 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 20:54:12,295 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 20:54:12,296 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 20:54:12,296 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 20:54:12,296 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 20:54:12,296 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 20:54:12,301 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 20:54:12,302 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column
alter table MEMBER_SECURITY add REMINDER_USE_COUNT INTEGER NOT NULL after REMINDER_ANSWER
2016-07-05 20:54:12,352 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add identity column as primary key
alter table MEMBER_SERVICE add MEMBER_SERVICE_ID INTEGER NOT NULL
2016-07-05 20:54:12,398 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:54:12,420 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE drop primary key
2016-07-05 20:54:12,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update MEMBER_SERVICE set MEMBER_SERVICE_ID = MEMBER_ID
2016-07-05 20:54:12,452 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add primary key (MEMBER_SERVICE_ID)
2016-07-05 20:54:12,503 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:54:12,528 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE modify column MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL
2016-07-05 20:54:12,558 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE unique (MEMBER_ID)
2016-07-05 20:54:12,585 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=9 failure=0
2016-07-05 20:54:12,585 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=9 failure=0 (in 1 files)
2016-07-05 20:54:12,586 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:54:12,586 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:54:12,587 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:54:12,587 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:54:12,587 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:54:12,587 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:54:12,588 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 20:54:12,588 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:54:12,588 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:54:12,589 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:54:12,589 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:54:12,589 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:54:12,589 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:54:12,589 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:54:12,591 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:54:12,593 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:54:12,597 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:54:12,598 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:54:12,598 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:54:12,599 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:54:12,610 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:54:12,622 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:54:12,633 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:54:12,644 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:54:12,654 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:54:12,664 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:54:12,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:54:12,692 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:54:12,704 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:54:12,711 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:54:12,722 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:54:12,732 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:54:12,738 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:54:12,746 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:54:12,753 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:54:12,753 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:54:12,753 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:54:12,753 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:54:12,754 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:54:12,754 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:54:12,754 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:54:12,754 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:54:12,755 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:54:12,763 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck diffmap file: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 20:54:12,763 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck result file: playsql/migration/schema/alter-check-result.html
2016-07-05 20:54:12,764 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 20:54:12,764 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 20:54:12,764 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 20:54:12,777 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 20:54:12,777 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 20:54:12,777 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 20:54:12,804 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:54:12,923 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:54:12,992 [main] INFO  (DfAlterCheckProcess#processSuccess():988) - 
2016-07-05 20:54:12,992 [main] INFO  (DfAlterCheckProcess#processSuccess():989) - +-------------------+
2016-07-05 20:54:12,992 [main] INFO  (DfAlterCheckProcess#processSuccess():990) - |                   |
2016-07-05 20:54:12,992 [main] INFO  (DfAlterCheckProcess#processSuccess():991) - |   Success Story   |
2016-07-05 20:54:12,992 [main] INFO  (DfAlterCheckProcess#processSuccess():992) - |                   |
2016-07-05 20:54:12,993 [main] INFO  (DfAlterCheckProcess#processSuccess():993) - +-------------------+
2016-07-05 20:54:12,994 [main] INFO  (DfAlterCheckProcess#compressCheckedAlterZip():1070) - ...Saving the history to playsql/migration/history/201607/20160705_2054/checked-alter-to-20160705-2035.zip
2016-07-05 20:54:12,997 [main] INFO  (DfAlterCheckProcess$7#accept():1075) -   playsql/migration/alter/alter-schema.sql
2016-07-05 20:54:12,999 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the executed alterSqlFile: playsql/migration/alter/alter-schema.sql
2016-07-05 20:54:13,000 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 20:54:13,000 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 20:54:13,011 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:54:13,029 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:54:13,033 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m08s545ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql

 {Alter Schema}: success=9 failure=0 (in 1 files)
  o alter-schema.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:57:38,451 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:57:38,455 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:57:38,456 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:57:38,461 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:57:38,462 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:57:38,465 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:57:40,383 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:40,384 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:40,385 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:40,385 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:40,396 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:57:40,845 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:57:40,845 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:57:40,867 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:57:40,868 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:57:40,868 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:57:40,877 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:57:40,878 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:57:40,878 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:57:40,902 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:57:40,904 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:40,905 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:57:40,945 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:57:40,953 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:57:40,959 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:57:40,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:57:40,980 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:57:41,001 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:57:41,031 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:57:41,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:57:41,064 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:57:41,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:57:41,105 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:57:41,127 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:57:41,151 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:57:41,164 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:57:41,189 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:57:41,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:57:41,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:57:41,245 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:57:41,267 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:57:41,297 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:57:41,314 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:57:41,340 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:57:41,361 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:57:41,365 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:57:41,369 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:57:41,376 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:57:41,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:57:41,384 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:57:41,387 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:57:41,390 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:57:41,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:57:41,397 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:57:41,400 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:57:41,405 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:57:41,409 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:57:41,412 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:57:41,416 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:57:41,480 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:57:41,483 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:57:41,485 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:57:41,486 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:57:41,486 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:57:41,486 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:57:41,487 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:57:41,487 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:57:41,492 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:57:41,495 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:57:41,496 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:57:41,561 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:57:41,577 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:57:41,578 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:57:41,579 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:57:41,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:57:41,582 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:57:41,586 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:57:41,587 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:57:41,587 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:57:41,588 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:57:41,588 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:57:41,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:57:41,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:57:41,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:57:41,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:57:41,713 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:57:41,786 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:57:41,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:57:41,813 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:57:41,824 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:57:41,837 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:57:41,883 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:57:41,896 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:57:41,906 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:57:41,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:57:41,951 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:57:41,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:57:41,982 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,002 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:57:42,022 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:57:42,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,064 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,082 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:57:42,102 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,142 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:57:42,161 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:57:42,185 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:57:42,205 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:57:42,221 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:57:42,246 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:57:42,281 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:57:42,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:57:42,317 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:57:42,339 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:57:42,358 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:57:42,377 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:57:42,397 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:57:42,417 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:57:42,439 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:57:42,458 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:57:42,478 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:57:42,479 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:57:42,480 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:57:42,482 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:57:42,483 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:57:42,484 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:57:42,484 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:57:42,604 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:57:42,604 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:57:42,604 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:57:42,605 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:57:42,605 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:57:42,605 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:57:42,632 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:57:42,632 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 20:57:42,633 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:57:42,906 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:57:42,907 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:42,907 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:57:42,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:57:42,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:57:42,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:57:42,995 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:57:43,001 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:57:43,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:57:43,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:57:43,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:57:43,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:57:43,016 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:57:43,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:57:43,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:57:43,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:57:43,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:57:43,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:57:43,028 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:57:43,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:57:43,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:57:43,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:57:43,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:57:43,037 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:57:43,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:57:43,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:57:43,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:57:43,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:57:43,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:57:43,050 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:57:43,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:57:43,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:57:43,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:57:43,057 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:57:43,060 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:57:43,060 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 20:57:43,061 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:57:43,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:57:43.158, foo, 2016-07-05 20:57:43.158, foo, 0}
2016-07-05 20:57:43,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:57:43.166, foo, 2016-07-05 20:57:43.166, foo, 0}
2016-07-05 20:57:43,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:57:43.169, foo, 2016-07-05 20:57:43.169, foo, 0}
2016-07-05 20:57:43,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:57:43.171, foo, 2016-07-05 20:57:43.171, foo, 0}
2016-07-05 20:57:43,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:57:43.175, foo, 2016-07-05 20:57:43.175, foo, 0}
2016-07-05 20:57:43,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:57:43.177, foo, 2016-07-05 20:57:43.177, foo, 0}
2016-07-05 20:57:43,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:57:43.18, foo, 2016-07-05 20:57:43.18, foo, 0}
2016-07-05 20:57:43,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:57:43.182, foo, 2016-07-05 20:57:43.182, foo, 0}
2016-07-05 20:57:43,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:57:43.184, foo, 2016-07-05 20:57:43.184, foo, 0}
2016-07-05 20:57:43,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:57:43.186, foo, 2016-07-05 20:57:43.186, foo, 0}
2016-07-05 20:57:43,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:57:43.195, foo, 2016-07-05 20:57:43.195, foo, 0}
2016-07-05 20:57:43,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:57:43.198, foo, 2016-07-05 20:57:43.198, foo, 0}
2016-07-05 20:57:43,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:57:43.2, foo, 2016-07-05 20:57:43.2, foo, 0}
2016-07-05 20:57:43,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:57:43.208, foo, 2016-07-05 20:57:43.208, foo, 0}
2016-07-05 20:57:43,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:57:43.211, foo, 2016-07-05 20:57:43.211, foo, 0}
2016-07-05 20:57:43,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:57:43.213, foo, 2016-07-05 20:57:43.213, foo, 0}
2016-07-05 20:57:43,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:57:43.215, foo, 2016-07-05 20:57:43.215, foo, 0}
2016-07-05 20:57:43,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:57:43.221, foo, 2016-07-05 20:57:43.221, foo, 0}
2016-07-05 20:57:43,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:57:43.225, foo, 2016-07-05 20:57:43.225, foo, 0}
2016-07-05 20:57:43,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:57:43.228, foo, 2016-07-05 20:57:43.228, foo, 0}
2016-07-05 20:57:43,264 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:57:43,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:57:43.265, foo, 2016-07-05 20:57:43.265, foo, 0}
2016-07-05 20:57:43,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:57:43.268, foo, 2016-07-05 20:57:43.268, foo, 0}
2016-07-05 20:57:43,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:57:43.272, foo, 2016-07-05 20:57:43.272, foo, 0}
2016-07-05 20:57:43,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:57:43.275, foo, 2016-07-05 20:57:43.275, foo, 0}
2016-07-05 20:57:43,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:57:43.279, foo, 2016-07-05 20:57:43.279, foo, 0}
2016-07-05 20:57:43,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:57:43.281, foo, 2016-07-05 20:57:43.281, foo, 0}
2016-07-05 20:57:43,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:57:43.284, foo, 2016-07-05 20:57:43.284, foo, 0}
2016-07-05 20:57:43,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:57:43.286, foo, 2016-07-05 20:57:43.286, foo, 0}
2016-07-05 20:57:43,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:57:43.29, foo, 2016-07-05 20:57:43.29, foo, 0}
2016-07-05 20:57:43,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:57:43.292, foo, 2016-07-05 20:57:43.292, foo, 0}
2016-07-05 20:57:43,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:57:43.294, foo, 2016-07-05 20:57:43.294, foo, 0}
2016-07-05 20:57:43,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:57:43.297, foo, 2016-07-05 20:57:43.297, foo, 0}
2016-07-05 20:57:43,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:57:43.299, foo, 2016-07-05 20:57:43.299, foo, 0}
2016-07-05 20:57:43,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:57:43.301, foo, 2016-07-05 20:57:43.301, foo, 0}
2016-07-05 20:57:43,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:57:43.304, foo, 2016-07-05 20:57:43.304, foo, 0}
2016-07-05 20:57:43,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:57:43.307, foo, 2016-07-05 20:57:43.307, foo, 0}
2016-07-05 20:57:43,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:57:43.311, foo, 2016-07-05 20:57:43.311, foo, 0}
2016-07-05 20:57:43,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:57:43.314, foo, 2016-07-05 20:57:43.314, foo, 0}
2016-07-05 20:57:43,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:57:43.316, foo, 2016-07-05 20:57:43.316, foo, 0}
2016-07-05 20:57:43,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:57:43.317, foo, 2016-07-05 20:57:43.317, foo, 0}
2016-07-05 20:57:43,333 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:57:43,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:57:43,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:57:43,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:57:43,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:57:43,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:57:43,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:57:43,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:57:43,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:57:43,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:57:43,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:57:43,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:57:43,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:57:43,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:57:43,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:57:43,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:57:43,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:57:43,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:57:43,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:57:43,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:57:43,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:57:43,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:57:43,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:57:43,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:57:43,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:57:43,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:57:43,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:57:43,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:57:43,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:57:43,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:57:43,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:57:43,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:57:43,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:57:43,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:57:43,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:57:43,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:57:43,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:57:43,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:57:43,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:57:43,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:57:43,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:57:43,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:57:43,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:57:43,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:57:43,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:57:43,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:57:43,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:57:43,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:57:43,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:57:43,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:57:43,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:57:43,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:57:43,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:57:43,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:57:43,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:57:43,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:57:43,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:57:43,453 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:57:43,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:57:43.454, foo, 2016-07-05 20:57:43.454, foo, 0}
2016-07-05 20:57:43,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:57:43.456, foo, 2016-07-05 20:57:43.456, foo, 0}
2016-07-05 20:57:43,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:57:43.458, foo, 2016-07-05 20:57:43.458, foo, 0}
2016-07-05 20:57:43,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:57:43.459, foo, 2016-07-05 20:57:43.459, foo, 0}
2016-07-05 20:57:43,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:57:43.461, foo, 2016-07-05 20:57:43.461, foo, 0}
2016-07-05 20:57:43,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:57:43.462, foo, 2016-07-05 20:57:43.462, foo, 0}
2016-07-05 20:57:43,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:57:43.464, foo, 2016-07-05 20:57:43.464, foo, 0}
2016-07-05 20:57:43,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:57:43.464, foo, 2016-07-05 20:57:43.464, foo, 0}
2016-07-05 20:57:43,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:57:43.465, foo, 2016-07-05 20:57:43.465, foo, 0}
2016-07-05 20:57:43,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:57:43.466, foo, 2016-07-05 20:57:43.466, foo, 0}
2016-07-05 20:57:43,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:57:43.466, foo, 2016-07-05 20:57:43.466, foo, 0}
2016-07-05 20:57:43,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:57:43.467, foo, 2016-07-05 20:57:43.467, foo, 0}
2016-07-05 20:57:43,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:57:43.468, foo, 2016-07-05 20:57:43.468, foo, 0}
2016-07-05 20:57:43,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:57:43.47, foo, 2016-07-05 20:57:43.47, foo, 0}
2016-07-05 20:57:43,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:57:43.472, foo, 2016-07-05 20:57:43.472, foo, 0}
2016-07-05 20:57:43,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:57:43.473, foo, 2016-07-05 20:57:43.473, foo, 0}
2016-07-05 20:57:43,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:57:43.476, foo, 2016-07-05 20:57:43.476, foo, 0}
2016-07-05 20:57:43,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:57:43.477, foo, 2016-07-05 20:57:43.477, foo, 0}
2016-07-05 20:57:43,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:57:43.478, foo, 2016-07-05 20:57:43.478, foo, 0}
2016-07-05 20:57:43,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:57:43.479, foo, 2016-07-05 20:57:43.48, foo, 0}
2016-07-05 20:57:43,506 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:57:43,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:57:43.508, foo, 2016-07-05 20:57:43.508, foo, 0}
2016-07-05 20:57:43,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:57:43.509, foo, 2016-07-05 20:57:43.509, foo, 0}
2016-07-05 20:57:43,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:57:43.51, foo, 2016-07-05 20:57:43.51, foo, 0}
2016-07-05 20:57:43,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:57:43.512, foo, 2016-07-05 20:57:43.512, foo, 0}
2016-07-05 20:57:43,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:57:43.514, foo, 2016-07-05 20:57:43.514, foo, 0}
2016-07-05 20:57:43,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:57:43.515, foo, 2016-07-05 20:57:43.515, foo, 0}
2016-07-05 20:57:43,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:57:43.516, foo, 2016-07-05 20:57:43.516, foo, 0}
2016-07-05 20:57:43,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:57:43.517, foo, 2016-07-05 20:57:43.517, foo, 0}
2016-07-05 20:57:43,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:57:43.518, foo, 2016-07-05 20:57:43.518, foo, 0}
2016-07-05 20:57:43,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:57:43.519, foo, 2016-07-05 20:57:43.519, foo, 0}
2016-07-05 20:57:43,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:57:43.52, foo, 2016-07-05 20:57:43.52, foo, 0}
2016-07-05 20:57:43,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:57:43.522, foo, 2016-07-05 20:57:43.522, foo, 0}
2016-07-05 20:57:43,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:57:43.522, foo, 2016-07-05 20:57:43.522, foo, 0}
2016-07-05 20:57:43,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:57:43.531, foo, 2016-07-05 20:57:43.531, foo, 0}
2016-07-05 20:57:43,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:57:43.532, foo, 2016-07-05 20:57:43.532, foo, 0}
2016-07-05 20:57:43,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:57:43.533, foo, 2016-07-05 20:57:43.533, foo, 0}
2016-07-05 20:57:43,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:57:43.533, foo, 2016-07-05 20:57:43.533, foo, 0}
2016-07-05 20:57:43,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:57:43.534, foo, 2016-07-05 20:57:43.534, foo, 0}
2016-07-05 20:57:43,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:57:43.535, foo, 2016-07-05 20:57:43.535, foo, 0}
2016-07-05 20:57:43,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:57:43.536, foo, 2016-07-05 20:57:43.536, foo, 0}
2016-07-05 20:57:43,555 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:57:43,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:57:43.556, foo, 2016-07-05 20:57:43.556, foo}
2016-07-05 20:57:43,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:57:43.558, foo, 2016-07-05 20:57:43.558, foo}
2016-07-05 20:57:43,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:57:43.559, foo, 2016-07-05 20:57:43.559, foo}
2016-07-05 20:57:43,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:57:43.561, foo, 2016-07-05 20:57:43.561, foo}
2016-07-05 20:57:43,569 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:57:43,569 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:57:43,570 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 20:57:43,570 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:57:43,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:57:43.642, foo, 2016-07-05 20:57:43.642, foo, 0}
2016-07-05 20:57:43,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:57:43.648, foo, 2016-07-05 20:57:43.648, foo, 0}
2016-07-05 20:57:43,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:57:43.653, foo, 2016-07-05 20:57:43.653, foo, 0}
2016-07-05 20:57:43,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:57:43.672, foo, 2016-07-05 20:57:43.672, foo, 0}
2016-07-05 20:57:43,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:57:43.675, foo, 2016-07-05 20:57:43.675, foo, 0}
2016-07-05 20:57:43,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:57:43.676, foo, 2016-07-05 20:57:43.676, foo, 0}
2016-07-05 20:57:43,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:57:43.676, foo, 2016-07-05 20:57:43.676, foo, 0}
2016-07-05 20:57:43,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:57:43.677, foo, 2016-07-05 20:57:43.677, foo, 0}
2016-07-05 20:57:43,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:57:43.678, foo, 2016-07-05 20:57:43.678, foo, 0}
2016-07-05 20:57:43,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:57:43.682, foo, 2016-07-05 20:57:43.682, foo, 0}
2016-07-05 20:57:43,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:57:43.686, foo, 2016-07-05 20:57:43.686, foo, 0}
2016-07-05 20:57:43,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:57:43.705, foo, 2016-07-05 20:57:43.705, foo, 0}
2016-07-05 20:57:43,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:57:43.72, foo, 2016-07-05 20:57:43.72, foo, 0}
2016-07-05 20:57:43,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:57:43.724, foo, 2016-07-05 20:57:43.724, foo, 0}
2016-07-05 20:57:43,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:57:43.726, foo, 2016-07-05 20:57:43.726, foo, 0}
2016-07-05 20:57:43,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:57:43.733, foo, 2016-07-05 20:57:43.733, foo, 0}
2016-07-05 20:57:43,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:57:43.733, foo, 2016-07-05 20:57:43.733, foo, 0}
2016-07-05 20:57:43,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:57:43.734, foo, 2016-07-05 20:57:43.734, foo, 0}
2016-07-05 20:57:43,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:57:43.741, foo, 2016-07-05 20:57:43.741, foo, 0}
2016-07-05 20:57:43,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:57:43.744, foo, 2016-07-05 20:57:43.744, foo, 0}
2016-07-05 20:57:43,790 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:57:43,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:57:43.791, foo, 2016-07-05 20:57:43.791, foo, 0}
2016-07-05 20:57:43,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:57:43.793, foo, 2016-07-05 20:57:43.793, foo, 0}
2016-07-05 20:57:43,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:57:43.793, foo, 2016-07-05 20:57:43.793, foo, 0}
2016-07-05 20:57:43,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:57:43.794, foo, 2016-07-05 20:57:43.794, foo, 0}
2016-07-05 20:57:43,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:57:43.795, foo, 2016-07-05 20:57:43.795, foo, 0}
2016-07-05 20:57:43,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:57:43.797, foo, 2016-07-05 20:57:43.797, foo, 0}
2016-07-05 20:57:43,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:57:43.798, foo, 2016-07-05 20:57:43.798, foo, 0}
2016-07-05 20:57:43,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:57:43.799, foo, 2016-07-05 20:57:43.799, foo, 0}
2016-07-05 20:57:43,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:57:43.8, foo, 2016-07-05 20:57:43.8, foo, 0}
2016-07-05 20:57:43,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:57:43.801, foo, 2016-07-05 20:57:43.801, foo, 0}
2016-07-05 20:57:43,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:57:43.802, foo, 2016-07-05 20:57:43.802, foo, 0}
2016-07-05 20:57:43,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:57:43.804, foo, 2016-07-05 20:57:43.804, foo, 0}
2016-07-05 20:57:43,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:57:43.806, foo, 2016-07-05 20:57:43.806, foo, 0}
2016-07-05 20:57:43,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:57:43.808, foo, 2016-07-05 20:57:43.808, foo, 0}
2016-07-05 20:57:43,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:57:43.81, foo, 2016-07-05 20:57:43.81, foo, 0}
2016-07-05 20:57:43,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:57:43.813, foo, 2016-07-05 20:57:43.813, foo, 0}
2016-07-05 20:57:43,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:57:43.815, foo, 2016-07-05 20:57:43.815, foo, 0}
2016-07-05 20:57:43,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:57:43.816, foo, 2016-07-05 20:57:43.816, foo, 0}
2016-07-05 20:57:43,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:57:43.817, foo, 2016-07-05 20:57:43.817, foo, 0}
2016-07-05 20:57:43,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:57:43.818, foo, 2016-07-05 20:57:43.818, foo, 0}
2016-07-05 20:57:43,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:57:43.823, foo, 2016-07-05 20:57:43.823, foo, 0}
2016-07-05 20:57:43,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:57:43.824, foo, 2016-07-05 20:57:43.824, foo, 0}
2016-07-05 20:57:43,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:57:43.825, foo, 2016-07-05 20:57:43.825, foo, 0}
2016-07-05 20:57:43,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:57:43.826, foo, 2016-07-05 20:57:43.826, foo, 0}
2016-07-05 20:57:43,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:57:43.828, foo, 2016-07-05 20:57:43.828, foo, 0}
2016-07-05 20:57:43,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:57:43.828, foo, 2016-07-05 20:57:43.828, foo, 0}
2016-07-05 20:57:43,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:57:43.829, foo, 2016-07-05 20:57:43.829, foo, 0}
2016-07-05 20:57:43,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:57:43.83, foo, 2016-07-05 20:57:43.83, foo, 0}
2016-07-05 20:57:43,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:57:43.831, foo, 2016-07-05 20:57:43.831, foo, 0}
2016-07-05 20:57:43,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:57:43.832, foo, 2016-07-05 20:57:43.832, foo, 0}
2016-07-05 20:57:43,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:57:43.833, foo, 2016-07-05 20:57:43.833, foo, 0}
2016-07-05 20:57:43,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:57:43.834, foo, 2016-07-05 20:57:43.834, foo, 0}
2016-07-05 20:57:43,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:57:43.834, foo, 2016-07-05 20:57:43.834, foo, 0}
2016-07-05 20:57:43,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:57:43.836, foo, 2016-07-05 20:57:43.836, foo, 0}
2016-07-05 20:57:43,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:57:43.837, foo, 2016-07-05 20:57:43.837, foo, 0}
2016-07-05 20:57:43,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:57:43.838, foo, 2016-07-05 20:57:43.838, foo, 0}
2016-07-05 20:57:43,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:57:43.84, foo, 2016-07-05 20:57:43.84, foo, 0}
2016-07-05 20:57:43,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:57:43.842, foo, 2016-07-05 20:57:43.842, foo, 0}
2016-07-05 20:57:43,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:57:43.843, foo, 2016-07-05 20:57:43.843, foo, 0}
2016-07-05 20:57:43,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:57:43.844, foo, 2016-07-05 20:57:43.844, foo, 0}
2016-07-05 20:57:43,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:57:43.846, foo, 2016-07-05 20:57:43.846, foo, 0}
2016-07-05 20:57:43,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:57:43.849, foo, 2016-07-05 20:57:43.849, foo, 0}
2016-07-05 20:57:43,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:57:43.85, foo, 2016-07-05 20:57:43.85, foo, 0}
2016-07-05 20:57:43,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:57:43.852, foo, 2016-07-05 20:57:43.852, foo, 0}
2016-07-05 20:57:43,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:57:43.853, foo, 2016-07-05 20:57:43.853, foo, 0}
2016-07-05 20:57:43,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:57:43.854, foo, 2016-07-05 20:57:43.854, foo, 0}
2016-07-05 20:57:43,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:57:43.856, foo, 2016-07-05 20:57:43.856, foo, 0}
2016-07-05 20:57:43,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:57:43.857, foo, 2016-07-05 20:57:43.857, foo, 0}
2016-07-05 20:57:43,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:57:43.859, foo, 2016-07-05 20:57:43.859, foo, 0}
2016-07-05 20:57:43,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:57:43.863, foo, 2016-07-05 20:57:43.863, foo, 0}
2016-07-05 20:57:43,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:57:43.865, foo, 2016-07-05 20:57:43.865, foo, 0}
2016-07-05 20:57:43,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:57:43.866, foo, 2016-07-05 20:57:43.866, foo, 0}
2016-07-05 20:57:43,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:57:43.867, foo, 2016-07-05 20:57:43.867, foo, 0}
2016-07-05 20:57:43,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:57:43.869, foo, 2016-07-05 20:57:43.869, foo, 0}
2016-07-05 20:57:43,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:57:43.87, foo, 2016-07-05 20:57:43.87, foo, 0}
2016-07-05 20:57:43,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:57:43.872, foo, 2016-07-05 20:57:43.872, foo, 0}
2016-07-05 20:57:43,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:57:43.874, foo, 2016-07-05 20:57:43.874, foo, 0}
2016-07-05 20:57:43,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:57:43.875, foo, 2016-07-05 20:57:43.875, foo, 0}
2016-07-05 20:57:43,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:57:43.877, foo, 2016-07-05 20:57:43.877, foo, 0}
2016-07-05 20:57:43,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:57:43.878, foo, 2016-07-05 20:57:43.878, foo, 0}
2016-07-05 20:57:43,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:57:43.879, foo, 2016-07-05 20:57:43.879, foo, 0}
2016-07-05 20:57:43,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:57:43.881, foo, 2016-07-05 20:57:43.881, foo, 0}
2016-07-05 20:57:43,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:57:43.882, foo, 2016-07-05 20:57:43.882, foo, 0}
2016-07-05 20:57:43,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:57:43.886, foo, 2016-07-05 20:57:43.886, foo, 0}
2016-07-05 20:57:43,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:57:43.886, foo, 2016-07-05 20:57:43.886, foo, 0}
2016-07-05 20:57:43,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:57:43.887, foo, 2016-07-05 20:57:43.887, foo, 0}
2016-07-05 20:57:43,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:57:43.889, foo, 2016-07-05 20:57:43.889, foo, 0}
2016-07-05 20:57:43,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:57:43.892, foo, 2016-07-05 20:57:43.892, foo, 0}
2016-07-05 20:57:43,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:57:43.894, foo, 2016-07-05 20:57:43.894, foo, 0}
2016-07-05 20:57:43,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:57:43.897, foo, 2016-07-05 20:57:43.897, foo, 0}
2016-07-05 20:57:43,963 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:57:43,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:57:43.964, foo, 2016-07-05 20:57:43.964, foo}
2016-07-05 20:57:43,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:57:43.966, foo, 2016-07-05 20:57:43.966, foo}
2016-07-05 20:57:43,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:57:43.967, foo, 2016-07-05 20:57:43.967, foo}
2016-07-05 20:57:43,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:57:43.968, foo, 2016-07-05 20:57:43.968, foo}
2016-07-05 20:57:43,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:57:43.969, foo, 2016-07-05 20:57:43.969, foo}
2016-07-05 20:57:43,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:57:43.97, foo, 2016-07-05 20:57:43.97, foo}
2016-07-05 20:57:43,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:57:43.971, foo, 2016-07-05 20:57:43.971, foo}
2016-07-05 20:57:43,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:57:43.972, foo, 2016-07-05 20:57:43.972, foo}
2016-07-05 20:57:43,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:57:43.973, foo, 2016-07-05 20:57:43.973, foo}
2016-07-05 20:57:43,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:57:43.974, foo, 2016-07-05 20:57:43.974, foo}
2016-07-05 20:57:43,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:57:43.975, foo, 2016-07-05 20:57:43.975, foo}
2016-07-05 20:57:43,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:57:43.986, foo, 2016-07-05 20:57:43.986, foo}
2016-07-05 20:57:43,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:57:43.987, foo, 2016-07-05 20:57:43.987, foo}
2016-07-05 20:57:43,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:57:43.988, foo, 2016-07-05 20:57:43.988, foo}
2016-07-05 20:57:43,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:57:43.99, foo, 2016-07-05 20:57:43.99, foo}
2016-07-05 20:57:43,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:57:43.992, foo, 2016-07-05 20:57:43.992, foo}
2016-07-05 20:57:43,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:57:43.993, foo, 2016-07-05 20:57:43.993, foo}
2016-07-05 20:57:43,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:57:43.994, foo, 2016-07-05 20:57:43.994, foo}
2016-07-05 20:57:43,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:57:43.995, foo, 2016-07-05 20:57:43.995, foo}
2016-07-05 20:57:43,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:57:43.997, foo, 2016-07-05 20:57:43.997, foo}
2016-07-05 20:57:43,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:57:43.998, foo, 2016-07-05 20:57:43.998, foo}
2016-07-05 20:57:44,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:57:44.0, foo, 2016-07-05 20:57:44.0, foo}
2016-07-05 20:57:44,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:57:44.001, foo, 2016-07-05 20:57:44.001, foo}
2016-07-05 20:57:44,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:57:44.002, foo, 2016-07-05 20:57:44.002, foo}
2016-07-05 20:57:44,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:57:44.003, foo, 2016-07-05 20:57:44.003, foo}
2016-07-05 20:57:44,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:57:44.004, foo, 2016-07-05 20:57:44.004, foo}
2016-07-05 20:57:44,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:57:44.005, foo, 2016-07-05 20:57:44.005, foo}
2016-07-05 20:57:44,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:57:44.006, foo, 2016-07-05 20:57:44.006, foo}
2016-07-05 20:57:44,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:57:44.007, foo, 2016-07-05 20:57:44.007, foo}
2016-07-05 20:57:44,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:57:44.008, foo, 2016-07-05 20:57:44.008, foo}
2016-07-05 20:57:44,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:57:44.009, foo, 2016-07-05 20:57:44.009, foo}
2016-07-05 20:57:44,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:57:44.01, foo, 2016-07-05 20:57:44.01, foo}
2016-07-05 20:57:44,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:57:44.011, foo, 2016-07-05 20:57:44.011, foo}
2016-07-05 20:57:44,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:57:44.012, foo, 2016-07-05 20:57:44.012, foo}
2016-07-05 20:57:44,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:57:44.012, foo, 2016-07-05 20:57:44.012, foo}
2016-07-05 20:57:44,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:57:44.014, foo, 2016-07-05 20:57:44.014, foo}
2016-07-05 20:57:44,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:57:44.017, foo, 2016-07-05 20:57:44.017, foo}
2016-07-05 20:57:44,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:57:44.018, foo, 2016-07-05 20:57:44.018, foo}
2016-07-05 20:57:44,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:57:44.018, foo, 2016-07-05 20:57:44.018, foo}
2016-07-05 20:57:44,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:57:44.019, foo, 2016-07-05 20:57:44.019, foo}
2016-07-05 20:57:44,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:57:44.02, foo, 2016-07-05 20:57:44.02, foo}
2016-07-05 20:57:44,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:57:44.021, foo, 2016-07-05 20:57:44.021, foo}
2016-07-05 20:57:44,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:57:44.022, foo, 2016-07-05 20:57:44.022, foo}
2016-07-05 20:57:44,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:57:44.023, foo, 2016-07-05 20:57:44.023, foo}
2016-07-05 20:57:44,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:57:44.024, foo, 2016-07-05 20:57:44.024, foo}
2016-07-05 20:57:44,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:57:44.026, foo, 2016-07-05 20:57:44.026, foo}
2016-07-05 20:57:44,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:57:44.027, foo, 2016-07-05 20:57:44.027, foo}
2016-07-05 20:57:44,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:57:44.029, foo, 2016-07-05 20:57:44.029, foo}
2016-07-05 20:57:44,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:57:44.03, foo, 2016-07-05 20:57:44.03, foo}
2016-07-05 20:57:44,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:57:44.031, foo, 2016-07-05 20:57:44.031, foo}
2016-07-05 20:57:44,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:57:44.032, foo, 2016-07-05 20:57:44.032, foo}
2016-07-05 20:57:44,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:57:44.032, foo, 2016-07-05 20:57:44.032, foo}
2016-07-05 20:57:44,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:57:44.033, foo, 2016-07-05 20:57:44.033, foo}
2016-07-05 20:57:44,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:57:44.034, foo, 2016-07-05 20:57:44.034, foo}
2016-07-05 20:57:44,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:57:44.035, foo, 2016-07-05 20:57:44.035, foo}
2016-07-05 20:57:44,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:57:44.036, foo, 2016-07-05 20:57:44.036, foo}
2016-07-05 20:57:44,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:57:44.037, foo, 2016-07-05 20:57:44.037, foo}
2016-07-05 20:57:44,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:57:44.037, foo, 2016-07-05 20:57:44.037, foo}
2016-07-05 20:57:44,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:57:44.038, foo, 2016-07-05 20:57:44.038, foo}
2016-07-05 20:57:44,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:57:44.039, foo, 2016-07-05 20:57:44.039, foo}
2016-07-05 20:57:44,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:57:44.039, foo, 2016-07-05 20:57:44.039, foo}
2016-07-05 20:57:44,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:57:44.04, foo, 2016-07-05 20:57:44.04, foo}
2016-07-05 20:57:44,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:57:44.04, foo, 2016-07-05 20:57:44.04, foo}
2016-07-05 20:57:44,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:57:44.041, foo, 2016-07-05 20:57:44.041, foo}
2016-07-05 20:57:44,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:57:44.041, foo, 2016-07-05 20:57:44.042, foo}
2016-07-05 20:57:44,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:57:44.042, foo, 2016-07-05 20:57:44.042, foo}
2016-07-05 20:57:44,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:57:44.043, foo, 2016-07-05 20:57:44.043, foo}
2016-07-05 20:57:44,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:57:44.051, foo, 2016-07-05 20:57:44.051, foo}
2016-07-05 20:57:44,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:57:44.052, foo, 2016-07-05 20:57:44.052, foo}
2016-07-05 20:57:44,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:57:44.052, foo, 2016-07-05 20:57:44.052, foo}
2016-07-05 20:57:44,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:57:44.053, foo, 2016-07-05 20:57:44.053, foo}
2016-07-05 20:57:44,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:57:44.054, foo, 2016-07-05 20:57:44.054, foo}
2016-07-05 20:57:44,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:57:44.055, foo, 2016-07-05 20:57:44.055, foo}
2016-07-05 20:57:44,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:57:44.057, foo, 2016-07-05 20:57:44.057, foo}
2016-07-05 20:57:44,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:57:44.058, foo, 2016-07-05 20:57:44.058, foo}
2016-07-05 20:57:44,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:57:44.058, foo, 2016-07-05 20:57:44.058, foo}
2016-07-05 20:57:44,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:57:44.059, foo, 2016-07-05 20:57:44.059, foo}
2016-07-05 20:57:44,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:57:44.061, foo, 2016-07-05 20:57:44.061, foo}
2016-07-05 20:57:44,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:57:44.062, foo, 2016-07-05 20:57:44.062, foo}
2016-07-05 20:57:44,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:57:44.063, foo, 2016-07-05 20:57:44.063, foo}
2016-07-05 20:57:44,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:57:44.065, foo, 2016-07-05 20:57:44.065, foo}
2016-07-05 20:57:44,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:57:44.066, foo, 2016-07-05 20:57:44.066, foo}
2016-07-05 20:57:44,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:57:44.067, foo, 2016-07-05 20:57:44.067, foo}
2016-07-05 20:57:44,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:57:44.067, foo, 2016-07-05 20:57:44.067, foo}
2016-07-05 20:57:44,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:57:44.068, foo, 2016-07-05 20:57:44.068, foo}
2016-07-05 20:57:44,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:57:44.07, foo, 2016-07-05 20:57:44.07, foo}
2016-07-05 20:57:44,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:57:44.071, foo, 2016-07-05 20:57:44.071, foo}
2016-07-05 20:57:44,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:57:44.072, foo, 2016-07-05 20:57:44.072, foo}
2016-07-05 20:57:44,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:57:44.073, foo, 2016-07-05 20:57:44.073, foo}
2016-07-05 20:57:44,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:57:44.074, foo, 2016-07-05 20:57:44.074, foo}
2016-07-05 20:57:44,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:57:44.075, foo, 2016-07-05 20:57:44.075, foo}
2016-07-05 20:57:44,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:57:44.076, foo, 2016-07-05 20:57:44.076, foo}
2016-07-05 20:57:44,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:57:44.077, foo, 2016-07-05 20:57:44.077, foo}
2016-07-05 20:57:44,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:57:44.077, foo, 2016-07-05 20:57:44.077, foo}
2016-07-05 20:57:44,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:57:44.078, foo, 2016-07-05 20:57:44.078, foo}
2016-07-05 20:57:44,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:57:44.086, foo, 2016-07-05 20:57:44.086, foo}
2016-07-05 20:57:44,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:57:44.086, foo, 2016-07-05 20:57:44.086, foo}
2016-07-05 20:57:44,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:57:44.087, foo, 2016-07-05 20:57:44.087, foo}
2016-07-05 20:57:44,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:57:44.088, foo, 2016-07-05 20:57:44.088, foo}
2016-07-05 20:57:44,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:57:44.089, foo, 2016-07-05 20:57:44.089, foo}
2016-07-05 20:57:44,149 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:57:44,150 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 20:57:44,166 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:44,177 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:57:44,186 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:57:44,189 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:57:44,192 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:57:44,195 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:57:44,199 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:57:44,209 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:57:44,211 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 20:57:44,214 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 20:57:44,218 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 20:57:44,220 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 20:57:44,227 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:57:44,228 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:57:44,228 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:57:44,228 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:57:44,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:57:44,229 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:57:44,237 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:57:44,238 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:57:44,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:57:44,251 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:57:44,252 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:57:44,254 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:57:44,255 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:57:44,256 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:57:44,262 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s837ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 20:57:45,247 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 20:57:45,250 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 20:57:45,251 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 20:57:45,251 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 20:57:45,251 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 20:57:45,284 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:45,285 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:45,285 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:45,285 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:45,337 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:57:45,337 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:57:45,337 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 20:57:45,352 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:57:45,503 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:57:45,508 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:57:45,989 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:57:45,989 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:57:45,991 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:57:45,993 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:57:45,994 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:45,994 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:57:46,017 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:57:46,020 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:57:46,038 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:57:46,039 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:57:46,039 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:57:46,040 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:57:46,097 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:57:46,116 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:57:46,132 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:57:46,148 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:57:46,166 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:57:46,180 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:57:46,197 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:57:46,212 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:57:46,224 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:57:46,233 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:57:46,247 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:57:46,258 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:57:46,266 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:57:46,276 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:57:46,285 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:57:46,286 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:57:46,286 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:57:46,286 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:57:46,286 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:57:46,287 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:57:46,290 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:57:46,291 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 20:57:46,291 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:57:46,349 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 20:57:46,358 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:57:46,442 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 20:57:46,445 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:57:46,461 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s231ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 20:57:47,273 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:57:47,275 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:57:47,276 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:57:47,276 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:57:47,276 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:57:47,309 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:47,310 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:47,310 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:47,311 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:47,316 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 20:57:47,316 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 20:57:47,316 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 20:57:47,317 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 20:57:47,317 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 20:57:47,317 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 20:57:47,368 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:57:47,484 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:57:47,640 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:57:47,648 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:57:47,648 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:57:47,650 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:57:47,651 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:57:47,651 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:57:47,652 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:57:47,655 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:57:47,655 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:57:47,657 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:57:47,664 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:57:47,665 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:57:47,666 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:57:47,666 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:57:47,666 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:57:47,667 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:57:47,667 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:57:47,668 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:57:47,681 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:48,079 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:57:48,083 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:57:48,086 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:57:48,091 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:57:48,097 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:57:48,101 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:57:48,118 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:57:48,154 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=3
2016-07-05 20:57:48,684 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 20:57:48,684 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 20:57:48,691 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:57:48,705 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:57:48,705 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:57:48,782 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:57:48,787 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:57:48,791 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:57:48,792 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:57:48,793 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:57:48,793 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:57:48,843 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:57:48,860 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:57:48,865 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s606ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:57:51,468 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 20:57:51,470 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 20:57:51,470 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 20:57:51,470 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 20:57:51,470 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 20:57:51,490 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:51,490 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:51,490 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:51,491 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:51,509 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 20:57:51,510 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 20:57:51,543 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:57:51,618 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 20:57:51,844 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 20:57:51,849 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:57:51,849 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:57:51,851 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:57:51,852 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:57:51,852 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:57:51,854 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:57:51,857 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:57:51,857 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:57:51,862 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:57:51,873 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:57:51,874 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:57:51,875 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:57:51,875 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:57:51,875 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:57:51,876 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:57:51,876 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:57:51,876 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:57:51,886 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:52,254 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:57:52,258 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:57:52,260 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:57:52,263 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:57:52,267 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:57:52,270 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:57:52,282 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 20:57:52,283 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 20:57:52,283 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 20:57:52,283 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 20:57:52,284 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 20:57:52,284 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 20:57:52,284 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 20:57:52,285 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 20:57:52,285 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 20:57:52,285 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 20:57:52,302 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 20:57:52,305 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 20:57:52,362 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 20:57:52,368 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 20:57:52,391 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 20:57:52,399 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 20:57:52,423 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 20:57:52,453 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 20:57:52,461 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 20:57:52,468 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 20:57:52,476 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 20:57:52,479 [main] INFO  (Database#info():2711) - }
2016-07-05 20:57:52,479 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 20:57:52,480 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 20:57:52,500 [main] INFO  (Database#info():2711) - }
2016-07-05 20:57:52,507 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 20:57:52,552 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:57:52,553 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 20:57:52,554 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 20:57:53,111 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 20:57:53,389 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 20:57:53,585 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 20:57:53,765 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 20:57:53,969 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 20:57:54,167 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 20:57:54,337 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 20:57:54,551 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 20:57:54,704 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 20:57:54,845 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 20:57:55,039 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 20:57:55,190 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 20:57:55,310 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 20:57:55,446 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 20:57:55,580 [main] INFO  (Database#info():2711) - }
2016-07-05 20:57:55,581 [main] INFO  (Database#info():2711) -  
2016-07-05 20:57:55,628 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:57:55,651 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s187ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 20:57:56,681 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 20:57:56,683 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 20:57:56,684 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 20:57:56,684 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 20:57:56,684 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 20:57:56,710 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:56,711 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:56,711 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:56,711 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:56,758 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:57:56,765 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:57:57,105 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:57:57,105 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:57:57,135 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:57:57,146 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:57:57,146 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:57:57,149 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:57:57,152 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:57:57,152 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:57:57,154 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:57:57,161 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:57:57,161 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:57:57,163 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:57:57,167 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:57:57,168 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:57:57,168 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:57:57,176 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s511ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 20:57:57,912 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 20:57:57,914 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 20:57:57,914 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 20:57:57,915 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 20:57:57,915 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 20:57:57,936 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:57:57,936 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:57:57,936 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:57:57,936 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:57:57,949 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 20:57:57,949 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 20:57:57,955 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:57:58,054 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:57:58,059 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:57:58,379 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:57:58,379 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:57:58,383 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:57:58,436 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:57:58,436 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:57:58,437 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:57:58,449 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:57:58,449 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:57:58,451 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:57:58,459 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:57:58,460 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:57:58,461 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:57:58,469 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:57:58,470 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:57:58,476 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 20:57:58,476 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 20:57:58,532 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:57:58,537 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:57:58,538 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:57:58,538 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:57:58,538 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:57:58,539 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:57:58,567 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 20:57:58,594 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 20:57:58,603 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 20:57:58,604 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:57:58,604 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 20:57:58,605 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 20:57:58,606 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 20:57:58,606 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 20:57:58,607 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 20:57:58,607 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 20:57:58,608 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 20:57:58,608 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 20:57:58,608 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 20:57:58,609 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 20:57:58,647 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 20:57:58,648 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 20:57:58,648 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 20:57:58,649 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 20:57:58,649 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 20:57:58,665 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 20:57:58,666 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 20:57:58,666 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 20:57:58,666 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 20:57:58,667 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 20:57:58,671 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 20:57:58,853 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:57:58,860 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:57:58,863 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:57:58,865 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:57:58,868 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:57:58,870 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:57:58,874 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:57:58,885 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 20:57:58,889 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 20:57:58,909 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:57:58,909 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 20:57:59,075 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 20:57:59,141 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 20:57:59,154 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 20:57:59,212 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 20:57:59,279 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 20:57:59,339 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 20:57:59,384 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 20:57:59,385 [main] INFO  (Database#info():2711) - }
2016-07-05 20:57:59,386 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 20:57:59,391 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 20:57:59,440 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 20:57:59,461 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 20:57:59,480 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 20:57:59,497 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 20:57:59,515 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 20:57:59,541 [main] INFO  (Database#info():2711) - }
2016-07-05 20:57:59,585 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 20:57:59,595 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:57:59,599 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:57:59,607 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s705ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:58:06,508 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2016-07-05 20:58:06,512 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2016-07-05 20:58:06,513 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2016-07-05 20:58:06,513 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2016-07-05 20:58:06,513 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2016-07-05 20:58:06,547 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:06,547 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:06,548 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:06,549 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:06,599 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 20:58:06,600 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 20:58:06,600 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1460) - ...Loading previous schema (schema diff process)
2016-07-05 20:58:06,615 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:58:06,770 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 20:58:06,779 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:58:07,338 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:58:07,341 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:58:07,342 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 20:58:07,344 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:58:07,345 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:07,345 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:58:07,364 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 20:58:07,369 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 20:58:07,402 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 20:58:07,403 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:58:07,404 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 20:58:07,404 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 20:58:07,486 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 20:58:07,513 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 20:58:07,552 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 20:58:07,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 20:58:07,604 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 20:58:07,620 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 20:58:07,637 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 20:58:07,656 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 20:58:07,667 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 20:58:07,678 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 20:58:07,701 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 20:58:07,725 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 20:58:07,747 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 20:58:07,758 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 20:58:07,771 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 20:58:07,771 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 20:58:07,772 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 20:58:07,772 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 20:58:07,772 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 20:58:07,774 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 20:58:07,780 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 20:58:07,781 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = ./schema/project-schema-maihamadb.xml
2016-07-05 20:58:07,782 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 20:58:07,842 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1478) - ...Loading next schema (schema diff process)
2016-07-05 20:58:07,852 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:58:07,942 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1493) -  -> same as previous (schema diff)
2016-07-05 20:58:07,943 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:58:07,957 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s462ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2016-07-05 20:58:08,958 [main] INFO  (TorqueDocumentationTask#begin():175) - +------------------------------------------+
2016-07-05 20:58:08,962 [main] INFO  (TorqueDocumentationTask#begin():176) - |                                          |
2016-07-05 20:58:08,963 [main] INFO  (TorqueDocumentationTask#begin():177) - |                   Doc                    |
2016-07-05 20:58:08,963 [main] INFO  (TorqueDocumentationTask#begin():185) - |                                          |
2016-07-05 20:58:08,964 [main] INFO  (TorqueDocumentationTask#begin():186) - +------------------------------------------+
2016-07-05 20:58:08,993 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:08,994 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:08,994 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:08,995 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:08,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - 
2016-07-05 20:58:08,998 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():247) - * * * * * * * * * * *
2016-07-05 20:58:08,999 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():248) - *                   *
2016-07-05 20:58:09,001 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():249) - *    Schema HTML    *
2016-07-05 20:58:09,002 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():250) - *                   *
2016-07-05 20:58:09,003 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():251) - * * * * * * * * * * *
2016-07-05 20:58:09,054 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:58:09,166 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 20:58:09,343 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 20:58:09,350 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:58:09,350 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:58:09,352 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:58:09,353 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:58:09,353 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:58:09,355 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:58:09,357 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:58:09,357 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:58:09,360 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:58:09,364 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:58:09,365 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:58:09,365 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:58:09,366 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:58:09,366 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:58:09,367 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:58:09,367 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:58:09,367 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:58:09,377 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:09,725 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:58:09,732 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:58:09,737 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:58:09,742 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:58:09,752 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:58:09,757 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:58:09,773 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 20:58:09,810 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=3
2016-07-05 20:58:10,319 [main] INFO  (Database#getAvailableProcedureList():2823) -  
2016-07-05 20:58:10,320 [main] INFO  (Database#getAvailableProcedureList():2824) - ...Setting up procedures for documents
2016-07-05 20:58:10,327 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:58:10,340 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:58:10,341 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:58:10,422 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:58:10,428 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:58:10,429 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:58:10,430 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:58:10,431 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:58:10,431 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:58:10,479 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:58:10,494 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:58:10,498 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s559ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2016-07-05 20:58:13,324 [main] INFO  (TorqueDataModelTask#begin():109) - +------------------------------------------+
2016-07-05 20:58:13,330 [main] INFO  (TorqueDataModelTask#begin():110) - |                                          |
2016-07-05 20:58:13,331 [main] INFO  (TorqueDataModelTask#begin():111) - |                 Generate                 |
2016-07-05 20:58:13,332 [main] INFO  (TorqueDataModelTask#begin():112) - |                                          |
2016-07-05 20:58:13,332 [main] INFO  (TorqueDataModelTask#begin():113) - +------------------------------------------+
2016-07-05 20:58:13,373 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:13,374 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:13,374 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:13,375 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:13,401 [main] INFO  (TorqueDataModelTask#setupControlTemplate():164) - 
2016-07-05 20:58:13,401 [main] INFO  (TorqueDataModelTask#setupControlTemplate():165) - ...Using Java control: om/ControlGenerateJava.vm
2016-07-05 20:58:13,453 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:58:13,550 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2016-07-05 20:58:13,840 [main] INFO  (Database#doEnableGenerateOutputDirectory():1147) - ...Setting up generateOutputDirectory: ../src/main/java
2016-07-05 20:58:13,845 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2016-07-05 20:58:13,846 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2016-07-05 20:58:13,847 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2016-07-05 20:58:13,848 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2016-07-05 20:58:13,849 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2016-07-05 20:58:13,851 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2016-07-05 20:58:13,854 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2016-07-05 20:58:13,854 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2016-07-05 20:58:13,857 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2016-07-05 20:58:13,867 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:58:13,868 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2016-07-05 20:58:13,869 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2016-07-05 20:58:13,869 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_LOGIN_LATEST
2016-07-05 20:58:13,870 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2016-07-05 20:58:13,870 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_LOGIN.[MEMBER_ID]
2016-07-05 20:58:13,871 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.LOGIN_DATETIME = ($$sqbegin$$\nselect max(login.LOGIN_DATETIME)\n  from MEMBER_LOGIN login\n where login.MEMBER_ID = $$foreignAlias$$.MEMBER_ID\n)$$sqend$$
2016-07-05 20:58:13,872 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2016-07-05 20:58:13,886 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:14,254 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:58:14,259 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:58:14,262 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:58:14,265 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:58:14,275 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:58:14,280 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:58:14,298 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2016-07-05 20:58:14,299 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2016-07-05 20:58:14,300 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2016-07-05 20:58:14,303 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2016-07-05 20:58:14,304 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2016-07-05 20:58:14,304 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2016-07-05 20:58:14,306 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2016-07-05 20:58:14,307 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2016-07-05 20:58:14,307 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2016-07-05 20:58:14,308 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2016-07-05 20:58:14,329 [main] INFO  (Database#info():2711) - public void parseAllCommon() {
2016-07-05 20:58:14,333 [main] INFO  (Database#info():2711) -     parse('CDef');
2016-07-05 20:58:14,389 [main] INFO  (Database#info():2711) -     parse('DBCurrent');
2016-07-05 20:58:14,393 [main] INFO  (Database#info():2711) -     parse('DBFluteConfig');
2016-07-05 20:58:14,419 [main] INFO  (Database#info():2711) -     parse('DBFluteInitializer');
2016-07-05 20:58:14,428 [main] INFO  (Database#info():2711) -     parse('DBMetaInstanceHandler');
2016-07-05 20:58:14,453 [main] INFO  (Database#info():2711) -     parse('EntityDefinedCommonColumn');
2016-07-05 20:58:14,478 [main] INFO  (Database#info():2711) -     parse('ImplementedBehaviorSelector');
2016-07-05 20:58:14,486 [main] INFO  (Database#info():2711) -     parse('ImplementedCommonColumnAutoSetupper');
2016-07-05 20:58:14,497 [main] INFO  (Database#info():2711) -     parse('ImplementedInvokerAssistant');
2016-07-05 20:58:14,514 [main] INFO  (Database#info():2711) -     parse('ImplementedSqlClauseCreator');
2016-07-05 20:58:14,517 [main] INFO  (Database#info():2711) - }
2016-07-05 20:58:14,518 [main] INFO  (Database#info():2711) - public void parseContainerConfig() {
2016-07-05 20:58:14,519 [main] INFO  (Database#info():2711) -     parse('../resources/dbflute.xml')
2016-07-05 20:58:14,539 [main] INFO  (Database#info():2711) - }
2016-07-05 20:58:14,547 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldTableClass() {
2016-07-05 20:58:14,607 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:58:14,608 [main] INFO  (Database#info():2711) - public void parseTableClass() {
2016-07-05 20:58:14,609 [main] INFO  (Database#info():2711) -     parse('member');
2016-07-05 20:58:15,155 [main] INFO  (Database#info():2711) -     parse('member_address');
2016-07-05 20:58:15,418 [main] INFO  (Database#info():2711) -     parse('member_login');
2016-07-05 20:58:15,625 [main] INFO  (Database#info():2711) -     parse('member_security');
2016-07-05 20:58:15,822 [main] INFO  (Database#info():2711) -     parse('member_service');
2016-07-05 20:58:16,049 [main] INFO  (Database#info():2711) -     parse('member_status');
2016-07-05 20:58:16,238 [main] INFO  (Database#info():2711) -     parse('member_withdrawal');
2016-07-05 20:58:16,401 [main] INFO  (Database#info():2711) -     parse('product');
2016-07-05 20:58:16,612 [main] INFO  (Database#info():2711) -     parse('product_category');
2016-07-05 20:58:16,781 [main] INFO  (Database#info():2711) -     parse('product_status');
2016-07-05 20:58:16,908 [main] INFO  (Database#info():2711) -     parse('purchase');
2016-07-05 20:58:17,108 [main] INFO  (Database#info():2711) -     parse('purchase_payment');
2016-07-05 20:58:17,243 [main] INFO  (Database#info():2711) -     parse('region');
2016-07-05 20:58:17,354 [main] INFO  (Database#info():2711) -     parse('service_rank');
2016-07-05 20:58:17,505 [main] INFO  (Database#info():2711) -     parse('withdrawal_reason');
2016-07-05 20:58:17,658 [main] INFO  (Database#info():2711) - }
2016-07-05 20:58:17,658 [main] INFO  (Database#info():2711) -  
2016-07-05 20:58:17,712 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:58:17,725 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s418ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2016-07-05 20:58:19,000 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2016-07-05 20:58:19,003 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2016-07-05 20:58:19,004 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2016-07-05 20:58:19,004 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2016-07-05 20:58:19,004 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2016-07-05 20:58:19,030 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:19,030 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:19,030 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:19,030 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:19,070 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:58:19,076 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:58:19,423 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:58:19,424 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:58:19,460 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:58:19,465 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:58:19,466 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:58:19,469 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:58:19,492 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:58:19,492 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:58:19,494 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:58:19,503 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:58:19,503 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:58:19,506 [main] INFO  (DfOutsideSqlTestTask$1#traceSql():194) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:58:19,514 [main] INFO  (DfOutsideSqlTestTask$1#traceResult():199) -  -> success=1 failure=0

2016-07-05 20:58:19,514 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:58:19,515 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:58:19,525 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s533ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
  o MemberBhv_selectOutsideMember.sql
  o MemberBhv_selectPartOfMember.sql
  o PurchaseBhv_selectPurchaseMonthCursor.sql
  o PurchaseBhv_selectPurchaseMonthSummary.sql

   o: OK (4)
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2016-07-05 20:58:20,235 [main] INFO  (DfSql2EntityTask#begin():105) - +------------------------------------------+
2016-07-05 20:58:20,237 [main] INFO  (DfSql2EntityTask#begin():106) - |                                          |
2016-07-05 20:58:20,237 [main] INFO  (DfSql2EntityTask#begin():107) - |                Sql2Entity                |
2016-07-05 20:58:20,237 [main] INFO  (DfSql2EntityTask#begin():108) - |                                          |
2016-07-05 20:58:20,237 [main] INFO  (DfSql2EntityTask#begin():109) - +------------------------------------------+
2016-07-05 20:58:20,254 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:20,254 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:20,254 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:20,255 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:20,266 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - 
2016-07-05 20:58:20,266 [main] INFO  (DfSql2EntityTask#setupControlTemplate():176) - ...Using Java control: om/ControlSql2EntityJava.vm
2016-07-05 20:58:20,272 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 20:58:20,367 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectOutsideMember.sql
2016-07-05 20:58:20,375 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:58:20,692 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:58:20,692 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:58:20,695 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 初めての外だしSQL

 [df:description]
  会員ID、会員名称、生年月日、会員ステータス名称、サービスポイント数を取得
  会員IDの等値、会員名称の前方一致、会員ステータスの等値を and で連結
  それぞれ条件値がない場合は条件自体が無効になるように
  全ての条件値がない場合は全件検索になるように
*/

-- #df:entity#

-- !df:pmb!
-- !!AutoDetect!!

select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , mb.MEMBER_STATUS_CODE
     , stat.MEMBER_STATUS_NAME
     , serv.SERVICE_POINT_COUNT
  from MEMBER mb
    left outer join MEMBER_STATUS stat
      on mb.MEMBER_STATUS_CODE = stat.MEMBER_STATUS_CODE
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
 /*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- //会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'S%' -- //会員名称 (Null Allowed)
       /*END*/
       /*IF pmb.memberStatusCode != null*/
   and mb.MEMBER_STATUS_CODE = /*pmb.memberStatusCode:ref(MEMBER)*/'FML' -- //会員ステータス名称 (Null Allowed)
       /*END*/
/*END*/
2016-07-05 20:58:20,752 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:58:20,752 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: MemberBhv_selectPartOfMember.sql
2016-07-05 20:58:20,753 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 ページング検索

 [df:description]
 (Manual)ページング検索すること
 o 基本は "初めての外だしSQL" のSQLと同じで...
 o 会員ステータスの等値条件は要らない
 o 会員サービスのサービスポイント数の大なり条件を追加
 o 結合に関して、カウント検索のパフォーマンスを最大限考慮すること (会員サービスの結合とか)
 そのとき、IFコメントに記述する条件が複雑にならないように (代理判定メソッドを使う)
*/

-- #df:entity#

-- !df:pmb extends ManualPaging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mb.MEMBER_ID
     , mb.MEMBER_NAME
     , mb.BIRTHDATE
     , serv.SERVICE_POINT_COUNT
-- ELSE select count(*) 
/*END*/
  from MEMBER mb
    /*IF pmb.needsJoinService()*/
	left outer join MEMBER_SERVICE serv
      on mb.MEMBER_ID = serv.MEMBER_ID
    /*END*/
/*BEGIN*/
 where /*IF pmb.memberId != null*/
       mb.MEMBER_ID = /*pmb.memberId*/3 -- 会員ID (Null Allowed)
 	   /*END*/
 	   /*IF pmb.memberName != null*/
   and mb.MEMBER_NAME like /*pmb.memberName*/'%S%' -- //会員名称 (Null Allowed)
       /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
   and serv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // サービスポイント数の下限値 (Null Allowed)
      /*END*/
/*END*/
/*IF pmb.isPaging()*/
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
/*END*/
2016-07-05 20:58:20,761 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:58:20,761 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthCursor.sql
2016-07-05 20:58:20,762 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 外だしSQLでカーソル検索ってみる

 [df:description]
 "さらに外だし" と同じ仕様(ページングは不要)
 カーソル検索として作成すること
 明らかにおかしいカラム名のカラムはデータ取得してはいけない (後は何を取ってもOKですが、これだけはっ)
*/

-- #df:entity#
-- +cursor+

-- !df:pmb!
-- !!AutoDetect!!

select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                           
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  from PURCHASE pch
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
2016-07-05 20:58:20,771 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:58:20,771 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: PurchaseBhv_selectPurchaseMonthSummary.sql
2016-07-05 20:58:20,772 [main] INFO  (DfOutsideSqlAnalyzer#traceSql():330) - SQL:
/*
 [df:title]
 さらに外だし

 [df:description]
 "会員と購入月" ごとの購入の平均購入価格、合計購入数量を検索する
 会員ID、会員名称、購入月、平均購入価格、合計購入数量という形で検索
 "支払済みの購入だけ" という条件が指定できるようにする
 会員名称の曖昧検索(部分一致)という条件が指定ができるようにする
 会員のサービスポイント数の大なり条件が指定できるようにする
 会員IDの昇順、購入月の降順で並べる
*/

-- #df:entity#

-- !df:pmb extends Paging!
-- !!AutoDetect!!

/*IF pmb.isPaging()*/
select mem.MEMBER_ID                                 
     , mem.MEMBER_NAME                               
     , month(pch.PURCHASE_DATETIME) as 購入月       -- // 購入された月
     , avg(pch.PURCHASE_PRICE)      as 平均購入価格  -- // 会員と購入月ごとの購入の平均購入価格
     , sum(pch.PURCHASE_COUNT)      as 合計購入量   -- // 会員と購入月ごとの購入の合計購入数量
  -- ELSE select count(*) from (select mem.MEMBER_ID
/*END*/ 
  from PURCHASE pch
  /*IF pmb.needsJoinMember()*/
  inner join MEMBER mem
     on pch.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
  /*IF pmb.needsJoinService()*/
  inner join MEMBER_SERVICE srv
     on srv.MEMBER_ID = mem.MEMBER_ID
  /*END*/ 
/*BEGIN*/
where /*IF pmb.memberName != null*/
      mem.MEMBER_NAME like /*pmb.memberName*/'%A%'    -- // 会員IDで部分一致(Null Allowed)
      /*END*/
      /*IF pmb.SERVICE_POINT_COUNT != null*/
  and srv.SERVICE_POINT_COUNT >= /*pmb.SERVICE_POINT_COUNT*/0 -- // 指定されたポイント以上かどうか(Null Allowed)
      /*END*/
/*END*/
group by month(pch.PURCHASE_DATETIME)
       , mem.MEMBER_ID
/*IF pmb.isPaging()*/
order by mem.MEMBER_ID asc
       , month(pch.PURCHASE_DATETIME) desc
  limit /*$pmb.pageStartIndex*/80, /*$pmb.fetchSize*/20
  -- ELSE ) as count
/*END*/
2016-07-05 20:58:20,799 [main] INFO  (DfOutsideSqlAnalyzer#traceResult():336) -  -> success=1 failure=0
2016-07-05 20:58:20,799 [main] INFO  (DfSqlFileFireMan#fire():89) - {Fired SQL}: success=4 failure=0 (in 4 files)
2016-07-05 20:58:20,806 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():90) -  
2016-07-05 20:58:20,806 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():91) - ...Setting up procedures for generating parameter-beans
2016-07-05 20:58:20,869 [main] INFO  (DfProcedureSupplementExtractorBase#log():122) - select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = 'maihamadb' order by ROUTINE_NAME
2016-07-05 20:58:20,873 [main] INFO  (DfProcedureExtractor#log():1126) - ...Reflecting source info to procedure meta: schema=maihamadb
2016-07-05 20:58:20,874 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_IN_OUT_PARAMETER:{4, 84, cb677351}
2016-07-05 20:58:20,874 [main] INFO  (DfProcedureExtractor#log():1126) -   SP_RETURN_RESULT_SET:{9, 254, 4b86b61f}
2016-07-05 20:58:20,874 [main] INFO  (DfProcedureExtractor#log():1126) - ...Filtering procedures by the property: before=2
2016-07-05 20:58:20,875 [main] INFO  (DfProcedureExtractor#log():1126) -  -> All procedures are target: count=2
2016-07-05 20:58:20,898 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_IN_OUT_PARAMETER(?, ?, ?)}
2016-07-05 20:58:20,925 [main] INFO  (DfProcedureExecutionMetaExtractor#doExtractExecutionMetaData():109) - ...Calling: {call SP_RETURN_RESULT_SET(?)}
2016-07-05 20:58:20,938 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():93) - 
2016-07-05 20:58:20,938 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():94) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 20:58:20,938 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpInOutParameterPmb]: maihamadb.SP_IN_OUT_PARAMETER // procedureNoResult
2016-07-05 20:58:20,939 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInVarchar; // procedureColumnIn(12, VARCHAR)
2016-07-05 20:58:20,940 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VOutVarchar; // procedureColumnOut(12, VARCHAR)
2016-07-05 20:58:20,940 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     String VInoutVarchar; // procedureColumnInOut(12, VARCHAR)
2016-07-05 20:58:20,940 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():107) - [SpReturnResultSetPmb]: maihamadb.SP_RETURN_RESULT_SET // procedureNoResult
2016-07-05 20:58:20,941 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():150) -     java.time.LocalDate birthdateFrom; // procedureColumnIn(91, DATE)
2016-07-05 20:58:20,941 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult1> notParamResult1; // procedureColumnResult
2016-07-05 20:58:20,942 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():171) -     List<SpReturnResultSetNotParamResult2> notParamResult2; // procedureColumnResult
2016-07-05 20:58:20,942 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():185) - = = = = = = = = = =/
2016-07-05 20:58:20,942 [main] INFO  (DfProcedurePmbSetupper#setupProcedure():186) -  
2016-07-05 20:58:20,972 [main] INFO  (DfSql2EntityTask#initControlContext():306) - 
2016-07-05 20:58:20,972 [main] INFO  (DfSql2EntityTask#initControlContext():307) - ...Preparing generation of customize-entities and parameter-beans
2016-07-05 20:58:20,973 [main] INFO  (DfSql2EntityTask#initControlContext():308) - * * * * * * * * * *
2016-07-05 20:58:20,973 [main] INFO  (DfSql2EntityTask#initControlContext():309) - * CustomizeEntity *
2016-07-05 20:58:20,973 [main] INFO  (DfSql2EntityTask#initControlContext():310) - * * * * * * * * * *
2016-07-05 20:58:20,985 [main] INFO  (DfSql2EntityTask#showCustomizeEntity():922) - 
OutsideMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PartOfMember
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  SERVICE_POINT_COUNT INT(11) related to member_service.SERVICE_POINT_COUNT

PurchaseMonthCursor (cursor)
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

PurchaseMonthSummary
  MEMBER_ID INT(11) related to member.MEMBER_ID
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  購入月 INT(2)
  平均購入価格 DECIMAL(14, 4)
  合計購入量 DECIMAL(32)

SpReturnResultSetNotParamResult1 (procedure)
  MEMBER_NAME VARCHAR(160) related to member.MEMBER_NAME
  BIRTHDATE DATE(10) related to member.BIRTHDATE
  MEMBER_STATUS_CODE CHAR(3) related to member.MEMBER_STATUS_CODE

SpReturnResultSetNotParamResult2 (procedure)
  MEMBER_STATUS_CODE CHAR(3) related to member_status.MEMBER_STATUS_CODE
  MEMBER_STATUS_NAME VARCHAR(50) related to member_status.MEMBER_STATUS_NAME
2016-07-05 20:58:20,986 [main] INFO  (DfSql2EntityTask#showParameterBean():927) - * * * * * * * * *
2016-07-05 20:58:20,986 [main] INFO  (DfSql2EntityTask#showParameterBean():928) - * ParameterBean *
2016-07-05 20:58:20,987 [main] INFO  (DfSql2EntityTask#showParameterBean():929) - * * * * * * * * *
2016-07-05 20:58:20,987 [main] INFO  (DfSql2EntityTask#showParameterBean():971) - 
OutsideMemberPmb (typed to list, entity)
  Integer memberId:comment(会員ID (Null Allowed))
  String memberName:likePrefix|comment(会員名称 (Null Allowed))
  String memberStatusCode:ref(MEMBER)|comment(会員ステータス名称 (Null Allowed))

PartOfMemberPmb extends SimplePagingBean (typed to entity, manual-paging)
  Integer memberId
  String memberName:likeContain|comment(会員名称 (Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(サービスポイント数の下限値 (Null Allowed))

PurchaseMonthCursorPmb (typed to cursor)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

PurchaseMonthSummaryPmb extends SimplePagingBean (typed to entity, manual-paging)
  String memberName:likeContain|comment(会員IDで部分一致(Null Allowed))
  Integer SERVICE_POINT_COUNT:comment(指定されたポイント以上かどうか(Null Allowed))

SpInOutParameterPmb (procedure)
  v_in_varchar
  v_out_varchar
  v_inout_varchar

SpReturnResultSetPmb (procedure with customize-entity)
  birthdateFrom
2016-07-05 20:58:20,991 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2016-07-05 20:58:21,168 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:21,175 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 20:58:21,178 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 20:58:21,181 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 20:58:21,182 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 20:58:21,184 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 20:58:21,187 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 20:58:21,197 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1163) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2016-07-05 20:58:21,201 [main] INFO  (DfOldClassHandler#info():1033) - public void deleteOldCustomizeClass() {
2016-07-05 20:58:21,223 [main] INFO  (DfOldClassHandler#info():1033) - }
2016-07-05 20:58:21,224 [main] INFO  (Database#info():2711) - public void parseCustomizeEntity() {
2016-07-05 20:58:21,370 [main] INFO  (Database#info():2711) -     parse('OutsideMember')
2016-07-05 20:58:21,436 [main] INFO  (Database#info():2711) -     parse('PartOfMember')
2016-07-05 20:58:21,450 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorCursor')
2016-07-05 20:58:21,505 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursor')
2016-07-05 20:58:21,564 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummary')
2016-07-05 20:58:21,611 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult1')
2016-07-05 20:58:21,648 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetNotParamResult2')
2016-07-05 20:58:21,650 [main] INFO  (Database#info():2711) - }
2016-07-05 20:58:21,651 [main] INFO  (Database#info():2711) - public void parseParameterBean() {
2016-07-05 20:58:21,656 [main] INFO  (Database#info():2711) -     parse('OutsideMemberPmb');
2016-07-05 20:58:21,691 [main] INFO  (Database#info():2711) -     parse('PartOfMemberPmb');
2016-07-05 20:58:21,717 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthCursorPmb');
2016-07-05 20:58:21,739 [main] INFO  (Database#info():2711) -     parse('PurchaseMonthSummaryPmb');
2016-07-05 20:58:21,756 [main] INFO  (Database#info():2711) -     parse('SpInOutParameterPmb');
2016-07-05 20:58:21,774 [main] INFO  (Database#info():2711) -     parse('SpReturnResultSetPmb');
2016-07-05 20:58:21,793 [main] INFO  (Database#info():2711) - }
2016-07-05 20:58:21,837 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():298) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 4

  MemberBhv_selectOutsideMember.sql
  MemberBhv_selectPartOfMember.sql
  PurchaseBhv_selectPurchaseMonthCursor.sql
  PurchaseBhv_selectPurchaseMonthSummary.sql
- - - - - - - - - -/
2016-07-05 20:58:21,847 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:58:21,852 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:58:21,859 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m01s652ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=maihamadb, password=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2016-07-05 20:58:33,438 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 20:58:33,441 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 20:58:33,442 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 20:58:33,446 [main] INFO  (DfReplaceSchemaTask#begin():98) - |              (SavePrevious)              |
2016-07-05 20:58:33,447 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 20:58:33,447 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 20:58:33,449 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 20:58:35,268 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 20:58:35,269 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 20:58:35,270 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 20:58:35,270 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 20:58:35,280 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 20:58:35,706 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 20:58:35,708 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 20:58:35,720 [main] INFO  (DfAlterCheckProcess#savePrevious():144) - 
2016-07-05 20:58:35,720 [main] INFO  (DfAlterCheckProcess#savePrevious():145) - +-------------------+
2016-07-05 20:58:35,723 [main] INFO  (DfAlterCheckProcess#savePrevious():146) - |                   |
2016-07-05 20:58:35,723 [main] INFO  (DfAlterCheckProcess#savePrevious():147) - |   Save Previous   |
2016-07-05 20:58:35,723 [main] INFO  (DfAlterCheckProcess#savePrevious():148) - |                   |
2016-07-05 20:58:35,724 [main] INFO  (DfAlterCheckProcess#savePrevious():149) - +-------------------+
2016-07-05 20:58:35,733 [main] INFO  (DfAlterCheckProcess#finishPreviousCheckedAlter():219) - ...Finishing the previous history (renamed to): playsql/migration/history/201607/20160705_2054/finished-alter-to-20160705-2035.zip
2016-07-05 20:58:35,735 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:58:35,739 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:58:35,743 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:58:35,745 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:58:35,746 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/take-finally.sql
2016-07-05 20:58:35,749 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:58:35,750 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:58:35,751 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:58:35,752 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:58:35,753 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:58:35,754 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:58:35,755 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:58:35,756 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:58:35,756 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:58:35,757 [main] INFO  (DfAlterCheckProcess#doCopyToPreviousResource():330) - ...Saving the file to playsql/migration/previous/data/.DS_Store
2016-07-05 20:58:35,791 [main] INFO  (DfAlterCheckProcess#compressPreviousResource():229) - ...Compressing the previous resources to zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 20:58:35,809 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data
2016-07-05 20:58:35,809 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:58:35,816 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common
2016-07-05 20:58:35,817 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:58:35,817 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls
2016-07-05 20:58:35,818 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:58:35,819 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:58:35,820 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:58:35,821 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut
2016-07-05 20:58:35,821 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:58:35,822 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls
2016-07-05 20:58:35,823 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:58:35,826 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:58:35,830 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:58:35,832 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:58:35,833 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:58:35,834 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:58:35,835 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:58:35,836 [main] INFO  (DfAlterCheckProcess$1#accept():241) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:58:35,845 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:58:35,847 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 20:58:35,851 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 20:58:35,852 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 20:58:35,854 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 20:58:35,855 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 20:58:35,857 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 20:58:35,858 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 20:58:35,860 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 20:58:35,863 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 20:58:35,865 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 20:58:35,867 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 20:58:35,868 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 20:58:35,870 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 20:58:35,871 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 20:58:35,872 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 20:58:35,873 [main] INFO  (DfAlterCheckProcess#checkSavedPreviousResource():340) - ...Checking the previous resources by replacing
2016-07-05 20:58:35,886 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 20:58:35,886 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 20:58:35,887 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 20:58:35,887 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 20:58:35,887 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 20:58:35,887 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 20:58:35,911 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:58:35,911 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:35,912 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:58:35,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 20:58:35,952 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 20:58:35,957 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 20:58:35,966 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 20:58:35,980 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 20:58:35,996 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 20:58:36,020 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 20:58:36,038 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 20:58:36,054 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 20:58:36,077 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 20:58:36,096 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 20:58:36,117 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 20:58:36,137 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 20:58:36,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 20:58:36,178 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 20:58:36,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 20:58:36,217 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 20:58:36,234 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 20:58:36,257 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 20:58:36,277 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 20:58:36,296 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 20:58:36,316 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 20:58:36,343 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 20:58:36,347 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 20:58:36,352 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 20:58:36,357 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 20:58:36,361 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 20:58:36,368 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 20:58:36,372 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 20:58:36,377 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 20:58:36,381 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 20:58:36,384 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 20:58:36,388 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 20:58:36,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 20:58:36,398 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 20:58:36,403 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 20:58:36,407 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 20:58:36,468 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 20:58:36,470 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 20:58:36,473 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 20:58:36,473 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 20:58:36,473 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 20:58:36,474 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 20:58:36,474 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 20:58:36,474 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 20:58:36,477 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 20:58:36,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 20:58:36,481 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 20:58:36,483 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 20:58:36,493 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 20:58:36,493 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 20:58:36,495 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 20:58:36,496 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 20:58:36,498 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 20:58:36,502 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:58:36,503 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 20:58:36,503 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 20:58:36,503 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 20:58:36,504 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 20:58:36,510 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 20:58:36,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 20:58:36,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 20:58:36,610 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 20:58:36,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 20:58:36,695 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 20:58:36,705 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 20:58:36,781 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 20:58:36,840 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 20:58:36,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 20:58:36,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 20:58:36,933 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 20:58:36,969 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 20:58:36,980 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 20:58:37,013 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 20:58:37,028 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:58:37,046 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,066 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 20:58:37,088 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 20:58:37,108 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,128 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,147 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 20:58:37,171 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,236 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 20:58:37,259 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 20:58:37,280 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 20:58:37,312 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 20:58:37,337 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:58:37,358 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 20:58:37,383 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 20:58:37,407 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 20:58:37,422 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 20:58:37,442 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 20:58:37,465 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 20:58:37,483 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 20:58:37,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 20:58:37,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 20:58:37,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 20:58:37,572 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 20:58:37,591 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 20:58:37,592 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 20:58:37,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 20:58:37,594 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 20:58:37,596 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 20:58:37,596 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 20:58:37,597 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 20:58:37,695 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 20:58:37,696 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 20:58:37,696 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 20:58:37,696 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 20:58:37,696 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 20:58:37,696 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 20:58:37,720 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:58:37,721 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 20:58:37,721 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:58:38,010 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 20:58:38,010 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 20:58:38,011 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 20:58:38,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 20:58:38,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 20:58:38,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 20:58:38,150 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 20:58:38,157 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 20:58:38,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 20:58:38,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 20:58:38,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 20:58:38,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 20:58:38,168 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 20:58:38,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 20:58:38,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 20:58:38,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 20:58:38,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 20:58:38,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 20:58:38,180 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 20:58:38,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 20:58:38,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 20:58:38,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 20:58:38,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 20:58:38,189 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 20:58:38,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 20:58:38,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 20:58:38,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 20:58:38,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 20:58:38,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 20:58:38,197 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 20:58:38,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 20:58:38,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 20:58:38,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 20:58:38,207 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 20:58:38,210 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:58:38,210 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 20:58:38,211 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:58:38,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 20:58:38.315, foo, 2016-07-05 20:58:38.315, foo, 0}
2016-07-05 20:58:38,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 20:58:38.326, foo, 2016-07-05 20:58:38.326, foo, 0}
2016-07-05 20:58:38,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 20:58:38.332, foo, 2016-07-05 20:58:38.332, foo, 0}
2016-07-05 20:58:38,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 20:58:38.335, foo, 2016-07-05 20:58:38.335, foo, 0}
2016-07-05 20:58:38,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 20:58:38.339, foo, 2016-07-05 20:58:38.339, foo, 0}
2016-07-05 20:58:38,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 20:58:38.341, foo, 2016-07-05 20:58:38.341, foo, 0}
2016-07-05 20:58:38,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:58:38.343, foo, 2016-07-05 20:58:38.343, foo, 0}
2016-07-05 20:58:38,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 20:58:38.345, foo, 2016-07-05 20:58:38.345, foo, 0}
2016-07-05 20:58:38,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 20:58:38.347, foo, 2016-07-05 20:58:38.347, foo, 0}
2016-07-05 20:58:38,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 20:58:38.349, foo, 2016-07-05 20:58:38.349, foo, 0}
2016-07-05 20:58:38,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 20:58:38.362, foo, 2016-07-05 20:58:38.362, foo, 0}
2016-07-05 20:58:38,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 20:58:38.369, foo, 2016-07-05 20:58:38.369, foo, 0}
2016-07-05 20:58:38,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 20:58:38.373, foo, 2016-07-05 20:58:38.373, foo, 0}
2016-07-05 20:58:38,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 20:58:38.376, foo, 2016-07-05 20:58:38.376, foo, 0}
2016-07-05 20:58:38,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 20:58:38.378, foo, 2016-07-05 20:58:38.379, foo, 0}
2016-07-05 20:58:38,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 20:58:38.381, foo, 2016-07-05 20:58:38.381, foo, 0}
2016-07-05 20:58:38,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 20:58:38.39, foo, 2016-07-05 20:58:38.39, foo, 0}
2016-07-05 20:58:38,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 20:58:38.401, foo, 2016-07-05 20:58:38.401, foo, 0}
2016-07-05 20:58:38,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 20:58:38.406, foo, 2016-07-05 20:58:38.406, foo, 0}
2016-07-05 20:58:38,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 20:58:38.409, foo, 2016-07-05 20:58:38.409, foo, 0}
2016-07-05 20:58:38,442 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 20:58:38,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 20:58:38.443, foo, 2016-07-05 20:58:38.443, foo, 0}
2016-07-05 20:58:38,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 20:58:38.446, foo, 2016-07-05 20:58:38.446, foo, 0}
2016-07-05 20:58:38,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 20:58:38.449, foo, 2016-07-05 20:58:38.449, foo, 0}
2016-07-05 20:58:38,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 20:58:38.45, foo, 2016-07-05 20:58:38.45, foo, 0}
2016-07-05 20:58:38,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 20:58:38.452, foo, 2016-07-05 20:58:38.452, foo, 0}
2016-07-05 20:58:38,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 20:58:38.454, foo, 2016-07-05 20:58:38.454, foo, 0}
2016-07-05 20:58:38,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 20:58:38.456, foo, 2016-07-05 20:58:38.456, foo, 0}
2016-07-05 20:58:38,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 20:58:38.458, foo, 2016-07-05 20:58:38.458, foo, 0}
2016-07-05 20:58:38,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 20:58:38.459, foo, 2016-07-05 20:58:38.459, foo, 0}
2016-07-05 20:58:38,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 20:58:38.461, foo, 2016-07-05 20:58:38.461, foo, 0}
2016-07-05 20:58:38,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 20:58:38.464, foo, 2016-07-05 20:58:38.464, foo, 0}
2016-07-05 20:58:38,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 20:58:38.467, foo, 2016-07-05 20:58:38.467, foo, 0}
2016-07-05 20:58:38,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 20:58:38.473, foo, 2016-07-05 20:58:38.473, foo, 0}
2016-07-05 20:58:38,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 20:58:38.476, foo, 2016-07-05 20:58:38.476, foo, 0}
2016-07-05 20:58:38,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 20:58:38.478, foo, 2016-07-05 20:58:38.478, foo, 0}
2016-07-05 20:58:38,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 20:58:38.48, foo, 2016-07-05 20:58:38.48, foo, 0}
2016-07-05 20:58:38,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 20:58:38.483, foo, 2016-07-05 20:58:38.483, foo, 0}
2016-07-05 20:58:38,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 20:58:38.485, foo, 2016-07-05 20:58:38.485, foo, 0}
2016-07-05 20:58:38,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 20:58:38.487, foo, 2016-07-05 20:58:38.487, foo, 0}
2016-07-05 20:58:38,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 20:58:38.49, foo, 2016-07-05 20:58:38.49, foo, 0}
2016-07-05 20:58:38,515 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 20:58:38,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:58:38,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 20:58:38,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 20:58:38,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 20:58:38,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 20:58:38,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 20:58:38,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 20:58:38,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 20:58:38,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 20:58:38,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 20:58:38,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 20:58:38,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 20:58:38,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 20:58:38,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 20:58:38,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 20:58:38,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 20:58:38,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 20:58:38,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 20:58:38,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 20:58:38,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 20:58:38,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 20:58:38,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 20:58:38,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 20:58:38,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 20:58:38,544 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 20:58:38,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 20:58:38,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 20:58:38,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 20:58:38,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 20:58:38,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 20:58:38,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 20:58:38,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 20:58:38,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 20:58:38,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 20:58:38,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 20:58:38,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 20:58:38,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 20:58:38,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 20:58:38,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 20:58:38,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 20:58:38,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 20:58:38,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 20:58:38,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 20:58:38,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 20:58:38,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 20:58:38,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 20:58:38,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 20:58:38,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 20:58:38,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 20:58:38,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 20:58:38,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 20:58:38,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 20:58:38,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 20:58:38,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 20:58:38,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 20:58:38,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 20:58:38,648 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 20:58:38,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 20:58:38.65, foo, 2016-07-05 20:58:38.65, foo, 0}
2016-07-05 20:58:38,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 20:58:38.653, foo, 2016-07-05 20:58:38.653, foo, 0}
2016-07-05 20:58:38,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 20:58:38.654, foo, 2016-07-05 20:58:38.654, foo, 0}
2016-07-05 20:58:38,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 20:58:38.656, foo, 2016-07-05 20:58:38.656, foo, 0}
2016-07-05 20:58:38,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 20:58:38.657, foo, 2016-07-05 20:58:38.657, foo, 0}
2016-07-05 20:58:38,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 20:58:38.658, foo, 2016-07-05 20:58:38.658, foo, 0}
2016-07-05 20:58:38,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 20:58:38.659, foo, 2016-07-05 20:58:38.659, foo, 0}
2016-07-05 20:58:38,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 20:58:38.66, foo, 2016-07-05 20:58:38.66, foo, 0}
2016-07-05 20:58:38,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 20:58:38.662, foo, 2016-07-05 20:58:38.662, foo, 0}
2016-07-05 20:58:38,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 20:58:38.665, foo, 2016-07-05 20:58:38.665, foo, 0}
2016-07-05 20:58:38,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 20:58:38.667, foo, 2016-07-05 20:58:38.667, foo, 0}
2016-07-05 20:58:38,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 20:58:38.672, foo, 2016-07-05 20:58:38.672, foo, 0}
2016-07-05 20:58:38,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 20:58:38.694, foo, 2016-07-05 20:58:38.694, foo, 0}
2016-07-05 20:58:38,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 20:58:38.695, foo, 2016-07-05 20:58:38.695, foo, 0}
2016-07-05 20:58:38,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 20:58:38.703, foo, 2016-07-05 20:58:38.703, foo, 0}
2016-07-05 20:58:38,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 20:58:38.705, foo, 2016-07-05 20:58:38.705, foo, 0}
2016-07-05 20:58:38,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 20:58:38.708, foo, 2016-07-05 20:58:38.708, foo, 0}
2016-07-05 20:58:38,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 20:58:38.709, foo, 2016-07-05 20:58:38.709, foo, 0}
2016-07-05 20:58:38,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 20:58:38.71, foo, 2016-07-05 20:58:38.71, foo, 0}
2016-07-05 20:58:38,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 20:58:38.711, foo, 2016-07-05 20:58:38.711, foo, 0}
2016-07-05 20:58:38,742 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 20:58:38,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 20:58:38.743, foo, 2016-07-05 20:58:38.743, foo, 0}
2016-07-05 20:58:38,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 20:58:38.745, foo, 2016-07-05 20:58:38.746, foo, 0}
2016-07-05 20:58:38,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 20:58:38.753, foo, 2016-07-05 20:58:38.753, foo, 0}
2016-07-05 20:58:38,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 20:58:38.755, foo, 2016-07-05 20:58:38.755, foo, 0}
2016-07-05 20:58:38,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 20:58:38.756, foo, 2016-07-05 20:58:38.756, foo, 0}
2016-07-05 20:58:38,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 20:58:38.757, foo, 2016-07-05 20:58:38.757, foo, 0}
2016-07-05 20:58:38,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 20:58:38.758, foo, 2016-07-05 20:58:38.758, foo, 0}
2016-07-05 20:58:38,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 20:58:38.759, foo, 2016-07-05 20:58:38.759, foo, 0}
2016-07-05 20:58:38,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 20:58:38.76, foo, 2016-07-05 20:58:38.76, foo, 0}
2016-07-05 20:58:38,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 20:58:38.778, foo, 2016-07-05 20:58:38.778, foo, 0}
2016-07-05 20:58:38,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 20:58:38.779, foo, 2016-07-05 20:58:38.779, foo, 0}
2016-07-05 20:58:38,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 20:58:38.78, foo, 2016-07-05 20:58:38.78, foo, 0}
2016-07-05 20:58:38,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 20:58:38.78, foo, 2016-07-05 20:58:38.78, foo, 0}
2016-07-05 20:58:38,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 20:58:38.781, foo, 2016-07-05 20:58:38.781, foo, 0}
2016-07-05 20:58:38,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 20:58:38.782, foo, 2016-07-05 20:58:38.782, foo, 0}
2016-07-05 20:58:38,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 20:58:38.783, foo, 2016-07-05 20:58:38.783, foo, 0}
2016-07-05 20:58:38,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 20:58:38.784, foo, 2016-07-05 20:58:38.784, foo, 0}
2016-07-05 20:58:38,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 20:58:38.785, foo, 2016-07-05 20:58:38.785, foo, 0}
2016-07-05 20:58:38,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 20:58:38.817, foo, 2016-07-05 20:58:38.817, foo, 0}
2016-07-05 20:58:38,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 20:58:38.819, foo, 2016-07-05 20:58:38.819, foo, 0}
2016-07-05 20:58:38,839 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 20:58:38,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 20:58:38.84, foo, 2016-07-05 20:58:38.84, foo}
2016-07-05 20:58:38,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 20:58:38.841, foo, 2016-07-05 20:58:38.841, foo}
2016-07-05 20:58:38,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 20:58:38.842, foo, 2016-07-05 20:58:38.842, foo}
2016-07-05 20:58:38,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 20:58:38.843, foo, 2016-07-05 20:58:38.843, foo}
2016-07-05 20:58:38,847 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 20:58:38,848 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 20:58:38,861 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 20:58:38,861 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 20:58:38,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 20:58:38.913, foo, 2016-07-05 20:58:38.913, foo, 0}
2016-07-05 20:58:38,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 20:58:38.917, foo, 2016-07-05 20:58:38.917, foo, 0}
2016-07-05 20:58:38,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 20:58:38.919, foo, 2016-07-05 20:58:38.919, foo, 0}
2016-07-05 20:58:38,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 20:58:38.92, foo, 2016-07-05 20:58:38.92, foo, 0}
2016-07-05 20:58:38,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 20:58:38.921, foo, 2016-07-05 20:58:38.921, foo, 0}
2016-07-05 20:58:38,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 20:58:38.923, foo, 2016-07-05 20:58:38.923, foo, 0}
2016-07-05 20:58:38,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 20:58:38.924, foo, 2016-07-05 20:58:38.924, foo, 0}
2016-07-05 20:58:38,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 20:58:38.925, foo, 2016-07-05 20:58:38.925, foo, 0}
2016-07-05 20:58:38,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 20:58:38.925, foo, 2016-07-05 20:58:38.925, foo, 0}
2016-07-05 20:58:38,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 20:58:38.926, foo, 2016-07-05 20:58:38.926, foo, 0}
2016-07-05 20:58:38,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 20:58:38.944, foo, 2016-07-05 20:58:38.944, foo, 0}
2016-07-05 20:58:38,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 20:58:38.945, foo, 2016-07-05 20:58:38.945, foo, 0}
2016-07-05 20:58:38,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 20:58:38.946, foo, 2016-07-05 20:58:38.946, foo, 0}
2016-07-05 20:58:38,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 20:58:38.947, foo, 2016-07-05 20:58:38.947, foo, 0}
2016-07-05 20:58:38,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 20:58:38.948, foo, 2016-07-05 20:58:38.948, foo, 0}
2016-07-05 20:58:38,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 20:58:38.948, foo, 2016-07-05 20:58:38.948, foo, 0}
2016-07-05 20:58:38,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 20:58:38.949, foo, 2016-07-05 20:58:38.949, foo, 0}
2016-07-05 20:58:38,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 20:58:38.972, foo, 2016-07-05 20:58:38.972, foo, 0}
2016-07-05 20:58:38,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 20:58:38.973, foo, 2016-07-05 20:58:38.973, foo, 0}
2016-07-05 20:58:38,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 20:58:38.973, foo, 2016-07-05 20:58:38.974, foo, 0}
2016-07-05 20:58:39,016 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 20:58:39,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 20:58:39.017, foo, 2016-07-05 20:58:39.018, foo, 0}
2016-07-05 20:58:39,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 20:58:39.02, foo, 2016-07-05 20:58:39.02, foo, 0}
2016-07-05 20:58:39,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 20:58:39.022, foo, 2016-07-05 20:58:39.022, foo, 0}
2016-07-05 20:58:39,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 20:58:39.023, foo, 2016-07-05 20:58:39.023, foo, 0}
2016-07-05 20:58:39,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 20:58:39.024, foo, 2016-07-05 20:58:39.024, foo, 0}
2016-07-05 20:58:39,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 20:58:39.026, foo, 2016-07-05 20:58:39.026, foo, 0}
2016-07-05 20:58:39,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 20:58:39.027, foo, 2016-07-05 20:58:39.027, foo, 0}
2016-07-05 20:58:39,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 20:58:39.029, foo, 2016-07-05 20:58:39.029, foo, 0}
2016-07-05 20:58:39,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 20:58:39.034, foo, 2016-07-05 20:58:39.034, foo, 0}
2016-07-05 20:58:39,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 20:58:39.036, foo, 2016-07-05 20:58:39.036, foo, 0}
2016-07-05 20:58:39,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 20:58:39.039, foo, 2016-07-05 20:58:39.039, foo, 0}
2016-07-05 20:58:39,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 20:58:39.041, foo, 2016-07-05 20:58:39.041, foo, 0}
2016-07-05 20:58:39,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 20:58:39.042, foo, 2016-07-05 20:58:39.042, foo, 0}
2016-07-05 20:58:39,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 20:58:39.043, foo, 2016-07-05 20:58:39.043, foo, 0}
2016-07-05 20:58:39,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 20:58:39.044, foo, 2016-07-05 20:58:39.044, foo, 0}
2016-07-05 20:58:39,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 20:58:39.045, foo, 2016-07-05 20:58:39.045, foo, 0}
2016-07-05 20:58:39,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 20:58:39.048, foo, 2016-07-05 20:58:39.048, foo, 0}
2016-07-05 20:58:39,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 20:58:39.049, foo, 2016-07-05 20:58:39.049, foo, 0}
2016-07-05 20:58:39,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 20:58:39.05, foo, 2016-07-05 20:58:39.05, foo, 0}
2016-07-05 20:58:39,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 20:58:39.051, foo, 2016-07-05 20:58:39.051, foo, 0}
2016-07-05 20:58:39,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 20:58:39.052, foo, 2016-07-05 20:58:39.052, foo, 0}
2016-07-05 20:58:39,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 20:58:39.054, foo, 2016-07-05 20:58:39.054, foo, 0}
2016-07-05 20:58:39,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 20:58:39.055, foo, 2016-07-05 20:58:39.055, foo, 0}
2016-07-05 20:58:39,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 20:58:39.056, foo, 2016-07-05 20:58:39.056, foo, 0}
2016-07-05 20:58:39,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 20:58:39.057, foo, 2016-07-05 20:58:39.057, foo, 0}
2016-07-05 20:58:39,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 20:58:39.059, foo, 2016-07-05 20:58:39.059, foo, 0}
2016-07-05 20:58:39,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 20:58:39.06, foo, 2016-07-05 20:58:39.06, foo, 0}
2016-07-05 20:58:39,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 20:58:39.061, foo, 2016-07-05 20:58:39.061, foo, 0}
2016-07-05 20:58:39,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 20:58:39.062, foo, 2016-07-05 20:58:39.062, foo, 0}
2016-07-05 20:58:39,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 20:58:39.063, foo, 2016-07-05 20:58:39.063, foo, 0}
2016-07-05 20:58:39,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 20:58:39.067, foo, 2016-07-05 20:58:39.067, foo, 0}
2016-07-05 20:58:39,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:58:39.069, foo, 2016-07-05 20:58:39.069, foo, 0}
2016-07-05 20:58:39,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:58:39.071, foo, 2016-07-05 20:58:39.071, foo, 0}
2016-07-05 20:58:39,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:58:39.074, foo, 2016-07-05 20:58:39.074, foo, 0}
2016-07-05 20:58:39,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:58:39.075, foo, 2016-07-05 20:58:39.075, foo, 0}
2016-07-05 20:58:39,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:58:39.076, foo, 2016-07-05 20:58:39.076, foo, 0}
2016-07-05 20:58:39,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 20:58:39.077, foo, 2016-07-05 20:58:39.077, foo, 0}
2016-07-05 20:58:39,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:58:39.078, foo, 2016-07-05 20:58:39.078, foo, 0}
2016-07-05 20:58:39,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:58:39.081, foo, 2016-07-05 20:58:39.081, foo, 0}
2016-07-05 20:58:39,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 20:58:39.082, foo, 2016-07-05 20:58:39.082, foo, 0}
2016-07-05 20:58:39,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 20:58:39.083, foo, 2016-07-05 20:58:39.083, foo, 0}
2016-07-05 20:58:39,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 20:58:39.085, foo, 2016-07-05 20:58:39.085, foo, 0}
2016-07-05 20:58:39,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 20:58:39.086, foo, 2016-07-05 20:58:39.086, foo, 0}
2016-07-05 20:58:39,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 20:58:39.087, foo, 2016-07-05 20:58:39.087, foo, 0}
2016-07-05 20:58:39,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:58:39.088, foo, 2016-07-05 20:58:39.088, foo, 0}
2016-07-05 20:58:39,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 20:58:39.089, foo, 2016-07-05 20:58:39.089, foo, 0}
2016-07-05 20:58:39,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:58:39.091, foo, 2016-07-05 20:58:39.091, foo, 0}
2016-07-05 20:58:39,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 20:58:39.092, foo, 2016-07-05 20:58:39.092, foo, 0}
2016-07-05 20:58:39,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 20:58:39.093, foo, 2016-07-05 20:58:39.093, foo, 0}
2016-07-05 20:58:39,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 20:58:39.095, foo, 2016-07-05 20:58:39.095, foo, 0}
2016-07-05 20:58:39,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 20:58:39.096, foo, 2016-07-05 20:58:39.096, foo, 0}
2016-07-05 20:58:39,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 20:58:39.101, foo, 2016-07-05 20:58:39.101, foo, 0}
2016-07-05 20:58:39,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 20:58:39.103, foo, 2016-07-05 20:58:39.103, foo, 0}
2016-07-05 20:58:39,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 20:58:39.105, foo, 2016-07-05 20:58:39.105, foo, 0}
2016-07-05 20:58:39,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 20:58:39.107, foo, 2016-07-05 20:58:39.107, foo, 0}
2016-07-05 20:58:39,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 20:58:39.108, foo, 2016-07-05 20:58:39.108, foo, 0}
2016-07-05 20:58:39,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 20:58:39.109, foo, 2016-07-05 20:58:39.109, foo, 0}
2016-07-05 20:58:39,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 20:58:39.111, foo, 2016-07-05 20:58:39.111, foo, 0}
2016-07-05 20:58:39,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 20:58:39.112, foo, 2016-07-05 20:58:39.112, foo, 0}
2016-07-05 20:58:39,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 20:58:39.114, foo, 2016-07-05 20:58:39.114, foo, 0}
2016-07-05 20:58:39,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 20:58:39.115, foo, 2016-07-05 20:58:39.115, foo, 0}
2016-07-05 20:58:39,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 20:58:39.116, foo, 2016-07-05 20:58:39.116, foo, 0}
2016-07-05 20:58:39,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 20:58:39.118, foo, 2016-07-05 20:58:39.118, foo, 0}
2016-07-05 20:58:39,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 20:58:39.12, foo, 2016-07-05 20:58:39.12, foo, 0}
2016-07-05 20:58:39,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 20:58:39.121, foo, 2016-07-05 20:58:39.121, foo, 0}
2016-07-05 20:58:39,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 20:58:39.122, foo, 2016-07-05 20:58:39.122, foo, 0}
2016-07-05 20:58:39,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 20:58:39.124, foo, 2016-07-05 20:58:39.124, foo, 0}
2016-07-05 20:58:39,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 20:58:39.125, foo, 2016-07-05 20:58:39.125, foo, 0}
2016-07-05 20:58:39,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 20:58:39.125, foo, 2016-07-05 20:58:39.125, foo, 0}
2016-07-05 20:58:39,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 20:58:39.126, foo, 2016-07-05 20:58:39.126, foo, 0}
2016-07-05 20:58:39,173 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 20:58:39,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 20:58:39.174, foo, 2016-07-05 20:58:39.174, foo}
2016-07-05 20:58:39,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 20:58:39.176, foo, 2016-07-05 20:58:39.176, foo}
2016-07-05 20:58:39,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 20:58:39.177, foo, 2016-07-05 20:58:39.177, foo}
2016-07-05 20:58:39,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 20:58:39.179, foo, 2016-07-05 20:58:39.179, foo}
2016-07-05 20:58:39,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 20:58:39.181, foo, 2016-07-05 20:58:39.181, foo}
2016-07-05 20:58:39,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 20:58:39.182, foo, 2016-07-05 20:58:39.182, foo}
2016-07-05 20:58:39,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 20:58:39.183, foo, 2016-07-05 20:58:39.183, foo}
2016-07-05 20:58:39,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 20:58:39.184, foo, 2016-07-05 20:58:39.184, foo}
2016-07-05 20:58:39,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 20:58:39.186, foo, 2016-07-05 20:58:39.186, foo}
2016-07-05 20:58:39,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 20:58:39.187, foo, 2016-07-05 20:58:39.187, foo}
2016-07-05 20:58:39,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 20:58:39.188, foo, 2016-07-05 20:58:39.188, foo}
2016-07-05 20:58:39,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 20:58:39.189, foo, 2016-07-05 20:58:39.189, foo}
2016-07-05 20:58:39,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 20:58:39.191, foo, 2016-07-05 20:58:39.191, foo}
2016-07-05 20:58:39,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 20:58:39.192, foo, 2016-07-05 20:58:39.192, foo}
2016-07-05 20:58:39,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 20:58:39.193, foo, 2016-07-05 20:58:39.193, foo}
2016-07-05 20:58:39,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 20:58:39.194, foo, 2016-07-05 20:58:39.194, foo}
2016-07-05 20:58:39,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 20:58:39.195, foo, 2016-07-05 20:58:39.195, foo}
2016-07-05 20:58:39,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 20:58:39.196, foo, 2016-07-05 20:58:39.196, foo}
2016-07-05 20:58:39,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 20:58:39.197, foo, 2016-07-05 20:58:39.197, foo}
2016-07-05 20:58:39,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 20:58:39.199, foo, 2016-07-05 20:58:39.199, foo}
2016-07-05 20:58:39,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 20:58:39.2, foo, 2016-07-05 20:58:39.2, foo}
2016-07-05 20:58:39,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 20:58:39.201, foo, 2016-07-05 20:58:39.201, foo}
2016-07-05 20:58:39,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 20:58:39.202, foo, 2016-07-05 20:58:39.202, foo}
2016-07-05 20:58:39,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 20:58:39.203, foo, 2016-07-05 20:58:39.203, foo}
2016-07-05 20:58:39,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 20:58:39.203, foo, 2016-07-05 20:58:39.203, foo}
2016-07-05 20:58:39,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:58:39.204, foo, 2016-07-05 20:58:39.204, foo}
2016-07-05 20:58:39,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 20:58:39.205, foo, 2016-07-05 20:58:39.205, foo}
2016-07-05 20:58:39,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 20:58:39.206, foo, 2016-07-05 20:58:39.206, foo}
2016-07-05 20:58:39,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 20:58:39.214, foo, 2016-07-05 20:58:39.214, foo}
2016-07-05 20:58:39,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:58:39.215, foo, 2016-07-05 20:58:39.215, foo}
2016-07-05 20:58:39,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:58:39.217, foo, 2016-07-05 20:58:39.217, foo}
2016-07-05 20:58:39,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 20:58:39.219, foo, 2016-07-05 20:58:39.219, foo}
2016-07-05 20:58:39,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 20:58:39.221, foo, 2016-07-05 20:58:39.221, foo}
2016-07-05 20:58:39,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 20:58:39.223, foo, 2016-07-05 20:58:39.223, foo}
2016-07-05 20:58:39,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 20:58:39.225, foo, 2016-07-05 20:58:39.225, foo}
2016-07-05 20:58:39,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 20:58:39.226, foo, 2016-07-05 20:58:39.226, foo}
2016-07-05 20:58:39,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 20:58:39.227, foo, 2016-07-05 20:58:39.227, foo}
2016-07-05 20:58:39,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 20:58:39.228, foo, 2016-07-05 20:58:39.228, foo}
2016-07-05 20:58:39,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 20:58:39.229, foo, 2016-07-05 20:58:39.229, foo}
2016-07-05 20:58:39,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 20:58:39.23, foo, 2016-07-05 20:58:39.23, foo}
2016-07-05 20:58:39,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 20:58:39.23, foo, 2016-07-05 20:58:39.23, foo}
2016-07-05 20:58:39,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 20:58:39.231, foo, 2016-07-05 20:58:39.231, foo}
2016-07-05 20:58:39,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 20:58:39.232, foo, 2016-07-05 20:58:39.232, foo}
2016-07-05 20:58:39,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 20:58:39.234, foo, 2016-07-05 20:58:39.234, foo}
2016-07-05 20:58:39,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 20:58:39.234, foo, 2016-07-05 20:58:39.234, foo}
2016-07-05 20:58:39,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 20:58:39.235, foo, 2016-07-05 20:58:39.235, foo}
2016-07-05 20:58:39,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 20:58:39.236, foo, 2016-07-05 20:58:39.236, foo}
2016-07-05 20:58:39,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 20:58:39.237, foo, 2016-07-05 20:58:39.237, foo}
2016-07-05 20:58:39,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 20:58:39.238, foo, 2016-07-05 20:58:39.238, foo}
2016-07-05 20:58:39,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 20:58:39.247, foo, 2016-07-05 20:58:39.247, foo}
2016-07-05 20:58:39,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 20:58:39.249, foo, 2016-07-05 20:58:39.249, foo}
2016-07-05 20:58:39,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 20:58:39.25, foo, 2016-07-05 20:58:39.25, foo}
2016-07-05 20:58:39,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 20:58:39.251, foo, 2016-07-05 20:58:39.251, foo}
2016-07-05 20:58:39,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 20:58:39.253, foo, 2016-07-05 20:58:39.253, foo}
2016-07-05 20:58:39,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 20:58:39.255, foo, 2016-07-05 20:58:39.255, foo}
2016-07-05 20:58:39,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 20:58:39.257, foo, 2016-07-05 20:58:39.257, foo}
2016-07-05 20:58:39,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 20:58:39.258, foo, 2016-07-05 20:58:39.258, foo}
2016-07-05 20:58:39,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 20:58:39.259, foo, 2016-07-05 20:58:39.259, foo}
2016-07-05 20:58:39,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 20:58:39.259, foo, 2016-07-05 20:58:39.259, foo}
2016-07-05 20:58:39,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 20:58:39.26, foo, 2016-07-05 20:58:39.26, foo}
2016-07-05 20:58:39,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 20:58:39.261, foo, 2016-07-05 20:58:39.261, foo}
2016-07-05 20:58:39,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 20:58:39.262, foo, 2016-07-05 20:58:39.262, foo}
2016-07-05 20:58:39,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 20:58:39.263, foo, 2016-07-05 20:58:39.263, foo}
2016-07-05 20:58:39,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 20:58:39.264, foo, 2016-07-05 20:58:39.264, foo}
2016-07-05 20:58:39,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:58:39.265, foo, 2016-07-05 20:58:39.265, foo}
2016-07-05 20:58:39,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 20:58:39.266, foo, 2016-07-05 20:58:39.266, foo}
2016-07-05 20:58:39,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 20:58:39.268, foo, 2016-07-05 20:58:39.268, foo}
2016-07-05 20:58:39,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 20:58:39.268, foo, 2016-07-05 20:58:39.268, foo}
2016-07-05 20:58:39,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 20:58:39.269, foo, 2016-07-05 20:58:39.269, foo}
2016-07-05 20:58:39,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 20:58:39.27, foo, 2016-07-05 20:58:39.27, foo}
2016-07-05 20:58:39,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 20:58:39.271, foo, 2016-07-05 20:58:39.271, foo}
2016-07-05 20:58:39,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 20:58:39.272, foo, 2016-07-05 20:58:39.272, foo}
2016-07-05 20:58:39,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 20:58:39.272, foo, 2016-07-05 20:58:39.272, foo}
2016-07-05 20:58:39,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 20:58:39.278, foo, 2016-07-05 20:58:39.278, foo}
2016-07-05 20:58:39,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 20:58:39.278, foo, 2016-07-05 20:58:39.278, foo}
2016-07-05 20:58:39,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 20:58:39.279, foo, 2016-07-05 20:58:39.279, foo}
2016-07-05 20:58:39,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 20:58:39.28, foo, 2016-07-05 20:58:39.28, foo}
2016-07-05 20:58:39,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 20:58:39.281, foo, 2016-07-05 20:58:39.281, foo}
2016-07-05 20:58:39,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 20:58:39.284, foo, 2016-07-05 20:58:39.284, foo}
2016-07-05 20:58:39,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 20:58:39.285, foo, 2016-07-05 20:58:39.285, foo}
2016-07-05 20:58:39,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 20:58:39.287, foo, 2016-07-05 20:58:39.287, foo}
2016-07-05 20:58:39,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 20:58:39.289, foo, 2016-07-05 20:58:39.289, foo}
2016-07-05 20:58:39,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:58:39.29, foo, 2016-07-05 20:58:39.29, foo}
2016-07-05 20:58:39,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:58:39.292, foo, 2016-07-05 20:58:39.292, foo}
2016-07-05 20:58:39,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:58:39.292, foo, 2016-07-05 20:58:39.292, foo}
2016-07-05 20:58:39,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 20:58:39.293, foo, 2016-07-05 20:58:39.293, foo}
2016-07-05 20:58:39,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 20:58:39.294, foo, 2016-07-05 20:58:39.294, foo}
2016-07-05 20:58:39,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 20:58:39.295, foo, 2016-07-05 20:58:39.295, foo}
2016-07-05 20:58:39,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 20:58:39.297, foo, 2016-07-05 20:58:39.297, foo}
2016-07-05 20:58:39,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 20:58:39.298, foo, 2016-07-05 20:58:39.298, foo}
2016-07-05 20:58:39,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 20:58:39.303, foo, 2016-07-05 20:58:39.303, foo}
2016-07-05 20:58:39,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 20:58:39.305, foo, 2016-07-05 20:58:39.305, foo}
2016-07-05 20:58:39,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 20:58:39.306, foo, 2016-07-05 20:58:39.306, foo}
2016-07-05 20:58:39,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 20:58:39.308, foo, 2016-07-05 20:58:39.308, foo}
2016-07-05 20:58:39,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 20:58:39.309, foo, 2016-07-05 20:58:39.309, foo}
2016-07-05 20:58:39,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 20:58:39.31, foo, 2016-07-05 20:58:39.31, foo}
2016-07-05 20:58:39,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 20:58:39.31, foo, 2016-07-05 20:58:39.31, foo}
2016-07-05 20:58:39,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 20:58:39.314, foo, 2016-07-05 20:58:39.314, foo}
2016-07-05 20:58:39,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 20:58:39.315, foo, 2016-07-05 20:58:39.315, foo}
2016-07-05 20:58:39,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 20:58:39.317, foo, 2016-07-05 20:58:39.317, foo}
2016-07-05 20:58:39,383 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 20:58:39,388 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 20:58:39,389 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 20:58:39,389 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 20:58:39,389 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 20:58:39,389 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 20:58:39,390 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 20:58:39,400 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 20:58:39,401 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 20:58:39,406 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 20:58:39,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 20:58:39,413 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 20:58:39,415 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 20:58:39,416 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 20:58:39,419 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 20:58:39,421 [main] INFO  (DfAlterCheckProcess#markPreviousOK():416) - ...Marking previous-OK: playsql/migration/previous-OK.dfmark
2016-07-05 20:58:39,434 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 20:58:39,449 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 20:58:39,454 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m06s038ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=44 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=4 failure=0 (in 1 files)
  o take-finally.sql

 {Save Previous}
  o (all resources saved)
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:14:41,705 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:14:41,709 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:14:41,709 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:14:41,713 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:14:41,714 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:14:41,715 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:14:41,716 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:14:43,159 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:14:43,160 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:14:43,161 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:14:43,161 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:14:43,173 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:14:43,598 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:14:43,598 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:14:43,619 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:14:43,620 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:14:43,622 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:14:43,623 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:14:43,623 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:14:43,624 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:14:43,636 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:14:43,637 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:14:43,637 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:14:43,638 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:14:43,638 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:14:43,638 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:14:43,654 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:14:43,655 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:14:43,655 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:14:43,785 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:14:43,791 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:14:43,797 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:14:43,804 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:14:43,816 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:14:43,832 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:14:43,853 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:14:43,878 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:14:43,893 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:14:43,917 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:14:43,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:14:43,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:14:43,977 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:14:43,993 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:14:44,008 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:14:44,023 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:14:44,036 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:14:44,053 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:14:44,066 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:14:44,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:14:44,103 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:14:44,128 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:14:44,150 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:14:44,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:14:44,157 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:14:44,162 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:14:44,165 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:14:44,169 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:14:44,173 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:14:44,177 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:14:44,182 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:14:44,185 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:14:44,188 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:14:44,192 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:14:44,195 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:14:44,199 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:14:44,202 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:14:44,262 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:14:44,265 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:14:44,268 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:14:44,268 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:14:44,269 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:14:44,269 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:14:44,269 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:14:44,270 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:14:44,275 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:14:44,279 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:14:44,279 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:14:44,281 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:14:44,292 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:14:44,293 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:14:44,296 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:14:44,297 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:14:44,300 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:14:44,307 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:14:44,308 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:14:44,308 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:14:44,309 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:14:44,310 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:14:44,317 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:14:44,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:14:44,390 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:14:44,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:14:44,475 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:14:44,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:14:44,604 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:14:44,671 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:14:44,738 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:14:44,811 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:14:44,822 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:14:44,834 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:14:44,870 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:14:44,904 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:14:44,917 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:14:44,947 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:14:44,995 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:14:45,012 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,040 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:14:45,063 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:14:45,092 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,111 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,134 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:14:45,166 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,190 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,208 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:14:45,230 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:14:45,259 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:14:45,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:14:45,312 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:14:45,343 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:14:45,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:14:45,401 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:14:45,416 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:14:45,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:14:45,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:14:45,477 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:14:45,503 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:14:45,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:14:45,534 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:14:45,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:14:45,570 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:14:45,570 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:14:45,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:14:45,573 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:14:45,574 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:14:45,574 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:14:45,575 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:14:45,705 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:14:45,706 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:14:45,706 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:14:45,706 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:14:45,706 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:14:45,707 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:14:45,733 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:14:45,734 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:14:45,734 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:14:46,029 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:14:46,030 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:14:46,030 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:14:46,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:14:46,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:14:46,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:14:46,175 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:14:46,180 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:14:46,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:14:46,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:14:46,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:14:46,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:14:46,189 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:14:46,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:14:46,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:14:46,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:14:46,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:14:46,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:14:46,200 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:14:46,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:14:46,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:14:46,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:14:46,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:14:46,213 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:14:46,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:14:46,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:14:46,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:14:46,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:14:46,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:14:46,222 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:14:46,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:14:46,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:14:46,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:14:46,229 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():229) - ...Retrying by suppressing batch update: PRODUCT_STATUS
2016-07-05 21:14:46,236 [main] INFO  (DfAlterCheckProcess#markNextNG():505) - ...Marking next-NG: playsql/migration/next-NG.dfmark
2016-07-05 21:14:46,245 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:14:46,270 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckReplaceSchemaFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to replace the schema using NextDDL.

[Advice]
Make sure your NextDDL or data for ReplaceSchema are correct,
resources just below 'playsql' directory, are correct.
and after that, execute AlterCheck again.
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.setupAlterCheckReplaceSchemaFailureException(DfAlterCheckProcess.java:523)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.replaceSchema(DfAlterCheckProcess.java:492)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:450)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: org.dbflute.exception.DfXlsDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Data Directory]
playsql/data/common/xls

[Xls File]
playsql/data/common/xls/10-master.xls

[Table]
PRODUCT_STATUS

[SQLException]
java.sql.BatchUpdateException
Field 'DISPLAY_ORDER' doesn't have a default value

[Non-Batch Retry]
java.sql.SQLException
Field 'DISPLAY_ORDER' doesn't have a default value
[PRODUCT_STATUS_CODE, PRODUCT_STATUS_NAME]
{ONS, 生産販売可能}
Row Number: 1

[Bind Type]
PRODUCT_STATUS_CODE = java.lang.String (RealStringProcessor)
PRODUCT_STATUS_NAME = java.lang.String (RealStringProcessor)
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.handleWriteTableException(DfXlsDataHandlerImpl.java:376)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:264)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:154)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:135)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsCommonData(DfLoadDataProcess.java:267)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:148)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:287)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:248)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:241)
	at org.dbflute.task.DfReplaceSchemaTask$1.playNext(DfReplaceSchemaTask.java:212)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.playMainProcess(DfAlterCheckProcess.java:497)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.replaceSchema(DfAlterCheckProcess.java:489)
	... 24 more
Caused by: java.sql.BatchUpdateException: Field 'DISPLAY_ORDER' doesn't have a default value
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1815)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1277)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:220)
	... 36 more
Caused by: java.sql.SQLException: Field 'DISPLAY_ORDER' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:996)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2530)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1907)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2141)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1773)
	... 38 more
2016-07-05 21:14:46,342 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:14:46,348 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s660ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=45 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=0
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:18:07,393 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:18:07,397 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:18:07,397 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:18:07,403 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:18:07,403 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:18:07,403 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:18:07,405 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:18:09,201 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:18:09,201 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:18:09,202 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:18:09,202 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:18:09,211 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:18:09,646 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:18:09,647 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:18:09,666 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the next-NG mark: playsql/migration/next-NG.dfmark
2016-07-05 21:18:09,680 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:18:09,684 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:18:09,684 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:18:09,685 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:18:09,685 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:18:09,685 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:18:09,697 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:18:09,698 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:18:09,699 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:18:09,699 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:18:09,700 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:18:09,700 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:18:09,717 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:09,718 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:09,719 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:09,751 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:18:09,756 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:18:09,766 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:18:09,773 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:18:09,781 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:18:09,788 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:18:09,805 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:18:09,826 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:18:09,848 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:18:09,864 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:18:09,890 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:18:09,906 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:18:09,927 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:18:09,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:18:09,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:18:09,989 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:18:10,004 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:18:10,027 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:18:10,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:18:10,069 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:18:10,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:18:10,104 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:18:10,127 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:18:10,148 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:18:10,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:18:10,158 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:18:10,163 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:18:10,168 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:18:10,172 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:18:10,176 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:18:10,180 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:18:10,183 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:18:10,189 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:18:10,193 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:18:10,197 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:18:10,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:18:10,206 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:18:10,210 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:18:10,213 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:18:10,289 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:18:10,292 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:18:10,297 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:18:10,298 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:18:10,298 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:18:10,299 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:18:10,299 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:18:10,300 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:18:10,305 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:18:10,313 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:18:10,314 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:18:10,316 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:18:10,330 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:18:10,331 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:18:10,332 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:18:10,333 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:18:10,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:18:10,339 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:10,340 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:18:10,340 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:18:10,341 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:18:10,341 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:18:10,352 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:18:10,389 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:18:10,469 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:18:10,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:18:10,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:18:10,557 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:18:10,622 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:18:10,691 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:18:10,752 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:18:10,821 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:18:10,832 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:18:10,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:18:10,896 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:18:10,940 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:18:10,979 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:18:10,993 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:18:11,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:11,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,060 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:18:11,080 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:11,102 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,125 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,150 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:18:11,171 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,193 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:18:11,230 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:11,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:18:11,289 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:18:11,312 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:11,332 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:18:11,364 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:11,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:18:11,415 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:18:11,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:18:11,455 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:18:11,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:18:11,496 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:18:11,515 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:18:11,535 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:18:11,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:18:11,576 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:18:11,577 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:18:11,578 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:18:11,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:18:11,581 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:11,582 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:18:11,582 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:18:11,714 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:18:11,714 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:18:11,714 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:18:11,715 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:18:11,715 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:18:11,715 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:18:11,739 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:11,739 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:18:11,739 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:12,006 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:12,006 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:12,007 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:12,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:18:12,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:18:12,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:18:12,154 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:18:12,158 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:18:12,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:18:12,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:18:12,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:18:12,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:18:12,166 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:18:12,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:18:12,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:18:12,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:18:12,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:18:12,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:18:12,177 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:18:12,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:18:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:18:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:18:12,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:18:12,187 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:18:12,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:18:12,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:18:12,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:18:12,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:18:12,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:18:12,201 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:18:12,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:18:12,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:18:12,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:18:12,207 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():229) - ...Retrying by suppressing batch update: PRODUCT_STATUS
2016-07-05 21:18:12,212 [main] INFO  (DfAlterCheckProcess#markNextNG():505) - ...Marking next-NG: playsql/migration/next-NG.dfmark
2016-07-05 21:18:12,225 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:18:12,238 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckReplaceSchemaFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to replace the schema using NextDDL.

[Advice]
Make sure your NextDDL or data for ReplaceSchema are correct,
resources just below 'playsql' directory, are correct.
and after that, execute AlterCheck again.
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.setupAlterCheckReplaceSchemaFailureException(DfAlterCheckProcess.java:523)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.replaceSchema(DfAlterCheckProcess.java:492)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:450)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: org.dbflute.exception.DfXlsDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Data Directory]
playsql/data/common/xls

[Xls File]
playsql/data/common/xls/10-master.xls

[Table]
PRODUCT_STATUS

[SQLException]
java.sql.BatchUpdateException
Field 'DISPLAY_ORDER' doesn't have a default value

[Non-Batch Retry]
java.sql.SQLException
Field 'DISPLAY_ORDER' doesn't have a default value
[PRODUCT_STATUS_CODE, PRODUCT_STATUS_NAME]
{ONS, 生産販売可能}
Row Number: 1

[Bind Type]
PRODUCT_STATUS_CODE = java.lang.String (RealStringProcessor)
PRODUCT_STATUS_NAME = java.lang.String (RealStringProcessor)
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.handleWriteTableException(DfXlsDataHandlerImpl.java:376)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:264)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:154)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:135)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsCommonData(DfLoadDataProcess.java:267)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:148)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:287)
	at org.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:248)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:241)
	at org.dbflute.task.DfReplaceSchemaTask$1.playNext(DfReplaceSchemaTask.java:212)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.playMainProcess(DfAlterCheckProcess.java:497)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.replaceSchema(DfAlterCheckProcess.java:489)
	... 24 more
Caused by: java.sql.BatchUpdateException: Field 'DISPLAY_ORDER' doesn't have a default value
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1815)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1277)
	at org.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:220)
	... 36 more
Caused by: java.sql.SQLException: Field 'DISPLAY_ORDER' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:996)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2530)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1907)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2141)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1773)
	... 38 more
2016-07-05 21:18:12,246 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:18:12,252 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s885ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Create Schema}: success=45 failure=0 (in 3 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema-50-procedure.sql

 {Load Data}: loaded-files=0
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:18:44,213 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:18:44,218 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:18:44,218 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:18:44,224 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:18:44,225 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:18:44,225 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:18:44,228 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:18:45,996 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:18:45,996 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:18:45,997 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:18:45,997 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:18:46,006 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:18:46,423 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:18:46,424 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:18:46,437 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the next-NG mark: playsql/migration/next-NG.dfmark
2016-07-05 21:18:46,446 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:18:46,452 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:18:46,452 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:18:46,453 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:18:46,453 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:18:46,454 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:18:46,470 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:18:46,471 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:18:46,472 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:18:46,472 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:18:46,473 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:18:46,474 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:18:46,491 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:46,492 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:46,492 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:46,527 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:18:46,534 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:18:46,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:18:46,546 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:18:46,556 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:18:46,562 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:18:46,579 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:18:46,602 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:18:46,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:18:46,638 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:18:46,659 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:18:46,676 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:18:46,698 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:18:46,719 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:18:46,738 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:18:46,760 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:18:46,776 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:18:46,790 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:18:46,807 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:18:46,828 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:18:46,851 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:18:46,866 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:18:46,890 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:18:46,911 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:18:46,915 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:18:46,919 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:18:46,923 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:18:46,927 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:18:46,931 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:18:46,935 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:18:46,940 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:18:46,943 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:18:46,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:18:46,950 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:18:46,953 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:18:46,957 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:18:46,961 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:18:46,964 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:18:46,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:18:47,029 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:18:47,032 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:18:47,034 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:18:47,035 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:18:47,035 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:18:47,035 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:18:47,036 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:18:47,036 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:18:47,041 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:18:47,045 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:18:47,046 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:18:47,048 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:18:47,063 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:18:47,064 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:18:47,065 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:18:47,066 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:18:47,069 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:18:47,075 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:47,075 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:18:47,076 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:18:47,076 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:18:47,076 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:18:47,082 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:18:47,114 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:18:47,182 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:18:47,192 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:18:47,262 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:18:47,272 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:18:47,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:18:47,405 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:18:47,473 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:18:47,485 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:18:47,541 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:18:47,551 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:18:47,561 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:18:47,605 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:18:47,647 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:18:47,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:18:47,694 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:47,715 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,745 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:18:47,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:47,784 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,822 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:18:47,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,892 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:18:47,913 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:47,937 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:18:47,972 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:18:47,992 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:48,017 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:18:48,045 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:48,064 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:18:48,079 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:18:48,098 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:18:48,117 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:18:48,141 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:18:48,158 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:18:48,179 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:18:48,197 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:18:48,217 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:18:48,245 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:18:48,246 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:18:48,247 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:18:48,248 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:18:48,251 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:48,251 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:18:48,251 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:18:48,382 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:18:48,383 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:18:48,383 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:18:48,383 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:18:48,384 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:18:48,384 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:18:48,408 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:48,409 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:18:48,409 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:48,685 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:48,685 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:48,686 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:48,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:18:48,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:18:48,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:18:48,842 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:18:48,848 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:18:48,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:18:48,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:18:48,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:18:48,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:18:48,858 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:18:48,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:18:48,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:18:48,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:18:48,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:18:48,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:18:48,872 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:18:48,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:18:48,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:18:48,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:18:48,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:18:48,884 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:18:48,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:18:48,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:18:48,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:18:48,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:18:48,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:18:48,892 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:18:48,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:18:48,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:18:48,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:18:48,900 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:18:48,902 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:48,902 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:18:48,902 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:49,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:18:49.0, foo, 2016-07-05 21:18:49.0, foo, 0}
2016-07-05 21:18:49,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:18:49.007, foo, 2016-07-05 21:18:49.007, foo, 0}
2016-07-05 21:18:49,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:18:49.009, foo, 2016-07-05 21:18:49.009, foo, 0}
2016-07-05 21:18:49,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:18:49.011, foo, 2016-07-05 21:18:49.011, foo, 0}
2016-07-05 21:18:49,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:18:49.015, foo, 2016-07-05 21:18:49.015, foo, 0}
2016-07-05 21:18:49,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:18:49.017, foo, 2016-07-05 21:18:49.017, foo, 0}
2016-07-05 21:18:49,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:18:49.019, foo, 2016-07-05 21:18:49.019, foo, 0}
2016-07-05 21:18:49,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:18:49.021, foo, 2016-07-05 21:18:49.021, foo, 0}
2016-07-05 21:18:49,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:18:49.022, foo, 2016-07-05 21:18:49.022, foo, 0}
2016-07-05 21:18:49,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:18:49.025, foo, 2016-07-05 21:18:49.025, foo, 0}
2016-07-05 21:18:49,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:18:49.026, foo, 2016-07-05 21:18:49.026, foo, 0}
2016-07-05 21:18:49,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:18:49.029, foo, 2016-07-05 21:18:49.029, foo, 0}
2016-07-05 21:18:49,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:18:49.031, foo, 2016-07-05 21:18:49.031, foo, 0}
2016-07-05 21:18:49,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:18:49.033, foo, 2016-07-05 21:18:49.034, foo, 0}
2016-07-05 21:18:49,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:18:49.036, foo, 2016-07-05 21:18:49.036, foo, 0}
2016-07-05 21:18:49,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:18:49.051, foo, 2016-07-05 21:18:49.051, foo, 0}
2016-07-05 21:18:49,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:18:49.053, foo, 2016-07-05 21:18:49.053, foo, 0}
2016-07-05 21:18:49,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:18:49.055, foo, 2016-07-05 21:18:49.055, foo, 0}
2016-07-05 21:18:49,063 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:18:49.062, foo, 2016-07-05 21:18:49.062, foo, 0}
2016-07-05 21:18:49,065 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:18:49.065, foo, 2016-07-05 21:18:49.065, foo, 0}
2016-07-05 21:18:49,090 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:18:49,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:18:49.092, foo, 2016-07-05 21:18:49.092, foo, 0}
2016-07-05 21:18:49,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:18:49.096, foo, 2016-07-05 21:18:49.096, foo, 0}
2016-07-05 21:18:49,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:18:49.099, foo, 2016-07-05 21:18:49.099, foo, 0}
2016-07-05 21:18:49,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:18:49.102, foo, 2016-07-05 21:18:49.102, foo, 0}
2016-07-05 21:18:49,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:18:49.106, foo, 2016-07-05 21:18:49.106, foo, 0}
2016-07-05 21:18:49,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:18:49.109, foo, 2016-07-05 21:18:49.109, foo, 0}
2016-07-05 21:18:49,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:18:49.112, foo, 2016-07-05 21:18:49.112, foo, 0}
2016-07-05 21:18:49,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:18:49.115, foo, 2016-07-05 21:18:49.115, foo, 0}
2016-07-05 21:18:49,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:18:49.118, foo, 2016-07-05 21:18:49.118, foo, 0}
2016-07-05 21:18:49,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:18:49.12, foo, 2016-07-05 21:18:49.12, foo, 0}
2016-07-05 21:18:49,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:18:49.124, foo, 2016-07-05 21:18:49.124, foo, 0}
2016-07-05 21:18:49,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:18:49.126, foo, 2016-07-05 21:18:49.126, foo, 0}
2016-07-05 21:18:49,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:18:49.129, foo, 2016-07-05 21:18:49.129, foo, 0}
2016-07-05 21:18:49,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:18:49.131, foo, 2016-07-05 21:18:49.131, foo, 0}
2016-07-05 21:18:49,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:18:49.133, foo, 2016-07-05 21:18:49.133, foo, 0}
2016-07-05 21:18:49,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:18:49.134, foo, 2016-07-05 21:18:49.134, foo, 0}
2016-07-05 21:18:49,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:18:49.137, foo, 2016-07-05 21:18:49.137, foo, 0}
2016-07-05 21:18:49,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:18:49.139, foo, 2016-07-05 21:18:49.139, foo, 0}
2016-07-05 21:18:49,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:18:49.142, foo, 2016-07-05 21:18:49.142, foo, 0}
2016-07-05 21:18:49,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:18:49.146, foo, 2016-07-05 21:18:49.146, foo, 0}
2016-07-05 21:18:49,165 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:18:49,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:18:49,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:18:49,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:18:49,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:18:49,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:18:49,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:18:49,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:18:49,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:18:49,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:18:49,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:18:49,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:18:49,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:18:49,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:18:49,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:18:49,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:18:49,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:18:49,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:18:49,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:18:49,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:18:49,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:18:49,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:18:49,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:18:49,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:18:49,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:18:49,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:18:49,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:18:49,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:18:49,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:18:49,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:18:49,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:18:49,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:18:49,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:18:49,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:18:49,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:18:49,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:18:49,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:18:49,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:18:49,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:18:49,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:18:49,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:18:49,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:18:49,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:18:49,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:18:49,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:18:49,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:18:49,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:18:49,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:18:49,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:18:49,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:18:49,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:18:49,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:18:49,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:18:49,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:18:49,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:18:49,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:18:49,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:18:49,280 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:18:49,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:18:49.281, foo, 2016-07-05 21:18:49.281, foo, 0}
2016-07-05 21:18:49,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:18:49.283, foo, 2016-07-05 21:18:49.283, foo, 0}
2016-07-05 21:18:49,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:18:49.283, foo, 2016-07-05 21:18:49.283, foo, 0}
2016-07-05 21:18:49,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:18:49.284, foo, 2016-07-05 21:18:49.284, foo, 0}
2016-07-05 21:18:49,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:18:49.285, foo, 2016-07-05 21:18:49.285, foo, 0}
2016-07-05 21:18:49,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:18:49.286, foo, 2016-07-05 21:18:49.286, foo, 0}
2016-07-05 21:18:49,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:18:49.287, foo, 2016-07-05 21:18:49.287, foo, 0}
2016-07-05 21:18:49,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:18:49.288, foo, 2016-07-05 21:18:49.288, foo, 0}
2016-07-05 21:18:49,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:18:49.288, foo, 2016-07-05 21:18:49.288, foo, 0}
2016-07-05 21:18:49,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:18:49.289, foo, 2016-07-05 21:18:49.289, foo, 0}
2016-07-05 21:18:49,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:18:49.29, foo, 2016-07-05 21:18:49.29, foo, 0}
2016-07-05 21:18:49,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:18:49.291, foo, 2016-07-05 21:18:49.291, foo, 0}
2016-07-05 21:18:49,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:18:49.292, foo, 2016-07-05 21:18:49.292, foo, 0}
2016-07-05 21:18:49,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:18:49.293, foo, 2016-07-05 21:18:49.293, foo, 0}
2016-07-05 21:18:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:18:49.294, foo, 2016-07-05 21:18:49.294, foo, 0}
2016-07-05 21:18:49,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:18:49.295, foo, 2016-07-05 21:18:49.295, foo, 0}
2016-07-05 21:18:49,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:18:49.296, foo, 2016-07-05 21:18:49.296, foo, 0}
2016-07-05 21:18:49,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:18:49.297, foo, 2016-07-05 21:18:49.297, foo, 0}
2016-07-05 21:18:49,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:18:49.298, foo, 2016-07-05 21:18:49.298, foo, 0}
2016-07-05 21:18:49,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:18:49.298, foo, 2016-07-05 21:18:49.298, foo, 0}
2016-07-05 21:18:49,319 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:18:49,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:18:49.32, foo, 2016-07-05 21:18:49.32, foo, 0}
2016-07-05 21:18:49,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:18:49.322, foo, 2016-07-05 21:18:49.323, foo, 0}
2016-07-05 21:18:49,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:18:49.324, foo, 2016-07-05 21:18:49.324, foo, 0}
2016-07-05 21:18:49,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:18:49.325, foo, 2016-07-05 21:18:49.325, foo, 0}
2016-07-05 21:18:49,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:18:49.326, foo, 2016-07-05 21:18:49.326, foo, 0}
2016-07-05 21:18:49,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:18:49.326, foo, 2016-07-05 21:18:49.326, foo, 0}
2016-07-05 21:18:49,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:18:49.327, foo, 2016-07-05 21:18:49.327, foo, 0}
2016-07-05 21:18:49,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:18:49.328, foo, 2016-07-05 21:18:49.328, foo, 0}
2016-07-05 21:18:49,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:18:49.33, foo, 2016-07-05 21:18:49.33, foo, 0}
2016-07-05 21:18:49,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:18:49.33, foo, 2016-07-05 21:18:49.33, foo, 0}
2016-07-05 21:18:49,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:18:49.351, foo, 2016-07-05 21:18:49.351, foo, 0}
2016-07-05 21:18:49,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:18:49.351, foo, 2016-07-05 21:18:49.351, foo, 0}
2016-07-05 21:18:49,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:18:49.352, foo, 2016-07-05 21:18:49.352, foo, 0}
2016-07-05 21:18:49,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:18:49.353, foo, 2016-07-05 21:18:49.353, foo, 0}
2016-07-05 21:18:49,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:18:49.354, foo, 2016-07-05 21:18:49.354, foo, 0}
2016-07-05 21:18:49,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:18:49.355, foo, 2016-07-05 21:18:49.355, foo, 0}
2016-07-05 21:18:49,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:18:49.356, foo, 2016-07-05 21:18:49.356, foo, 0}
2016-07-05 21:18:49,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:18:49.357, foo, 2016-07-05 21:18:49.357, foo, 0}
2016-07-05 21:18:49,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:18:49.358, foo, 2016-07-05 21:18:49.358, foo, 0}
2016-07-05 21:18:49,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:18:49.359, foo, 2016-07-05 21:18:49.359, foo, 0}
2016-07-05 21:18:49,383 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:18:49,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:18:49.384, foo, 2016-07-05 21:18:49.384, foo}
2016-07-05 21:18:49,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:18:49.386, foo, 2016-07-05 21:18:49.386, foo}
2016-07-05 21:18:49,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:18:49.387, foo, 2016-07-05 21:18:49.387, foo}
2016-07-05 21:18:49,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:18:49.389, foo, 2016-07-05 21:18:49.389, foo}
2016-07-05 21:18:49,395 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:18:49,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:18:49,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:18:49,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:18:49,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:18:49,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:18:49,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:18:49,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:18:49,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:18:49,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:18:49,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:18:49,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:18:49,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:18:49,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:18:49,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:18:49,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:18:49,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:18:49,431 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:18:49,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:18:49,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:18:49,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:18:49,434 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:18:49,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:18:49,437 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:18:49,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:18:49,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:18:49,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:18:49,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:18:49,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:18:49,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:18:49,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:18:49,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:18:49,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:18:49,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:18:49,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:18:49,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:18:49,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:18:49,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:18:49,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:18:49,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:18:49,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:18:49,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:18:49,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:18:49,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:18:49,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:18:49,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:18:49,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:18:49,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:18:49,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:18:49,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:18:49,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:18:49,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:18:49,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:18:49,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:18:49,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:18:49,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:18:49,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:18:49,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:18:49,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:18:49,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:18:49,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:18:49,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:18:49,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:18:49,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:18:49,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:18:49,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:18:49,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:18:49,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:18:49,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:18:49,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:18:49,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:18:49,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:18:49,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:18:49,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:18:49,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:18:49,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:18:49,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:18:49,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:18:49,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:18:49,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:18:49,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:18:49,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:18:49,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:18:49,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:18:49,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:18:49,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:18:49,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:18:49,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:18:49,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:18:49,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:18:49,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:18:49,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:18:49,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:18:49,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:18:49,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:18:49,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:18:49,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:18:49,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:18:49,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:18:49,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:18:49,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:18:49,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:18:49,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:18:49,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:18:49,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:18:49,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:18:49,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:18:49,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:18:49,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:18:49,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:18:49,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:18:49,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:18:49,615 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:18:49,615 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:49,616 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:18:49,616 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:49,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:18:49.666, foo, 2016-07-05 21:18:49.666, foo, 0}
2016-07-05 21:18:49,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:18:49.668, foo, 2016-07-05 21:18:49.668, foo, 0}
2016-07-05 21:18:49,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:18:49.668, foo, 2016-07-05 21:18:49.668, foo, 0}
2016-07-05 21:18:49,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:18:49.669, foo, 2016-07-05 21:18:49.669, foo, 0}
2016-07-05 21:18:49,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:18:49.67, foo, 2016-07-05 21:18:49.67, foo, 0}
2016-07-05 21:18:49,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:18:49.671, foo, 2016-07-05 21:18:49.671, foo, 0}
2016-07-05 21:18:49,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:18:49.671, foo, 2016-07-05 21:18:49.671, foo, 0}
2016-07-05 21:18:49,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:18:49.672, foo, 2016-07-05 21:18:49.672, foo, 0}
2016-07-05 21:18:49,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:18:49.673, foo, 2016-07-05 21:18:49.673, foo, 0}
2016-07-05 21:18:49,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:18:49.674, foo, 2016-07-05 21:18:49.674, foo, 0}
2016-07-05 21:18:49,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:18:49.675, foo, 2016-07-05 21:18:49.675, foo, 0}
2016-07-05 21:18:49,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:18:49.676, foo, 2016-07-05 21:18:49.676, foo, 0}
2016-07-05 21:18:49,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:18:49.677, foo, 2016-07-05 21:18:49.677, foo, 0}
2016-07-05 21:18:49,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:18:49.678, foo, 2016-07-05 21:18:49.678, foo, 0}
2016-07-05 21:18:49,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:18:49.679, foo, 2016-07-05 21:18:49.679, foo, 0}
2016-07-05 21:18:49,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:18:49.68, foo, 2016-07-05 21:18:49.68, foo, 0}
2016-07-05 21:18:49,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:18:49.681, foo, 2016-07-05 21:18:49.681, foo, 0}
2016-07-05 21:18:49,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:18:49.682, foo, 2016-07-05 21:18:49.682, foo, 0}
2016-07-05 21:18:49,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:18:49.683, foo, 2016-07-05 21:18:49.683, foo, 0}
2016-07-05 21:18:49,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:18:49.684, foo, 2016-07-05 21:18:49.684, foo, 0}
2016-07-05 21:18:49,708 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:18:49,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:18:49.71, foo, 2016-07-05 21:18:49.71, foo, 0}
2016-07-05 21:18:49,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:18:49.713, foo, 2016-07-05 21:18:49.713, foo, 0}
2016-07-05 21:18:49,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:18:49.715, foo, 2016-07-05 21:18:49.715, foo, 0}
2016-07-05 21:18:49,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:18:49.716, foo, 2016-07-05 21:18:49.716, foo, 0}
2016-07-05 21:18:49,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:18:49.717, foo, 2016-07-05 21:18:49.717, foo, 0}
2016-07-05 21:18:49,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:18:49.718, foo, 2016-07-05 21:18:49.718, foo, 0}
2016-07-05 21:18:49,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:18:49.719, foo, 2016-07-05 21:18:49.719, foo, 0}
2016-07-05 21:18:49,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:18:49.721, foo, 2016-07-05 21:18:49.721, foo, 0}
2016-07-05 21:18:49,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:18:49.722, foo, 2016-07-05 21:18:49.722, foo, 0}
2016-07-05 21:18:49,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:18:49.723, foo, 2016-07-05 21:18:49.723, foo, 0}
2016-07-05 21:18:49,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:18:49.724, foo, 2016-07-05 21:18:49.724, foo, 0}
2016-07-05 21:18:49,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:18:49.725, foo, 2016-07-05 21:18:49.725, foo, 0}
2016-07-05 21:18:49,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:18:49.728, foo, 2016-07-05 21:18:49.728, foo, 0}
2016-07-05 21:18:49,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:18:49.729, foo, 2016-07-05 21:18:49.729, foo, 0}
2016-07-05 21:18:49,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:18:49.731, foo, 2016-07-05 21:18:49.731, foo, 0}
2016-07-05 21:18:49,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:18:49.735, foo, 2016-07-05 21:18:49.735, foo, 0}
2016-07-05 21:18:49,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:18:49.736, foo, 2016-07-05 21:18:49.736, foo, 0}
2016-07-05 21:18:49,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:18:49.737, foo, 2016-07-05 21:18:49.737, foo, 0}
2016-07-05 21:18:49,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:18:49.738, foo, 2016-07-05 21:18:49.738, foo, 0}
2016-07-05 21:18:49,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:18:49.739, foo, 2016-07-05 21:18:49.739, foo, 0}
2016-07-05 21:18:49,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:18:49.741, foo, 2016-07-05 21:18:49.741, foo, 0}
2016-07-05 21:18:49,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:18:49.742, foo, 2016-07-05 21:18:49.742, foo, 0}
2016-07-05 21:18:49,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:18:49.745, foo, 2016-07-05 21:18:49.745, foo, 0}
2016-07-05 21:18:49,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:18:49.747, foo, 2016-07-05 21:18:49.747, foo, 0}
2016-07-05 21:18:49,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:18:49.748, foo, 2016-07-05 21:18:49.748, foo, 0}
2016-07-05 21:18:49,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:18:49.749, foo, 2016-07-05 21:18:49.749, foo, 0}
2016-07-05 21:18:49,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:18:49.75, foo, 2016-07-05 21:18:49.75, foo, 0}
2016-07-05 21:18:49,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:18:49.751, foo, 2016-07-05 21:18:49.752, foo, 0}
2016-07-05 21:18:49,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:18:49.753, foo, 2016-07-05 21:18:49.753, foo, 0}
2016-07-05 21:18:49,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:18:49.754, foo, 2016-07-05 21:18:49.754, foo, 0}
2016-07-05 21:18:49,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:18:49.755, foo, 2016-07-05 21:18:49.755, foo, 0}
2016-07-05 21:18:49,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:18:49.756, foo, 2016-07-05 21:18:49.756, foo, 0}
2016-07-05 21:18:49,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:49.757, foo, 2016-07-05 21:18:49.757, foo, 0}
2016-07-05 21:18:49,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:49.757, foo, 2016-07-05 21:18:49.757, foo, 0}
2016-07-05 21:18:49,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:18:49.764, foo, 2016-07-05 21:18:49.764, foo, 0}
2016-07-05 21:18:49,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:49.765, foo, 2016-07-05 21:18:49.765, foo, 0}
2016-07-05 21:18:49,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:18:49.766, foo, 2016-07-05 21:18:49.766, foo, 0}
2016-07-05 21:18:49,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:18:49.767, foo, 2016-07-05 21:18:49.767, foo, 0}
2016-07-05 21:18:49,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:18:49.768, foo, 2016-07-05 21:18:49.768, foo, 0}
2016-07-05 21:18:49,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:18:49.77, foo, 2016-07-05 21:18:49.77, foo, 0}
2016-07-05 21:18:49,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:18:49.771, foo, 2016-07-05 21:18:49.771, foo, 0}
2016-07-05 21:18:49,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:18:49.772, foo, 2016-07-05 21:18:49.772, foo, 0}
2016-07-05 21:18:49,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:18:49.774, foo, 2016-07-05 21:18:49.774, foo, 0}
2016-07-05 21:18:49,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:49.775, foo, 2016-07-05 21:18:49.775, foo, 0}
2016-07-05 21:18:49,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:49.776, foo, 2016-07-05 21:18:49.776, foo, 0}
2016-07-05 21:18:49,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:18:49.778, foo, 2016-07-05 21:18:49.778, foo, 0}
2016-07-05 21:18:49,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:49.78, foo, 2016-07-05 21:18:49.78, foo, 0}
2016-07-05 21:18:49,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:18:49.781, foo, 2016-07-05 21:18:49.781, foo, 0}
2016-07-05 21:18:49,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:18:49.783, foo, 2016-07-05 21:18:49.783, foo, 0}
2016-07-05 21:18:49,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:18:49.784, foo, 2016-07-05 21:18:49.784, foo, 0}
2016-07-05 21:18:49,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:18:49.785, foo, 2016-07-05 21:18:49.785, foo, 0}
2016-07-05 21:18:49,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:18:49.786, foo, 2016-07-05 21:18:49.786, foo, 0}
2016-07-05 21:18:49,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:18:49.786, foo, 2016-07-05 21:18:49.786, foo, 0}
2016-07-05 21:18:49,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:49.787, foo, 2016-07-05 21:18:49.787, foo, 0}
2016-07-05 21:18:49,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:49.788, foo, 2016-07-05 21:18:49.788, foo, 0}
2016-07-05 21:18:49,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:18:49.789, foo, 2016-07-05 21:18:49.789, foo, 0}
2016-07-05 21:18:49,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:49.789, foo, 2016-07-05 21:18:49.789, foo, 0}
2016-07-05 21:18:49,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:18:49.79, foo, 2016-07-05 21:18:49.79, foo, 0}
2016-07-05 21:18:49,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:18:49.793, foo, 2016-07-05 21:18:49.793, foo, 0}
2016-07-05 21:18:49,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:18:49.794, foo, 2016-07-05 21:18:49.794, foo, 0}
2016-07-05 21:18:49,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:18:49.795, foo, 2016-07-05 21:18:49.795, foo, 0}
2016-07-05 21:18:49,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:18:49.796, foo, 2016-07-05 21:18:49.796, foo, 0}
2016-07-05 21:18:49,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:18:49.797, foo, 2016-07-05 21:18:49.797, foo, 0}
2016-07-05 21:18:49,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:18:49.798, foo, 2016-07-05 21:18:49.798, foo, 0}
2016-07-05 21:18:49,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:18:49.799, foo, 2016-07-05 21:18:49.799, foo, 0}
2016-07-05 21:18:49,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:18:49.8, foo, 2016-07-05 21:18:49.8, foo, 0}
2016-07-05 21:18:49,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:18:49.801, foo, 2016-07-05 21:18:49.801, foo, 0}
2016-07-05 21:18:49,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:18:49.801, foo, 2016-07-05 21:18:49.801, foo, 0}
2016-07-05 21:18:49,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:18:49.802, foo, 2016-07-05 21:18:49.802, foo, 0}
2016-07-05 21:18:49,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:18:49.803, foo, 2016-07-05 21:18:49.803, foo, 0}
2016-07-05 21:18:49,852 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:18:49,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:18:49.852, foo, 2016-07-05 21:18:49.852, foo}
2016-07-05 21:18:49,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:18:49.854, foo, 2016-07-05 21:18:49.854, foo}
2016-07-05 21:18:49,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:18:49.855, foo, 2016-07-05 21:18:49.855, foo}
2016-07-05 21:18:49,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:18:49.856, foo, 2016-07-05 21:18:49.856, foo}
2016-07-05 21:18:49,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:18:49.856, foo, 2016-07-05 21:18:49.856, foo}
2016-07-05 21:18:49,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:18:49.857, foo, 2016-07-05 21:18:49.857, foo}
2016-07-05 21:18:49,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:18:49.858, foo, 2016-07-05 21:18:49.858, foo}
2016-07-05 21:18:49,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:18:49.859, foo, 2016-07-05 21:18:49.859, foo}
2016-07-05 21:18:49,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:18:49.86, foo, 2016-07-05 21:18:49.86, foo}
2016-07-05 21:18:49,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:18:49.861, foo, 2016-07-05 21:18:49.861, foo}
2016-07-05 21:18:49,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:18:49.861, foo, 2016-07-05 21:18:49.861, foo}
2016-07-05 21:18:49,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:18:49.862, foo, 2016-07-05 21:18:49.862, foo}
2016-07-05 21:18:49,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:18:49.863, foo, 2016-07-05 21:18:49.863, foo}
2016-07-05 21:18:49,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:18:49.864, foo, 2016-07-05 21:18:49.864, foo}
2016-07-05 21:18:49,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:18:49.866, foo, 2016-07-05 21:18:49.866, foo}
2016-07-05 21:18:49,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:18:49.867, foo, 2016-07-05 21:18:49.867, foo}
2016-07-05 21:18:49,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:18:49.867, foo, 2016-07-05 21:18:49.867, foo}
2016-07-05 21:18:49,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:18:49.868, foo, 2016-07-05 21:18:49.868, foo}
2016-07-05 21:18:49,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:18:49.869, foo, 2016-07-05 21:18:49.869, foo}
2016-07-05 21:18:49,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:18:49.87, foo, 2016-07-05 21:18:49.87, foo}
2016-07-05 21:18:49,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:18:49.871, foo, 2016-07-05 21:18:49.871, foo}
2016-07-05 21:18:49,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:18:49.872, foo, 2016-07-05 21:18:49.872, foo}
2016-07-05 21:18:49,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:18:49.873, foo, 2016-07-05 21:18:49.873, foo}
2016-07-05 21:18:49,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:18:49.874, foo, 2016-07-05 21:18:49.874, foo}
2016-07-05 21:18:49,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:18:49.875, foo, 2016-07-05 21:18:49.875, foo}
2016-07-05 21:18:49,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:18:49.876, foo, 2016-07-05 21:18:49.876, foo}
2016-07-05 21:18:49,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:18:49.877, foo, 2016-07-05 21:18:49.877, foo}
2016-07-05 21:18:49,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:18:49.878, foo, 2016-07-05 21:18:49.878, foo}
2016-07-05 21:18:49,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:18:49.879, foo, 2016-07-05 21:18:49.879, foo}
2016-07-05 21:18:49,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:49.88, foo, 2016-07-05 21:18:49.88, foo}
2016-07-05 21:18:49,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:49.881, foo, 2016-07-05 21:18:49.881, foo}
2016-07-05 21:18:49,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:49.882, foo, 2016-07-05 21:18:49.882, foo}
2016-07-05 21:18:49,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:18:49.883, foo, 2016-07-05 21:18:49.883, foo}
2016-07-05 21:18:49,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:18:49.883, foo, 2016-07-05 21:18:49.883, foo}
2016-07-05 21:18:49,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:18:49.884, foo, 2016-07-05 21:18:49.884, foo}
2016-07-05 21:18:49,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:18:49.885, foo, 2016-07-05 21:18:49.885, foo}
2016-07-05 21:18:49,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:18:49.886, foo, 2016-07-05 21:18:49.886, foo}
2016-07-05 21:18:49,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:18:49.887, foo, 2016-07-05 21:18:49.887, foo}
2016-07-05 21:18:49,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:18:49.888, foo, 2016-07-05 21:18:49.888, foo}
2016-07-05 21:18:49,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:18:49.888, foo, 2016-07-05 21:18:49.888, foo}
2016-07-05 21:18:49,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:18:49.897, foo, 2016-07-05 21:18:49.897, foo}
2016-07-05 21:18:49,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:18:49.898, foo, 2016-07-05 21:18:49.898, foo}
2016-07-05 21:18:49,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:18:49.898, foo, 2016-07-05 21:18:49.898, foo}
2016-07-05 21:18:49,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:18:49.899, foo, 2016-07-05 21:18:49.899, foo}
2016-07-05 21:18:49,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:18:49.9, foo, 2016-07-05 21:18:49.9, foo}
2016-07-05 21:18:49,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:18:49.901, foo, 2016-07-05 21:18:49.901, foo}
2016-07-05 21:18:49,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:18:49.901, foo, 2016-07-05 21:18:49.901, foo}
2016-07-05 21:18:49,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:18:49.902, foo, 2016-07-05 21:18:49.902, foo}
2016-07-05 21:18:49,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:18:49.903, foo, 2016-07-05 21:18:49.903, foo}
2016-07-05 21:18:49,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:18:49.904, foo, 2016-07-05 21:18:49.904, foo}
2016-07-05 21:18:49,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:18:49.905, foo, 2016-07-05 21:18:49.905, foo}
2016-07-05 21:18:49,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:18:49.905, foo, 2016-07-05 21:18:49.905, foo}
2016-07-05 21:18:49,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:18:49.907, foo, 2016-07-05 21:18:49.907, foo}
2016-07-05 21:18:49,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:49.907, foo, 2016-07-05 21:18:49.907, foo}
2016-07-05 21:18:49,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:18:49.908, foo, 2016-07-05 21:18:49.909, foo}
2016-07-05 21:18:49,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:18:49.91, foo, 2016-07-05 21:18:49.91, foo}
2016-07-05 21:18:49,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:18:49.911, foo, 2016-07-05 21:18:49.911, foo}
2016-07-05 21:18:49,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:18:49.912, foo, 2016-07-05 21:18:49.912, foo}
2016-07-05 21:18:49,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:18:49.914, foo, 2016-07-05 21:18:49.914, foo}
2016-07-05 21:18:49,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:18:49.915, foo, 2016-07-05 21:18:49.915, foo}
2016-07-05 21:18:49,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:18:49.916, foo, 2016-07-05 21:18:49.916, foo}
2016-07-05 21:18:49,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:18:49.917, foo, 2016-07-05 21:18:49.917, foo}
2016-07-05 21:18:49,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:18:49.918, foo, 2016-07-05 21:18:49.918, foo}
2016-07-05 21:18:49,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:18:49.918, foo, 2016-07-05 21:18:49.918, foo}
2016-07-05 21:18:49,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:49.919, foo, 2016-07-05 21:18:49.919, foo}
2016-07-05 21:18:49,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:18:49.92, foo, 2016-07-05 21:18:49.92, foo}
2016-07-05 21:18:49,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:18:49.921, foo, 2016-07-05 21:18:49.921, foo}
2016-07-05 21:18:49,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:18:49.921, foo, 2016-07-05 21:18:49.921, foo}
2016-07-05 21:18:49,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:18:49.928, foo, 2016-07-05 21:18:49.928, foo}
2016-07-05 21:18:49,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:18:49.928, foo, 2016-07-05 21:18:49.928, foo}
2016-07-05 21:18:49,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:18:49.929, foo, 2016-07-05 21:18:49.929, foo}
2016-07-05 21:18:49,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:18:49.93, foo, 2016-07-05 21:18:49.93, foo}
2016-07-05 21:18:49,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:18:49.93, foo, 2016-07-05 21:18:49.93, foo}
2016-07-05 21:18:49,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:18:49.931, foo, 2016-07-05 21:18:49.931, foo}
2016-07-05 21:18:49,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:18:49.932, foo, 2016-07-05 21:18:49.932, foo}
2016-07-05 21:18:49,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:18:49.932, foo, 2016-07-05 21:18:49.932, foo}
2016-07-05 21:18:49,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:18:49.933, foo, 2016-07-05 21:18:49.933, foo}
2016-07-05 21:18:49,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:18:49.934, foo, 2016-07-05 21:18:49.934, foo}
2016-07-05 21:18:49,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:18:49.934, foo, 2016-07-05 21:18:49.934, foo}
2016-07-05 21:18:49,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:18:49.935, foo, 2016-07-05 21:18:49.935, foo}
2016-07-05 21:18:49,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:18:49.936, foo, 2016-07-05 21:18:49.936, foo}
2016-07-05 21:18:49,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:18:49.937, foo, 2016-07-05 21:18:49.937, foo}
2016-07-05 21:18:49,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:49.938, foo, 2016-07-05 21:18:49.938, foo}
2016-07-05 21:18:49,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:49.939, foo, 2016-07-05 21:18:49.939, foo}
2016-07-05 21:18:49,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:49.94, foo, 2016-07-05 21:18:49.94, foo}
2016-07-05 21:18:49,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:49.941, foo, 2016-07-05 21:18:49.941, foo}
2016-07-05 21:18:49,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:18:49.943, foo, 2016-07-05 21:18:49.943, foo}
2016-07-05 21:18:49,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:49.945, foo, 2016-07-05 21:18:49.945, foo}
2016-07-05 21:18:49,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:18:49.946, foo, 2016-07-05 21:18:49.946, foo}
2016-07-05 21:18:49,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:18:49.947, foo, 2016-07-05 21:18:49.947, foo}
2016-07-05 21:18:49,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:18:49.948, foo, 2016-07-05 21:18:49.948, foo}
2016-07-05 21:18:49,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:18:49.949, foo, 2016-07-05 21:18:49.949, foo}
2016-07-05 21:18:49,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:18:49.95, foo, 2016-07-05 21:18:49.95, foo}
2016-07-05 21:18:49,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:18:49.951, foo, 2016-07-05 21:18:49.951, foo}
2016-07-05 21:18:49,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:18:49.952, foo, 2016-07-05 21:18:49.952, foo}
2016-07-05 21:18:49,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:18:49.952, foo, 2016-07-05 21:18:49.952, foo}
2016-07-05 21:18:49,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:18:49.953, foo, 2016-07-05 21:18:49.953, foo}
2016-07-05 21:18:49,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:18:49.954, foo, 2016-07-05 21:18:49.954, foo}
2016-07-05 21:18:49,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:18:49.954, foo, 2016-07-05 21:18:49.954, foo}
2016-07-05 21:18:49,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:18:49.955, foo, 2016-07-05 21:18:49.955, foo}
2016-07-05 21:18:50,020 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:18:50,021 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:18:50,043 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:50,054 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:18:50,063 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:18:50,066 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:18:50,068 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:18:50,071 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:18:50,074 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:18:50,085 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:18:50,088 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:18:50,091 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:18:50,096 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:18:50,097 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:18:50,102 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:18:50,102 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:18:50,102 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:18:50,102 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:18:50,102 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:18:50,103 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:18:50,112 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:18:50,114 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:18:50,118 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:18:50,120 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:18:50,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:18:50,124 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:18:50,124 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:18:50,162 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:18:50,162 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:18:50,193 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:18:50,193 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:18:50,194 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:50,194 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:50,194 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:50,201 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:18:50,204 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:18:50,218 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:18:50,219 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:18:50,219 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:18:50,219 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:18:50,241 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:18:50,271 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:18:50,283 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:18:50,299 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:18:50,315 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:18:50,328 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:18:50,338 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:18:50,348 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:18:50,363 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:18:50,371 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:18:50,379 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:18:50,390 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:18:50,401 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:18:50,409 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:18:50,420 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:18:50,427 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:18:50,427 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:18:50,428 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:18:50,428 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:18:50,428 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:18:50,429 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:18:50,432 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:18:50,432 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:18:50,432 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:18:50,473 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:18:50,473 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:18:50,473 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:18:50,473 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:18:50,474 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:18:50,474 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:18:50,476 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:18:50,477 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:18:50,501 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:18:50,503 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:18:50,504 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:18:50,505 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:18:50,505 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:18:50,506 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:18:50,507 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:18:50,508 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:18:50,510 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:18:50,512 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:18:50,513 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:18:50,514 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:18:50,515 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:18:50,516 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:18:50,517 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:18:50,517 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:18:50,518 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:18:50,518 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:18:50,518 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:18:50,518 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:18:50,518 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:50,519 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:50,519 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:50,533 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:18:50,549 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:18:50,555 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:18:50,575 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:18:50,583 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:18:50,588 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:18:50,599 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:18:50,605 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:18:50,632 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:18:50,651 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:18:50,672 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:18:50,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:18:50,713 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:18:50,731 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:18:50,756 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:18:50,772 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:18:50,790 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:18:50,815 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:18:50,831 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:18:50,852 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:18:50,873 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:18:50,891 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:18:50,913 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:18:50,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:18:50,936 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:18:50,940 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:18:50,944 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:18:50,948 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:18:50,952 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:18:50,955 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:18:50,959 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:18:50,961 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:18:50,964 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:18:50,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:18:50,970 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:18:50,972 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:18:50,976 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:18:50,979 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:18:50,984 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:18:50,999 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:18:51,001 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:18:51,003 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:18:51,003 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:18:51,003 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:18:51,003 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:18:51,004 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:18:51,004 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:18:51,004 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:18:51,005 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:18:51,005 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:18:51,006 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:18:51,016 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:18:51,017 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:18:51,018 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:18:51,018 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:18:51,020 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:18:51,022 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:51,022 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:18:51,023 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:18:51,023 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:18:51,023 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:18:51,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:18:51,048 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:18:51,108 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:18:51,118 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:18:51,129 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:18:51,187 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:18:51,199 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:18:51,255 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:18:51,271 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:18:51,282 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:18:51,295 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 21:18:51,323 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:18:51,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:18:51,347 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:18:51,359 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:18:51,369 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:51,385 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,407 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:18:51,427 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:18:51,449 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,478 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:18:51,517 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,569 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:18:51,587 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:18:51,624 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:18:51,654 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:18:51,677 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:51,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:18:51,731 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:18:51,757 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:18:51,771 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:18:51,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:18:51,814 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:18:51,833 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:18:51,852 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:18:51,872 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:18:51,892 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:18:51,914 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:18:51,933 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 21:18:51,934 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:18:51,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:18:51,937 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:18:51,938 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:18:51,938 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 21:18:51,938 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:18:51,939 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:18:51,939 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:18:51,939 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:18:51,939 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:18:51,940 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:18:51,940 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:18:51,940 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:51,940 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 21:18:51,941 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:51,948 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:51,949 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:51,949 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:51,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:18:51,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:18:51,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:18:51,973 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:18:51,977 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:18:51,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:18:51,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:18:51,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:18:51,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:18:51,983 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:18:51,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:18:51,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:18:51,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:18:51,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:18:51,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:18:51,990 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:18:51,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:18:51,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:18:51,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:18:51,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:18:51,996 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:18:51,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:18:51,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:18:51,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:18:51,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:18:51,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:18:52,005 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:18:52,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:18:52,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:18:52,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:18:52,009 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:18:52,010 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:52,010 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 21:18:52,010 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:52,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:18:52.05, foo, 2016-07-05 21:18:52.05, foo, 0}
2016-07-05 21:18:52,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:18:52.053, foo, 2016-07-05 21:18:52.053, foo, 0}
2016-07-05 21:18:52,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:18:52.054, foo, 2016-07-05 21:18:52.054, foo, 0}
2016-07-05 21:18:52,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:18:52.055, foo, 2016-07-05 21:18:52.055, foo, 0}
2016-07-05 21:18:52,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:18:52.056, foo, 2016-07-05 21:18:52.056, foo, 0}
2016-07-05 21:18:52,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:18:52.057, foo, 2016-07-05 21:18:52.057, foo, 0}
2016-07-05 21:18:52,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:18:52.057, foo, 2016-07-05 21:18:52.057, foo, 0}
2016-07-05 21:18:52,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:18:52.058, foo, 2016-07-05 21:18:52.058, foo, 0}
2016-07-05 21:18:52,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:18:52.058, foo, 2016-07-05 21:18:52.058, foo, 0}
2016-07-05 21:18:52,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:18:52.059, foo, 2016-07-05 21:18:52.059, foo, 0}
2016-07-05 21:18:52,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:18:52.06, foo, 2016-07-05 21:18:52.06, foo, 0}
2016-07-05 21:18:52,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:18:52.061, foo, 2016-07-05 21:18:52.061, foo, 0}
2016-07-05 21:18:52,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:18:52.062, foo, 2016-07-05 21:18:52.062, foo, 0}
2016-07-05 21:18:52,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:18:52.088, foo, 2016-07-05 21:18:52.088, foo, 0}
2016-07-05 21:18:52,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:18:52.09, foo, 2016-07-05 21:18:52.09, foo, 0}
2016-07-05 21:18:52,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:18:52.091, foo, 2016-07-05 21:18:52.091, foo, 0}
2016-07-05 21:18:52,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:18:52.092, foo, 2016-07-05 21:18:52.092, foo, 0}
2016-07-05 21:18:52,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:18:52.092, foo, 2016-07-05 21:18:52.092, foo, 0}
2016-07-05 21:18:52,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:18:52.094, foo, 2016-07-05 21:18:52.094, foo, 0}
2016-07-05 21:18:52,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:18:52.095, foo, 2016-07-05 21:18:52.095, foo, 0}
2016-07-05 21:18:52,112 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:18:52,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:18:52.112, foo, 2016-07-05 21:18:52.112, foo, 0}
2016-07-05 21:18:52,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:18:52.118, foo, 2016-07-05 21:18:52.118, foo, 0}
2016-07-05 21:18:52,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:18:52.12, foo, 2016-07-05 21:18:52.12, foo, 0}
2016-07-05 21:18:52,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:18:52.121, foo, 2016-07-05 21:18:52.121, foo, 0}
2016-07-05 21:18:52,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:18:52.121, foo, 2016-07-05 21:18:52.121, foo, 0}
2016-07-05 21:18:52,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:18:52.122, foo, 2016-07-05 21:18:52.122, foo, 0}
2016-07-05 21:18:52,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:18:52.123, foo, 2016-07-05 21:18:52.123, foo, 0}
2016-07-05 21:18:52,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:18:52.123, foo, 2016-07-05 21:18:52.123, foo, 0}
2016-07-05 21:18:52,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:18:52.124, foo, 2016-07-05 21:18:52.124, foo, 0}
2016-07-05 21:18:52,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:18:52.139, foo, 2016-07-05 21:18:52.139, foo, 0}
2016-07-05 21:18:52,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:18:52.139, foo, 2016-07-05 21:18:52.139, foo, 0}
2016-07-05 21:18:52,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:18:52.14, foo, 2016-07-05 21:18:52.14, foo, 0}
2016-07-05 21:18:52,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:18:52.141, foo, 2016-07-05 21:18:52.141, foo, 0}
2016-07-05 21:18:52,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:18:52.142, foo, 2016-07-05 21:18:52.142, foo, 0}
2016-07-05 21:18:52,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:18:52.143, foo, 2016-07-05 21:18:52.143, foo, 0}
2016-07-05 21:18:52,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:18:52.144, foo, 2016-07-05 21:18:52.144, foo, 0}
2016-07-05 21:18:52,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:18:52.146, foo, 2016-07-05 21:18:52.146, foo, 0}
2016-07-05 21:18:52,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:18:52.148, foo, 2016-07-05 21:18:52.148, foo, 0}
2016-07-05 21:18:52,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:18:52.149, foo, 2016-07-05 21:18:52.149, foo, 0}
2016-07-05 21:18:52,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:18:52.154, foo, 2016-07-05 21:18:52.154, foo, 0}
2016-07-05 21:18:52,171 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:18:52,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:18:52,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:18:52,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:18:52,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:18:52,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:18:52,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:18:52,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:18:52,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:18:52,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:18:52,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:18:52,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:18:52,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:18:52,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:18:52,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:18:52,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:18:52,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:18:52,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:18:52,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:18:52,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:18:52,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:18:52,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:18:52,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:18:52,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:18:52,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:18:52,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:18:52,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:18:52,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:18:52,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:18:52,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:18:52,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:18:52,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:18:52,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:18:52,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:18:52,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:18:52,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:18:52,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:18:52,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:18:52,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:18:52,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:18:52,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:18:52,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:18:52,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:18:52,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:18:52,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:18:52,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:18:52,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:18:52,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:18:52,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:18:52,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:18:52,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:18:52,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:18:52,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:18:52,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:18:52,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:18:52,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:18:52,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:18:52,243 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:18:52,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:18:52.244, foo, 2016-07-05 21:18:52.244, foo, 0}
2016-07-05 21:18:52,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:18:52.246, foo, 2016-07-05 21:18:52.246, foo, 0}
2016-07-05 21:18:52,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:18:52.246, foo, 2016-07-05 21:18:52.246, foo, 0}
2016-07-05 21:18:52,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:18:52.247, foo, 2016-07-05 21:18:52.247, foo, 0}
2016-07-05 21:18:52,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:18:52.248, foo, 2016-07-05 21:18:52.248, foo, 0}
2016-07-05 21:18:52,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:18:52.249, foo, 2016-07-05 21:18:52.249, foo, 0}
2016-07-05 21:18:52,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:18:52.249, foo, 2016-07-05 21:18:52.249, foo, 0}
2016-07-05 21:18:52,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:18:52.25, foo, 2016-07-05 21:18:52.25, foo, 0}
2016-07-05 21:18:52,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:18:52.25, foo, 2016-07-05 21:18:52.25, foo, 0}
2016-07-05 21:18:52,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:18:52.251, foo, 2016-07-05 21:18:52.251, foo, 0}
2016-07-05 21:18:52,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:18:52.252, foo, 2016-07-05 21:18:52.252, foo, 0}
2016-07-05 21:18:52,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:18:52.253, foo, 2016-07-05 21:18:52.253, foo, 0}
2016-07-05 21:18:52,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:18:52.253, foo, 2016-07-05 21:18:52.253, foo, 0}
2016-07-05 21:18:52,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:18:52.254, foo, 2016-07-05 21:18:52.254, foo, 0}
2016-07-05 21:18:52,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:18:52.254, foo, 2016-07-05 21:18:52.254, foo, 0}
2016-07-05 21:18:52,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:18:52.264, foo, 2016-07-05 21:18:52.264, foo, 0}
2016-07-05 21:18:52,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:18:52.265, foo, 2016-07-05 21:18:52.265, foo, 0}
2016-07-05 21:18:52,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:18:52.265, foo, 2016-07-05 21:18:52.265, foo, 0}
2016-07-05 21:18:52,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:18:52.266, foo, 2016-07-05 21:18:52.266, foo, 0}
2016-07-05 21:18:52,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:18:52.266, foo, 2016-07-05 21:18:52.266, foo, 0}
2016-07-05 21:18:52,276 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:18:52,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:18:52.276, foo, 2016-07-05 21:18:52.276, foo, 0}
2016-07-05 21:18:52,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:18:52.277, foo, 2016-07-05 21:18:52.277, foo, 0}
2016-07-05 21:18:52,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:18:52.278, foo, 2016-07-05 21:18:52.278, foo, 0}
2016-07-05 21:18:52,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:18:52.278, foo, 2016-07-05 21:18:52.278, foo, 0}
2016-07-05 21:18:52,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:18:52.278, foo, 2016-07-05 21:18:52.278, foo, 0}
2016-07-05 21:18:52,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:18:52.279, foo, 2016-07-05 21:18:52.279, foo, 0}
2016-07-05 21:18:52,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:18:52.279, foo, 2016-07-05 21:18:52.279, foo, 0}
2016-07-05 21:18:52,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:18:52.279, foo, 2016-07-05 21:18:52.279, foo, 0}
2016-07-05 21:18:52,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:18:52.28, foo, 2016-07-05 21:18:52.28, foo, 0}
2016-07-05 21:18:52,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:18:52.28, foo, 2016-07-05 21:18:52.28, foo, 0}
2016-07-05 21:18:52,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:18:52.28, foo, 2016-07-05 21:18:52.28, foo, 0}
2016-07-05 21:18:52,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:18:52.28, foo, 2016-07-05 21:18:52.28, foo, 0}
2016-07-05 21:18:52,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:18:52.281, foo, 2016-07-05 21:18:52.281, foo, 0}
2016-07-05 21:18:52,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:18:52.281, foo, 2016-07-05 21:18:52.281, foo, 0}
2016-07-05 21:18:52,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:18:52.282, foo, 2016-07-05 21:18:52.282, foo, 0}
2016-07-05 21:18:52,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:18:52.282, foo, 2016-07-05 21:18:52.282, foo, 0}
2016-07-05 21:18:52,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:18:52.283, foo, 2016-07-05 21:18:52.283, foo, 0}
2016-07-05 21:18:52,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:18:52.283, foo, 2016-07-05 21:18:52.283, foo, 0}
2016-07-05 21:18:52,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:18:52.284, foo, 2016-07-05 21:18:52.284, foo, 0}
2016-07-05 21:18:52,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:18:52.285, foo, 2016-07-05 21:18:52.285, foo, 0}
2016-07-05 21:18:52,299 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:18:52,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:18:52.299, foo, 2016-07-05 21:18:52.299, foo}
2016-07-05 21:18:52,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:18:52.319, foo, 2016-07-05 21:18:52.319, foo}
2016-07-05 21:18:52,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:18:52.32, foo, 2016-07-05 21:18:52.32, foo}
2016-07-05 21:18:52,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:18:52.32, foo, 2016-07-05 21:18:52.32, foo}
2016-07-05 21:18:52,325 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:18:52,325 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:18:52,326 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 21:18:52,326 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:18:52,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:18:52.356, foo, 2016-07-05 21:18:52.356, foo, 0}
2016-07-05 21:18:52,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:18:52.357, foo, 2016-07-05 21:18:52.357, foo, 0}
2016-07-05 21:18:52,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:18:52.358, foo, 2016-07-05 21:18:52.358, foo, 0}
2016-07-05 21:18:52,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:18:52.366, foo, 2016-07-05 21:18:52.366, foo, 0}
2016-07-05 21:18:52,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:18:52.366, foo, 2016-07-05 21:18:52.366, foo, 0}
2016-07-05 21:18:52,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:18:52.366, foo, 2016-07-05 21:18:52.366, foo, 0}
2016-07-05 21:18:52,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:18:52.367, foo, 2016-07-05 21:18:52.367, foo, 0}
2016-07-05 21:18:52,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:18:52.367, foo, 2016-07-05 21:18:52.367, foo, 0}
2016-07-05 21:18:52,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:18:52.367, foo, 2016-07-05 21:18:52.367, foo, 0}
2016-07-05 21:18:52,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:18:52.368, foo, 2016-07-05 21:18:52.368, foo, 0}
2016-07-05 21:18:52,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:18:52.368, foo, 2016-07-05 21:18:52.368, foo, 0}
2016-07-05 21:18:52,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:18:52.397, foo, 2016-07-05 21:18:52.397, foo, 0}
2016-07-05 21:18:52,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:18:52.398, foo, 2016-07-05 21:18:52.398, foo, 0}
2016-07-05 21:18:52,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:18:52.399, foo, 2016-07-05 21:18:52.399, foo, 0}
2016-07-05 21:18:52,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:18:52.399, foo, 2016-07-05 21:18:52.399, foo, 0}
2016-07-05 21:18:52,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:18:52.4, foo, 2016-07-05 21:18:52.4, foo, 0}
2016-07-05 21:18:52,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:18:52.4, foo, 2016-07-05 21:18:52.4, foo, 0}
2016-07-05 21:18:52,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:18:52.401, foo, 2016-07-05 21:18:52.401, foo, 0}
2016-07-05 21:18:52,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:18:52.401, foo, 2016-07-05 21:18:52.401, foo, 0}
2016-07-05 21:18:52,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:18:52.418, foo, 2016-07-05 21:18:52.418, foo, 0}
2016-07-05 21:18:52,439 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:18:52,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:18:52.439, foo, 2016-07-05 21:18:52.439, foo, 0}
2016-07-05 21:18:52,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:18:52.44, foo, 2016-07-05 21:18:52.44, foo, 0}
2016-07-05 21:18:52,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:18:52.441, foo, 2016-07-05 21:18:52.441, foo, 0}
2016-07-05 21:18:52,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:18:52.442, foo, 2016-07-05 21:18:52.442, foo, 0}
2016-07-05 21:18:52,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:18:52.442, foo, 2016-07-05 21:18:52.442, foo, 0}
2016-07-05 21:18:52,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:18:52.443, foo, 2016-07-05 21:18:52.443, foo, 0}
2016-07-05 21:18:52,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:18:52.443, foo, 2016-07-05 21:18:52.443, foo, 0}
2016-07-05 21:18:52,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:18:52.444, foo, 2016-07-05 21:18:52.444, foo, 0}
2016-07-05 21:18:52,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:18:52.445, foo, 2016-07-05 21:18:52.445, foo, 0}
2016-07-05 21:18:52,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:18:52.446, foo, 2016-07-05 21:18:52.446, foo, 0}
2016-07-05 21:18:52,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:18:52.447, foo, 2016-07-05 21:18:52.447, foo, 0}
2016-07-05 21:18:52,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:18:52.448, foo, 2016-07-05 21:18:52.448, foo, 0}
2016-07-05 21:18:52,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:18:52.449, foo, 2016-07-05 21:18:52.449, foo, 0}
2016-07-05 21:18:52,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:18:52.45, foo, 2016-07-05 21:18:52.45, foo, 0}
2016-07-05 21:18:52,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:18:52.451, foo, 2016-07-05 21:18:52.451, foo, 0}
2016-07-05 21:18:52,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:18:52.453, foo, 2016-07-05 21:18:52.453, foo, 0}
2016-07-05 21:18:52,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:18:52.454, foo, 2016-07-05 21:18:52.454, foo, 0}
2016-07-05 21:18:52,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:18:52.455, foo, 2016-07-05 21:18:52.455, foo, 0}
2016-07-05 21:18:52,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:18:52.456, foo, 2016-07-05 21:18:52.456, foo, 0}
2016-07-05 21:18:52,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:18:52.457, foo, 2016-07-05 21:18:52.457, foo, 0}
2016-07-05 21:18:52,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:18:52.458, foo, 2016-07-05 21:18:52.458, foo, 0}
2016-07-05 21:18:52,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:18:52.458, foo, 2016-07-05 21:18:52.458, foo, 0}
2016-07-05 21:18:52,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:18:52.459, foo, 2016-07-05 21:18:52.459, foo, 0}
2016-07-05 21:18:52,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:18:52.461, foo, 2016-07-05 21:18:52.461, foo, 0}
2016-07-05 21:18:52,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:18:52.465, foo, 2016-07-05 21:18:52.465, foo, 0}
2016-07-05 21:18:52,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:18:52.466, foo, 2016-07-05 21:18:52.466, foo, 0}
2016-07-05 21:18:52,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:18:52.467, foo, 2016-07-05 21:18:52.467, foo, 0}
2016-07-05 21:18:52,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:18:52.468, foo, 2016-07-05 21:18:52.468, foo, 0}
2016-07-05 21:18:52,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:18:52.468, foo, 2016-07-05 21:18:52.468, foo, 0}
2016-07-05 21:18:52,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:18:52.469, foo, 2016-07-05 21:18:52.469, foo, 0}
2016-07-05 21:18:52,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:18:52.47, foo, 2016-07-05 21:18:52.47, foo, 0}
2016-07-05 21:18:52,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:18:52.471, foo, 2016-07-05 21:18:52.471, foo, 0}
2016-07-05 21:18:52,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:52.471, foo, 2016-07-05 21:18:52.471, foo, 0}
2016-07-05 21:18:52,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:52.472, foo, 2016-07-05 21:18:52.472, foo, 0}
2016-07-05 21:18:52,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:18:52.473, foo, 2016-07-05 21:18:52.473, foo, 0}
2016-07-05 21:18:52,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:52.473, foo, 2016-07-05 21:18:52.473, foo, 0}
2016-07-05 21:18:52,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:18:52.474, foo, 2016-07-05 21:18:52.474, foo, 0}
2016-07-05 21:18:52,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:18:52.475, foo, 2016-07-05 21:18:52.475, foo, 0}
2016-07-05 21:18:52,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:18:52.475, foo, 2016-07-05 21:18:52.475, foo, 0}
2016-07-05 21:18:52,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:18:52.476, foo, 2016-07-05 21:18:52.476, foo, 0}
2016-07-05 21:18:52,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:18:52.477, foo, 2016-07-05 21:18:52.477, foo, 0}
2016-07-05 21:18:52,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:18:52.477, foo, 2016-07-05 21:18:52.477, foo, 0}
2016-07-05 21:18:52,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:18:52.478, foo, 2016-07-05 21:18:52.478, foo, 0}
2016-07-05 21:18:52,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:52.48, foo, 2016-07-05 21:18:52.48, foo, 0}
2016-07-05 21:18:52,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:52.481, foo, 2016-07-05 21:18:52.481, foo, 0}
2016-07-05 21:18:52,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:18:52.482, foo, 2016-07-05 21:18:52.482, foo, 0}
2016-07-05 21:18:52,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:52.483, foo, 2016-07-05 21:18:52.483, foo, 0}
2016-07-05 21:18:52,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:18:52.484, foo, 2016-07-05 21:18:52.484, foo, 0}
2016-07-05 21:18:52,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:18:52.485, foo, 2016-07-05 21:18:52.485, foo, 0}
2016-07-05 21:18:52,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:18:52.486, foo, 2016-07-05 21:18:52.486, foo, 0}
2016-07-05 21:18:52,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:18:52.487, foo, 2016-07-05 21:18:52.487, foo, 0}
2016-07-05 21:18:52,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:18:52.488, foo, 2016-07-05 21:18:52.488, foo, 0}
2016-07-05 21:18:52,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:18:52.489, foo, 2016-07-05 21:18:52.489, foo, 0}
2016-07-05 21:18:52,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:18:52.49, foo, 2016-07-05 21:18:52.49, foo, 0}
2016-07-05 21:18:52,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:18:52.491, foo, 2016-07-05 21:18:52.491, foo, 0}
2016-07-05 21:18:52,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:18:52.491, foo, 2016-07-05 21:18:52.491, foo, 0}
2016-07-05 21:18:52,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:18:52.492, foo, 2016-07-05 21:18:52.492, foo, 0}
2016-07-05 21:18:52,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:18:52.493, foo, 2016-07-05 21:18:52.493, foo, 0}
2016-07-05 21:18:52,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:18:52.499, foo, 2016-07-05 21:18:52.499, foo, 0}
2016-07-05 21:18:52,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:18:52.499, foo, 2016-07-05 21:18:52.499, foo, 0}
2016-07-05 21:18:52,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:18:52.5, foo, 2016-07-05 21:18:52.5, foo, 0}
2016-07-05 21:18:52,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:18:52.501, foo, 2016-07-05 21:18:52.501, foo, 0}
2016-07-05 21:18:52,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:18:52.502, foo, 2016-07-05 21:18:52.502, foo, 0}
2016-07-05 21:18:52,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:18:52.502, foo, 2016-07-05 21:18:52.502, foo, 0}
2016-07-05 21:18:52,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:18:52.503, foo, 2016-07-05 21:18:52.503, foo, 0}
2016-07-05 21:18:52,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:18:52.504, foo, 2016-07-05 21:18:52.504, foo, 0}
2016-07-05 21:18:52,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:18:52.504, foo, 2016-07-05 21:18:52.504, foo, 0}
2016-07-05 21:18:52,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:18:52.505, foo, 2016-07-05 21:18:52.505, foo, 0}
2016-07-05 21:18:52,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:18:52.506, foo, 2016-07-05 21:18:52.506, foo, 0}
2016-07-05 21:18:52,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:18:52.506, foo, 2016-07-05 21:18:52.506, foo, 0}
2016-07-05 21:18:52,560 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:18:52,561 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:18:52.561, foo, 2016-07-05 21:18:52.561, foo}
2016-07-05 21:18:52,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:18:52.562, foo, 2016-07-05 21:18:52.562, foo}
2016-07-05 21:18:52,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:18:52.563, foo, 2016-07-05 21:18:52.563, foo}
2016-07-05 21:18:52,563 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:18:52.563, foo, 2016-07-05 21:18:52.563, foo}
2016-07-05 21:18:52,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:18:52.564, foo, 2016-07-05 21:18:52.564, foo}
2016-07-05 21:18:52,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:18:52.564, foo, 2016-07-05 21:18:52.564, foo}
2016-07-05 21:18:52,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:18:52.565, foo, 2016-07-05 21:18:52.565, foo}
2016-07-05 21:18:52,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:18:52.565, foo, 2016-07-05 21:18:52.565, foo}
2016-07-05 21:18:52,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:18:52.566, foo, 2016-07-05 21:18:52.566, foo}
2016-07-05 21:18:52,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:18:52.566, foo, 2016-07-05 21:18:52.566, foo}
2016-07-05 21:18:52,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:18:52.567, foo, 2016-07-05 21:18:52.567, foo}
2016-07-05 21:18:52,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:18:52.567, foo, 2016-07-05 21:18:52.567, foo}
2016-07-05 21:18:52,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:18:52.568, foo, 2016-07-05 21:18:52.568, foo}
2016-07-05 21:18:52,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:18:52.569, foo, 2016-07-05 21:18:52.569, foo}
2016-07-05 21:18:52,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:18:52.569, foo, 2016-07-05 21:18:52.569, foo}
2016-07-05 21:18:52,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:18:52.57, foo, 2016-07-05 21:18:52.57, foo}
2016-07-05 21:18:52,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:18:52.57, foo, 2016-07-05 21:18:52.57, foo}
2016-07-05 21:18:52,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:18:52.571, foo, 2016-07-05 21:18:52.571, foo}
2016-07-05 21:18:52,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:18:52.571, foo, 2016-07-05 21:18:52.571, foo}
2016-07-05 21:18:52,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:18:52.572, foo, 2016-07-05 21:18:52.572, foo}
2016-07-05 21:18:52,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:18:52.572, foo, 2016-07-05 21:18:52.572, foo}
2016-07-05 21:18:52,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:18:52.573, foo, 2016-07-05 21:18:52.573, foo}
2016-07-05 21:18:52,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:18:52.573, foo, 2016-07-05 21:18:52.573, foo}
2016-07-05 21:18:52,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:18:52.574, foo, 2016-07-05 21:18:52.574, foo}
2016-07-05 21:18:52,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:18:52.575, foo, 2016-07-05 21:18:52.575, foo}
2016-07-05 21:18:52,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:18:52.575, foo, 2016-07-05 21:18:52.575, foo}
2016-07-05 21:18:52,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:18:52.576, foo, 2016-07-05 21:18:52.576, foo}
2016-07-05 21:18:52,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:18:52.577, foo, 2016-07-05 21:18:52.577, foo}
2016-07-05 21:18:52,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:18:52.577, foo, 2016-07-05 21:18:52.577, foo}
2016-07-05 21:18:52,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:52.58, foo, 2016-07-05 21:18:52.58, foo}
2016-07-05 21:18:52,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:52.58, foo, 2016-07-05 21:18:52.58, foo}
2016-07-05 21:18:52,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:18:52.581, foo, 2016-07-05 21:18:52.581, foo}
2016-07-05 21:18:52,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:18:52.582, foo, 2016-07-05 21:18:52.582, foo}
2016-07-05 21:18:52,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:18:52.583, foo, 2016-07-05 21:18:52.583, foo}
2016-07-05 21:18:52,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:18:52.583, foo, 2016-07-05 21:18:52.583, foo}
2016-07-05 21:18:52,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:18:52.584, foo, 2016-07-05 21:18:52.584, foo}
2016-07-05 21:18:52,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:18:52.585, foo, 2016-07-05 21:18:52.585, foo}
2016-07-05 21:18:52,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:18:52.585, foo, 2016-07-05 21:18:52.585, foo}
2016-07-05 21:18:52,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:18:52.586, foo, 2016-07-05 21:18:52.586, foo}
2016-07-05 21:18:52,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:18:52.586, foo, 2016-07-05 21:18:52.586, foo}
2016-07-05 21:18:52,587 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:18:52.587, foo, 2016-07-05 21:18:52.587, foo}
2016-07-05 21:18:52,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:18:52.587, foo, 2016-07-05 21:18:52.587, foo}
2016-07-05 21:18:52,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:18:52.588, foo, 2016-07-05 21:18:52.588, foo}
2016-07-05 21:18:52,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:18:52.588, foo, 2016-07-05 21:18:52.588, foo}
2016-07-05 21:18:52,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:18:52.589, foo, 2016-07-05 21:18:52.589, foo}
2016-07-05 21:18:52,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:18:52.593, foo, 2016-07-05 21:18:52.593, foo}
2016-07-05 21:18:52,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:18:52.594, foo, 2016-07-05 21:18:52.594, foo}
2016-07-05 21:18:52,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:18:52.595, foo, 2016-07-05 21:18:52.595, foo}
2016-07-05 21:18:52,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:18:52.595, foo, 2016-07-05 21:18:52.595, foo}
2016-07-05 21:18:52,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:18:52.596, foo, 2016-07-05 21:18:52.596, foo}
2016-07-05 21:18:52,597 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:18:52.597, foo, 2016-07-05 21:18:52.597, foo}
2016-07-05 21:18:52,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:18:52.598, foo, 2016-07-05 21:18:52.598, foo}
2016-07-05 21:18:52,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:18:52.599, foo, 2016-07-05 21:18:52.599, foo}
2016-07-05 21:18:52,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:52.6, foo, 2016-07-05 21:18:52.6, foo}
2016-07-05 21:18:52,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:18:52.601, foo, 2016-07-05 21:18:52.601, foo}
2016-07-05 21:18:52,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:18:52.602, foo, 2016-07-05 21:18:52.602, foo}
2016-07-05 21:18:52,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:18:52.603, foo, 2016-07-05 21:18:52.603, foo}
2016-07-05 21:18:52,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:18:52.604, foo, 2016-07-05 21:18:52.604, foo}
2016-07-05 21:18:52,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:18:52.605, foo, 2016-07-05 21:18:52.605, foo}
2016-07-05 21:18:52,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:18:52.605, foo, 2016-07-05 21:18:52.605, foo}
2016-07-05 21:18:52,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:18:52.605, foo, 2016-07-05 21:18:52.605, foo}
2016-07-05 21:18:52,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:18:52.606, foo, 2016-07-05 21:18:52.606, foo}
2016-07-05 21:18:52,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:18:52.606, foo, 2016-07-05 21:18:52.606, foo}
2016-07-05 21:18:52,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:18:52.607, foo, 2016-07-05 21:18:52.607, foo}
2016-07-05 21:18:52,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:52.607, foo, 2016-07-05 21:18:52.607, foo}
2016-07-05 21:18:52,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:18:52.608, foo, 2016-07-05 21:18:52.608, foo}
2016-07-05 21:18:52,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:18:52.608, foo, 2016-07-05 21:18:52.608, foo}
2016-07-05 21:18:52,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:18:52.609, foo, 2016-07-05 21:18:52.609, foo}
2016-07-05 21:18:52,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:18:52.609, foo, 2016-07-05 21:18:52.609, foo}
2016-07-05 21:18:52,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:18:52.61, foo, 2016-07-05 21:18:52.61, foo}
2016-07-05 21:18:52,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:18:52.61, foo, 2016-07-05 21:18:52.61, foo}
2016-07-05 21:18:52,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:18:52.611, foo, 2016-07-05 21:18:52.611, foo}
2016-07-05 21:18:52,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:18:52.611, foo, 2016-07-05 21:18:52.611, foo}
2016-07-05 21:18:52,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:18:52.612, foo, 2016-07-05 21:18:52.612, foo}
2016-07-05 21:18:52,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:18:52.613, foo, 2016-07-05 21:18:52.613, foo}
2016-07-05 21:18:52,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:18:52.613, foo, 2016-07-05 21:18:52.613, foo}
2016-07-05 21:18:52,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:18:52.614, foo, 2016-07-05 21:18:52.614, foo}
2016-07-05 21:18:52,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:18:52.615, foo, 2016-07-05 21:18:52.615, foo}
2016-07-05 21:18:52,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:18:52.615, foo, 2016-07-05 21:18:52.615, foo}
2016-07-05 21:18:52,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:18:52.616, foo, 2016-07-05 21:18:52.616, foo}
2016-07-05 21:18:52,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:18:52.617, foo, 2016-07-05 21:18:52.617, foo}
2016-07-05 21:18:52,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:18:52.617, foo, 2016-07-05 21:18:52.617, foo}
2016-07-05 21:18:52,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:52.618, foo, 2016-07-05 21:18:52.618, foo}
2016-07-05 21:18:52,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:52.619, foo, 2016-07-05 21:18:52.619, foo}
2016-07-05 21:18:52,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:52.619, foo, 2016-07-05 21:18:52.619, foo}
2016-07-05 21:18:52,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:18:52.62, foo, 2016-07-05 21:18:52.62, foo}
2016-07-05 21:18:52,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:18:52.621, foo, 2016-07-05 21:18:52.621, foo}
2016-07-05 21:18:52,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:18:52.621, foo, 2016-07-05 21:18:52.621, foo}
2016-07-05 21:18:52,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:18:52.622, foo, 2016-07-05 21:18:52.622, foo}
2016-07-05 21:18:52,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:18:52.623, foo, 2016-07-05 21:18:52.623, foo}
2016-07-05 21:18:52,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:18:52.623, foo, 2016-07-05 21:18:52.623, foo}
2016-07-05 21:18:52,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:18:52.624, foo, 2016-07-05 21:18:52.624, foo}
2016-07-05 21:18:52,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:18:52.625, foo, 2016-07-05 21:18:52.625, foo}
2016-07-05 21:18:52,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:18:52.626, foo, 2016-07-05 21:18:52.626, foo}
2016-07-05 21:18:52,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:18:52.626, foo, 2016-07-05 21:18:52.626, foo}
2016-07-05 21:18:52,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:18:52.627, foo, 2016-07-05 21:18:52.627, foo}
2016-07-05 21:18:52,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:18:52.628, foo, 2016-07-05 21:18:52.628, foo}
2016-07-05 21:18:52,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:18:52.629, foo, 2016-07-05 21:18:52.629, foo}
2016-07-05 21:18:52,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:18:52.63, foo, 2016-07-05 21:18:52.63, foo}
2016-07-05 21:18:52,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:18:52.631, foo, 2016-07-05 21:18:52.631, foo}
2016-07-05 21:18:52,697 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:18:52,698 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:18:52,699 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:18:52,699 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:18:52,699 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:18:52,699 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:18:52,699 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:18:52,700 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:18:52,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:18:52,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:18:52,710 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:18:52,713 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:18:52,716 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:18:52,716 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:18:52,717 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:18:52,718 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 21:18:52,718 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 21:18:52,719 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 21:18:52,719 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 21:18:52,719 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 21:18:52,719 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 21:18:52,732 [main] INFO  (DfAlterCheckProcess#createEmptyAlterSqlFileIfNotExists():687) - ...Creating the alter SQL file as empty to playsql/migration/alter/alter-schema.sql
2016-07-05 21:18:52,733 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 21:18:52,734 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2016-07-05 21:18:52,734 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=0 failure=0 (in 1 files)
2016-07-05 21:18:52,735 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:18:52,735 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:18:52,736 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:18:52,736 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:18:52,736 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:18:52,736 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:18:52,736 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 21:18:52,737 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:18:52,737 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:18:52,737 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:18:52,737 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:18:52,738 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:18:52,738 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:18:52,738 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:18:52,740 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:18:52,741 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:18:52,746 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:18:52,746 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:18:52,747 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:18:52,747 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:18:52,762 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:18:52,773 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:18:52,783 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:18:52,800 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:18:52,810 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:18:52,821 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:18:52,832 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:18:52,842 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:18:52,854 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:18:52,860 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:18:52,872 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:18:52,881 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:18:52,889 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:18:52,897 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:18:52,904 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:18:52,904 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:18:52,905 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 21:18:52,905 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:18:52,905 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:18:52,905 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:18:52,906 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:18:52,906 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:18:52,906 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:18:52,916 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 21:18:52,917 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 21:18:52,917 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 21:18:52,917 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 21:18:52,917 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 21:18:52,917 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 21:18:52,937 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:18:53,040 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:18:53,122 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 21:18:53,122 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 21:18:53,123 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 21:18:53,123 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 21:18:53,123 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 21:18:53,123 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 21:18:53,124 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:18:53,126 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 21:18:53,128 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:18:53,128 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:18:53,160 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 21:18:53,160 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 21:18:53,171 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 21:18:53,408 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 21:18:53,415 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 21:18:53,417 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 21:18:53,419 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 21:18:53,484 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:18:53,502 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 21:18:53

[Table Count]
15 to 16
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 21:18:53,519 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:18:53,521 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m09s331ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=0 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:19:17,650 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:19:17,654 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:19:17,655 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:19:17,659 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:19:17,659 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:19:17,660 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:19:17,661 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:19:19,267 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:19:19,267 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:19:19,268 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:19:19,268 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:19:19,276 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:19:19,699 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:19:19,699 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:19:19,712 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 21:19:19,725 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:19:19,728 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:19:19,728 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:19:19,728 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:19:19,729 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:19:19,731 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:19:19,740 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:19:19,740 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:19:19,741 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:19:19,741 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:19:19,742 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:19:19,742 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:19:19,762 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:19,763 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:19,763 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:19,796 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:19:19,803 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:19:19,807 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:19:19,814 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:19:19,826 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:19:19,839 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:19:19,861 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:19:19,881 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:19:19,895 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:19:19,908 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:19:19,925 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:19:19,952 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:19:19,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:19:19,986 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:19:20,014 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:19:20,040 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:19:20,059 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:19:20,076 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:19:20,097 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:19:20,120 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:19:20,139 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:19:20,158 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:19:20,186 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:19:20,190 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:19:20,195 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:19:20,199 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:19:20,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:19:20,205 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:19:20,208 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:19:20,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:19:20,219 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:19:20,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:19:20,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:19:20,229 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:19:20,232 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:19:20,235 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:19:20,238 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:19:20,295 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:19:20,298 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:19:20,300 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:19:20,301 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:19:20,301 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:19:20,301 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:19:20,302 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:19:20,302 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:19:20,306 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:19:20,309 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:19:20,311 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:19:20,312 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:19:20,331 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:19:20,333 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:19:20,335 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:19:20,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:19:20,344 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:19:20,352 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:19:20,353 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:19:20,354 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:19:20,355 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:19:20,356 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:19:20,362 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:19:20,384 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:19:20,453 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:19:20,464 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:19:20,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:19:20,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:19:20,556 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:19:20,625 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:19:20,689 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:19:20,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:19:20,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:19:20,771 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:19:20,782 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:19:20,824 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:19:20,866 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:19:20,878 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:19:20,904 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:19:20,925 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:20,943 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:19:20,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:19:20,987 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:21,013 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:21,032 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:19:21,054 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:21,074 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:21,092 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:19:21,114 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:21,135 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:19:21,157 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:19:21,185 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:19:21,205 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:19:21,228 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:19:21,258 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:19:21,278 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:19:21,299 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:19:21,319 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:19:21,338 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:19:21,358 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:19:21,378 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:19:21,398 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:19:21,419 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:19:21,439 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:19:21,439 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:19:21,440 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:19:21,442 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:19:21,443 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:19:21,443 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:19:21,444 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:19:21,562 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:19:21,562 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:19:21,563 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:19:21,563 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:19:21,563 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:19:21,563 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:19:21,587 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:21,588 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:19:21,588 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:21,849 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:21,850 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:21,850 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:21,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:19:21,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:19:22,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:19:22,001 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:19:22,006 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:19:22,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:19:22,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:19:22,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:19:22,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:19:22,017 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:19:22,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:19:22,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:19:22,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:19:22,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:19:22,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:19:22,026 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:19:22,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:19:22,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:19:22,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:19:22,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:19:22,034 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:19:22,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:19:22,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:19:22,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:19:22,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:19:22,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:19:22,044 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:19:22,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:19:22,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:19:22,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:19:22,055 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:19:22,058 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:22,058 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:19:22,059 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:22,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:19:22.178, foo, 2016-07-05 21:19:22.178, foo, 0}
2016-07-05 21:19:22,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:19:22.187, foo, 2016-07-05 21:19:22.187, foo, 0}
2016-07-05 21:19:22,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:19:22.189, foo, 2016-07-05 21:19:22.189, foo, 0}
2016-07-05 21:19:22,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:19:22.191, foo, 2016-07-05 21:19:22.191, foo, 0}
2016-07-05 21:19:22,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:19:22.193, foo, 2016-07-05 21:19:22.193, foo, 0}
2016-07-05 21:19:22,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:19:22.195, foo, 2016-07-05 21:19:22.195, foo, 0}
2016-07-05 21:19:22,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:19:22.197, foo, 2016-07-05 21:19:22.197, foo, 0}
2016-07-05 21:19:22,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:19:22.199, foo, 2016-07-05 21:19:22.199, foo, 0}
2016-07-05 21:19:22,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:19:22.201, foo, 2016-07-05 21:19:22.201, foo, 0}
2016-07-05 21:19:22,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:19:22.203, foo, 2016-07-05 21:19:22.203, foo, 0}
2016-07-05 21:19:22,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:19:22.205, foo, 2016-07-05 21:19:22.205, foo, 0}
2016-07-05 21:19:22,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:19:22.207, foo, 2016-07-05 21:19:22.207, foo, 0}
2016-07-05 21:19:22,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:19:22.209, foo, 2016-07-05 21:19:22.209, foo, 0}
2016-07-05 21:19:22,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:19:22.212, foo, 2016-07-05 21:19:22.212, foo, 0}
2016-07-05 21:19:22,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:19:22.216, foo, 2016-07-05 21:19:22.216, foo, 0}
2016-07-05 21:19:22,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:19:22.218, foo, 2016-07-05 21:19:22.218, foo, 0}
2016-07-05 21:19:22,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:19:22.22, foo, 2016-07-05 21:19:22.22, foo, 0}
2016-07-05 21:19:22,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:19:22.221, foo, 2016-07-05 21:19:22.221, foo, 0}
2016-07-05 21:19:22,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:19:22.226, foo, 2016-07-05 21:19:22.226, foo, 0}
2016-07-05 21:19:22,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:19:22.228, foo, 2016-07-05 21:19:22.228, foo, 0}
2016-07-05 21:19:22,251 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:19:22,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:19:22.253, foo, 2016-07-05 21:19:22.253, foo, 0}
2016-07-05 21:19:22,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:19:22.257, foo, 2016-07-05 21:19:22.257, foo, 0}
2016-07-05 21:19:22,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:19:22.259, foo, 2016-07-05 21:19:22.259, foo, 0}
2016-07-05 21:19:22,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:19:22.26, foo, 2016-07-05 21:19:22.26, foo, 0}
2016-07-05 21:19:22,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:19:22.262, foo, 2016-07-05 21:19:22.262, foo, 0}
2016-07-05 21:19:22,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:19:22.264, foo, 2016-07-05 21:19:22.265, foo, 0}
2016-07-05 21:19:22,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:19:22.267, foo, 2016-07-05 21:19:22.267, foo, 0}
2016-07-05 21:19:22,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:19:22.271, foo, 2016-07-05 21:19:22.271, foo, 0}
2016-07-05 21:19:22,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:19:22.274, foo, 2016-07-05 21:19:22.274, foo, 0}
2016-07-05 21:19:22,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:19:22.276, foo, 2016-07-05 21:19:22.276, foo, 0}
2016-07-05 21:19:22,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:19:22.278, foo, 2016-07-05 21:19:22.278, foo, 0}
2016-07-05 21:19:22,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:19:22.28, foo, 2016-07-05 21:19:22.28, foo, 0}
2016-07-05 21:19:22,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:19:22.282, foo, 2016-07-05 21:19:22.282, foo, 0}
2016-07-05 21:19:22,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:19:22.285, foo, 2016-07-05 21:19:22.285, foo, 0}
2016-07-05 21:19:22,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:19:22.288, foo, 2016-07-05 21:19:22.288, foo, 0}
2016-07-05 21:19:22,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:19:22.292, foo, 2016-07-05 21:19:22.292, foo, 0}
2016-07-05 21:19:22,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:19:22.295, foo, 2016-07-05 21:19:22.295, foo, 0}
2016-07-05 21:19:22,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:19:22.297, foo, 2016-07-05 21:19:22.297, foo, 0}
2016-07-05 21:19:22,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:19:22.299, foo, 2016-07-05 21:19:22.299, foo, 0}
2016-07-05 21:19:22,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:19:22.301, foo, 2016-07-05 21:19:22.301, foo, 0}
2016-07-05 21:19:22,321 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:19:22,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:19:22,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:19:22,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:19:22,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:19:22,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:19:22,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:19:22,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:19:22,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:19:22,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:19:22,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:19:22,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:19:22,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:19:22,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:19:22,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:19:22,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:19:22,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:19:22,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:19:22,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:19:22,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:19:22,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:19:22,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:19:22,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:19:22,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:19:22,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:19:22,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:19:22,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:19:22,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:19:22,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:19:22,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:19:22,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:19:22,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:19:22,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:19:22,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:19:22,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:19:22,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:19:22,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:19:22,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:19:22,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:19:22,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:19:22,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:19:22,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:19:22,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:19:22,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:19:22,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:19:22,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:19:22,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:19:22,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:19:22,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:19:22,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:19:22,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:19:22,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:19:22,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:19:22,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:19:22,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:19:22,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:19:22,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:19:22,438 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:19:22,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:19:22.439, foo, 2016-07-05 21:19:22.439, foo, 0}
2016-07-05 21:19:22,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:19:22.441, foo, 2016-07-05 21:19:22.441, foo, 0}
2016-07-05 21:19:22,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:19:22.441, foo, 2016-07-05 21:19:22.441, foo, 0}
2016-07-05 21:19:22,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:19:22.442, foo, 2016-07-05 21:19:22.442, foo, 0}
2016-07-05 21:19:22,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:19:22.443, foo, 2016-07-05 21:19:22.443, foo, 0}
2016-07-05 21:19:22,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:19:22.444, foo, 2016-07-05 21:19:22.444, foo, 0}
2016-07-05 21:19:22,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:19:22.445, foo, 2016-07-05 21:19:22.445, foo, 0}
2016-07-05 21:19:22,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:19:22.446, foo, 2016-07-05 21:19:22.446, foo, 0}
2016-07-05 21:19:22,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:19:22.447, foo, 2016-07-05 21:19:22.447, foo, 0}
2016-07-05 21:19:22,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:19:22.449, foo, 2016-07-05 21:19:22.449, foo, 0}
2016-07-05 21:19:22,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:19:22.451, foo, 2016-07-05 21:19:22.451, foo, 0}
2016-07-05 21:19:22,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:19:22.454, foo, 2016-07-05 21:19:22.454, foo, 0}
2016-07-05 21:19:22,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:19:22.456, foo, 2016-07-05 21:19:22.456, foo, 0}
2016-07-05 21:19:22,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:19:22.457, foo, 2016-07-05 21:19:22.457, foo, 0}
2016-07-05 21:19:22,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:19:22.458, foo, 2016-07-05 21:19:22.458, foo, 0}
2016-07-05 21:19:22,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:19:22.458, foo, 2016-07-05 21:19:22.458, foo, 0}
2016-07-05 21:19:22,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:19:22.459, foo, 2016-07-05 21:19:22.459, foo, 0}
2016-07-05 21:19:22,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:19:22.46, foo, 2016-07-05 21:19:22.46, foo, 0}
2016-07-05 21:19:22,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:19:22.484, foo, 2016-07-05 21:19:22.484, foo, 0}
2016-07-05 21:19:22,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:19:22.485, foo, 2016-07-05 21:19:22.485, foo, 0}
2016-07-05 21:19:22,503 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:19:22,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:19:22.504, foo, 2016-07-05 21:19:22.504, foo, 0}
2016-07-05 21:19:22,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:19:22.505, foo, 2016-07-05 21:19:22.505, foo, 0}
2016-07-05 21:19:22,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:19:22.506, foo, 2016-07-05 21:19:22.506, foo, 0}
2016-07-05 21:19:22,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:19:22.507, foo, 2016-07-05 21:19:22.507, foo, 0}
2016-07-05 21:19:22,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:19:22.507, foo, 2016-07-05 21:19:22.507, foo, 0}
2016-07-05 21:19:22,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:19:22.508, foo, 2016-07-05 21:19:22.508, foo, 0}
2016-07-05 21:19:22,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:19:22.508, foo, 2016-07-05 21:19:22.508, foo, 0}
2016-07-05 21:19:22,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:19:22.514, foo, 2016-07-05 21:19:22.514, foo, 0}
2016-07-05 21:19:22,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:19:22.515, foo, 2016-07-05 21:19:22.515, foo, 0}
2016-07-05 21:19:22,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:19:22.516, foo, 2016-07-05 21:19:22.516, foo, 0}
2016-07-05 21:19:22,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:19:22.516, foo, 2016-07-05 21:19:22.516, foo, 0}
2016-07-05 21:19:22,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:19:22.517, foo, 2016-07-05 21:19:22.517, foo, 0}
2016-07-05 21:19:22,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:19:22.518, foo, 2016-07-05 21:19:22.518, foo, 0}
2016-07-05 21:19:22,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:19:22.518, foo, 2016-07-05 21:19:22.518, foo, 0}
2016-07-05 21:19:22,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:19:22.519, foo, 2016-07-05 21:19:22.519, foo, 0}
2016-07-05 21:19:22,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:19:22.519, foo, 2016-07-05 21:19:22.519, foo, 0}
2016-07-05 21:19:22,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:19:22.52, foo, 2016-07-05 21:19:22.52, foo, 0}
2016-07-05 21:19:22,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:19:22.52, foo, 2016-07-05 21:19:22.52, foo, 0}
2016-07-05 21:19:22,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:19:22.521, foo, 2016-07-05 21:19:22.521, foo, 0}
2016-07-05 21:19:22,562 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:19:22.561, foo, 2016-07-05 21:19:22.561, foo, 0}
2016-07-05 21:19:22,589 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:19:22,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:19:22.59, foo, 2016-07-05 21:19:22.59, foo}
2016-07-05 21:19:22,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:19:22.592, foo, 2016-07-05 21:19:22.592, foo}
2016-07-05 21:19:22,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:19:22.593, foo, 2016-07-05 21:19:22.593, foo}
2016-07-05 21:19:22,595 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:19:22.595, foo, 2016-07-05 21:19:22.595, foo}
2016-07-05 21:19:22,603 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:19:22,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:19:22,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:19:22,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:19:22,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:19:22,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:19:22,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:19:22,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:19:22,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:19:22,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:19:22,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:19:22,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:19:22,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:19:22,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:19:22,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:19:22,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:19:22,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:19:22,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:19:22,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:19:22,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:19:22,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:19:22,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:19:22,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:19:22,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:19:22,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:19:22,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:19:22,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:19:22,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:19:22,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:19:22,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:19:22,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:19:22,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:19:22,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:19:22,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:19:22,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:19:22,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:19:22,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:19:22,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:19:22,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:19:22,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:19:22,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:19:22,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:19:22,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:19:22,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:19:22,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:19:22,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:19:22,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:19:22,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:19:22,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:19:22,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:19:22,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:19:22,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:19:22,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:19:22,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:19:22,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:19:22,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:19:22,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:19:22,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:19:22,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:19:22,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:19:22,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:19:22,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:19:22,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:19:22,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:19:22,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:19:22,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:19:22,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:19:22,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:19:22,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:19:22,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:19:22,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:19:22,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:19:22,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:19:22,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:19:22,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:19:22,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:19:22,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:19:22,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:19:22,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:19:22,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:19:22,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:19:22,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:19:22,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:19:22,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:19:22,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:19:22,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:19:22,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:19:22,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:19:22,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:19:22,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:19:22,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:19:22,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:19:22,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:19:22,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:19:22,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:19:22,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:19:22,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:19:22,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:19:22,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:19:22,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:19:22,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:19:22,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:19:22,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:19:22,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:19:22,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:19:22,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:19:22,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:19:22,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:19:22,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:19:22,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:19:22,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:19:22,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:19:22,851 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:19:22,852 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:22,852 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:19:22,853 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:22,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:19:22.905, foo, 2016-07-05 21:19:22.905, foo, 0}
2016-07-05 21:19:22,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:19:22.907, foo, 2016-07-05 21:19:22.907, foo, 0}
2016-07-05 21:19:22,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:19:22.908, foo, 2016-07-05 21:19:22.908, foo, 0}
2016-07-05 21:19:22,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:19:22.909, foo, 2016-07-05 21:19:22.909, foo, 0}
2016-07-05 21:19:22,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:19:22.909, foo, 2016-07-05 21:19:22.909, foo, 0}
2016-07-05 21:19:22,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:19:22.91, foo, 2016-07-05 21:19:22.91, foo, 0}
2016-07-05 21:19:22,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:19:22.911, foo, 2016-07-05 21:19:22.911, foo, 0}
2016-07-05 21:19:22,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:19:22.911, foo, 2016-07-05 21:19:22.911, foo, 0}
2016-07-05 21:19:22,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:19:22.912, foo, 2016-07-05 21:19:22.912, foo, 0}
2016-07-05 21:19:22,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:19:22.913, foo, 2016-07-05 21:19:22.913, foo, 0}
2016-07-05 21:19:22,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:19:22.914, foo, 2016-07-05 21:19:22.914, foo, 0}
2016-07-05 21:19:22,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:19:22.915, foo, 2016-07-05 21:19:22.915, foo, 0}
2016-07-05 21:19:22,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:19:22.915, foo, 2016-07-05 21:19:22.915, foo, 0}
2016-07-05 21:19:22,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:19:22.916, foo, 2016-07-05 21:19:22.916, foo, 0}
2016-07-05 21:19:22,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:19:22.917, foo, 2016-07-05 21:19:22.917, foo, 0}
2016-07-05 21:19:22,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:19:22.918, foo, 2016-07-05 21:19:22.918, foo, 0}
2016-07-05 21:19:22,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:19:22.918, foo, 2016-07-05 21:19:22.918, foo, 0}
2016-07-05 21:19:22,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:19:22.92, foo, 2016-07-05 21:19:22.92, foo, 0}
2016-07-05 21:19:22,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:19:22.921, foo, 2016-07-05 21:19:22.921, foo, 0}
2016-07-05 21:19:22,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:19:22.921, foo, 2016-07-05 21:19:22.921, foo, 0}
2016-07-05 21:19:22,942 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:19:22,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:19:22.943, foo, 2016-07-05 21:19:22.943, foo, 0}
2016-07-05 21:19:22,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:19:22.944, foo, 2016-07-05 21:19:22.944, foo, 0}
2016-07-05 21:19:22,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:19:22.946, foo, 2016-07-05 21:19:22.946, foo, 0}
2016-07-05 21:19:22,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:19:22.947, foo, 2016-07-05 21:19:22.947, foo, 0}
2016-07-05 21:19:22,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:19:22.948, foo, 2016-07-05 21:19:22.948, foo, 0}
2016-07-05 21:19:22,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:19:22.949, foo, 2016-07-05 21:19:22.949, foo, 0}
2016-07-05 21:19:22,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:19:22.95, foo, 2016-07-05 21:19:22.95, foo, 0}
2016-07-05 21:19:22,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:19:22.952, foo, 2016-07-05 21:19:22.952, foo, 0}
2016-07-05 21:19:22,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:19:22.953, foo, 2016-07-05 21:19:22.953, foo, 0}
2016-07-05 21:19:22,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:19:22.954, foo, 2016-07-05 21:19:22.954, foo, 0}
2016-07-05 21:19:22,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:19:22.955, foo, 2016-07-05 21:19:22.955, foo, 0}
2016-07-05 21:19:22,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:19:22.956, foo, 2016-07-05 21:19:22.956, foo, 0}
2016-07-05 21:19:22,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:19:22.957, foo, 2016-07-05 21:19:22.957, foo, 0}
2016-07-05 21:19:22,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:19:22.958, foo, 2016-07-05 21:19:22.958, foo, 0}
2016-07-05 21:19:22,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:19:22.959, foo, 2016-07-05 21:19:22.959, foo, 0}
2016-07-05 21:19:22,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:19:22.96, foo, 2016-07-05 21:19:22.96, foo, 0}
2016-07-05 21:19:22,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:19:22.962, foo, 2016-07-05 21:19:22.962, foo, 0}
2016-07-05 21:19:22,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:19:22.964, foo, 2016-07-05 21:19:22.964, foo, 0}
2016-07-05 21:19:22,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:19:22.966, foo, 2016-07-05 21:19:22.966, foo, 0}
2016-07-05 21:19:22,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:19:22.969, foo, 2016-07-05 21:19:22.969, foo, 0}
2016-07-05 21:19:22,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:19:22.971, foo, 2016-07-05 21:19:22.971, foo, 0}
2016-07-05 21:19:22,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:19:22.974, foo, 2016-07-05 21:19:22.974, foo, 0}
2016-07-05 21:19:22,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:19:22.975, foo, 2016-07-05 21:19:22.975, foo, 0}
2016-07-05 21:19:22,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:19:22.977, foo, 2016-07-05 21:19:22.977, foo, 0}
2016-07-05 21:19:22,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:19:22.978, foo, 2016-07-05 21:19:22.978, foo, 0}
2016-07-05 21:19:22,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:19:22.985, foo, 2016-07-05 21:19:22.985, foo, 0}
2016-07-05 21:19:22,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:19:22.987, foo, 2016-07-05 21:19:22.987, foo, 0}
2016-07-05 21:19:22,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:19:22.987, foo, 2016-07-05 21:19:22.987, foo, 0}
2016-07-05 21:19:22,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:19:22.988, foo, 2016-07-05 21:19:22.988, foo, 0}
2016-07-05 21:19:22,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:19:22.989, foo, 2016-07-05 21:19:22.989, foo, 0}
2016-07-05 21:19:22,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:19:22.99, foo, 2016-07-05 21:19:22.99, foo, 0}
2016-07-05 21:19:22,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:19:22.991, foo, 2016-07-05 21:19:22.991, foo, 0}
2016-07-05 21:19:22,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:22.992, foo, 2016-07-05 21:19:22.992, foo, 0}
2016-07-05 21:19:22,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:22.994, foo, 2016-07-05 21:19:22.994, foo, 0}
2016-07-05 21:19:22,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:19:22.995, foo, 2016-07-05 21:19:22.995, foo, 0}
2016-07-05 21:19:22,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:22.996, foo, 2016-07-05 21:19:22.996, foo, 0}
2016-07-05 21:19:22,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:19:22.996, foo, 2016-07-05 21:19:22.996, foo, 0}
2016-07-05 21:19:22,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:19:22.997, foo, 2016-07-05 21:19:22.997, foo, 0}
2016-07-05 21:19:22,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:19:22.999, foo, 2016-07-05 21:19:22.999, foo, 0}
2016-07-05 21:19:23,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:19:23.0, foo, 2016-07-05 21:19:23.0, foo, 0}
2016-07-05 21:19:23,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:19:23.002, foo, 2016-07-05 21:19:23.002, foo, 0}
2016-07-05 21:19:23,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:19:23.004, foo, 2016-07-05 21:19:23.004, foo, 0}
2016-07-05 21:19:23,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:19:23.005, foo, 2016-07-05 21:19:23.005, foo, 0}
2016-07-05 21:19:23,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:23.007, foo, 2016-07-05 21:19:23.007, foo, 0}
2016-07-05 21:19:23,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:23.008, foo, 2016-07-05 21:19:23.008, foo, 0}
2016-07-05 21:19:23,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:19:23.009, foo, 2016-07-05 21:19:23.009, foo, 0}
2016-07-05 21:19:23,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:23.01, foo, 2016-07-05 21:19:23.01, foo, 0}
2016-07-05 21:19:23,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:19:23.011, foo, 2016-07-05 21:19:23.011, foo, 0}
2016-07-05 21:19:23,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:19:23.011, foo, 2016-07-05 21:19:23.011, foo, 0}
2016-07-05 21:19:23,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:19:23.012, foo, 2016-07-05 21:19:23.012, foo, 0}
2016-07-05 21:19:23,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:19:23.013, foo, 2016-07-05 21:19:23.013, foo, 0}
2016-07-05 21:19:23,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:19:23.014, foo, 2016-07-05 21:19:23.014, foo, 0}
2016-07-05 21:19:23,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:19:23.015, foo, 2016-07-05 21:19:23.015, foo, 0}
2016-07-05 21:19:23,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:23.015, foo, 2016-07-05 21:19:23.015, foo, 0}
2016-07-05 21:19:23,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:23.017, foo, 2016-07-05 21:19:23.017, foo, 0}
2016-07-05 21:19:23,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:19:23.017, foo, 2016-07-05 21:19:23.017, foo, 0}
2016-07-05 21:19:23,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:23.018, foo, 2016-07-05 21:19:23.018, foo, 0}
2016-07-05 21:19:23,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:19:23.019, foo, 2016-07-05 21:19:23.019, foo, 0}
2016-07-05 21:19:23,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:19:23.02, foo, 2016-07-05 21:19:23.02, foo, 0}
2016-07-05 21:19:23,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:19:23.02, foo, 2016-07-05 21:19:23.02, foo, 0}
2016-07-05 21:19:23,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:19:23.021, foo, 2016-07-05 21:19:23.021, foo, 0}
2016-07-05 21:19:23,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:19:23.021, foo, 2016-07-05 21:19:23.021, foo, 0}
2016-07-05 21:19:23,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:19:23.026, foo, 2016-07-05 21:19:23.026, foo, 0}
2016-07-05 21:19:23,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:19:23.027, foo, 2016-07-05 21:19:23.027, foo, 0}
2016-07-05 21:19:23,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:19:23.027, foo, 2016-07-05 21:19:23.027, foo, 0}
2016-07-05 21:19:23,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:19:23.028, foo, 2016-07-05 21:19:23.028, foo, 0}
2016-07-05 21:19:23,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:19:23.029, foo, 2016-07-05 21:19:23.029, foo, 0}
2016-07-05 21:19:23,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:19:23.029, foo, 2016-07-05 21:19:23.029, foo, 0}
2016-07-05 21:19:23,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:19:23.03, foo, 2016-07-05 21:19:23.03, foo, 0}
2016-07-05 21:19:23,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:19:23.031, foo, 2016-07-05 21:19:23.031, foo, 0}
2016-07-05 21:19:23,082 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:19:23,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:19:23.083, foo, 2016-07-05 21:19:23.083, foo}
2016-07-05 21:19:23,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:19:23.084, foo, 2016-07-05 21:19:23.084, foo}
2016-07-05 21:19:23,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:19:23.085, foo, 2016-07-05 21:19:23.085, foo}
2016-07-05 21:19:23,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:19:23.086, foo, 2016-07-05 21:19:23.086, foo}
2016-07-05 21:19:23,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:19:23.087, foo, 2016-07-05 21:19:23.087, foo}
2016-07-05 21:19:23,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:19:23.087, foo, 2016-07-05 21:19:23.087, foo}
2016-07-05 21:19:23,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:19:23.088, foo, 2016-07-05 21:19:23.088, foo}
2016-07-05 21:19:23,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:19:23.088, foo, 2016-07-05 21:19:23.088, foo}
2016-07-05 21:19:23,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:19:23.089, foo, 2016-07-05 21:19:23.089, foo}
2016-07-05 21:19:23,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:19:23.09, foo, 2016-07-05 21:19:23.09, foo}
2016-07-05 21:19:23,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:19:23.09, foo, 2016-07-05 21:19:23.09, foo}
2016-07-05 21:19:23,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:19:23.092, foo, 2016-07-05 21:19:23.092, foo}
2016-07-05 21:19:23,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:19:23.093, foo, 2016-07-05 21:19:23.093, foo}
2016-07-05 21:19:23,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:19:23.094, foo, 2016-07-05 21:19:23.094, foo}
2016-07-05 21:19:23,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:19:23.094, foo, 2016-07-05 21:19:23.094, foo}
2016-07-05 21:19:23,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:19:23.095, foo, 2016-07-05 21:19:23.095, foo}
2016-07-05 21:19:23,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:19:23.096, foo, 2016-07-05 21:19:23.096, foo}
2016-07-05 21:19:23,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:19:23.097, foo, 2016-07-05 21:19:23.097, foo}
2016-07-05 21:19:23,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:19:23.098, foo, 2016-07-05 21:19:23.098, foo}
2016-07-05 21:19:23,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:19:23.099, foo, 2016-07-05 21:19:23.099, foo}
2016-07-05 21:19:23,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:19:23.1, foo, 2016-07-05 21:19:23.1, foo}
2016-07-05 21:19:23,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:19:23.101, foo, 2016-07-05 21:19:23.101, foo}
2016-07-05 21:19:23,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:19:23.101, foo, 2016-07-05 21:19:23.101, foo}
2016-07-05 21:19:23,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:19:23.102, foo, 2016-07-05 21:19:23.102, foo}
2016-07-05 21:19:23,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:19:23.103, foo, 2016-07-05 21:19:23.103, foo}
2016-07-05 21:19:23,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:19:23.104, foo, 2016-07-05 21:19:23.104, foo}
2016-07-05 21:19:23,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:19:23.105, foo, 2016-07-05 21:19:23.105, foo}
2016-07-05 21:19:23,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:19:23.105, foo, 2016-07-05 21:19:23.105, foo}
2016-07-05 21:19:23,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:19:23.107, foo, 2016-07-05 21:19:23.107, foo}
2016-07-05 21:19:23,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:23.107, foo, 2016-07-05 21:19:23.107, foo}
2016-07-05 21:19:23,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:23.108, foo, 2016-07-05 21:19:23.108, foo}
2016-07-05 21:19:23,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:23.109, foo, 2016-07-05 21:19:23.109, foo}
2016-07-05 21:19:23,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:19:23.11, foo, 2016-07-05 21:19:23.11, foo}
2016-07-05 21:19:23,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:19:23.11, foo, 2016-07-05 21:19:23.11, foo}
2016-07-05 21:19:23,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:19:23.111, foo, 2016-07-05 21:19:23.111, foo}
2016-07-05 21:19:23,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:19:23.112, foo, 2016-07-05 21:19:23.112, foo}
2016-07-05 21:19:23,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:19:23.112, foo, 2016-07-05 21:19:23.112, foo}
2016-07-05 21:19:23,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:19:23.113, foo, 2016-07-05 21:19:23.113, foo}
2016-07-05 21:19:23,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:19:23.114, foo, 2016-07-05 21:19:23.114, foo}
2016-07-05 21:19:23,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:19:23.115, foo, 2016-07-05 21:19:23.115, foo}
2016-07-05 21:19:23,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:19:23.116, foo, 2016-07-05 21:19:23.116, foo}
2016-07-05 21:19:23,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:19:23.117, foo, 2016-07-05 21:19:23.117, foo}
2016-07-05 21:19:23,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:19:23.118, foo, 2016-07-05 21:19:23.118, foo}
2016-07-05 21:19:23,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:19:23.118, foo, 2016-07-05 21:19:23.118, foo}
2016-07-05 21:19:23,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:19:23.119, foo, 2016-07-05 21:19:23.119, foo}
2016-07-05 21:19:23,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:19:23.12, foo, 2016-07-05 21:19:23.12, foo}
2016-07-05 21:19:23,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:19:23.121, foo, 2016-07-05 21:19:23.121, foo}
2016-07-05 21:19:23,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:19:23.13, foo, 2016-07-05 21:19:23.13, foo}
2016-07-05 21:19:23,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:19:23.131, foo, 2016-07-05 21:19:23.131, foo}
2016-07-05 21:19:23,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:19:23.132, foo, 2016-07-05 21:19:23.132, foo}
2016-07-05 21:19:23,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:19:23.133, foo, 2016-07-05 21:19:23.133, foo}
2016-07-05 21:19:23,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:19:23.134, foo, 2016-07-05 21:19:23.134, foo}
2016-07-05 21:19:23,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:19:23.135, foo, 2016-07-05 21:19:23.135, foo}
2016-07-05 21:19:23,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:23.136, foo, 2016-07-05 21:19:23.136, foo}
2016-07-05 21:19:23,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:19:23.138, foo, 2016-07-05 21:19:23.138, foo}
2016-07-05 21:19:23,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:19:23.139, foo, 2016-07-05 21:19:23.139, foo}
2016-07-05 21:19:23,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:19:23.14, foo, 2016-07-05 21:19:23.14, foo}
2016-07-05 21:19:23,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:19:23.142, foo, 2016-07-05 21:19:23.142, foo}
2016-07-05 21:19:23,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:19:23.142, foo, 2016-07-05 21:19:23.142, foo}
2016-07-05 21:19:23,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:19:23.143, foo, 2016-07-05 21:19:23.143, foo}
2016-07-05 21:19:23,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:19:23.144, foo, 2016-07-05 21:19:23.144, foo}
2016-07-05 21:19:23,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:19:23.145, foo, 2016-07-05 21:19:23.145, foo}
2016-07-05 21:19:23,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:19:23.145, foo, 2016-07-05 21:19:23.145, foo}
2016-07-05 21:19:23,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:19:23.146, foo, 2016-07-05 21:19:23.146, foo}
2016-07-05 21:19:23,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:23.147, foo, 2016-07-05 21:19:23.147, foo}
2016-07-05 21:19:23,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:19:23.148, foo, 2016-07-05 21:19:23.148, foo}
2016-07-05 21:19:23,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:19:23.149, foo, 2016-07-05 21:19:23.149, foo}
2016-07-05 21:19:23,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:19:23.15, foo, 2016-07-05 21:19:23.15, foo}
2016-07-05 21:19:23,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:19:23.151, foo, 2016-07-05 21:19:23.151, foo}
2016-07-05 21:19:23,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:19:23.152, foo, 2016-07-05 21:19:23.152, foo}
2016-07-05 21:19:23,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:19:23.152, foo, 2016-07-05 21:19:23.152, foo}
2016-07-05 21:19:23,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:19:23.153, foo, 2016-07-05 21:19:23.153, foo}
2016-07-05 21:19:23,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:19:23.154, foo, 2016-07-05 21:19:23.154, foo}
2016-07-05 21:19:23,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:19:23.154, foo, 2016-07-05 21:19:23.154, foo}
2016-07-05 21:19:23,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:19:23.155, foo, 2016-07-05 21:19:23.155, foo}
2016-07-05 21:19:23,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:19:23.156, foo, 2016-07-05 21:19:23.156, foo}
2016-07-05 21:19:23,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:19:23.162, foo, 2016-07-05 21:19:23.162, foo}
2016-07-05 21:19:23,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:19:23.163, foo, 2016-07-05 21:19:23.163, foo}
2016-07-05 21:19:23,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:19:23.163, foo, 2016-07-05 21:19:23.163, foo}
2016-07-05 21:19:23,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:19:23.164, foo, 2016-07-05 21:19:23.164, foo}
2016-07-05 21:19:23,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:19:23.165, foo, 2016-07-05 21:19:23.165, foo}
2016-07-05 21:19:23,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:19:23.167, foo, 2016-07-05 21:19:23.167, foo}
2016-07-05 21:19:23,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:23.168, foo, 2016-07-05 21:19:23.168, foo}
2016-07-05 21:19:23,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:23.169, foo, 2016-07-05 21:19:23.169, foo}
2016-07-05 21:19:23,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:23.17, foo, 2016-07-05 21:19:23.17, foo}
2016-07-05 21:19:23,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:23.171, foo, 2016-07-05 21:19:23.171, foo}
2016-07-05 21:19:23,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:19:23.172, foo, 2016-07-05 21:19:23.172, foo}
2016-07-05 21:19:23,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:23.173, foo, 2016-07-05 21:19:23.173, foo}
2016-07-05 21:19:23,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:19:23.174, foo, 2016-07-05 21:19:23.174, foo}
2016-07-05 21:19:23,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:19:23.175, foo, 2016-07-05 21:19:23.175, foo}
2016-07-05 21:19:23,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:19:23.175, foo, 2016-07-05 21:19:23.175, foo}
2016-07-05 21:19:23,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:19:23.176, foo, 2016-07-05 21:19:23.176, foo}
2016-07-05 21:19:23,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:19:23.177, foo, 2016-07-05 21:19:23.177, foo}
2016-07-05 21:19:23,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:19:23.177, foo, 2016-07-05 21:19:23.177, foo}
2016-07-05 21:19:23,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:19:23.178, foo, 2016-07-05 21:19:23.178, foo}
2016-07-05 21:19:23,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:19:23.178, foo, 2016-07-05 21:19:23.178, foo}
2016-07-05 21:19:23,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:19:23.179, foo, 2016-07-05 21:19:23.179, foo}
2016-07-05 21:19:23,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:19:23.179, foo, 2016-07-05 21:19:23.179, foo}
2016-07-05 21:19:23,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:19:23.18, foo, 2016-07-05 21:19:23.18, foo}
2016-07-05 21:19:23,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:19:23.18, foo, 2016-07-05 21:19:23.18, foo}
2016-07-05 21:19:23,243 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:19:23,243 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:19:23,276 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:23,287 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:19:23,298 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:19:23,301 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:19:23,305 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:19:23,309 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:19:23,312 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:19:23,322 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:19:23,325 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:19:23,329 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:19:23,331 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:19:23,332 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:19:23,338 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:19:23,339 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:19:23,339 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:19:23,340 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:19:23,340 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:19:23,340 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:19:23,350 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:19:23,352 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:19:23,356 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:19:23,363 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:19:23,364 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:19:23,367 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:19:23,368 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:19:23,405 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:19:23,405 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:19:23,435 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:19:23,436 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:19:23,437 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:23,438 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:23,438 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:23,443 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:19:23,446 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:19:23,464 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:19:23,464 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:19:23,464 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:19:23,465 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:19:23,492 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:19:23,512 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:19:23,527 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:19:23,542 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:19:23,556 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:19:23,567 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:19:23,575 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:19:23,589 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:19:23,606 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:19:23,616 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:19:23,623 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:19:23,637 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:19:23,651 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:19:23,660 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:19:23,670 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:19:23,681 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:19:23,681 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:19:23,682 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:19:23,682 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:19:23,682 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:19:23,684 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:19:23,686 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:19:23,686 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:19:23,687 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:19:23,737 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:19:23,737 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:19:23,738 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:19:23,738 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:19:23,738 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:19:23,738 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:19:23,741 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:19:23,741 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:19:23,768 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:19:23,770 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:19:23,771 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:19:23,771 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:19:23,772 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:19:23,773 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:19:23,774 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:19:23,781 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:19:23,783 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:19:23,784 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:19:23,784 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:19:23,785 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:19:23,786 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:19:23,787 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:19:23,789 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:19:23,789 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:19:23,790 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:19:23,790 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:19:23,790 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:19:23,791 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:19:23,792 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:23,792 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:23,793 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:23,803 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:19:23,808 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:19:23,813 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:19:23,817 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:19:23,821 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:19:23,827 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:19:23,838 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:19:23,844 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:19:23,862 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:19:23,881 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:19:23,904 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:19:23,921 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:19:23,932 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:19:23,952 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:19:23,971 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:19:23,993 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:19:24,012 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:19:24,032 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:19:24,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:19:24,073 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:19:24,093 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:19:24,112 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:19:24,132 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:19:24,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:19:24,156 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:19:24,159 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:19:24,162 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:19:24,165 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:19:24,168 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:19:24,172 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:19:24,175 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:19:24,178 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:19:24,181 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:19:24,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:19:24,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:19:24,190 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:19:24,194 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:19:24,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:19:24,199 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:19:24,216 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:19:24,219 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:19:24,220 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:19:24,220 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:19:24,220 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:19:24,221 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:19:24,221 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:19:24,221 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:19:24,221 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:19:24,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:19:24,222 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:19:24,223 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:19:24,232 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:19:24,232 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:19:24,232 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:19:24,233 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:19:24,234 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:19:24,236 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:19:24,237 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:19:24,237 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:19:24,237 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:19:24,238 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:19:24,240 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:19:24,268 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:19:24,278 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:19:24,305 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:19:24,315 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:19:24,325 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:19:24,387 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:19:24,398 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:19:24,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:19:24,469 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:19:24,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 21:19:24,490 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:19:24,499 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:19:24,519 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:19:24,530 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:19:24,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:19:24,560 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,587 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:19:24,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:19:24,627 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,648 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,667 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:19:24,687 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,710 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,729 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:19:24,747 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:19:24,772 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:19:24,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:19:24,828 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:19:24,850 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:19:24,883 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:19:24,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:19:24,923 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:19:24,944 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:19:24,962 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:19:24,982 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:19:25,004 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:19:25,022 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:19:25,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:19:25,062 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:19:25,083 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 21:19:25,083 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:19:25,084 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:19:25,085 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:19:25,086 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:19:25,086 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 21:19:25,086 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:19:25,087 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:19:25,087 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:19:25,090 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:19:25,090 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:19:25,090 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:19:25,091 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:19:25,091 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:25,091 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 21:19:25,092 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:25,097 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:25,097 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:25,097 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:25,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:19:25,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:19:25,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:19:25,119 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:19:25,122 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:19:25,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:19:25,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:19:25,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:19:25,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:19:25,127 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:19:25,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:19:25,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:19:25,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:19:25,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:19:25,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:19:25,133 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:19:25,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:19:25,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:19:25,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:19:25,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:19:25,138 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:19:25,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:19:25,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:19:25,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:19:25,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:19:25,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:19:25,146 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:19:25,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:19:25,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:19:25,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:19:25,151 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:19:25,152 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:25,152 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 21:19:25,153 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:25,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:19:25.198, foo, 2016-07-05 21:19:25.198, foo, 0}
2016-07-05 21:19:25,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:19:25.199, foo, 2016-07-05 21:19:25.199, foo, 0}
2016-07-05 21:19:25,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:19:25.2, foo, 2016-07-05 21:19:25.2, foo, 0}
2016-07-05 21:19:25,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:19:25.201, foo, 2016-07-05 21:19:25.201, foo, 0}
2016-07-05 21:19:25,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:19:25.201, foo, 2016-07-05 21:19:25.201, foo, 0}
2016-07-05 21:19:25,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:19:25.202, foo, 2016-07-05 21:19:25.202, foo, 0}
2016-07-05 21:19:25,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:19:25.202, foo, 2016-07-05 21:19:25.202, foo, 0}
2016-07-05 21:19:25,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:19:25.203, foo, 2016-07-05 21:19:25.203, foo, 0}
2016-07-05 21:19:25,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:19:25.203, foo, 2016-07-05 21:19:25.203, foo, 0}
2016-07-05 21:19:25,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:19:25.204, foo, 2016-07-05 21:19:25.204, foo, 0}
2016-07-05 21:19:25,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:19:25.205, foo, 2016-07-05 21:19:25.205, foo, 0}
2016-07-05 21:19:25,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:19:25.205, foo, 2016-07-05 21:19:25.205, foo, 0}
2016-07-05 21:19:25,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:19:25.206, foo, 2016-07-05 21:19:25.206, foo, 0}
2016-07-05 21:19:25,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:19:25.206, foo, 2016-07-05 21:19:25.206, foo, 0}
2016-07-05 21:19:25,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:19:25.207, foo, 2016-07-05 21:19:25.207, foo, 0}
2016-07-05 21:19:25,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:19:25.208, foo, 2016-07-05 21:19:25.208, foo, 0}
2016-07-05 21:19:25,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:19:25.209, foo, 2016-07-05 21:19:25.209, foo, 0}
2016-07-05 21:19:25,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:19:25.209, foo, 2016-07-05 21:19:25.209, foo, 0}
2016-07-05 21:19:25,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:19:25.21, foo, 2016-07-05 21:19:25.21, foo, 0}
2016-07-05 21:19:25,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:19:25.211, foo, 2016-07-05 21:19:25.211, foo, 0}
2016-07-05 21:19:25,226 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:19:25,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:19:25.227, foo, 2016-07-05 21:19:25.227, foo, 0}
2016-07-05 21:19:25,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:19:25.229, foo, 2016-07-05 21:19:25.229, foo, 0}
2016-07-05 21:19:25,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:19:25.231, foo, 2016-07-05 21:19:25.231, foo, 0}
2016-07-05 21:19:25,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:19:25.232, foo, 2016-07-05 21:19:25.232, foo, 0}
2016-07-05 21:19:25,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:19:25.232, foo, 2016-07-05 21:19:25.232, foo, 0}
2016-07-05 21:19:25,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:19:25.233, foo, 2016-07-05 21:19:25.233, foo, 0}
2016-07-05 21:19:25,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:19:25.233, foo, 2016-07-05 21:19:25.233, foo, 0}
2016-07-05 21:19:25,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:19:25.234, foo, 2016-07-05 21:19:25.234, foo, 0}
2016-07-05 21:19:25,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:19:25.235, foo, 2016-07-05 21:19:25.235, foo, 0}
2016-07-05 21:19:25,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:19:25.236, foo, 2016-07-05 21:19:25.236, foo, 0}
2016-07-05 21:19:25,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:19:25.236, foo, 2016-07-05 21:19:25.236, foo, 0}
2016-07-05 21:19:25,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:19:25.237, foo, 2016-07-05 21:19:25.237, foo, 0}
2016-07-05 21:19:25,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:19:25.239, foo, 2016-07-05 21:19:25.239, foo, 0}
2016-07-05 21:19:25,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:19:25.24, foo, 2016-07-05 21:19:25.24, foo, 0}
2016-07-05 21:19:25,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:19:25.241, foo, 2016-07-05 21:19:25.241, foo, 0}
2016-07-05 21:19:25,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:19:25.242, foo, 2016-07-05 21:19:25.242, foo, 0}
2016-07-05 21:19:25,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:19:25.244, foo, 2016-07-05 21:19:25.244, foo, 0}
2016-07-05 21:19:25,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:19:25.246, foo, 2016-07-05 21:19:25.246, foo, 0}
2016-07-05 21:19:25,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:19:25.247, foo, 2016-07-05 21:19:25.247, foo, 0}
2016-07-05 21:19:25,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:19:25.248, foo, 2016-07-05 21:19:25.248, foo, 0}
2016-07-05 21:19:25,264 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:19:25,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:19:25,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:19:25,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:19:25,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:19:25,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:19:25,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:19:25,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:19:25,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:19:25,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:19:25,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:19:25,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:19:25,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:19:25,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:19:25,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:19:25,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:19:25,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:19:25,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:19:25,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:19:25,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:19:25,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:19:25,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:19:25,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:19:25,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:19:25,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:19:25,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:19:25,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:19:25,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:19:25,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:19:25,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:19:25,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:19:25,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:19:25,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:19:25,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:19:25,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:19:25,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:19:25,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:19:25,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:19:25,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:19:25,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:19:25,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:19:25,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:19:25,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:19:25,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:19:25,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:19:25,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:19:25,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:19:25,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:19:25,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:19:25,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:19:25,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:19:25,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:19:25,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:19:25,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:19:25,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:19:25,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:19:25,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:19:25,336 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:19:25,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:19:25.337, foo, 2016-07-05 21:19:25.337, foo, 0}
2016-07-05 21:19:25,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:19:25.338, foo, 2016-07-05 21:19:25.338, foo, 0}
2016-07-05 21:19:25,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:19:25.339, foo, 2016-07-05 21:19:25.339, foo, 0}
2016-07-05 21:19:25,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:19:25.34, foo, 2016-07-05 21:19:25.34, foo, 0}
2016-07-05 21:19:25,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:19:25.341, foo, 2016-07-05 21:19:25.341, foo, 0}
2016-07-05 21:19:25,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:19:25.341, foo, 2016-07-05 21:19:25.341, foo, 0}
2016-07-05 21:19:25,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:19:25.342, foo, 2016-07-05 21:19:25.342, foo, 0}
2016-07-05 21:19:25,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:19:25.343, foo, 2016-07-05 21:19:25.343, foo, 0}
2016-07-05 21:19:25,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:19:25.343, foo, 2016-07-05 21:19:25.343, foo, 0}
2016-07-05 21:19:25,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:19:25.344, foo, 2016-07-05 21:19:25.344, foo, 0}
2016-07-05 21:19:25,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:19:25.344, foo, 2016-07-05 21:19:25.344, foo, 0}
2016-07-05 21:19:25,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:19:25.345, foo, 2016-07-05 21:19:25.345, foo, 0}
2016-07-05 21:19:25,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:19:25.346, foo, 2016-07-05 21:19:25.346, foo, 0}
2016-07-05 21:19:25,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:19:25.346, foo, 2016-07-05 21:19:25.346, foo, 0}
2016-07-05 21:19:25,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:19:25.347, foo, 2016-07-05 21:19:25.347, foo, 0}
2016-07-05 21:19:25,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:19:25.347, foo, 2016-07-05 21:19:25.347, foo, 0}
2016-07-05 21:19:25,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:19:25.347, foo, 2016-07-05 21:19:25.347, foo, 0}
2016-07-05 21:19:25,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:19:25.348, foo, 2016-07-05 21:19:25.348, foo, 0}
2016-07-05 21:19:25,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:19:25.348, foo, 2016-07-05 21:19:25.348, foo, 0}
2016-07-05 21:19:25,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:19:25.348, foo, 2016-07-05 21:19:25.348, foo, 0}
2016-07-05 21:19:25,361 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:19:25,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:19:25.362, foo, 2016-07-05 21:19:25.362, foo, 0}
2016-07-05 21:19:25,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:19:25.363, foo, 2016-07-05 21:19:25.363, foo, 0}
2016-07-05 21:19:25,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:19:25.363, foo, 2016-07-05 21:19:25.363, foo, 0}
2016-07-05 21:19:25,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:19:25.363, foo, 2016-07-05 21:19:25.363, foo, 0}
2016-07-05 21:19:25,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:19:25.363, foo, 2016-07-05 21:19:25.363, foo, 0}
2016-07-05 21:19:25,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:19:25.364, foo, 2016-07-05 21:19:25.364, foo, 0}
2016-07-05 21:19:25,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:19:25.376, foo, 2016-07-05 21:19:25.376, foo, 0}
2016-07-05 21:19:25,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:19:25.377, foo, 2016-07-05 21:19:25.377, foo, 0}
2016-07-05 21:19:25,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:19:25.377, foo, 2016-07-05 21:19:25.377, foo, 0}
2016-07-05 21:19:25,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:19:25.378, foo, 2016-07-05 21:19:25.378, foo, 0}
2016-07-05 21:19:25,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:19:25.378, foo, 2016-07-05 21:19:25.378, foo, 0}
2016-07-05 21:19:25,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:19:25.379, foo, 2016-07-05 21:19:25.379, foo, 0}
2016-07-05 21:19:25,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:19:25.379, foo, 2016-07-05 21:19:25.379, foo, 0}
2016-07-05 21:19:25,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:19:25.379, foo, 2016-07-05 21:19:25.379, foo, 0}
2016-07-05 21:19:25,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:19:25.38, foo, 2016-07-05 21:19:25.38, foo, 0}
2016-07-05 21:19:25,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:19:25.38, foo, 2016-07-05 21:19:25.38, foo, 0}
2016-07-05 21:19:25,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:19:25.38, foo, 2016-07-05 21:19:25.38, foo, 0}
2016-07-05 21:19:25,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:19:25.381, foo, 2016-07-05 21:19:25.381, foo, 0}
2016-07-05 21:19:25,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:19:25.381, foo, 2016-07-05 21:19:25.381, foo, 0}
2016-07-05 21:19:25,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:19:25.381, foo, 2016-07-05 21:19:25.381, foo, 0}
2016-07-05 21:19:25,397 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:19:25,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:19:25.398, foo, 2016-07-05 21:19:25.398, foo}
2016-07-05 21:19:25,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:19:25.399, foo, 2016-07-05 21:19:25.399, foo}
2016-07-05 21:19:25,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:19:25.4, foo, 2016-07-05 21:19:25.4, foo}
2016-07-05 21:19:25,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:19:25.4, foo, 2016-07-05 21:19:25.4, foo}
2016-07-05 21:19:25,405 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:19:25,417 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:19:25,418 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 21:19:25,418 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:19:25,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:19:25.448, foo, 2016-07-05 21:19:25.448, foo, 0}
2016-07-05 21:19:25,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:19:25.449, foo, 2016-07-05 21:19:25.449, foo, 0}
2016-07-05 21:19:25,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:19:25.449, foo, 2016-07-05 21:19:25.449, foo, 0}
2016-07-05 21:19:25,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:19:25.45, foo, 2016-07-05 21:19:25.45, foo, 0}
2016-07-05 21:19:25,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:19:25.45, foo, 2016-07-05 21:19:25.45, foo, 0}
2016-07-05 21:19:25,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:19:25.451, foo, 2016-07-05 21:19:25.451, foo, 0}
2016-07-05 21:19:25,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:19:25.451, foo, 2016-07-05 21:19:25.451, foo, 0}
2016-07-05 21:19:25,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:19:25.452, foo, 2016-07-05 21:19:25.452, foo, 0}
2016-07-05 21:19:25,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:19:25.452, foo, 2016-07-05 21:19:25.452, foo, 0}
2016-07-05 21:19:25,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:19:25.454, foo, 2016-07-05 21:19:25.454, foo, 0}
2016-07-05 21:19:25,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:19:25.454, foo, 2016-07-05 21:19:25.454, foo, 0}
2016-07-05 21:19:25,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:19:25.455, foo, 2016-07-05 21:19:25.455, foo, 0}
2016-07-05 21:19:25,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:19:25.455, foo, 2016-07-05 21:19:25.455, foo, 0}
2016-07-05 21:19:25,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:19:25.457, foo, 2016-07-05 21:19:25.457, foo, 0}
2016-07-05 21:19:25,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:19:25.457, foo, 2016-07-05 21:19:25.457, foo, 0}
2016-07-05 21:19:25,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:19:25.458, foo, 2016-07-05 21:19:25.458, foo, 0}
2016-07-05 21:19:25,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:19:25.458, foo, 2016-07-05 21:19:25.458, foo, 0}
2016-07-05 21:19:25,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:19:25.459, foo, 2016-07-05 21:19:25.459, foo, 0}
2016-07-05 21:19:25,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:19:25.459, foo, 2016-07-05 21:19:25.459, foo, 0}
2016-07-05 21:19:25,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:19:25.46, foo, 2016-07-05 21:19:25.46, foo, 0}
2016-07-05 21:19:25,482 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:19:25,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:19:25.484, foo, 2016-07-05 21:19:25.484, foo, 0}
2016-07-05 21:19:25,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:19:25.485, foo, 2016-07-05 21:19:25.485, foo, 0}
2016-07-05 21:19:25,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:19:25.486, foo, 2016-07-05 21:19:25.486, foo, 0}
2016-07-05 21:19:25,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:19:25.487, foo, 2016-07-05 21:19:25.487, foo, 0}
2016-07-05 21:19:25,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:19:25.488, foo, 2016-07-05 21:19:25.488, foo, 0}
2016-07-05 21:19:25,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:19:25.489, foo, 2016-07-05 21:19:25.489, foo, 0}
2016-07-05 21:19:25,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:19:25.49, foo, 2016-07-05 21:19:25.49, foo, 0}
2016-07-05 21:19:25,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:19:25.491, foo, 2016-07-05 21:19:25.491, foo, 0}
2016-07-05 21:19:25,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:19:25.492, foo, 2016-07-05 21:19:25.492, foo, 0}
2016-07-05 21:19:25,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:19:25.493, foo, 2016-07-05 21:19:25.493, foo, 0}
2016-07-05 21:19:25,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:19:25.495, foo, 2016-07-05 21:19:25.495, foo, 0}
2016-07-05 21:19:25,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:19:25.496, foo, 2016-07-05 21:19:25.496, foo, 0}
2016-07-05 21:19:25,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:19:25.497, foo, 2016-07-05 21:19:25.497, foo, 0}
2016-07-05 21:19:25,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:19:25.504, foo, 2016-07-05 21:19:25.504, foo, 0}
2016-07-05 21:19:25,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:19:25.505, foo, 2016-07-05 21:19:25.505, foo, 0}
2016-07-05 21:19:25,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:19:25.505, foo, 2016-07-05 21:19:25.505, foo, 0}
2016-07-05 21:19:25,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:19:25.506, foo, 2016-07-05 21:19:25.506, foo, 0}
2016-07-05 21:19:25,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:19:25.506, foo, 2016-07-05 21:19:25.506, foo, 0}
2016-07-05 21:19:25,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:19:25.507, foo, 2016-07-05 21:19:25.507, foo, 0}
2016-07-05 21:19:25,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:19:25.508, foo, 2016-07-05 21:19:25.508, foo, 0}
2016-07-05 21:19:25,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:19:25.508, foo, 2016-07-05 21:19:25.508, foo, 0}
2016-07-05 21:19:25,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:19:25.509, foo, 2016-07-05 21:19:25.509, foo, 0}
2016-07-05 21:19:25,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:19:25.509, foo, 2016-07-05 21:19:25.509, foo, 0}
2016-07-05 21:19:25,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:19:25.51, foo, 2016-07-05 21:19:25.51, foo, 0}
2016-07-05 21:19:25,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:19:25.511, foo, 2016-07-05 21:19:25.511, foo, 0}
2016-07-05 21:19:25,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:19:25.511, foo, 2016-07-05 21:19:25.511, foo, 0}
2016-07-05 21:19:25,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:19:25.512, foo, 2016-07-05 21:19:25.512, foo, 0}
2016-07-05 21:19:25,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:19:25.513, foo, 2016-07-05 21:19:25.513, foo, 0}
2016-07-05 21:19:25,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:19:25.514, foo, 2016-07-05 21:19:25.514, foo, 0}
2016-07-05 21:19:25,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:19:25.514, foo, 2016-07-05 21:19:25.514, foo, 0}
2016-07-05 21:19:25,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:19:25.515, foo, 2016-07-05 21:19:25.515, foo, 0}
2016-07-05 21:19:25,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:19:25.516, foo, 2016-07-05 21:19:25.516, foo, 0}
2016-07-05 21:19:25,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:25.516, foo, 2016-07-05 21:19:25.516, foo, 0}
2016-07-05 21:19:25,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:25.517, foo, 2016-07-05 21:19:25.517, foo, 0}
2016-07-05 21:19:25,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:19:25.517, foo, 2016-07-05 21:19:25.517, foo, 0}
2016-07-05 21:19:25,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:25.518, foo, 2016-07-05 21:19:25.518, foo, 0}
2016-07-05 21:19:25,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:19:25.518, foo, 2016-07-05 21:19:25.518, foo, 0}
2016-07-05 21:19:25,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:19:25.519, foo, 2016-07-05 21:19:25.519, foo, 0}
2016-07-05 21:19:25,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:19:25.522, foo, 2016-07-05 21:19:25.522, foo, 0}
2016-07-05 21:19:25,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:19:25.533, foo, 2016-07-05 21:19:25.533, foo, 0}
2016-07-05 21:19:25,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:19:25.534, foo, 2016-07-05 21:19:25.534, foo, 0}
2016-07-05 21:19:25,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:19:25.534, foo, 2016-07-05 21:19:25.534, foo, 0}
2016-07-05 21:19:25,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:19:25.535, foo, 2016-07-05 21:19:25.535, foo, 0}
2016-07-05 21:19:25,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:25.536, foo, 2016-07-05 21:19:25.536, foo, 0}
2016-07-05 21:19:25,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:25.536, foo, 2016-07-05 21:19:25.536, foo, 0}
2016-07-05 21:19:25,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:19:25.537, foo, 2016-07-05 21:19:25.537, foo, 0}
2016-07-05 21:19:25,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:25.537, foo, 2016-07-05 21:19:25.537, foo, 0}
2016-07-05 21:19:25,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:19:25.538, foo, 2016-07-05 21:19:25.538, foo, 0}
2016-07-05 21:19:25,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:19:25.539, foo, 2016-07-05 21:19:25.539, foo, 0}
2016-07-05 21:19:25,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:19:25.54, foo, 2016-07-05 21:19:25.54, foo, 0}
2016-07-05 21:19:25,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:19:25.541, foo, 2016-07-05 21:19:25.541, foo, 0}
2016-07-05 21:19:25,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:19:25.542, foo, 2016-07-05 21:19:25.542, foo, 0}
2016-07-05 21:19:25,543 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:19:25.543, foo, 2016-07-05 21:19:25.543, foo, 0}
2016-07-05 21:19:25,545 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:19:25.545, foo, 2016-07-05 21:19:25.545, foo, 0}
2016-07-05 21:19:25,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:19:25.546, foo, 2016-07-05 21:19:25.546, foo, 0}
2016-07-05 21:19:25,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:19:25.547, foo, 2016-07-05 21:19:25.547, foo, 0}
2016-07-05 21:19:25,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:19:25.548, foo, 2016-07-05 21:19:25.548, foo, 0}
2016-07-05 21:19:25,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:19:25.548, foo, 2016-07-05 21:19:25.548, foo, 0}
2016-07-05 21:19:25,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:19:25.549, foo, 2016-07-05 21:19:25.549, foo, 0}
2016-07-05 21:19:25,550 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:19:25.55, foo, 2016-07-05 21:19:25.55, foo, 0}
2016-07-05 21:19:25,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:19:25.551, foo, 2016-07-05 21:19:25.551, foo, 0}
2016-07-05 21:19:25,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:19:25.552, foo, 2016-07-05 21:19:25.552, foo, 0}
2016-07-05 21:19:25,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:19:25.552, foo, 2016-07-05 21:19:25.552, foo, 0}
2016-07-05 21:19:25,553 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:19:25.553, foo, 2016-07-05 21:19:25.553, foo, 0}
2016-07-05 21:19:25,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:19:25.554, foo, 2016-07-05 21:19:25.554, foo, 0}
2016-07-05 21:19:25,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:19:25.555, foo, 2016-07-05 21:19:25.555, foo, 0}
2016-07-05 21:19:25,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:19:25.555, foo, 2016-07-05 21:19:25.555, foo, 0}
2016-07-05 21:19:25,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:19:25.556, foo, 2016-07-05 21:19:25.556, foo, 0}
2016-07-05 21:19:25,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:19:25.557, foo, 2016-07-05 21:19:25.557, foo, 0}
2016-07-05 21:19:25,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:19:25.557, foo, 2016-07-05 21:19:25.557, foo, 0}
2016-07-05 21:19:25,609 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:19:25,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:19:25.61, foo, 2016-07-05 21:19:25.61, foo}
2016-07-05 21:19:25,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:19:25.613, foo, 2016-07-05 21:19:25.613, foo}
2016-07-05 21:19:25,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:19:25.614, foo, 2016-07-05 21:19:25.614, foo}
2016-07-05 21:19:25,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:19:25.615, foo, 2016-07-05 21:19:25.615, foo}
2016-07-05 21:19:25,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:19:25.615, foo, 2016-07-05 21:19:25.615, foo}
2016-07-05 21:19:25,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:19:25.616, foo, 2016-07-05 21:19:25.616, foo}
2016-07-05 21:19:25,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:19:25.617, foo, 2016-07-05 21:19:25.617, foo}
2016-07-05 21:19:25,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:19:25.617, foo, 2016-07-05 21:19:25.617, foo}
2016-07-05 21:19:25,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:19:25.618, foo, 2016-07-05 21:19:25.618, foo}
2016-07-05 21:19:25,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:19:25.619, foo, 2016-07-05 21:19:25.619, foo}
2016-07-05 21:19:25,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:19:25.619, foo, 2016-07-05 21:19:25.619, foo}
2016-07-05 21:19:25,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:19:25.62, foo, 2016-07-05 21:19:25.62, foo}
2016-07-05 21:19:25,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:19:25.62, foo, 2016-07-05 21:19:25.62, foo}
2016-07-05 21:19:25,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:19:25.621, foo, 2016-07-05 21:19:25.621, foo}
2016-07-05 21:19:25,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:19:25.624, foo, 2016-07-05 21:19:25.624, foo}
2016-07-05 21:19:25,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:19:25.625, foo, 2016-07-05 21:19:25.625, foo}
2016-07-05 21:19:25,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:19:25.625, foo, 2016-07-05 21:19:25.625, foo}
2016-07-05 21:19:25,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:19:25.626, foo, 2016-07-05 21:19:25.626, foo}
2016-07-05 21:19:25,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:19:25.626, foo, 2016-07-05 21:19:25.626, foo}
2016-07-05 21:19:25,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:19:25.627, foo, 2016-07-05 21:19:25.627, foo}
2016-07-05 21:19:25,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:19:25.627, foo, 2016-07-05 21:19:25.627, foo}
2016-07-05 21:19:25,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:19:25.628, foo, 2016-07-05 21:19:25.628, foo}
2016-07-05 21:19:25,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:19:25.628, foo, 2016-07-05 21:19:25.629, foo}
2016-07-05 21:19:25,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:19:25.629, foo, 2016-07-05 21:19:25.629, foo}
2016-07-05 21:19:25,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:19:25.63, foo, 2016-07-05 21:19:25.63, foo}
2016-07-05 21:19:25,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:19:25.631, foo, 2016-07-05 21:19:25.631, foo}
2016-07-05 21:19:25,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:19:25.631, foo, 2016-07-05 21:19:25.631, foo}
2016-07-05 21:19:25,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:19:25.632, foo, 2016-07-05 21:19:25.632, foo}
2016-07-05 21:19:25,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:19:25.632, foo, 2016-07-05 21:19:25.632, foo}
2016-07-05 21:19:25,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:25.633, foo, 2016-07-05 21:19:25.633, foo}
2016-07-05 21:19:25,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:25.634, foo, 2016-07-05 21:19:25.634, foo}
2016-07-05 21:19:25,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:19:25.634, foo, 2016-07-05 21:19:25.635, foo}
2016-07-05 21:19:25,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:19:25.635, foo, 2016-07-05 21:19:25.635, foo}
2016-07-05 21:19:25,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:19:25.636, foo, 2016-07-05 21:19:25.636, foo}
2016-07-05 21:19:25,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:19:25.637, foo, 2016-07-05 21:19:25.637, foo}
2016-07-05 21:19:25,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:19:25.637, foo, 2016-07-05 21:19:25.637, foo}
2016-07-05 21:19:25,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:19:25.638, foo, 2016-07-05 21:19:25.638, foo}
2016-07-05 21:19:25,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:19:25.639, foo, 2016-07-05 21:19:25.639, foo}
2016-07-05 21:19:25,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:19:25.64, foo, 2016-07-05 21:19:25.64, foo}
2016-07-05 21:19:25,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:19:25.641, foo, 2016-07-05 21:19:25.641, foo}
2016-07-05 21:19:25,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:19:25.642, foo, 2016-07-05 21:19:25.642, foo}
2016-07-05 21:19:25,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:19:25.643, foo, 2016-07-05 21:19:25.643, foo}
2016-07-05 21:19:25,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:19:25.644, foo, 2016-07-05 21:19:25.644, foo}
2016-07-05 21:19:25,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:19:25.645, foo, 2016-07-05 21:19:25.645, foo}
2016-07-05 21:19:25,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:19:25.647, foo, 2016-07-05 21:19:25.647, foo}
2016-07-05 21:19:25,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:19:25.647, foo, 2016-07-05 21:19:25.647, foo}
2016-07-05 21:19:25,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:19:25.648, foo, 2016-07-05 21:19:25.648, foo}
2016-07-05 21:19:25,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:19:25.648, foo, 2016-07-05 21:19:25.648, foo}
2016-07-05 21:19:25,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:19:25.649, foo, 2016-07-05 21:19:25.649, foo}
2016-07-05 21:19:25,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:19:25.649, foo, 2016-07-05 21:19:25.649, foo}
2016-07-05 21:19:25,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:19:25.65, foo, 2016-07-05 21:19:25.65, foo}
2016-07-05 21:19:25,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:19:25.65, foo, 2016-07-05 21:19:25.65, foo}
2016-07-05 21:19:25,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:19:25.651, foo, 2016-07-05 21:19:25.651, foo}
2016-07-05 21:19:25,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:25.651, foo, 2016-07-05 21:19:25.651, foo}
2016-07-05 21:19:25,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:19:25.652, foo, 2016-07-05 21:19:25.652, foo}
2016-07-05 21:19:25,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:19:25.652, foo, 2016-07-05 21:19:25.652, foo}
2016-07-05 21:19:25,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:19:25.652, foo, 2016-07-05 21:19:25.652, foo}
2016-07-05 21:19:25,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:19:25.66, foo, 2016-07-05 21:19:25.66, foo}
2016-07-05 21:19:25,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:19:25.661, foo, 2016-07-05 21:19:25.661, foo}
2016-07-05 21:19:25,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:19:25.662, foo, 2016-07-05 21:19:25.662, foo}
2016-07-05 21:19:25,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:19:25.662, foo, 2016-07-05 21:19:25.662, foo}
2016-07-05 21:19:25,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:19:25.662, foo, 2016-07-05 21:19:25.662, foo}
2016-07-05 21:19:25,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:19:25.663, foo, 2016-07-05 21:19:25.663, foo}
2016-07-05 21:19:25,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:19:25.663, foo, 2016-07-05 21:19:25.663, foo}
2016-07-05 21:19:25,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:25.664, foo, 2016-07-05 21:19:25.664, foo}
2016-07-05 21:19:25,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:19:25.664, foo, 2016-07-05 21:19:25.664, foo}
2016-07-05 21:19:25,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:19:25.664, foo, 2016-07-05 21:19:25.664, foo}
2016-07-05 21:19:25,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:19:25.665, foo, 2016-07-05 21:19:25.665, foo}
2016-07-05 21:19:25,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:19:25.665, foo, 2016-07-05 21:19:25.665, foo}
2016-07-05 21:19:25,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:19:25.666, foo, 2016-07-05 21:19:25.666, foo}
2016-07-05 21:19:25,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:19:25.666, foo, 2016-07-05 21:19:25.666, foo}
2016-07-05 21:19:25,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:19:25.667, foo, 2016-07-05 21:19:25.667, foo}
2016-07-05 21:19:25,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:19:25.667, foo, 2016-07-05 21:19:25.667, foo}
2016-07-05 21:19:25,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:19:25.667, foo, 2016-07-05 21:19:25.667, foo}
2016-07-05 21:19:25,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:19:25.668, foo, 2016-07-05 21:19:25.668, foo}
2016-07-05 21:19:25,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:19:25.668, foo, 2016-07-05 21:19:25.668, foo}
2016-07-05 21:19:25,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:19:25.669, foo, 2016-07-05 21:19:25.669, foo}
2016-07-05 21:19:25,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:19:25.67, foo, 2016-07-05 21:19:25.67, foo}
2016-07-05 21:19:25,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:19:25.671, foo, 2016-07-05 21:19:25.671, foo}
2016-07-05 21:19:25,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:19:25.672, foo, 2016-07-05 21:19:25.672, foo}
2016-07-05 21:19:25,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:19:25.673, foo, 2016-07-05 21:19:25.673, foo}
2016-07-05 21:19:25,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:19:25.674, foo, 2016-07-05 21:19:25.674, foo}
2016-07-05 21:19:25,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:25.675, foo, 2016-07-05 21:19:25.675, foo}
2016-07-05 21:19:25,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:25.676, foo, 2016-07-05 21:19:25.676, foo}
2016-07-05 21:19:25,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:25.677, foo, 2016-07-05 21:19:25.677, foo}
2016-07-05 21:19:25,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:19:25.678, foo, 2016-07-05 21:19:25.678, foo}
2016-07-05 21:19:25,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:19:25.68, foo, 2016-07-05 21:19:25.68, foo}
2016-07-05 21:19:25,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:19:25.68, foo, 2016-07-05 21:19:25.68, foo}
2016-07-05 21:19:25,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:19:25.681, foo, 2016-07-05 21:19:25.681, foo}
2016-07-05 21:19:25,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:19:25.682, foo, 2016-07-05 21:19:25.682, foo}
2016-07-05 21:19:25,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:19:25.682, foo, 2016-07-05 21:19:25.682, foo}
2016-07-05 21:19:25,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:19:25.683, foo, 2016-07-05 21:19:25.683, foo}
2016-07-05 21:19:25,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:19:25.684, foo, 2016-07-05 21:19:25.684, foo}
2016-07-05 21:19:25,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:19:25.685, foo, 2016-07-05 21:19:25.685, foo}
2016-07-05 21:19:25,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:19:25.686, foo, 2016-07-05 21:19:25.686, foo}
2016-07-05 21:19:25,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:19:25.686, foo, 2016-07-05 21:19:25.686, foo}
2016-07-05 21:19:25,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:19:25.687, foo, 2016-07-05 21:19:25.687, foo}
2016-07-05 21:19:25,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:19:25.687, foo, 2016-07-05 21:19:25.687, foo}
2016-07-05 21:19:25,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:19:25.688, foo, 2016-07-05 21:19:25.688, foo}
2016-07-05 21:19:25,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:19:25.689, foo, 2016-07-05 21:19:25.689, foo}
2016-07-05 21:19:25,743 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:19:25,745 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:19:25,746 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:19:25,746 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:19:25,746 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:19:25,747 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:19:25,747 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:19:25,747 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:19:25,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:19:25,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:19:25,762 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:19:25,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:19:25,766 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:19:25,766 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:19:25,767 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:19:25,768 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 21:19:25,768 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 21:19:25,769 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 21:19:25,769 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 21:19:25,769 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 21:19:25,769 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 21:19:25,772 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 21:19:25,773 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column for display order
alter table PRODUCT_STATUS add DISPLAY_ORDER INTEGER NOT NULL after PRODUCT_STATUS_NAME
2016-07-05 21:19:25,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 1 where PRODUCT_STATUS_CODE= 'ONS'
2016-07-05 21:19:25,817 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 2 where PRODUCT_STATUS_CODE= 'PST'
2016-07-05 21:19:25,818 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 3 where PRODUCT_STATUS_CODE= 'SST'
2016-07-05 21:19:25,819 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint unique(DISPLAY_ORDER)
2016-07-05 21:19:25,840 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=5 failure=0
2016-07-05 21:19:25,840 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=5 failure=0 (in 1 files)
2016-07-05 21:19:25,841 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:19:25,841 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:19:25,842 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:19:25,842 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:19:25,842 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:19:25,842 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:19:25,842 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 21:19:25,843 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:19:25,843 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:19:25,843 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:19:25,844 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:19:25,844 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:19:25,844 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:19:25,844 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:19:25,847 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:19:25,849 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:19:25,859 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:19:25,860 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:19:25,860 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:19:25,860 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:19:25,870 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:19:25,887 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:19:25,894 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:19:25,904 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:19:25,917 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:19:25,923 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:19:25,931 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:19:25,940 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:19:25,947 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:19:25,954 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:19:25,965 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:19:25,973 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:19:25,978 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:19:25,985 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:19:25,992 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:19:25,992 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:19:25,993 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 21:19:25,993 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:19:25,993 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:19:25,993 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:19:25,994 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:19:25,994 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:19:25,994 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:19:26,001 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck diffmap file: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:19:26,002 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck result file: playsql/migration/schema/alter-check-result.html
2016-07-05 21:19:26,002 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 21:19:26,002 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 21:19:26,003 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 21:19:26,003 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 21:19:26,003 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 21:19:26,030 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 21:19:26,043 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:19:26,138 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:19:26,221 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 21:19:26,222 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 21:19:26,222 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 21:19:26,222 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 21:19:26,222 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 21:19:26,223 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 21:19:26,224 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:19:26,227 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 21:19:26,230 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:19:26,231 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:19:26,281 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 21:19:26,281 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 21:19:26,291 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 21:19:26,489 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 21:19:26,496 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 21:19:26,498 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 21:19:26,500 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 21:19:26,571 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:19:26,606 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 21:19:26

[Table Count]
15 to 16
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 21:19:26,637 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:19:26,640 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m09s014ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=5 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:24:33,552 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:24:33,558 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:24:33,559 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:24:33,563 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:24:33,564 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:24:33,564 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:24:33,566 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:24:34,945 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:24:34,946 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:24:34,946 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:24:34,947 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:24:34,960 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:24:35,378 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:24:35,378 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:24:35,392 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 21:24:35,404 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:24:35,406 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:24:35,407 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:24:35,408 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:24:35,408 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:24:35,408 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:24:35,423 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:24:35,423 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:24:35,424 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:24:35,424 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:24:35,425 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:24:35,426 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:24:35,441 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:35,441 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:35,442 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:35,474 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:24:35,481 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:24:35,486 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:24:35,493 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:24:35,502 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:24:35,518 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:24:35,538 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:24:35,557 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:24:35,573 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:24:35,596 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:24:35,614 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:24:35,636 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:24:35,657 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:24:35,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:24:35,687 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:24:35,703 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:24:35,728 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:24:35,743 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:24:35,764 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:24:35,787 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:24:35,803 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:24:35,825 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:24:35,848 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:24:35,852 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:24:35,855 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:24:35,861 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:24:35,864 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:24:35,867 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:24:35,871 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:24:35,875 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:24:35,878 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:24:35,883 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:24:35,885 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:24:35,889 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:24:35,894 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:24:35,897 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:24:35,900 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:24:35,954 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:24:35,957 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:24:35,961 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:24:35,961 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:24:35,962 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:24:35,962 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:24:35,962 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:24:35,963 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:24:35,967 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:24:35,972 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:24:35,973 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:24:35,975 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:24:35,991 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:24:35,991 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:24:35,994 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:24:35,995 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:24:35,997 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:24:36,001 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:24:36,003 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:24:36,004 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:24:36,005 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:24:36,006 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:24:36,013 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:24:36,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:24:36,106 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:24:36,117 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:24:36,193 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:24:36,204 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:24:36,216 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:24:36,285 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:24:36,299 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:24:36,309 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:24:36,321 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:24:36,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:24:36,343 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:24:36,363 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:24:36,374 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:24:36,384 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:24:36,396 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:24:36,449 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,475 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:24:36,495 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:24:36,515 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,537 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:24:36,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,606 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,624 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:24:36,644 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:36,671 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:24:36,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:24:36,716 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:24:36,739 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:24:36,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:24:36,787 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:24:36,801 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:24:36,820 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:24:36,840 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:24:36,861 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:24:36,881 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:24:36,900 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:24:36,920 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:24:36,940 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:24:36,961 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:24:36,962 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:24:36,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:24:36,966 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:24:36,967 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:24:36,968 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:24:36,968 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:24:37,097 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:24:37,097 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:24:37,098 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:24:37,098 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:24:37,098 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:24:37,098 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:24:37,123 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:37,124 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:24:37,124 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:37,387 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:37,387 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:37,387 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:37,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:24:37,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:24:37,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:24:37,538 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:24:37,544 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:24:37,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:24:37,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:24:37,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:24:37,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:24:37,553 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:24:37,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:24:37,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:24:37,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:24:37,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:24:37,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:24:37,564 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:24:37,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:24:37,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:24:37,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:24:37,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:24:37,573 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:24:37,574 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:24:37,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:24:37,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:24:37,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:24:37,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:24:37,582 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:24:37,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:24:37,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:24:37,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:24:37,588 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:24:37,590 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:37,590 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:24:37,591 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:37,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:24:37.689, foo, 2016-07-05 21:24:37.689, foo, 0}
2016-07-05 21:24:37,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:24:37.697, foo, 2016-07-05 21:24:37.697, foo, 0}
2016-07-05 21:24:37,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:24:37.7, foo, 2016-07-05 21:24:37.7, foo, 0}
2016-07-05 21:24:37,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:24:37.703, foo, 2016-07-05 21:24:37.703, foo, 0}
2016-07-05 21:24:37,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:24:37.711, foo, 2016-07-05 21:24:37.711, foo, 0}
2016-07-05 21:24:37,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:24:37.715, foo, 2016-07-05 21:24:37.715, foo, 0}
2016-07-05 21:24:37,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:24:37.722, foo, 2016-07-05 21:24:37.722, foo, 0}
2016-07-05 21:24:37,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:24:37.727, foo, 2016-07-05 21:24:37.727, foo, 0}
2016-07-05 21:24:37,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:24:37.731, foo, 2016-07-05 21:24:37.731, foo, 0}
2016-07-05 21:24:37,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:24:37.734, foo, 2016-07-05 21:24:37.734, foo, 0}
2016-07-05 21:24:37,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:24:37.735, foo, 2016-07-05 21:24:37.735, foo, 0}
2016-07-05 21:24:37,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:24:37.737, foo, 2016-07-05 21:24:37.737, foo, 0}
2016-07-05 21:24:37,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:24:37.742, foo, 2016-07-05 21:24:37.742, foo, 0}
2016-07-05 21:24:37,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:24:37.744, foo, 2016-07-05 21:24:37.744, foo, 0}
2016-07-05 21:24:37,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:24:37.746, foo, 2016-07-05 21:24:37.746, foo, 0}
2016-07-05 21:24:37,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:24:37.748, foo, 2016-07-05 21:24:37.748, foo, 0}
2016-07-05 21:24:37,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:24:37.749, foo, 2016-07-05 21:24:37.749, foo, 0}
2016-07-05 21:24:37,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:24:37.75, foo, 2016-07-05 21:24:37.75, foo, 0}
2016-07-05 21:24:37,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:24:37.752, foo, 2016-07-05 21:24:37.752, foo, 0}
2016-07-05 21:24:37,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:24:37.754, foo, 2016-07-05 21:24:37.754, foo, 0}
2016-07-05 21:24:37,775 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:24:37,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:24:37.776, foo, 2016-07-05 21:24:37.776, foo, 0}
2016-07-05 21:24:37,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:24:37.779, foo, 2016-07-05 21:24:37.779, foo, 0}
2016-07-05 21:24:37,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:24:37.782, foo, 2016-07-05 21:24:37.782, foo, 0}
2016-07-05 21:24:37,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:24:37.786, foo, 2016-07-05 21:24:37.786, foo, 0}
2016-07-05 21:24:37,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:24:37.788, foo, 2016-07-05 21:24:37.788, foo, 0}
2016-07-05 21:24:37,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:24:37.791, foo, 2016-07-05 21:24:37.791, foo, 0}
2016-07-05 21:24:37,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:24:37.794, foo, 2016-07-05 21:24:37.794, foo, 0}
2016-07-05 21:24:37,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:24:37.798, foo, 2016-07-05 21:24:37.798, foo, 0}
2016-07-05 21:24:37,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:24:37.801, foo, 2016-07-05 21:24:37.801, foo, 0}
2016-07-05 21:24:37,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:24:37.803, foo, 2016-07-05 21:24:37.803, foo, 0}
2016-07-05 21:24:37,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:24:37.806, foo, 2016-07-05 21:24:37.806, foo, 0}
2016-07-05 21:24:37,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:24:37.809, foo, 2016-07-05 21:24:37.809, foo, 0}
2016-07-05 21:24:37,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:24:37.811, foo, 2016-07-05 21:24:37.811, foo, 0}
2016-07-05 21:24:37,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:24:37.813, foo, 2016-07-05 21:24:37.813, foo, 0}
2016-07-05 21:24:37,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:24:37.816, foo, 2016-07-05 21:24:37.816, foo, 0}
2016-07-05 21:24:37,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:24:37.818, foo, 2016-07-05 21:24:37.818, foo, 0}
2016-07-05 21:24:37,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:24:37.82, foo, 2016-07-05 21:24:37.82, foo, 0}
2016-07-05 21:24:37,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:24:37.822, foo, 2016-07-05 21:24:37.822, foo, 0}
2016-07-05 21:24:37,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:24:37.825, foo, 2016-07-05 21:24:37.825, foo, 0}
2016-07-05 21:24:37,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:24:37.827, foo, 2016-07-05 21:24:37.827, foo, 0}
2016-07-05 21:24:37,852 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:24:37,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:24:37,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:24:37,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:24:37,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:24:37,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:24:37,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:24:37,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:24:37,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:24:37,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:24:37,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:24:37,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:24:37,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:24:37,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:24:37,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:24:37,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:24:37,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:24:37,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:24:37,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:24:37,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:24:37,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:24:37,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:24:37,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:24:37,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:24:37,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:24:37,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:24:37,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:24:37,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:24:37,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:24:37,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:24:37,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:24:37,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:24:37,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:24:37,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:24:37,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:24:37,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:24:37,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:24:37,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:24:37,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:24:37,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:24:37,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:24:37,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:24:37,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:24:37,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:24:37,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:24:37,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:24:37,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:24:37,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:24:37,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:24:37,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:24:37,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:24:37,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:24:37,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:24:37,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:24:37,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:24:37,910 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:24:37,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:24:37,962 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:24:37,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:24:37.964, foo, 2016-07-05 21:24:37.964, foo, 0}
2016-07-05 21:24:37,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:24:37.966, foo, 2016-07-05 21:24:37.966, foo, 0}
2016-07-05 21:24:37,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:24:37.967, foo, 2016-07-05 21:24:37.967, foo, 0}
2016-07-05 21:24:37,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:24:37.969, foo, 2016-07-05 21:24:37.969, foo, 0}
2016-07-05 21:24:37,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:24:37.97, foo, 2016-07-05 21:24:37.97, foo, 0}
2016-07-05 21:24:37,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:24:37.97, foo, 2016-07-05 21:24:37.97, foo, 0}
2016-07-05 21:24:37,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:24:37.971, foo, 2016-07-05 21:24:37.971, foo, 0}
2016-07-05 21:24:37,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:24:37.972, foo, 2016-07-05 21:24:37.972, foo, 0}
2016-07-05 21:24:37,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:24:37.973, foo, 2016-07-05 21:24:37.973, foo, 0}
2016-07-05 21:24:37,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:24:37.974, foo, 2016-07-05 21:24:37.974, foo, 0}
2016-07-05 21:24:37,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:24:37.974, foo, 2016-07-05 21:24:37.974, foo, 0}
2016-07-05 21:24:37,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:24:37.975, foo, 2016-07-05 21:24:37.975, foo, 0}
2016-07-05 21:24:37,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:24:37.976, foo, 2016-07-05 21:24:37.976, foo, 0}
2016-07-05 21:24:37,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:24:37.984, foo, 2016-07-05 21:24:37.984, foo, 0}
2016-07-05 21:24:37,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:24:37.985, foo, 2016-07-05 21:24:37.985, foo, 0}
2016-07-05 21:24:37,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:24:37.987, foo, 2016-07-05 21:24:37.987, foo, 0}
2016-07-05 21:24:37,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:24:37.994, foo, 2016-07-05 21:24:37.994, foo, 0}
2016-07-05 21:24:37,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:24:37.998, foo, 2016-07-05 21:24:37.998, foo, 0}
2016-07-05 21:24:38,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:24:37.999, foo, 2016-07-05 21:24:37.999, foo, 0}
2016-07-05 21:24:38,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:24:38.002, foo, 2016-07-05 21:24:38.002, foo, 0}
2016-07-05 21:24:38,017 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:24:38,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:24:38.018, foo, 2016-07-05 21:24:38.018, foo, 0}
2016-07-05 21:24:38,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:24:38.02, foo, 2016-07-05 21:24:38.02, foo, 0}
2016-07-05 21:24:38,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:24:38.021, foo, 2016-07-05 21:24:38.021, foo, 0}
2016-07-05 21:24:38,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:24:38.022, foo, 2016-07-05 21:24:38.022, foo, 0}
2016-07-05 21:24:38,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:24:38.023, foo, 2016-07-05 21:24:38.023, foo, 0}
2016-07-05 21:24:38,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:24:38.023, foo, 2016-07-05 21:24:38.023, foo, 0}
2016-07-05 21:24:38,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:24:38.024, foo, 2016-07-05 21:24:38.024, foo, 0}
2016-07-05 21:24:38,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:24:38.025, foo, 2016-07-05 21:24:38.025, foo, 0}
2016-07-05 21:24:38,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:24:38.026, foo, 2016-07-05 21:24:38.026, foo, 0}
2016-07-05 21:24:38,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:24:38.026, foo, 2016-07-05 21:24:38.026, foo, 0}
2016-07-05 21:24:38,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:24:38.043, foo, 2016-07-05 21:24:38.043, foo, 0}
2016-07-05 21:24:38,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:24:38.044, foo, 2016-07-05 21:24:38.044, foo, 0}
2016-07-05 21:24:38,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:24:38.045, foo, 2016-07-05 21:24:38.045, foo, 0}
2016-07-05 21:24:38,046 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:24:38.046, foo, 2016-07-05 21:24:38.046, foo, 0}
2016-07-05 21:24:38,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:24:38.047, foo, 2016-07-05 21:24:38.047, foo, 0}
2016-07-05 21:24:38,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:24:38.047, foo, 2016-07-05 21:24:38.047, foo, 0}
2016-07-05 21:24:38,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:24:38.048, foo, 2016-07-05 21:24:38.048, foo, 0}
2016-07-05 21:24:38,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:24:38.048, foo, 2016-07-05 21:24:38.048, foo, 0}
2016-07-05 21:24:38,049 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:24:38.049, foo, 2016-07-05 21:24:38.049, foo, 0}
2016-07-05 21:24:38,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:24:38.081, foo, 2016-07-05 21:24:38.081, foo, 0}
2016-07-05 21:24:38,110 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:24:38,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:24:38.11, foo, 2016-07-05 21:24:38.11, foo}
2016-07-05 21:24:38,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:24:38.112, foo, 2016-07-05 21:24:38.112, foo}
2016-07-05 21:24:38,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:24:38.113, foo, 2016-07-05 21:24:38.113, foo}
2016-07-05 21:24:38,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:24:38.114, foo, 2016-07-05 21:24:38.114, foo}
2016-07-05 21:24:38,128 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:24:38,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:24:38,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:24:38,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:24:38,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:24:38,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:24:38,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:24:38,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:24:38,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:24:38,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:24:38,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:24:38,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:24:38,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:24:38,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:24:38,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:24:38,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:24:38,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:24:38,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:24:38,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:24:38,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:24:38,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:24:38,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:24:38,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:24:38,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:24:38,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:24:38,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:24:38,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:24:38,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:24:38,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:24:38,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:24:38,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:24:38,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:24:38,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:24:38,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:24:38,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:24:38,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:24:38,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:24:38,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:24:38,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:24:38,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:24:38,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:24:38,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:24:38,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:24:38,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:24:38,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:24:38,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:24:38,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:24:38,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:24:38,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:24:38,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:24:38,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:24:38,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:24:38,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:24:38,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:24:38,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:24:38,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:24:38,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:24:38,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:24:38,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:24:38,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:24:38,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:24:38,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:24:38,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:24:38,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:24:38,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:24:38,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:24:38,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:24:38,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:24:38,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:24:38,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:24:38,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:24:38,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:24:38,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:24:38,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:24:38,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:24:38,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:24:38,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:24:38,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:24:38,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:24:38,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:24:38,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:24:38,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:24:38,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:24:38,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:24:38,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:24:38,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:24:38,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:24:38,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:24:38,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:24:38,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:24:38,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:24:38,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:24:38,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:24:38,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:24:38,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:24:38,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:24:38,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:24:38,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:24:38,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:24:38,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:24:38,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:24:38,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:24:38,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:24:38,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:24:38,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:24:38,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:24:38,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:24:38,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:24:38,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:24:38,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:24:38,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:24:38,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:24:38,381 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:24:38,382 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:38,382 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:24:38,382 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:38,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:24:38.442, foo, 2016-07-05 21:24:38.442, foo, 0}
2016-07-05 21:24:38,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:24:38.444, foo, 2016-07-05 21:24:38.444, foo, 0}
2016-07-05 21:24:38,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:24:38.445, foo, 2016-07-05 21:24:38.445, foo, 0}
2016-07-05 21:24:38,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:24:38.445, foo, 2016-07-05 21:24:38.445, foo, 0}
2016-07-05 21:24:38,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:24:38.446, foo, 2016-07-05 21:24:38.446, foo, 0}
2016-07-05 21:24:38,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:24:38.447, foo, 2016-07-05 21:24:38.447, foo, 0}
2016-07-05 21:24:38,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:24:38.447, foo, 2016-07-05 21:24:38.447, foo, 0}
2016-07-05 21:24:38,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:24:38.448, foo, 2016-07-05 21:24:38.448, foo, 0}
2016-07-05 21:24:38,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:24:38.449, foo, 2016-07-05 21:24:38.449, foo, 0}
2016-07-05 21:24:38,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:24:38.451, foo, 2016-07-05 21:24:38.451, foo, 0}
2016-07-05 21:24:38,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:24:38.452, foo, 2016-07-05 21:24:38.452, foo, 0}
2016-07-05 21:24:38,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:24:38.452, foo, 2016-07-05 21:24:38.452, foo, 0}
2016-07-05 21:24:38,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:24:38.453, foo, 2016-07-05 21:24:38.453, foo, 0}
2016-07-05 21:24:38,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:24:38.453, foo, 2016-07-05 21:24:38.453, foo, 0}
2016-07-05 21:24:38,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:24:38.454, foo, 2016-07-05 21:24:38.454, foo, 0}
2016-07-05 21:24:38,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:24:38.454, foo, 2016-07-05 21:24:38.454, foo, 0}
2016-07-05 21:24:38,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:24:38.455, foo, 2016-07-05 21:24:38.455, foo, 0}
2016-07-05 21:24:38,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:24:38.456, foo, 2016-07-05 21:24:38.456, foo, 0}
2016-07-05 21:24:38,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:24:38.456, foo, 2016-07-05 21:24:38.456, foo, 0}
2016-07-05 21:24:38,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:24:38.457, foo, 2016-07-05 21:24:38.457, foo, 0}
2016-07-05 21:24:38,469 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:24:38,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:24:38.47, foo, 2016-07-05 21:24:38.47, foo, 0}
2016-07-05 21:24:38,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:24:38.472, foo, 2016-07-05 21:24:38.472, foo, 0}
2016-07-05 21:24:38,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:24:38.472, foo, 2016-07-05 21:24:38.472, foo, 0}
2016-07-05 21:24:38,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:24:38.473, foo, 2016-07-05 21:24:38.473, foo, 0}
2016-07-05 21:24:38,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:24:38.474, foo, 2016-07-05 21:24:38.474, foo, 0}
2016-07-05 21:24:38,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:24:38.475, foo, 2016-07-05 21:24:38.475, foo, 0}
2016-07-05 21:24:38,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:24:38.476, foo, 2016-07-05 21:24:38.476, foo, 0}
2016-07-05 21:24:38,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:24:38.477, foo, 2016-07-05 21:24:38.477, foo, 0}
2016-07-05 21:24:38,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:24:38.478, foo, 2016-07-05 21:24:38.478, foo, 0}
2016-07-05 21:24:38,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:24:38.48, foo, 2016-07-05 21:24:38.48, foo, 0}
2016-07-05 21:24:38,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:24:38.481, foo, 2016-07-05 21:24:38.481, foo, 0}
2016-07-05 21:24:38,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:24:38.482, foo, 2016-07-05 21:24:38.482, foo, 0}
2016-07-05 21:24:38,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:24:38.484, foo, 2016-07-05 21:24:38.484, foo, 0}
2016-07-05 21:24:38,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:24:38.484, foo, 2016-07-05 21:24:38.484, foo, 0}
2016-07-05 21:24:38,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:24:38.486, foo, 2016-07-05 21:24:38.486, foo, 0}
2016-07-05 21:24:38,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:24:38.487, foo, 2016-07-05 21:24:38.487, foo, 0}
2016-07-05 21:24:38,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:24:38.489, foo, 2016-07-05 21:24:38.489, foo, 0}
2016-07-05 21:24:38,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:24:38.49, foo, 2016-07-05 21:24:38.49, foo, 0}
2016-07-05 21:24:38,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:24:38.494, foo, 2016-07-05 21:24:38.494, foo, 0}
2016-07-05 21:24:38,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:24:38.496, foo, 2016-07-05 21:24:38.496, foo, 0}
2016-07-05 21:24:38,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:24:38.498, foo, 2016-07-05 21:24:38.498, foo, 0}
2016-07-05 21:24:38,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:24:38.499, foo, 2016-07-05 21:24:38.499, foo, 0}
2016-07-05 21:24:38,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:24:38.501, foo, 2016-07-05 21:24:38.501, foo, 0}
2016-07-05 21:24:38,502 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:24:38.502, foo, 2016-07-05 21:24:38.502, foo, 0}
2016-07-05 21:24:38,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:24:38.503, foo, 2016-07-05 21:24:38.503, foo, 0}
2016-07-05 21:24:38,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:24:38.504, foo, 2016-07-05 21:24:38.504, foo, 0}
2016-07-05 21:24:38,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:24:38.506, foo, 2016-07-05 21:24:38.506, foo, 0}
2016-07-05 21:24:38,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:24:38.506, foo, 2016-07-05 21:24:38.506, foo, 0}
2016-07-05 21:24:38,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:24:38.508, foo, 2016-07-05 21:24:38.508, foo, 0}
2016-07-05 21:24:38,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:24:38.508, foo, 2016-07-05 21:24:38.508, foo, 0}
2016-07-05 21:24:38,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:24:38.509, foo, 2016-07-05 21:24:38.509, foo, 0}
2016-07-05 21:24:38,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:24:38.51, foo, 2016-07-05 21:24:38.51, foo, 0}
2016-07-05 21:24:38,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:38.511, foo, 2016-07-05 21:24:38.511, foo, 0}
2016-07-05 21:24:38,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:38.512, foo, 2016-07-05 21:24:38.512, foo, 0}
2016-07-05 21:24:38,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:24:38.516, foo, 2016-07-05 21:24:38.516, foo, 0}
2016-07-05 21:24:38,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:38.517, foo, 2016-07-05 21:24:38.517, foo, 0}
2016-07-05 21:24:38,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:24:38.518, foo, 2016-07-05 21:24:38.518, foo, 0}
2016-07-05 21:24:38,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:24:38.519, foo, 2016-07-05 21:24:38.519, foo, 0}
2016-07-05 21:24:38,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:24:38.52, foo, 2016-07-05 21:24:38.52, foo, 0}
2016-07-05 21:24:38,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:24:38.521, foo, 2016-07-05 21:24:38.521, foo, 0}
2016-07-05 21:24:38,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:24:38.522, foo, 2016-07-05 21:24:38.522, foo, 0}
2016-07-05 21:24:38,522 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:24:38.522, foo, 2016-07-05 21:24:38.522, foo, 0}
2016-07-05 21:24:38,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:24:38.523, foo, 2016-07-05 21:24:38.523, foo, 0}
2016-07-05 21:24:38,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:38.524, foo, 2016-07-05 21:24:38.524, foo, 0}
2016-07-05 21:24:38,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:38.525, foo, 2016-07-05 21:24:38.525, foo, 0}
2016-07-05 21:24:38,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:24:38.526, foo, 2016-07-05 21:24:38.526, foo, 0}
2016-07-05 21:24:38,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:38.527, foo, 2016-07-05 21:24:38.527, foo, 0}
2016-07-05 21:24:38,529 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:24:38.529, foo, 2016-07-05 21:24:38.529, foo, 0}
2016-07-05 21:24:38,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:24:38.531, foo, 2016-07-05 21:24:38.531, foo, 0}
2016-07-05 21:24:38,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:24:38.532, foo, 2016-07-05 21:24:38.532, foo, 0}
2016-07-05 21:24:38,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:24:38.534, foo, 2016-07-05 21:24:38.534, foo, 0}
2016-07-05 21:24:38,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:24:38.535, foo, 2016-07-05 21:24:38.535, foo, 0}
2016-07-05 21:24:38,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:24:38.536, foo, 2016-07-05 21:24:38.536, foo, 0}
2016-07-05 21:24:38,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:38.537, foo, 2016-07-05 21:24:38.537, foo, 0}
2016-07-05 21:24:38,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:38.538, foo, 2016-07-05 21:24:38.538, foo, 0}
2016-07-05 21:24:38,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:24:38.539, foo, 2016-07-05 21:24:38.539, foo, 0}
2016-07-05 21:24:38,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:38.54, foo, 2016-07-05 21:24:38.54, foo, 0}
2016-07-05 21:24:38,540 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:24:38.54, foo, 2016-07-05 21:24:38.54, foo, 0}
2016-07-05 21:24:38,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:24:38.541, foo, 2016-07-05 21:24:38.541, foo, 0}
2016-07-05 21:24:38,541 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:24:38.541, foo, 2016-07-05 21:24:38.541, foo, 0}
2016-07-05 21:24:38,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:24:38.542, foo, 2016-07-05 21:24:38.542, foo, 0}
2016-07-05 21:24:38,542 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:24:38.542, foo, 2016-07-05 21:24:38.542, foo, 0}
2016-07-05 21:24:38,546 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:24:38.546, foo, 2016-07-05 21:24:38.546, foo, 0}
2016-07-05 21:24:38,547 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:24:38.547, foo, 2016-07-05 21:24:38.547, foo, 0}
2016-07-05 21:24:38,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:24:38.548, foo, 2016-07-05 21:24:38.548, foo, 0}
2016-07-05 21:24:38,548 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:24:38.548, foo, 2016-07-05 21:24:38.548, foo, 0}
2016-07-05 21:24:38,549 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:24:38.549, foo, 2016-07-05 21:24:38.549, foo, 0}
2016-07-05 21:24:38,550 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:24:38.55, foo, 2016-07-05 21:24:38.55, foo, 0}
2016-07-05 21:24:38,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:24:38.55, foo, 2016-07-05 21:24:38.55, foo, 0}
2016-07-05 21:24:38,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:24:38.551, foo, 2016-07-05 21:24:38.551, foo, 0}
2016-07-05 21:24:38,592 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:24:38,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:24:38.593, foo, 2016-07-05 21:24:38.593, foo}
2016-07-05 21:24:38,596 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:24:38.596, foo, 2016-07-05 21:24:38.596, foo}
2016-07-05 21:24:38,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:24:38.598, foo, 2016-07-05 21:24:38.598, foo}
2016-07-05 21:24:38,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:24:38.599, foo, 2016-07-05 21:24:38.599, foo}
2016-07-05 21:24:38,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:24:38.6, foo, 2016-07-05 21:24:38.6, foo}
2016-07-05 21:24:38,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:24:38.601, foo, 2016-07-05 21:24:38.601, foo}
2016-07-05 21:24:38,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:24:38.602, foo, 2016-07-05 21:24:38.602, foo}
2016-07-05 21:24:38,603 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:24:38.603, foo, 2016-07-05 21:24:38.603, foo}
2016-07-05 21:24:38,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:24:38.604, foo, 2016-07-05 21:24:38.604, foo}
2016-07-05 21:24:38,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:24:38.605, foo, 2016-07-05 21:24:38.605, foo}
2016-07-05 21:24:38,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:24:38.606, foo, 2016-07-05 21:24:38.606, foo}
2016-07-05 21:24:38,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:24:38.607, foo, 2016-07-05 21:24:38.607, foo}
2016-07-05 21:24:38,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:24:38.608, foo, 2016-07-05 21:24:38.608, foo}
2016-07-05 21:24:38,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:24:38.608, foo, 2016-07-05 21:24:38.608, foo}
2016-07-05 21:24:38,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:24:38.609, foo, 2016-07-05 21:24:38.609, foo}
2016-07-05 21:24:38,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:24:38.609, foo, 2016-07-05 21:24:38.609, foo}
2016-07-05 21:24:38,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:24:38.609, foo, 2016-07-05 21:24:38.609, foo}
2016-07-05 21:24:38,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:24:38.61, foo, 2016-07-05 21:24:38.61, foo}
2016-07-05 21:24:38,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:24:38.61, foo, 2016-07-05 21:24:38.61, foo}
2016-07-05 21:24:38,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:24:38.614, foo, 2016-07-05 21:24:38.614, foo}
2016-07-05 21:24:38,615 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:24:38.615, foo, 2016-07-05 21:24:38.615, foo}
2016-07-05 21:24:38,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:24:38.617, foo, 2016-07-05 21:24:38.617, foo}
2016-07-05 21:24:38,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:24:38.618, foo, 2016-07-05 21:24:38.618, foo}
2016-07-05 21:24:38,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:24:38.618, foo, 2016-07-05 21:24:38.618, foo}
2016-07-05 21:24:38,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:24:38.619, foo, 2016-07-05 21:24:38.619, foo}
2016-07-05 21:24:38,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:24:38.62, foo, 2016-07-05 21:24:38.62, foo}
2016-07-05 21:24:38,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:24:38.62, foo, 2016-07-05 21:24:38.62, foo}
2016-07-05 21:24:38,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:24:38.621, foo, 2016-07-05 21:24:38.621, foo}
2016-07-05 21:24:38,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:24:38.622, foo, 2016-07-05 21:24:38.622, foo}
2016-07-05 21:24:38,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:38.622, foo, 2016-07-05 21:24:38.622, foo}
2016-07-05 21:24:38,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:38.623, foo, 2016-07-05 21:24:38.623, foo}
2016-07-05 21:24:38,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:38.624, foo, 2016-07-05 21:24:38.624, foo}
2016-07-05 21:24:38,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:24:38.627, foo, 2016-07-05 21:24:38.627, foo}
2016-07-05 21:24:38,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:24:38.629, foo, 2016-07-05 21:24:38.629, foo}
2016-07-05 21:24:38,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:24:38.631, foo, 2016-07-05 21:24:38.631, foo}
2016-07-05 21:24:38,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:24:38.637, foo, 2016-07-05 21:24:38.637, foo}
2016-07-05 21:24:38,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:24:38.639, foo, 2016-07-05 21:24:38.639, foo}
2016-07-05 21:24:38,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:24:38.64, foo, 2016-07-05 21:24:38.64, foo}
2016-07-05 21:24:38,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:24:38.641, foo, 2016-07-05 21:24:38.641, foo}
2016-07-05 21:24:38,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:24:38.641, foo, 2016-07-05 21:24:38.641, foo}
2016-07-05 21:24:38,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:24:38.642, foo, 2016-07-05 21:24:38.642, foo}
2016-07-05 21:24:38,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:24:38.643, foo, 2016-07-05 21:24:38.643, foo}
2016-07-05 21:24:38,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:24:38.644, foo, 2016-07-05 21:24:38.644, foo}
2016-07-05 21:24:38,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:24:38.647, foo, 2016-07-05 21:24:38.647, foo}
2016-07-05 21:24:38,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:24:38.648, foo, 2016-07-05 21:24:38.648, foo}
2016-07-05 21:24:38,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:24:38.648, foo, 2016-07-05 21:24:38.649, foo}
2016-07-05 21:24:38,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:24:38.649, foo, 2016-07-05 21:24:38.649, foo}
2016-07-05 21:24:38,650 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:24:38.65, foo, 2016-07-05 21:24:38.65, foo}
2016-07-05 21:24:38,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:24:38.652, foo, 2016-07-05 21:24:38.652, foo}
2016-07-05 21:24:38,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:24:38.653, foo, 2016-07-05 21:24:38.653, foo}
2016-07-05 21:24:38,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:24:38.654, foo, 2016-07-05 21:24:38.654, foo}
2016-07-05 21:24:38,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:24:38.654, foo, 2016-07-05 21:24:38.654, foo}
2016-07-05 21:24:38,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:24:38.655, foo, 2016-07-05 21:24:38.655, foo}
2016-07-05 21:24:38,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:38.656, foo, 2016-07-05 21:24:38.656, foo}
2016-07-05 21:24:38,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:24:38.657, foo, 2016-07-05 21:24:38.657, foo}
2016-07-05 21:24:38,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:24:38.658, foo, 2016-07-05 21:24:38.658, foo}
2016-07-05 21:24:38,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:24:38.659, foo, 2016-07-05 21:24:38.659, foo}
2016-07-05 21:24:38,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:24:38.66, foo, 2016-07-05 21:24:38.66, foo}
2016-07-05 21:24:38,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:24:38.661, foo, 2016-07-05 21:24:38.661, foo}
2016-07-05 21:24:38,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:24:38.662, foo, 2016-07-05 21:24:38.662, foo}
2016-07-05 21:24:38,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:24:38.664, foo, 2016-07-05 21:24:38.664, foo}
2016-07-05 21:24:38,665 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:24:38.665, foo, 2016-07-05 21:24:38.665, foo}
2016-07-05 21:24:38,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:24:38.667, foo, 2016-07-05 21:24:38.667, foo}
2016-07-05 21:24:38,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:24:38.668, foo, 2016-07-05 21:24:38.668, foo}
2016-07-05 21:24:38,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:38.669, foo, 2016-07-05 21:24:38.669, foo}
2016-07-05 21:24:38,670 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:24:38.67, foo, 2016-07-05 21:24:38.67, foo}
2016-07-05 21:24:38,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:24:38.672, foo, 2016-07-05 21:24:38.672, foo}
2016-07-05 21:24:38,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:24:38.673, foo, 2016-07-05 21:24:38.673, foo}
2016-07-05 21:24:38,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:24:38.673, foo, 2016-07-05 21:24:38.673, foo}
2016-07-05 21:24:38,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:24:38.674, foo, 2016-07-05 21:24:38.674, foo}
2016-07-05 21:24:38,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:24:38.675, foo, 2016-07-05 21:24:38.675, foo}
2016-07-05 21:24:38,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:24:38.676, foo, 2016-07-05 21:24:38.676, foo}
2016-07-05 21:24:38,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:24:38.676, foo, 2016-07-05 21:24:38.676, foo}
2016-07-05 21:24:38,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:24:38.677, foo, 2016-07-05 21:24:38.677, foo}
2016-07-05 21:24:38,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:24:38.687, foo, 2016-07-05 21:24:38.687, foo}
2016-07-05 21:24:38,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:24:38.688, foo, 2016-07-05 21:24:38.688, foo}
2016-07-05 21:24:38,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:24:38.689, foo, 2016-07-05 21:24:38.689, foo}
2016-07-05 21:24:38,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:24:38.69, foo, 2016-07-05 21:24:38.69, foo}
2016-07-05 21:24:38,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:24:38.691, foo, 2016-07-05 21:24:38.691, foo}
2016-07-05 21:24:38,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:24:38.692, foo, 2016-07-05 21:24:38.692, foo}
2016-07-05 21:24:38,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:24:38.694, foo, 2016-07-05 21:24:38.694, foo}
2016-07-05 21:24:38,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:24:38.696, foo, 2016-07-05 21:24:38.696, foo}
2016-07-05 21:24:38,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:38.698, foo, 2016-07-05 21:24:38.698, foo}
2016-07-05 21:24:38,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:38.7, foo, 2016-07-05 21:24:38.7, foo}
2016-07-05 21:24:38,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:38.702, foo, 2016-07-05 21:24:38.702, foo}
2016-07-05 21:24:38,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:38.704, foo, 2016-07-05 21:24:38.704, foo}
2016-07-05 21:24:38,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:24:38.704, foo, 2016-07-05 21:24:38.704, foo}
2016-07-05 21:24:38,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:38.705, foo, 2016-07-05 21:24:38.705, foo}
2016-07-05 21:24:38,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:24:38.705, foo, 2016-07-05 21:24:38.705, foo}
2016-07-05 21:24:38,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:24:38.706, foo, 2016-07-05 21:24:38.706, foo}
2016-07-05 21:24:38,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:24:38.706, foo, 2016-07-05 21:24:38.706, foo}
2016-07-05 21:24:38,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:24:38.707, foo, 2016-07-05 21:24:38.707, foo}
2016-07-05 21:24:38,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:24:38.707, foo, 2016-07-05 21:24:38.707, foo}
2016-07-05 21:24:38,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:24:38.715, foo, 2016-07-05 21:24:38.715, foo}
2016-07-05 21:24:38,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:24:38.715, foo, 2016-07-05 21:24:38.715, foo}
2016-07-05 21:24:38,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:24:38.716, foo, 2016-07-05 21:24:38.716, foo}
2016-07-05 21:24:38,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:24:38.716, foo, 2016-07-05 21:24:38.716, foo}
2016-07-05 21:24:38,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:24:38.717, foo, 2016-07-05 21:24:38.717, foo}
2016-07-05 21:24:38,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:24:38.717, foo, 2016-07-05 21:24:38.717, foo}
2016-07-05 21:24:38,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:24:38.718, foo, 2016-07-05 21:24:38.718, foo}
2016-07-05 21:24:38,774 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:24:38,775 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:24:38,795 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:38,805 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:24:38,812 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:24:38,815 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:24:38,819 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:24:38,821 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:24:38,824 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:24:38,835 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:24:38,838 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:24:38,840 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:24:38,841 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:24:38,843 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:24:38,847 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:24:38,848 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:24:38,848 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:24:38,848 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:24:38,848 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:24:38,848 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:24:38,857 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:24:38,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:24:38,865 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:24:38,868 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:24:38,870 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:24:38,871 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:24:38,872 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:24:38,904 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:24:38,904 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:24:38,936 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:24:38,937 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:24:38,937 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:38,938 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:38,938 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:38,946 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:24:38,949 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:24:38,964 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:24:38,965 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:24:38,965 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:24:38,965 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:24:39,000 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:24:39,021 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:24:39,033 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:24:39,044 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:24:39,054 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:24:39,067 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:24:39,077 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:24:39,088 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:24:39,098 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:24:39,106 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:24:39,114 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:24:39,128 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:24:39,138 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:24:39,148 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:24:39,157 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:24:39,165 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:24:39,165 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:24:39,165 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:24:39,166 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:24:39,166 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:24:39,167 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:24:39,170 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:24:39,170 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:24:39,170 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:24:39,211 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:24:39,211 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:24:39,212 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:24:39,212 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:24:39,212 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:24:39,212 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:24:39,215 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:24:39,215 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:24:39,237 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:24:39,239 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:24:39,240 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:24:39,240 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:24:39,241 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:24:39,254 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:24:39,255 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:24:39,256 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:24:39,258 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:24:39,258 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:24:39,259 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:24:39,260 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:24:39,260 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:24:39,262 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:24:39,264 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:24:39,264 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:24:39,265 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:24:39,265 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:24:39,313 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:24:39,313 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:24:39,313 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:39,314 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:39,314 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:39,327 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:24:39,333 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:24:39,339 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:24:39,344 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:24:39,350 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:24:39,357 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:24:39,369 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:24:39,375 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:24:39,399 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:24:39,415 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:24:39,438 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:24:39,455 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:24:39,476 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:24:39,496 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:24:39,514 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:24:39,526 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:24:39,544 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:24:39,556 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:24:39,575 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:24:39,586 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:24:39,607 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:24:39,625 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:24:39,646 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:24:39,670 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:24:39,673 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:24:39,677 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:24:39,680 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:24:39,683 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:24:39,686 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:24:39,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:24:39,691 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:24:39,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:24:39,697 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:24:39,701 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:24:39,705 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:24:39,708 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:24:39,711 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:24:39,715 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:24:39,717 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:24:39,733 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:24:39,737 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:24:39,739 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:24:39,739 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:24:39,740 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:24:39,740 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:24:39,740 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:24:39,740 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:24:39,741 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:24:39,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:24:39,742 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:24:39,742 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:24:39,751 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:24:39,752 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:24:39,752 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:24:39,752 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:24:39,754 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:24:39,756 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:24:39,756 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:24:39,756 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:24:39,756 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:24:39,757 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:24:39,759 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:24:39,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:24:39,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:24:39,806 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:24:39,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:24:39,842 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:24:39,852 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:24:39,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:24:39,919 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:24:39,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:24:39,974 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 21:24:39,985 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:24:39,995 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:24:40,024 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:24:40,034 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:24:40,051 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:24:40,095 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,135 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:24:40,170 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:24:40,194 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,235 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:24:40,328 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,350 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,372 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:24:40,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:24:40,415 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:24:40,447 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:24:40,475 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:24:40,508 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:24:40,536 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:24:40,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:24:40,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:24:40,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:24:40,626 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:24:40,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:24:40,668 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:24:40,686 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:24:40,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:24:40,726 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:24:40,747 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 21:24:40,747 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:24:40,748 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:24:40,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:24:40,750 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:24:40,750 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 21:24:40,751 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:24:40,751 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:24:40,751 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:24:40,751 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:24:40,751 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:24:40,752 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:24:40,752 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:24:40,752 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:40,753 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 21:24:40,753 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:40,759 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:40,759 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:40,760 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:40,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:24:40,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:24:40,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:24:40,786 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:24:40,789 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:24:40,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:24:40,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:24:40,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:24:40,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:24:40,793 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:24:40,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:24:40,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:24:40,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:24:40,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:24:40,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:24:40,800 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:24:40,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:24:40,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:24:40,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:24:40,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:24:40,808 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:24:40,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:24:40,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:24:40,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:24:40,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:24:40,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:24:40,814 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:24:40,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:24:40,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:24:40,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:24:40,818 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:24:40,819 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:40,819 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 21:24:40,819 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:40,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:24:40.878, foo, 2016-07-05 21:24:40.878, foo, 0}
2016-07-05 21:24:40,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:24:40.88, foo, 2016-07-05 21:24:40.88, foo, 0}
2016-07-05 21:24:40,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:24:40.881, foo, 2016-07-05 21:24:40.881, foo, 0}
2016-07-05 21:24:40,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:24:40.881, foo, 2016-07-05 21:24:40.881, foo, 0}
2016-07-05 21:24:40,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:24:40.882, foo, 2016-07-05 21:24:40.882, foo, 0}
2016-07-05 21:24:40,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:24:40.883, foo, 2016-07-05 21:24:40.883, foo, 0}
2016-07-05 21:24:40,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:24:40.884, foo, 2016-07-05 21:24:40.884, foo, 0}
2016-07-05 21:24:40,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:24:40.885, foo, 2016-07-05 21:24:40.885, foo, 0}
2016-07-05 21:24:40,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:24:40.886, foo, 2016-07-05 21:24:40.886, foo, 0}
2016-07-05 21:24:40,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:24:40.888, foo, 2016-07-05 21:24:40.888, foo, 0}
2016-07-05 21:24:40,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:24:40.889, foo, 2016-07-05 21:24:40.889, foo, 0}
2016-07-05 21:24:40,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:24:40.89, foo, 2016-07-05 21:24:40.89, foo, 0}
2016-07-05 21:24:40,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:24:40.891, foo, 2016-07-05 21:24:40.891, foo, 0}
2016-07-05 21:24:40,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:24:40.892, foo, 2016-07-05 21:24:40.892, foo, 0}
2016-07-05 21:24:40,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:24:40.892, foo, 2016-07-05 21:24:40.892, foo, 0}
2016-07-05 21:24:40,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:24:40.893, foo, 2016-07-05 21:24:40.893, foo, 0}
2016-07-05 21:24:40,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:24:40.894, foo, 2016-07-05 21:24:40.894, foo, 0}
2016-07-05 21:24:40,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:24:40.894, foo, 2016-07-05 21:24:40.894, foo, 0}
2016-07-05 21:24:40,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:24:40.895, foo, 2016-07-05 21:24:40.895, foo, 0}
2016-07-05 21:24:40,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:24:40.896, foo, 2016-07-05 21:24:40.896, foo, 0}
2016-07-05 21:24:40,913 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:24:40,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:24:40.914, foo, 2016-07-05 21:24:40.914, foo, 0}
2016-07-05 21:24:40,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:24:40.915, foo, 2016-07-05 21:24:40.915, foo, 0}
2016-07-05 21:24:40,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:24:40.917, foo, 2016-07-05 21:24:40.917, foo, 0}
2016-07-05 21:24:40,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:24:40.917, foo, 2016-07-05 21:24:40.917, foo, 0}
2016-07-05 21:24:40,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:24:40.918, foo, 2016-07-05 21:24:40.918, foo, 0}
2016-07-05 21:24:40,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:24:40.919, foo, 2016-07-05 21:24:40.919, foo, 0}
2016-07-05 21:24:40,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:24:40.919, foo, 2016-07-05 21:24:40.919, foo, 0}
2016-07-05 21:24:40,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:24:40.92, foo, 2016-07-05 21:24:40.92, foo, 0}
2016-07-05 21:24:40,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:24:40.921, foo, 2016-07-05 21:24:40.921, foo, 0}
2016-07-05 21:24:40,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:24:40.921, foo, 2016-07-05 21:24:40.921, foo, 0}
2016-07-05 21:24:40,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:24:40.922, foo, 2016-07-05 21:24:40.922, foo, 0}
2016-07-05 21:24:40,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:24:40.923, foo, 2016-07-05 21:24:40.923, foo, 0}
2016-07-05 21:24:40,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:24:40.924, foo, 2016-07-05 21:24:40.924, foo, 0}
2016-07-05 21:24:40,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:24:40.925, foo, 2016-07-05 21:24:40.925, foo, 0}
2016-07-05 21:24:40,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:24:40.925, foo, 2016-07-05 21:24:40.925, foo, 0}
2016-07-05 21:24:40,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:24:40.926, foo, 2016-07-05 21:24:40.926, foo, 0}
2016-07-05 21:24:40,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:24:40.927, foo, 2016-07-05 21:24:40.927, foo, 0}
2016-07-05 21:24:40,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:24:40.928, foo, 2016-07-05 21:24:40.928, foo, 0}
2016-07-05 21:24:40,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:24:40.928, foo, 2016-07-05 21:24:40.928, foo, 0}
2016-07-05 21:24:40,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:24:40.929, foo, 2016-07-05 21:24:40.929, foo, 0}
2016-07-05 21:24:40,945 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:24:40,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:24:40,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:24:40,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:24:40,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:24:40,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:24:40,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:24:40,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:24:40,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:24:40,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:24:40,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:24:40,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:24:40,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:24:40,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:24:40,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:24:40,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:24:40,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:24:40,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:24:40,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:24:40,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:24:40,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:24:40,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:24:40,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:24:40,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:24:40,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:24:40,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:24:40,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:24:40,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:24:40,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:24:40,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:24:40,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:24:40,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:24:40,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:24:40,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:24:40,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:24:40,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:24:40,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:24:40,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:24:40,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:24:40,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:24:40,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:24:40,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:24:40,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:24:40,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:24:40,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:24:40,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:24:40,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:24:40,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:24:40,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:24:40,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:24:40,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:24:40,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:24:40,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:24:40,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:24:40,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:24:40,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:24:40,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:24:41,027 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:24:41,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:24:41.028, foo, 2016-07-05 21:24:41.028, foo, 0}
2016-07-05 21:24:41,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:24:41.029, foo, 2016-07-05 21:24:41.029, foo, 0}
2016-07-05 21:24:41,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:24:41.03, foo, 2016-07-05 21:24:41.03, foo, 0}
2016-07-05 21:24:41,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:24:41.03, foo, 2016-07-05 21:24:41.03, foo, 0}
2016-07-05 21:24:41,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:24:41.031, foo, 2016-07-05 21:24:41.031, foo, 0}
2016-07-05 21:24:41,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:24:41.032, foo, 2016-07-05 21:24:41.032, foo, 0}
2016-07-05 21:24:41,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:24:41.033, foo, 2016-07-05 21:24:41.033, foo, 0}
2016-07-05 21:24:41,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:24:41.034, foo, 2016-07-05 21:24:41.034, foo, 0}
2016-07-05 21:24:41,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:24:41.035, foo, 2016-07-05 21:24:41.035, foo, 0}
2016-07-05 21:24:41,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:24:41.036, foo, 2016-07-05 21:24:41.036, foo, 0}
2016-07-05 21:24:41,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:24:41.038, foo, 2016-07-05 21:24:41.038, foo, 0}
2016-07-05 21:24:41,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:24:41.041, foo, 2016-07-05 21:24:41.041, foo, 0}
2016-07-05 21:24:41,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:24:41.042, foo, 2016-07-05 21:24:41.042, foo, 0}
2016-07-05 21:24:41,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:24:41.042, foo, 2016-07-05 21:24:41.042, foo, 0}
2016-07-05 21:24:41,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:24:41.043, foo, 2016-07-05 21:24:41.043, foo, 0}
2016-07-05 21:24:41,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:24:41.043, foo, 2016-07-05 21:24:41.043, foo, 0}
2016-07-05 21:24:41,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:24:41.044, foo, 2016-07-05 21:24:41.044, foo, 0}
2016-07-05 21:24:41,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:24:41.044, foo, 2016-07-05 21:24:41.044, foo, 0}
2016-07-05 21:24:41,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:24:41.045, foo, 2016-07-05 21:24:41.045, foo, 0}
2016-07-05 21:24:41,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:24:41.066, foo, 2016-07-05 21:24:41.066, foo, 0}
2016-07-05 21:24:41,088 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:24:41,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:24:41.09, foo, 2016-07-05 21:24:41.09, foo, 0}
2016-07-05 21:24:41,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:24:41.091, foo, 2016-07-05 21:24:41.091, foo, 0}
2016-07-05 21:24:41,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:24:41.092, foo, 2016-07-05 21:24:41.092, foo, 0}
2016-07-05 21:24:41,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:24:41.092, foo, 2016-07-05 21:24:41.092, foo, 0}
2016-07-05 21:24:41,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:24:41.093, foo, 2016-07-05 21:24:41.093, foo, 0}
2016-07-05 21:24:41,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:24:41.093, foo, 2016-07-05 21:24:41.093, foo, 0}
2016-07-05 21:24:41,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:24:41.094, foo, 2016-07-05 21:24:41.094, foo, 0}
2016-07-05 21:24:41,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:24:41.094, foo, 2016-07-05 21:24:41.094, foo, 0}
2016-07-05 21:24:41,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:24:41.095, foo, 2016-07-05 21:24:41.095, foo, 0}
2016-07-05 21:24:41,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:24:41.11, foo, 2016-07-05 21:24:41.11, foo, 0}
2016-07-05 21:24:41,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:24:41.11, foo, 2016-07-05 21:24:41.11, foo, 0}
2016-07-05 21:24:41,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:24:41.111, foo, 2016-07-05 21:24:41.111, foo, 0}
2016-07-05 21:24:41,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:24:41.111, foo, 2016-07-05 21:24:41.111, foo, 0}
2016-07-05 21:24:41,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:24:41.111, foo, 2016-07-05 21:24:41.111, foo, 0}
2016-07-05 21:24:41,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:24:41.112, foo, 2016-07-05 21:24:41.112, foo, 0}
2016-07-05 21:24:41,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:24:41.112, foo, 2016-07-05 21:24:41.112, foo, 0}
2016-07-05 21:24:41,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:24:41.113, foo, 2016-07-05 21:24:41.113, foo, 0}
2016-07-05 21:24:41,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:24:41.113, foo, 2016-07-05 21:24:41.113, foo, 0}
2016-07-05 21:24:41,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:24:41.113, foo, 2016-07-05 21:24:41.113, foo, 0}
2016-07-05 21:24:41,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:24:41.114, foo, 2016-07-05 21:24:41.114, foo, 0}
2016-07-05 21:24:41,128 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:24:41,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:24:41.129, foo, 2016-07-05 21:24:41.129, foo}
2016-07-05 21:24:41,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:24:41.13, foo, 2016-07-05 21:24:41.13, foo}
2016-07-05 21:24:41,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:24:41.131, foo, 2016-07-05 21:24:41.131, foo}
2016-07-05 21:24:41,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:24:41.132, foo, 2016-07-05 21:24:41.132, foo}
2016-07-05 21:24:41,138 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:24:41,138 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:24:41,139 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 21:24:41,139 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:24:41,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:24:41.173, foo, 2016-07-05 21:24:41.173, foo, 0}
2016-07-05 21:24:41,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:24:41.174, foo, 2016-07-05 21:24:41.174, foo, 0}
2016-07-05 21:24:41,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:24:41.175, foo, 2016-07-05 21:24:41.175, foo, 0}
2016-07-05 21:24:41,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:24:41.175, foo, 2016-07-05 21:24:41.175, foo, 0}
2016-07-05 21:24:41,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:24:41.176, foo, 2016-07-05 21:24:41.176, foo, 0}
2016-07-05 21:24:41,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:24:41.177, foo, 2016-07-05 21:24:41.177, foo, 0}
2016-07-05 21:24:41,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:24:41.178, foo, 2016-07-05 21:24:41.178, foo, 0}
2016-07-05 21:24:41,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:24:41.178, foo, 2016-07-05 21:24:41.179, foo, 0}
2016-07-05 21:24:41,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:24:41.179, foo, 2016-07-05 21:24:41.179, foo, 0}
2016-07-05 21:24:41,183 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:24:41.183, foo, 2016-07-05 21:24:41.183, foo, 0}
2016-07-05 21:24:41,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:24:41.184, foo, 2016-07-05 21:24:41.185, foo, 0}
2016-07-05 21:24:41,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:24:41.186, foo, 2016-07-05 21:24:41.186, foo, 0}
2016-07-05 21:24:41,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:24:41.188, foo, 2016-07-05 21:24:41.188, foo, 0}
2016-07-05 21:24:41,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:24:41.189, foo, 2016-07-05 21:24:41.189, foo, 0}
2016-07-05 21:24:41,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:24:41.19, foo, 2016-07-05 21:24:41.19, foo, 0}
2016-07-05 21:24:41,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:24:41.191, foo, 2016-07-05 21:24:41.191, foo, 0}
2016-07-05 21:24:41,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:24:41.191, foo, 2016-07-05 21:24:41.191, foo, 0}
2016-07-05 21:24:41,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:24:41.192, foo, 2016-07-05 21:24:41.192, foo, 0}
2016-07-05 21:24:41,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:24:41.192, foo, 2016-07-05 21:24:41.192, foo, 0}
2016-07-05 21:24:41,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:24:41.192, foo, 2016-07-05 21:24:41.192, foo, 0}
2016-07-05 21:24:41,211 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:24:41,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:24:41.212, foo, 2016-07-05 21:24:41.212, foo, 0}
2016-07-05 21:24:41,213 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:24:41.213, foo, 2016-07-05 21:24:41.213, foo, 0}
2016-07-05 21:24:41,214 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:24:41.214, foo, 2016-07-05 21:24:41.214, foo, 0}
2016-07-05 21:24:41,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:24:41.215, foo, 2016-07-05 21:24:41.215, foo, 0}
2016-07-05 21:24:41,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:24:41.216, foo, 2016-07-05 21:24:41.216, foo, 0}
2016-07-05 21:24:41,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:24:41.217, foo, 2016-07-05 21:24:41.217, foo, 0}
2016-07-05 21:24:41,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:24:41.217, foo, 2016-07-05 21:24:41.217, foo, 0}
2016-07-05 21:24:41,218 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:24:41.218, foo, 2016-07-05 21:24:41.218, foo, 0}
2016-07-05 21:24:41,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:24:41.219, foo, 2016-07-05 21:24:41.219, foo, 0}
2016-07-05 21:24:41,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:24:41.219, foo, 2016-07-05 21:24:41.219, foo, 0}
2016-07-05 21:24:41,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:24:41.223, foo, 2016-07-05 21:24:41.223, foo, 0}
2016-07-05 21:24:41,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:24:41.224, foo, 2016-07-05 21:24:41.224, foo, 0}
2016-07-05 21:24:41,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:24:41.225, foo, 2016-07-05 21:24:41.225, foo, 0}
2016-07-05 21:24:41,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:24:41.226, foo, 2016-07-05 21:24:41.226, foo, 0}
2016-07-05 21:24:41,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:24:41.226, foo, 2016-07-05 21:24:41.226, foo, 0}
2016-07-05 21:24:41,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:24:41.227, foo, 2016-07-05 21:24:41.227, foo, 0}
2016-07-05 21:24:41,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:24:41.228, foo, 2016-07-05 21:24:41.228, foo, 0}
2016-07-05 21:24:41,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:24:41.229, foo, 2016-07-05 21:24:41.229, foo, 0}
2016-07-05 21:24:41,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:24:41.23, foo, 2016-07-05 21:24:41.23, foo, 0}
2016-07-05 21:24:41,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:24:41.23, foo, 2016-07-05 21:24:41.23, foo, 0}
2016-07-05 21:24:41,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:24:41.231, foo, 2016-07-05 21:24:41.231, foo, 0}
2016-07-05 21:24:41,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:24:41.232, foo, 2016-07-05 21:24:41.232, foo, 0}
2016-07-05 21:24:41,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:24:41.233, foo, 2016-07-05 21:24:41.233, foo, 0}
2016-07-05 21:24:41,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:24:41.235, foo, 2016-07-05 21:24:41.235, foo, 0}
2016-07-05 21:24:41,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:24:41.236, foo, 2016-07-05 21:24:41.236, foo, 0}
2016-07-05 21:24:41,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:24:41.239, foo, 2016-07-05 21:24:41.239, foo, 0}
2016-07-05 21:24:41,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:24:41.24, foo, 2016-07-05 21:24:41.24, foo, 0}
2016-07-05 21:24:41,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:24:41.241, foo, 2016-07-05 21:24:41.241, foo, 0}
2016-07-05 21:24:41,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:24:41.242, foo, 2016-07-05 21:24:41.242, foo, 0}
2016-07-05 21:24:41,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:24:41.244, foo, 2016-07-05 21:24:41.244, foo, 0}
2016-07-05 21:24:41,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:24:41.244, foo, 2016-07-05 21:24:41.244, foo, 0}
2016-07-05 21:24:41,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:24:41.245, foo, 2016-07-05 21:24:41.245, foo, 0}
2016-07-05 21:24:41,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:41.246, foo, 2016-07-05 21:24:41.246, foo, 0}
2016-07-05 21:24:41,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:41.247, foo, 2016-07-05 21:24:41.247, foo, 0}
2016-07-05 21:24:41,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:24:41.248, foo, 2016-07-05 21:24:41.248, foo, 0}
2016-07-05 21:24:41,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:41.255, foo, 2016-07-05 21:24:41.255, foo, 0}
2016-07-05 21:24:41,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:24:41.255, foo, 2016-07-05 21:24:41.255, foo, 0}
2016-07-05 21:24:41,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:24:41.256, foo, 2016-07-05 21:24:41.256, foo, 0}
2016-07-05 21:24:41,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:24:41.257, foo, 2016-07-05 21:24:41.257, foo, 0}
2016-07-05 21:24:41,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:24:41.258, foo, 2016-07-05 21:24:41.258, foo, 0}
2016-07-05 21:24:41,259 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:24:41.259, foo, 2016-07-05 21:24:41.259, foo, 0}
2016-07-05 21:24:41,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:24:41.26, foo, 2016-07-05 21:24:41.26, foo, 0}
2016-07-05 21:24:41,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:24:41.261, foo, 2016-07-05 21:24:41.261, foo, 0}
2016-07-05 21:24:41,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:41.262, foo, 2016-07-05 21:24:41.262, foo, 0}
2016-07-05 21:24:41,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:41.263, foo, 2016-07-05 21:24:41.263, foo, 0}
2016-07-05 21:24:41,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:24:41.264, foo, 2016-07-05 21:24:41.264, foo, 0}
2016-07-05 21:24:41,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:41.265, foo, 2016-07-05 21:24:41.265, foo, 0}
2016-07-05 21:24:41,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:24:41.266, foo, 2016-07-05 21:24:41.266, foo, 0}
2016-07-05 21:24:41,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:24:41.268, foo, 2016-07-05 21:24:41.268, foo, 0}
2016-07-05 21:24:41,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:24:41.269, foo, 2016-07-05 21:24:41.269, foo, 0}
2016-07-05 21:24:41,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:24:41.271, foo, 2016-07-05 21:24:41.271, foo, 0}
2016-07-05 21:24:41,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:24:41.274, foo, 2016-07-05 21:24:41.274, foo, 0}
2016-07-05 21:24:41,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:24:41.275, foo, 2016-07-05 21:24:41.275, foo, 0}
2016-07-05 21:24:41,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:24:41.276, foo, 2016-07-05 21:24:41.276, foo, 0}
2016-07-05 21:24:41,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:24:41.277, foo, 2016-07-05 21:24:41.277, foo, 0}
2016-07-05 21:24:41,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:24:41.278, foo, 2016-07-05 21:24:41.278, foo, 0}
2016-07-05 21:24:41,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:24:41.279, foo, 2016-07-05 21:24:41.279, foo, 0}
2016-07-05 21:24:41,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:24:41.28, foo, 2016-07-05 21:24:41.28, foo, 0}
2016-07-05 21:24:41,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:24:41.284, foo, 2016-07-05 21:24:41.284, foo, 0}
2016-07-05 21:24:41,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:24:41.285, foo, 2016-07-05 21:24:41.285, foo, 0}
2016-07-05 21:24:41,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:24:41.285, foo, 2016-07-05 21:24:41.285, foo, 0}
2016-07-05 21:24:41,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:24:41.286, foo, 2016-07-05 21:24:41.286, foo, 0}
2016-07-05 21:24:41,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:24:41.287, foo, 2016-07-05 21:24:41.287, foo, 0}
2016-07-05 21:24:41,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:24:41.288, foo, 2016-07-05 21:24:41.288, foo, 0}
2016-07-05 21:24:41,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:24:41.288, foo, 2016-07-05 21:24:41.288, foo, 0}
2016-07-05 21:24:41,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:24:41.289, foo, 2016-07-05 21:24:41.289, foo, 0}
2016-07-05 21:24:41,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:24:41.29, foo, 2016-07-05 21:24:41.29, foo, 0}
2016-07-05 21:24:41,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:24:41.29, foo, 2016-07-05 21:24:41.29, foo, 0}
2016-07-05 21:24:41,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:24:41.291, foo, 2016-07-05 21:24:41.291, foo, 0}
2016-07-05 21:24:41,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:24:41.292, foo, 2016-07-05 21:24:41.292, foo, 0}
2016-07-05 21:24:41,342 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:24:41,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:24:41.343, foo, 2016-07-05 21:24:41.343, foo}
2016-07-05 21:24:41,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:24:41.345, foo, 2016-07-05 21:24:41.345, foo}
2016-07-05 21:24:41,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:24:41.345, foo, 2016-07-05 21:24:41.345, foo}
2016-07-05 21:24:41,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:24:41.346, foo, 2016-07-05 21:24:41.346, foo}
2016-07-05 21:24:41,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:24:41.346, foo, 2016-07-05 21:24:41.346, foo}
2016-07-05 21:24:41,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:24:41.347, foo, 2016-07-05 21:24:41.347, foo}
2016-07-05 21:24:41,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:24:41.347, foo, 2016-07-05 21:24:41.347, foo}
2016-07-05 21:24:41,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:24:41.348, foo, 2016-07-05 21:24:41.348, foo}
2016-07-05 21:24:41,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:24:41.349, foo, 2016-07-05 21:24:41.349, foo}
2016-07-05 21:24:41,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:24:41.349, foo, 2016-07-05 21:24:41.349, foo}
2016-07-05 21:24:41,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:24:41.35, foo, 2016-07-05 21:24:41.35, foo}
2016-07-05 21:24:41,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:24:41.35, foo, 2016-07-05 21:24:41.35, foo}
2016-07-05 21:24:41,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:24:41.351, foo, 2016-07-05 21:24:41.351, foo}
2016-07-05 21:24:41,351 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:24:41.351, foo, 2016-07-05 21:24:41.351, foo}
2016-07-05 21:24:41,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:24:41.351, foo, 2016-07-05 21:24:41.351, foo}
2016-07-05 21:24:41,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:24:41.352, foo, 2016-07-05 21:24:41.352, foo}
2016-07-05 21:24:41,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:24:41.352, foo, 2016-07-05 21:24:41.352, foo}
2016-07-05 21:24:41,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:24:41.353, foo, 2016-07-05 21:24:41.353, foo}
2016-07-05 21:24:41,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:24:41.354, foo, 2016-07-05 21:24:41.354, foo}
2016-07-05 21:24:41,354 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:24:41.354, foo, 2016-07-05 21:24:41.354, foo}
2016-07-05 21:24:41,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:24:41.355, foo, 2016-07-05 21:24:41.355, foo}
2016-07-05 21:24:41,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:24:41.355, foo, 2016-07-05 21:24:41.355, foo}
2016-07-05 21:24:41,356 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:24:41.356, foo, 2016-07-05 21:24:41.356, foo}
2016-07-05 21:24:41,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:24:41.357, foo, 2016-07-05 21:24:41.357, foo}
2016-07-05 21:24:41,357 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:24:41.357, foo, 2016-07-05 21:24:41.357, foo}
2016-07-05 21:24:41,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:24:41.358, foo, 2016-07-05 21:24:41.358, foo}
2016-07-05 21:24:41,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:24:41.358, foo, 2016-07-05 21:24:41.358, foo}
2016-07-05 21:24:41,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:24:41.359, foo, 2016-07-05 21:24:41.359, foo}
2016-07-05 21:24:41,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:24:41.36, foo, 2016-07-05 21:24:41.36, foo}
2016-07-05 21:24:41,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:41.36, foo, 2016-07-05 21:24:41.36, foo}
2016-07-05 21:24:41,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:41.361, foo, 2016-07-05 21:24:41.361, foo}
2016-07-05 21:24:41,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:24:41.361, foo, 2016-07-05 21:24:41.361, foo}
2016-07-05 21:24:41,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:24:41.362, foo, 2016-07-05 21:24:41.362, foo}
2016-07-05 21:24:41,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:24:41.362, foo, 2016-07-05 21:24:41.362, foo}
2016-07-05 21:24:41,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:24:41.363, foo, 2016-07-05 21:24:41.363, foo}
2016-07-05 21:24:41,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:24:41.364, foo, 2016-07-05 21:24:41.364, foo}
2016-07-05 21:24:41,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:24:41.364, foo, 2016-07-05 21:24:41.364, foo}
2016-07-05 21:24:41,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:24:41.365, foo, 2016-07-05 21:24:41.365, foo}
2016-07-05 21:24:41,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:24:41.365, foo, 2016-07-05 21:24:41.365, foo}
2016-07-05 21:24:41,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:24:41.366, foo, 2016-07-05 21:24:41.366, foo}
2016-07-05 21:24:41,366 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:24:41.366, foo, 2016-07-05 21:24:41.366, foo}
2016-07-05 21:24:41,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:24:41.367, foo, 2016-07-05 21:24:41.367, foo}
2016-07-05 21:24:41,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:24:41.367, foo, 2016-07-05 21:24:41.367, foo}
2016-07-05 21:24:41,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:24:41.368, foo, 2016-07-05 21:24:41.368, foo}
2016-07-05 21:24:41,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:24:41.368, foo, 2016-07-05 21:24:41.368, foo}
2016-07-05 21:24:41,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:24:41.369, foo, 2016-07-05 21:24:41.369, foo}
2016-07-05 21:24:41,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:24:41.369, foo, 2016-07-05 21:24:41.369, foo}
2016-07-05 21:24:41,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:24:41.37, foo, 2016-07-05 21:24:41.37, foo}
2016-07-05 21:24:41,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:24:41.37, foo, 2016-07-05 21:24:41.37, foo}
2016-07-05 21:24:41,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:24:41.371, foo, 2016-07-05 21:24:41.371, foo}
2016-07-05 21:24:41,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:24:41.372, foo, 2016-07-05 21:24:41.372, foo}
2016-07-05 21:24:41,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:24:41.372, foo, 2016-07-05 21:24:41.372, foo}
2016-07-05 21:24:41,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:24:41.373, foo, 2016-07-05 21:24:41.373, foo}
2016-07-05 21:24:41,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:41.374, foo, 2016-07-05 21:24:41.374, foo}
2016-07-05 21:24:41,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:24:41.374, foo, 2016-07-05 21:24:41.374, foo}
2016-07-05 21:24:41,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:24:41.381, foo, 2016-07-05 21:24:41.381, foo}
2016-07-05 21:24:41,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:24:41.383, foo, 2016-07-05 21:24:41.383, foo}
2016-07-05 21:24:41,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:24:41.384, foo, 2016-07-05 21:24:41.384, foo}
2016-07-05 21:24:41,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:24:41.385, foo, 2016-07-05 21:24:41.385, foo}
2016-07-05 21:24:41,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:24:41.387, foo, 2016-07-05 21:24:41.387, foo}
2016-07-05 21:24:41,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:24:41.388, foo, 2016-07-05 21:24:41.388, foo}
2016-07-05 21:24:41,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:24:41.389, foo, 2016-07-05 21:24:41.389, foo}
2016-07-05 21:24:41,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:24:41.391, foo, 2016-07-05 21:24:41.391, foo}
2016-07-05 21:24:41,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:24:41.392, foo, 2016-07-05 21:24:41.392, foo}
2016-07-05 21:24:41,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:41.392, foo, 2016-07-05 21:24:41.392, foo}
2016-07-05 21:24:41,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:24:41.393, foo, 2016-07-05 21:24:41.393, foo}
2016-07-05 21:24:41,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:24:41.393, foo, 2016-07-05 21:24:41.393, foo}
2016-07-05 21:24:41,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:24:41.394, foo, 2016-07-05 21:24:41.394, foo}
2016-07-05 21:24:41,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:24:41.395, foo, 2016-07-05 21:24:41.395, foo}
2016-07-05 21:24:41,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:24:41.395, foo, 2016-07-05 21:24:41.395, foo}
2016-07-05 21:24:41,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:24:41.396, foo, 2016-07-05 21:24:41.396, foo}
2016-07-05 21:24:41,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:24:41.397, foo, 2016-07-05 21:24:41.397, foo}
2016-07-05 21:24:41,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:24:41.398, foo, 2016-07-05 21:24:41.398, foo}
2016-07-05 21:24:41,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:24:41.398, foo, 2016-07-05 21:24:41.398, foo}
2016-07-05 21:24:41,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:24:41.399, foo, 2016-07-05 21:24:41.399, foo}
2016-07-05 21:24:41,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:24:41.399, foo, 2016-07-05 21:24:41.399, foo}
2016-07-05 21:24:41,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:24:41.4, foo, 2016-07-05 21:24:41.4, foo}
2016-07-05 21:24:41,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:24:41.401, foo, 2016-07-05 21:24:41.401, foo}
2016-07-05 21:24:41,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:24:41.401, foo, 2016-07-05 21:24:41.401, foo}
2016-07-05 21:24:41,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:24:41.402, foo, 2016-07-05 21:24:41.402, foo}
2016-07-05 21:24:41,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:24:41.403, foo, 2016-07-05 21:24:41.403, foo}
2016-07-05 21:24:41,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:24:41.404, foo, 2016-07-05 21:24:41.404, foo}
2016-07-05 21:24:41,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:41.405, foo, 2016-07-05 21:24:41.405, foo}
2016-07-05 21:24:41,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:41.406, foo, 2016-07-05 21:24:41.406, foo}
2016-07-05 21:24:41,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:41.407, foo, 2016-07-05 21:24:41.407, foo}
2016-07-05 21:24:41,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:24:41.408, foo, 2016-07-05 21:24:41.408, foo}
2016-07-05 21:24:41,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:24:41.409, foo, 2016-07-05 21:24:41.409, foo}
2016-07-05 21:24:41,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:24:41.409, foo, 2016-07-05 21:24:41.409, foo}
2016-07-05 21:24:41,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:24:41.41, foo, 2016-07-05 21:24:41.41, foo}
2016-07-05 21:24:41,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:24:41.419, foo, 2016-07-05 21:24:41.419, foo}
2016-07-05 21:24:41,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:24:41.419, foo, 2016-07-05 21:24:41.419, foo}
2016-07-05 21:24:41,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:24:41.42, foo, 2016-07-05 21:24:41.42, foo}
2016-07-05 21:24:41,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:24:41.421, foo, 2016-07-05 21:24:41.421, foo}
2016-07-05 21:24:41,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:24:41.422, foo, 2016-07-05 21:24:41.422, foo}
2016-07-05 21:24:41,422 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:24:41.422, foo, 2016-07-05 21:24:41.422, foo}
2016-07-05 21:24:41,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:24:41.429, foo, 2016-07-05 21:24:41.429, foo}
2016-07-05 21:24:41,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:24:41.438, foo, 2016-07-05 21:24:41.438, foo}
2016-07-05 21:24:41,440 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:24:41.44, foo, 2016-07-05 21:24:41.44, foo}
2016-07-05 21:24:41,441 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:24:41.441, foo, 2016-07-05 21:24:41.441, foo}
2016-07-05 21:24:41,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:24:41.442, foo, 2016-07-05 21:24:41.442, foo}
2016-07-05 21:24:41,490 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:24:41,491 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:24:41,491 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:24:41,491 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:24:41,492 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:24:41,492 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:24:41,492 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:24:41,492 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:24:41,493 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:24:41,495 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:24:41,496 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:24:41,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:24:41,500 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:24:41,500 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:24:41,502 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:24:41,505 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 21:24:41,506 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 21:24:41,507 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 21:24:41,507 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 21:24:41,507 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 21:24:41,507 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 21:24:41,512 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 21:24:41,513 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column for display order
alter table PRODUCT_STATUS add DISPLAY_ORDER INTEGER NOT NULL after PRODUCT_STATUS_NAME
2016-07-05 21:24:41,561 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 1 where PRODUCT_STATUS_CODE= 'ONS'
2016-07-05 21:24:41,563 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 2 where PRODUCT_STATUS_CODE= 'PST'
2016-07-05 21:24:41,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 3 where PRODUCT_STATUS_CODE= 'SST'
2016-07-05 21:24:41,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint unique(DISPLAY_ORDER)
2016-07-05 21:24:41,582 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=5 failure=0
2016-07-05 21:24:41,582 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=5 failure=0 (in 1 files)
2016-07-05 21:24:41,583 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:24:41,583 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:24:41,583 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:24:41,583 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:24:41,584 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:24:41,584 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:24:41,584 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 21:24:41,585 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:24:41,585 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:24:41,585 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:24:41,585 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:24:41,585 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:24:41,586 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:24:41,587 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:24:41,589 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:24:41,591 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:24:41,594 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:24:41,595 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:24:41,595 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:24:41,596 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:24:41,610 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:24:41,625 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:24:41,632 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:24:41,648 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:24:41,660 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:24:41,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:24:41,682 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:24:41,693 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:24:41,700 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:24:41,711 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:24:41,723 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:24:41,731 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:24:41,740 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:24:41,748 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:24:41,754 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:24:41,755 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:24:41,755 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 15
2016-07-05 21:24:41,755 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:24:41,755 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:24:41,756 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:24:41,756 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:24:41,756 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:24:41,756 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:24:41,763 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck diffmap file: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:24:41,764 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck result file: playsql/migration/schema/alter-check-result.html
2016-07-05 21:24:41,764 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 21:24:41,764 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 21:24:41,765 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 21:24:41,765 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 21:24:41,789 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 21:24:41,789 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 21:24:41,802 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:24:41,910 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:24:42,006 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 21:24:42,006 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 21:24:42,006 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 21:24:42,007 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 21:24:42,007 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 21:24:42,007 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 21:24:42,009 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:24:42,012 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 21:24:42,014 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:24:42,015 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:24:42,063 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 21:24:42,064 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 21:24:42,073 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 21:24:42,274 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 21:24:42,281 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 21:24:42,282 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 21:24:42,284 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 21:24:42,356 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:24:42,412 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 21:24:41

[Table Count]
15 to 16
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 21:24:42,453 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:24:42,455 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m08s927ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=5 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:29:09,882 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:29:09,888 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:29:09,889 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:29:09,896 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:29:09,896 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:29:09,897 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:29:09,899 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:29:11,348 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:29:11,349 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:29:11,349 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:29:11,350 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:29:11,358 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:29:11,794 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:29:11,794 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:29:11,810 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 21:29:11,821 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:29:11,824 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:29:11,825 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:29:11,826 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:29:11,827 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:29:11,827 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:29:11,838 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:29:11,838 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:29:11,839 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:29:11,839 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:29:11,839 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:29:11,840 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:29:11,857 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:11,858 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:11,859 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:11,891 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:29:11,899 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:29:11,910 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:29:11,915 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:29:11,925 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:29:11,940 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:29:11,959 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:29:11,984 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:29:11,999 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:29:12,022 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:29:12,039 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:29:12,064 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:29:12,083 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:29:12,099 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:29:12,114 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:29:12,130 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:29:12,152 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:29:12,169 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:29:12,182 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:29:12,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:29:12,219 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:29:12,241 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:29:12,268 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:29:12,272 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:29:12,275 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:29:12,280 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:29:12,283 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:29:12,287 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:29:12,290 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:29:12,294 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:29:12,299 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:29:12,302 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:29:12,306 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:29:12,309 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:29:12,313 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:29:12,316 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:29:12,319 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:29:12,378 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:29:12,380 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:29:12,383 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:29:12,383 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:29:12,384 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:29:12,384 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:29:12,384 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:29:12,384 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:29:12,388 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:29:12,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:29:12,393 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:29:12,394 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:29:12,409 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:29:12,410 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:29:12,411 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:29:12,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:29:12,416 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:29:12,420 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:29:12,420 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:29:12,421 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:29:12,421 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:29:12,421 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:29:12,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:29:12,454 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:29:12,473 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:29:12,484 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:29:12,518 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:29:12,529 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:29:12,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:29:12,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:29:12,628 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:29:12,639 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:29:12,656 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:29:12,674 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:29:12,695 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:29:12,705 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:29:12,717 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:29:12,730 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:29:12,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:29:12,782 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:12,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:29:12,823 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:29:12,843 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:12,866 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:12,894 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:29:12,913 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:12,939 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:12,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:29:12,989 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:13,020 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:29:13,048 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:29:13,073 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:29:13,096 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:29:13,115 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:29:13,137 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:29:13,167 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:29:13,192 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:29:13,208 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:29:13,228 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:29:13,253 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:29:13,269 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:29:13,290 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:29:13,308 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:29:13,329 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:29:13,329 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:29:13,331 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:29:13,334 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:29:13,336 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:29:13,337 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:29:13,337 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:29:13,466 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:29:13,466 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:29:13,466 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:29:13,467 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:29:13,467 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:29:13,467 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:29:13,500 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:13,501 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:29:13,501 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:13,794 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:13,794 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:13,794 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:13,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:29:13,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:29:13,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:29:13,940 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:29:13,945 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:29:13,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:29:13,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:29:13,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:29:13,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:29:13,953 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:29:13,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:29:13,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:29:13,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:29:13,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:29:13,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:29:13,964 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:29:13,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:29:13,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:29:13,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:29:13,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:29:13,972 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:29:13,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:29:13,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:29:13,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:29:13,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:29:13,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:29:13,981 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:29:13,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:29:13,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:29:13,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:29:13,988 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:29:13,991 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:13,992 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:29:13,992 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:14,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:29:14.102, foo, 2016-07-05 21:29:14.102, foo, 0}
2016-07-05 21:29:14,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:29:14.111, foo, 2016-07-05 21:29:14.111, foo, 0}
2016-07-05 21:29:14,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:29:14.113, foo, 2016-07-05 21:29:14.113, foo, 0}
2016-07-05 21:29:14,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:29:14.115, foo, 2016-07-05 21:29:14.115, foo, 0}
2016-07-05 21:29:14,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:29:14.117, foo, 2016-07-05 21:29:14.117, foo, 0}
2016-07-05 21:29:14,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:29:14.12, foo, 2016-07-05 21:29:14.12, foo, 0}
2016-07-05 21:29:14,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:29:14.123, foo, 2016-07-05 21:29:14.123, foo, 0}
2016-07-05 21:29:14,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:29:14.125, foo, 2016-07-05 21:29:14.125, foo, 0}
2016-07-05 21:29:14,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:29:14.127, foo, 2016-07-05 21:29:14.127, foo, 0}
2016-07-05 21:29:14,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:29:14.131, foo, 2016-07-05 21:29:14.131, foo, 0}
2016-07-05 21:29:14,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:29:14.132, foo, 2016-07-05 21:29:14.132, foo, 0}
2016-07-05 21:29:14,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:29:14.137, foo, 2016-07-05 21:29:14.137, foo, 0}
2016-07-05 21:29:14,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:29:14.139, foo, 2016-07-05 21:29:14.139, foo, 0}
2016-07-05 21:29:14,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:29:14.142, foo, 2016-07-05 21:29:14.142, foo, 0}
2016-07-05 21:29:14,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:29:14.144, foo, 2016-07-05 21:29:14.144, foo, 0}
2016-07-05 21:29:14,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:29:14.148, foo, 2016-07-05 21:29:14.148, foo, 0}
2016-07-05 21:29:14,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:29:14.149, foo, 2016-07-05 21:29:14.149, foo, 0}
2016-07-05 21:29:14,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:29:14.151, foo, 2016-07-05 21:29:14.151, foo, 0}
2016-07-05 21:29:14,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:29:14.154, foo, 2016-07-05 21:29:14.154, foo, 0}
2016-07-05 21:29:14,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:29:14.156, foo, 2016-07-05 21:29:14.156, foo, 0}
2016-07-05 21:29:14,181 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:29:14,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:29:14.183, foo, 2016-07-05 21:29:14.183, foo, 0}
2016-07-05 21:29:14,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:29:14.189, foo, 2016-07-05 21:29:14.189, foo, 0}
2016-07-05 21:29:14,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:29:14.191, foo, 2016-07-05 21:29:14.191, foo, 0}
2016-07-05 21:29:14,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:29:14.196, foo, 2016-07-05 21:29:14.196, foo, 0}
2016-07-05 21:29:14,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:29:14.2, foo, 2016-07-05 21:29:14.2, foo, 0}
2016-07-05 21:29:14,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:29:14.204, foo, 2016-07-05 21:29:14.204, foo, 0}
2016-07-05 21:29:14,207 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:29:14.206, foo, 2016-07-05 21:29:14.206, foo, 0}
2016-07-05 21:29:14,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:29:14.209, foo, 2016-07-05 21:29:14.209, foo, 0}
2016-07-05 21:29:14,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:29:14.212, foo, 2016-07-05 21:29:14.212, foo, 0}
2016-07-05 21:29:14,215 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:29:14.214, foo, 2016-07-05 21:29:14.215, foo, 0}
2016-07-05 21:29:14,217 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:29:14.217, foo, 2016-07-05 21:29:14.217, foo, 0}
2016-07-05 21:29:14,220 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:29:14.22, foo, 2016-07-05 21:29:14.22, foo, 0}
2016-07-05 21:29:14,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:29:14.221, foo, 2016-07-05 21:29:14.221, foo, 0}
2016-07-05 21:29:14,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:29:14.223, foo, 2016-07-05 21:29:14.223, foo, 0}
2016-07-05 21:29:14,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:29:14.225, foo, 2016-07-05 21:29:14.225, foo, 0}
2016-07-05 21:29:14,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:29:14.227, foo, 2016-07-05 21:29:14.227, foo, 0}
2016-07-05 21:29:14,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:29:14.229, foo, 2016-07-05 21:29:14.229, foo, 0}
2016-07-05 21:29:14,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:29:14.232, foo, 2016-07-05 21:29:14.232, foo, 0}
2016-07-05 21:29:14,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:29:14.235, foo, 2016-07-05 21:29:14.235, foo, 0}
2016-07-05 21:29:14,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:29:14.239, foo, 2016-07-05 21:29:14.239, foo, 0}
2016-07-05 21:29:14,257 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:29:14,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:29:14,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:29:14,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:29:14,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:29:14,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:29:14,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:29:14,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:29:14,270 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:29:14,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:29:14,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:29:14,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:29:14,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:29:14,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:29:14,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:29:14,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:29:14,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:29:14,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:29:14,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:29:14,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:29:14,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:29:14,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:29:14,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:29:14,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:29:14,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:29:14,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:29:14,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:29:14,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:29:14,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:29:14,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:29:14,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:29:14,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:29:14,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:29:14,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:29:14,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:29:14,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:29:14,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:29:14,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:29:14,295 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:29:14,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:29:14,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:29:14,300 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:29:14,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:29:14,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:29:14,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:29:14,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:29:14,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:29:14,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:29:14,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:29:14,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:29:14,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:29:14,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:29:14,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:29:14,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:29:14,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:29:14,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:29:14,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:29:14,357 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:29:14,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:29:14.358, foo, 2016-07-05 21:29:14.358, foo, 0}
2016-07-05 21:29:14,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:29:14.359, foo, 2016-07-05 21:29:14.359, foo, 0}
2016-07-05 21:29:14,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:29:14.36, foo, 2016-07-05 21:29:14.36, foo, 0}
2016-07-05 21:29:14,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:29:14.361, foo, 2016-07-05 21:29:14.361, foo, 0}
2016-07-05 21:29:14,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:29:14.363, foo, 2016-07-05 21:29:14.363, foo, 0}
2016-07-05 21:29:14,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:29:14.365, foo, 2016-07-05 21:29:14.365, foo, 0}
2016-07-05 21:29:14,367 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:29:14.366, foo, 2016-07-05 21:29:14.366, foo, 0}
2016-07-05 21:29:14,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:29:14.368, foo, 2016-07-05 21:29:14.368, foo, 0}
2016-07-05 21:29:14,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:29:14.37, foo, 2016-07-05 21:29:14.371, foo, 0}
2016-07-05 21:29:14,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:29:14.372, foo, 2016-07-05 21:29:14.372, foo, 0}
2016-07-05 21:29:14,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:29:14.373, foo, 2016-07-05 21:29:14.373, foo, 0}
2016-07-05 21:29:14,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:29:14.375, foo, 2016-07-05 21:29:14.375, foo, 0}
2016-07-05 21:29:14,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:29:14.376, foo, 2016-07-05 21:29:14.376, foo, 0}
2016-07-05 21:29:14,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:29:14.377, foo, 2016-07-05 21:29:14.377, foo, 0}
2016-07-05 21:29:14,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:29:14.377, foo, 2016-07-05 21:29:14.377, foo, 0}
2016-07-05 21:29:14,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:29:14.378, foo, 2016-07-05 21:29:14.378, foo, 0}
2016-07-05 21:29:14,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:29:14.379, foo, 2016-07-05 21:29:14.379, foo, 0}
2016-07-05 21:29:14,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:29:14.396, foo, 2016-07-05 21:29:14.396, foo, 0}
2016-07-05 21:29:14,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:29:14.397, foo, 2016-07-05 21:29:14.397, foo, 0}
2016-07-05 21:29:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:29:14.398, foo, 2016-07-05 21:29:14.398, foo, 0}
2016-07-05 21:29:14,419 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:29:14,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:29:14.421, foo, 2016-07-05 21:29:14.421, foo, 0}
2016-07-05 21:29:14,423 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:29:14.423, foo, 2016-07-05 21:29:14.423, foo, 0}
2016-07-05 21:29:14,424 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:29:14.424, foo, 2016-07-05 21:29:14.424, foo, 0}
2016-07-05 21:29:14,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:29:14.425, foo, 2016-07-05 21:29:14.425, foo, 0}
2016-07-05 21:29:14,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:29:14.425, foo, 2016-07-05 21:29:14.425, foo, 0}
2016-07-05 21:29:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:29:14.426, foo, 2016-07-05 21:29:14.426, foo, 0}
2016-07-05 21:29:14,427 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:29:14.427, foo, 2016-07-05 21:29:14.427, foo, 0}
2016-07-05 21:29:14,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:29:14.428, foo, 2016-07-05 21:29:14.428, foo, 0}
2016-07-05 21:29:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:29:14.429, foo, 2016-07-05 21:29:14.429, foo, 0}
2016-07-05 21:29:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:29:14.429, foo, 2016-07-05 21:29:14.429, foo, 0}
2016-07-05 21:29:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:29:14.43, foo, 2016-07-05 21:29:14.43, foo, 0}
2016-07-05 21:29:14,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:29:14.448, foo, 2016-07-05 21:29:14.448, foo, 0}
2016-07-05 21:29:14,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:29:14.449, foo, 2016-07-05 21:29:14.449, foo, 0}
2016-07-05 21:29:14,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:29:14.45, foo, 2016-07-05 21:29:14.45, foo, 0}
2016-07-05 21:29:14,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:29:14.452, foo, 2016-07-05 21:29:14.452, foo, 0}
2016-07-05 21:29:14,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:29:14.453, foo, 2016-07-05 21:29:14.453, foo, 0}
2016-07-05 21:29:14,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:29:14.454, foo, 2016-07-05 21:29:14.454, foo, 0}
2016-07-05 21:29:14,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:29:14.454, foo, 2016-07-05 21:29:14.454, foo, 0}
2016-07-05 21:29:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:29:14.456, foo, 2016-07-05 21:29:14.456, foo, 0}
2016-07-05 21:29:14,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:29:14.458, foo, 2016-07-05 21:29:14.458, foo, 0}
2016-07-05 21:29:14,477 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:29:14,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:29:14.478, foo, 2016-07-05 21:29:14.478, foo}
2016-07-05 21:29:14,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:29:14.48, foo, 2016-07-05 21:29:14.48, foo}
2016-07-05 21:29:14,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:29:14.482, foo, 2016-07-05 21:29:14.482, foo}
2016-07-05 21:29:14,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:29:14.483, foo, 2016-07-05 21:29:14.483, foo}
2016-07-05 21:29:14,495 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:29:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:29:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:29:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:29:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:29:14,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:29:14,501 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:29:14,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:29:14,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:29:14,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:29:14,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:29:14,517 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:29:14,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:29:14,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:29:14,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:29:14,521 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:29:14,523 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:29:14,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:29:14,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:29:14,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:29:14,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:29:14,551 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:29:14,552 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:29:14,554 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:29:14,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:29:14,555 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:29:14,556 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:29:14,557 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:29:14,558 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:29:14,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:29:14,559 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:29:14,560 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:29:14,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:29:14,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:29:14,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:29:14,582 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:29:14,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:29:14,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:29:14,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:29:14,587 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:29:14,588 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:29:14,589 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:29:14,590 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:29:14,591 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:29:14,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:29:14,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:29:14,601 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:29:14,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:29:14,602 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:29:14,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:29:14,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:29:14,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:29:14,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:29:14,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:29:14,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:29:14,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:29:14,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:29:14,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:29:14,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:29:14,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:29:14,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:29:14,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:29:14,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:29:14,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:29:14,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:29:14,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:29:14,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:29:14,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:29:14,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:29:14,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:29:14,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:29:14,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:29:14,633 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:29:14,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:29:14,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:29:14,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:29:14,638 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:29:14,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:29:14,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:29:14,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:29:14,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:29:14,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:29:14,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:29:14,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:29:14,644 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:29:14,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:29:14,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:29:14,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:29:14,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:29:14,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:29:14,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:29:14,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:29:14,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:29:14,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:29:14,657 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:29:14,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:29:14,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:29:14,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:29:14,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:29:14,662 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:29:14,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:29:14,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:29:14,668 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:29:14,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:29:14,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:29:14,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:29:14,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:29:14,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:29:14,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:29:14,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:29:14,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:29:14,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:29:14,758 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:29:14,759 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:14,759 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:29:14,760 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:14,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:29:14.821, foo, 2016-07-05 21:29:14.821, foo, 0}
2016-07-05 21:29:14,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:29:14.823, foo, 2016-07-05 21:29:14.823, foo, 0}
2016-07-05 21:29:14,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:29:14.824, foo, 2016-07-05 21:29:14.824, foo, 0}
2016-07-05 21:29:14,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:29:14.825, foo, 2016-07-05 21:29:14.825, foo, 0}
2016-07-05 21:29:14,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:29:14.825, foo, 2016-07-05 21:29:14.825, foo, 0}
2016-07-05 21:29:14,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:29:14.826, foo, 2016-07-05 21:29:14.826, foo, 0}
2016-07-05 21:29:14,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:29:14.827, foo, 2016-07-05 21:29:14.827, foo, 0}
2016-07-05 21:29:14,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:29:14.828, foo, 2016-07-05 21:29:14.828, foo, 0}
2016-07-05 21:29:14,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:29:14.828, foo, 2016-07-05 21:29:14.828, foo, 0}
2016-07-05 21:29:14,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:29:14.829, foo, 2016-07-05 21:29:14.829, foo, 0}
2016-07-05 21:29:14,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:29:14.83, foo, 2016-07-05 21:29:14.83, foo, 0}
2016-07-05 21:29:14,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:29:14.831, foo, 2016-07-05 21:29:14.831, foo, 0}
2016-07-05 21:29:14,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:29:14.832, foo, 2016-07-05 21:29:14.832, foo, 0}
2016-07-05 21:29:14,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:29:14.833, foo, 2016-07-05 21:29:14.833, foo, 0}
2016-07-05 21:29:14,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:29:14.834, foo, 2016-07-05 21:29:14.834, foo, 0}
2016-07-05 21:29:14,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:29:14.835, foo, 2016-07-05 21:29:14.835, foo, 0}
2016-07-05 21:29:14,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:29:14.836, foo, 2016-07-05 21:29:14.836, foo, 0}
2016-07-05 21:29:14,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:29:14.837, foo, 2016-07-05 21:29:14.837, foo, 0}
2016-07-05 21:29:14,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:29:14.839, foo, 2016-07-05 21:29:14.839, foo, 0}
2016-07-05 21:29:14,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:29:14.84, foo, 2016-07-05 21:29:14.84, foo, 0}
2016-07-05 21:29:14,855 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:29:14,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:29:14.856, foo, 2016-07-05 21:29:14.856, foo, 0}
2016-07-05 21:29:14,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:29:14.858, foo, 2016-07-05 21:29:14.858, foo, 0}
2016-07-05 21:29:14,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:29:14.859, foo, 2016-07-05 21:29:14.859, foo, 0}
2016-07-05 21:29:14,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:29:14.86, foo, 2016-07-05 21:29:14.86, foo, 0}
2016-07-05 21:29:14,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:29:14.861, foo, 2016-07-05 21:29:14.861, foo, 0}
2016-07-05 21:29:14,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:29:14.862, foo, 2016-07-05 21:29:14.862, foo, 0}
2016-07-05 21:29:14,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:29:14.863, foo, 2016-07-05 21:29:14.863, foo, 0}
2016-07-05 21:29:14,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:29:14.864, foo, 2016-07-05 21:29:14.864, foo, 0}
2016-07-05 21:29:14,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:29:14.866, foo, 2016-07-05 21:29:14.866, foo, 0}
2016-07-05 21:29:14,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:29:14.868, foo, 2016-07-05 21:29:14.868, foo, 0}
2016-07-05 21:29:14,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:29:14.87, foo, 2016-07-05 21:29:14.87, foo, 0}
2016-07-05 21:29:14,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:29:14.871, foo, 2016-07-05 21:29:14.871, foo, 0}
2016-07-05 21:29:14,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:29:14.873, foo, 2016-07-05 21:29:14.873, foo, 0}
2016-07-05 21:29:14,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:29:14.874, foo, 2016-07-05 21:29:14.874, foo, 0}
2016-07-05 21:29:14,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:29:14.875, foo, 2016-07-05 21:29:14.875, foo, 0}
2016-07-05 21:29:14,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:29:14.876, foo, 2016-07-05 21:29:14.876, foo, 0}
2016-07-05 21:29:14,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:29:14.877, foo, 2016-07-05 21:29:14.877, foo, 0}
2016-07-05 21:29:14,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:29:14.879, foo, 2016-07-05 21:29:14.879, foo, 0}
2016-07-05 21:29:14,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:29:14.88, foo, 2016-07-05 21:29:14.88, foo, 0}
2016-07-05 21:29:14,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:29:14.881, foo, 2016-07-05 21:29:14.881, foo, 0}
2016-07-05 21:29:14,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:29:14.882, foo, 2016-07-05 21:29:14.882, foo, 0}
2016-07-05 21:29:14,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:29:14.883, foo, 2016-07-05 21:29:14.883, foo, 0}
2016-07-05 21:29:14,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:29:14.888, foo, 2016-07-05 21:29:14.888, foo, 0}
2016-07-05 21:29:14,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:29:14.889, foo, 2016-07-05 21:29:14.889, foo, 0}
2016-07-05 21:29:14,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:29:14.89, foo, 2016-07-05 21:29:14.89, foo, 0}
2016-07-05 21:29:14,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:29:14.891, foo, 2016-07-05 21:29:14.891, foo, 0}
2016-07-05 21:29:14,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:29:14.892, foo, 2016-07-05 21:29:14.892, foo, 0}
2016-07-05 21:29:14,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:29:14.893, foo, 2016-07-05 21:29:14.893, foo, 0}
2016-07-05 21:29:14,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:29:14.894, foo, 2016-07-05 21:29:14.894, foo, 0}
2016-07-05 21:29:14,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:29:14.896, foo, 2016-07-05 21:29:14.896, foo, 0}
2016-07-05 21:29:14,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:29:14.898, foo, 2016-07-05 21:29:14.898, foo, 0}
2016-07-05 21:29:14,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:29:14.906, foo, 2016-07-05 21:29:14.906, foo, 0}
2016-07-05 21:29:14,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:14.91, foo, 2016-07-05 21:29:14.91, foo, 0}
2016-07-05 21:29:14,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:14.912, foo, 2016-07-05 21:29:14.912, foo, 0}
2016-07-05 21:29:14,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:29:14.913, foo, 2016-07-05 21:29:14.913, foo, 0}
2016-07-05 21:29:14,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:14.914, foo, 2016-07-05 21:29:14.914, foo, 0}
2016-07-05 21:29:14,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:29:14.915, foo, 2016-07-05 21:29:14.915, foo, 0}
2016-07-05 21:29:14,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:29:14.916, foo, 2016-07-05 21:29:14.916, foo, 0}
2016-07-05 21:29:14,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:29:14.918, foo, 2016-07-05 21:29:14.918, foo, 0}
2016-07-05 21:29:14,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:29:14.919, foo, 2016-07-05 21:29:14.919, foo, 0}
2016-07-05 21:29:14,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:29:14.919, foo, 2016-07-05 21:29:14.919, foo, 0}
2016-07-05 21:29:14,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:29:14.92, foo, 2016-07-05 21:29:14.92, foo, 0}
2016-07-05 21:29:14,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:29:14.922, foo, 2016-07-05 21:29:14.922, foo, 0}
2016-07-05 21:29:14,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:14.923, foo, 2016-07-05 21:29:14.923, foo, 0}
2016-07-05 21:29:14,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:14.923, foo, 2016-07-05 21:29:14.923, foo, 0}
2016-07-05 21:29:14,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:29:14.925, foo, 2016-07-05 21:29:14.925, foo, 0}
2016-07-05 21:29:14,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:14.926, foo, 2016-07-05 21:29:14.926, foo, 0}
2016-07-05 21:29:14,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:29:14.927, foo, 2016-07-05 21:29:14.927, foo, 0}
2016-07-05 21:29:14,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:29:14.927, foo, 2016-07-05 21:29:14.927, foo, 0}
2016-07-05 21:29:14,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:29:14.93, foo, 2016-07-05 21:29:14.93, foo, 0}
2016-07-05 21:29:14,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:29:14.931, foo, 2016-07-05 21:29:14.931, foo, 0}
2016-07-05 21:29:14,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:29:14.933, foo, 2016-07-05 21:29:14.933, foo, 0}
2016-07-05 21:29:14,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:29:14.935, foo, 2016-07-05 21:29:14.935, foo, 0}
2016-07-05 21:29:14,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:14.938, foo, 2016-07-05 21:29:14.938, foo, 0}
2016-07-05 21:29:14,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:14.94, foo, 2016-07-05 21:29:14.94, foo, 0}
2016-07-05 21:29:14,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:29:14.941, foo, 2016-07-05 21:29:14.941, foo, 0}
2016-07-05 21:29:14,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:14.942, foo, 2016-07-05 21:29:14.942, foo, 0}
2016-07-05 21:29:14,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:29:14.943, foo, 2016-07-05 21:29:14.943, foo, 0}
2016-07-05 21:29:14,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:29:14.944, foo, 2016-07-05 21:29:14.944, foo, 0}
2016-07-05 21:29:14,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:29:14.946, foo, 2016-07-05 21:29:14.946, foo, 0}
2016-07-05 21:29:14,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:29:14.947, foo, 2016-07-05 21:29:14.947, foo, 0}
2016-07-05 21:29:14,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:29:14.951, foo, 2016-07-05 21:29:14.951, foo, 0}
2016-07-05 21:29:14,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:29:14.952, foo, 2016-07-05 21:29:14.952, foo, 0}
2016-07-05 21:29:14,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:29:14.954, foo, 2016-07-05 21:29:14.954, foo, 0}
2016-07-05 21:29:14,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:29:14.955, foo, 2016-07-05 21:29:14.955, foo, 0}
2016-07-05 21:29:14,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:29:14.957, foo, 2016-07-05 21:29:14.957, foo, 0}
2016-07-05 21:29:14,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:29:14.958, foo, 2016-07-05 21:29:14.958, foo, 0}
2016-07-05 21:29:14,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:29:14.959, foo, 2016-07-05 21:29:14.959, foo, 0}
2016-07-05 21:29:14,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:29:14.96, foo, 2016-07-05 21:29:14.96, foo, 0}
2016-07-05 21:29:14,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:29:14.961, foo, 2016-07-05 21:29:14.961, foo, 0}
2016-07-05 21:29:15,024 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:29:15,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:29:15.025, foo, 2016-07-05 21:29:15.025, foo}
2016-07-05 21:29:15,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:29:15.027, foo, 2016-07-05 21:29:15.027, foo}
2016-07-05 21:29:15,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:29:15.028, foo, 2016-07-05 21:29:15.028, foo}
2016-07-05 21:29:15,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:29:15.029, foo, 2016-07-05 21:29:15.029, foo}
2016-07-05 21:29:15,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:29:15.03, foo, 2016-07-05 21:29:15.03, foo}
2016-07-05 21:29:15,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:29:15.031, foo, 2016-07-05 21:29:15.031, foo}
2016-07-05 21:29:15,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:29:15.032, foo, 2016-07-05 21:29:15.032, foo}
2016-07-05 21:29:15,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:29:15.033, foo, 2016-07-05 21:29:15.033, foo}
2016-07-05 21:29:15,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:29:15.034, foo, 2016-07-05 21:29:15.035, foo}
2016-07-05 21:29:15,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:29:15.038, foo, 2016-07-05 21:29:15.038, foo}
2016-07-05 21:29:15,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:29:15.039, foo, 2016-07-05 21:29:15.039, foo}
2016-07-05 21:29:15,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:29:15.04, foo, 2016-07-05 21:29:15.04, foo}
2016-07-05 21:29:15,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:29:15.041, foo, 2016-07-05 21:29:15.041, foo}
2016-07-05 21:29:15,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:29:15.042, foo, 2016-07-05 21:29:15.042, foo}
2016-07-05 21:29:15,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:29:15.043, foo, 2016-07-05 21:29:15.043, foo}
2016-07-05 21:29:15,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:29:15.045, foo, 2016-07-05 21:29:15.045, foo}
2016-07-05 21:29:15,052 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:29:15.052, foo, 2016-07-05 21:29:15.052, foo}
2016-07-05 21:29:15,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:29:15.053, foo, 2016-07-05 21:29:15.053, foo}
2016-07-05 21:29:15,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:29:15.054, foo, 2016-07-05 21:29:15.054, foo}
2016-07-05 21:29:15,056 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:29:15.056, foo, 2016-07-05 21:29:15.056, foo}
2016-07-05 21:29:15,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:29:15.06, foo, 2016-07-05 21:29:15.06, foo}
2016-07-05 21:29:15,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:29:15.062, foo, 2016-07-05 21:29:15.062, foo}
2016-07-05 21:29:15,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:29:15.064, foo, 2016-07-05 21:29:15.064, foo}
2016-07-05 21:29:15,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:29:15.066, foo, 2016-07-05 21:29:15.066, foo}
2016-07-05 21:29:15,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:29:15.069, foo, 2016-07-05 21:29:15.069, foo}
2016-07-05 21:29:15,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:29:15.071, foo, 2016-07-05 21:29:15.071, foo}
2016-07-05 21:29:15,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:29:15.072, foo, 2016-07-05 21:29:15.072, foo}
2016-07-05 21:29:15,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:29:15.074, foo, 2016-07-05 21:29:15.074, foo}
2016-07-05 21:29:15,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:29:15.075, foo, 2016-07-05 21:29:15.075, foo}
2016-07-05 21:29:15,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:15.076, foo, 2016-07-05 21:29:15.076, foo}
2016-07-05 21:29:15,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:15.076, foo, 2016-07-05 21:29:15.076, foo}
2016-07-05 21:29:15,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:15.077, foo, 2016-07-05 21:29:15.077, foo}
2016-07-05 21:29:15,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:29:15.078, foo, 2016-07-05 21:29:15.078, foo}
2016-07-05 21:29:15,079 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:29:15.079, foo, 2016-07-05 21:29:15.079, foo}
2016-07-05 21:29:15,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:29:15.088, foo, 2016-07-05 21:29:15.088, foo}
2016-07-05 21:29:15,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:29:15.09, foo, 2016-07-05 21:29:15.09, foo}
2016-07-05 21:29:15,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:29:15.091, foo, 2016-07-05 21:29:15.091, foo}
2016-07-05 21:29:15,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:29:15.092, foo, 2016-07-05 21:29:15.092, foo}
2016-07-05 21:29:15,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:29:15.093, foo, 2016-07-05 21:29:15.093, foo}
2016-07-05 21:29:15,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:29:15.094, foo, 2016-07-05 21:29:15.094, foo}
2016-07-05 21:29:15,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:29:15.098, foo, 2016-07-05 21:29:15.098, foo}
2016-07-05 21:29:15,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:29:15.101, foo, 2016-07-05 21:29:15.101, foo}
2016-07-05 21:29:15,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:29:15.103, foo, 2016-07-05 21:29:15.103, foo}
2016-07-05 21:29:15,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:29:15.107, foo, 2016-07-05 21:29:15.107, foo}
2016-07-05 21:29:15,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:29:15.109, foo, 2016-07-05 21:29:15.109, foo}
2016-07-05 21:29:15,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:29:15.11, foo, 2016-07-05 21:29:15.11, foo}
2016-07-05 21:29:15,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:29:15.11, foo, 2016-07-05 21:29:15.11, foo}
2016-07-05 21:29:15,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:29:15.121, foo, 2016-07-05 21:29:15.121, foo}
2016-07-05 21:29:15,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:29:15.124, foo, 2016-07-05 21:29:15.124, foo}
2016-07-05 21:29:15,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:29:15.125, foo, 2016-07-05 21:29:15.125, foo}
2016-07-05 21:29:15,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:29:15.143, foo, 2016-07-05 21:29:15.143, foo}
2016-07-05 21:29:15,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:29:15.147, foo, 2016-07-05 21:29:15.147, foo}
2016-07-05 21:29:15,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:29:15.15, foo, 2016-07-05 21:29:15.15, foo}
2016-07-05 21:29:15,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:15.151, foo, 2016-07-05 21:29:15.151, foo}
2016-07-05 21:29:15,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:29:15.152, foo, 2016-07-05 21:29:15.152, foo}
2016-07-05 21:29:15,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:29:15.154, foo, 2016-07-05 21:29:15.154, foo}
2016-07-05 21:29:15,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:29:15.155, foo, 2016-07-05 21:29:15.155, foo}
2016-07-05 21:29:15,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:29:15.155, foo, 2016-07-05 21:29:15.155, foo}
2016-07-05 21:29:15,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:29:15.156, foo, 2016-07-05 21:29:15.156, foo}
2016-07-05 21:29:15,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:29:15.156, foo, 2016-07-05 21:29:15.156, foo}
2016-07-05 21:29:15,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:29:15.157, foo, 2016-07-05 21:29:15.157, foo}
2016-07-05 21:29:15,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:29:15.158, foo, 2016-07-05 21:29:15.158, foo}
2016-07-05 21:29:15,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:29:15.159, foo, 2016-07-05 21:29:15.159, foo}
2016-07-05 21:29:15,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:29:15.159, foo, 2016-07-05 21:29:15.159, foo}
2016-07-05 21:29:15,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:15.16, foo, 2016-07-05 21:29:15.16, foo}
2016-07-05 21:29:15,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:29:15.161, foo, 2016-07-05 21:29:15.161, foo}
2016-07-05 21:29:15,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:29:15.162, foo, 2016-07-05 21:29:15.162, foo}
2016-07-05 21:29:15,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:29:15.163, foo, 2016-07-05 21:29:15.163, foo}
2016-07-05 21:29:15,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:29:15.164, foo, 2016-07-05 21:29:15.164, foo}
2016-07-05 21:29:15,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:29:15.165, foo, 2016-07-05 21:29:15.165, foo}
2016-07-05 21:29:15,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:29:15.167, foo, 2016-07-05 21:29:15.167, foo}
2016-07-05 21:29:15,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:29:15.169, foo, 2016-07-05 21:29:15.169, foo}
2016-07-05 21:29:15,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:29:15.172, foo, 2016-07-05 21:29:15.172, foo}
2016-07-05 21:29:15,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:29:15.173, foo, 2016-07-05 21:29:15.173, foo}
2016-07-05 21:29:15,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:29:15.174, foo, 2016-07-05 21:29:15.174, foo}
2016-07-05 21:29:15,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:29:15.175, foo, 2016-07-05 21:29:15.175, foo}
2016-07-05 21:29:15,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:29:15.175, foo, 2016-07-05 21:29:15.176, foo}
2016-07-05 21:29:15,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:29:15.176, foo, 2016-07-05 21:29:15.176, foo}
2016-07-05 21:29:15,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:29:15.177, foo, 2016-07-05 21:29:15.177, foo}
2016-07-05 21:29:15,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:29:15.178, foo, 2016-07-05 21:29:15.178, foo}
2016-07-05 21:29:15,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:29:15.179, foo, 2016-07-05 21:29:15.179, foo}
2016-07-05 21:29:15,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:29:15.185, foo, 2016-07-05 21:29:15.185, foo}
2016-07-05 21:29:15,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:15.186, foo, 2016-07-05 21:29:15.186, foo}
2016-07-05 21:29:15,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:15.187, foo, 2016-07-05 21:29:15.187, foo}
2016-07-05 21:29:15,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:15.187, foo, 2016-07-05 21:29:15.187, foo}
2016-07-05 21:29:15,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:15.19, foo, 2016-07-05 21:29:15.19, foo}
2016-07-05 21:29:15,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:29:15.191, foo, 2016-07-05 21:29:15.191, foo}
2016-07-05 21:29:15,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:15.191, foo, 2016-07-05 21:29:15.191, foo}
2016-07-05 21:29:15,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:29:15.192, foo, 2016-07-05 21:29:15.192, foo}
2016-07-05 21:29:15,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:29:15.193, foo, 2016-07-05 21:29:15.193, foo}
2016-07-05 21:29:15,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:29:15.193, foo, 2016-07-05 21:29:15.193, foo}
2016-07-05 21:29:15,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:29:15.194, foo, 2016-07-05 21:29:15.194, foo}
2016-07-05 21:29:15,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:29:15.194, foo, 2016-07-05 21:29:15.194, foo}
2016-07-05 21:29:15,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:29:15.195, foo, 2016-07-05 21:29:15.195, foo}
2016-07-05 21:29:15,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:29:15.196, foo, 2016-07-05 21:29:15.196, foo}
2016-07-05 21:29:15,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:29:15.197, foo, 2016-07-05 21:29:15.197, foo}
2016-07-05 21:29:15,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:29:15.199, foo, 2016-07-05 21:29:15.199, foo}
2016-07-05 21:29:15,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:29:15.2, foo, 2016-07-05 21:29:15.2, foo}
2016-07-05 21:29:15,201 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:29:15.201, foo, 2016-07-05 21:29:15.201, foo}
2016-07-05 21:29:15,203 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:29:15.202, foo, 2016-07-05 21:29:15.203, foo}
2016-07-05 21:29:15,282 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:29:15,283 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:29:15,321 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:15,346 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:29:15,363 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:29:15,374 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:29:15,378 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:29:15,381 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:29:15,385 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:29:15,395 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:29:15,399 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:29:15,408 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:29:15,413 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:29:15,415 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:29:15,423 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:29:15,424 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:29:15,424 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:29:15,425 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:29:15,425 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:29:15,426 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:29:15,436 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:29:15,438 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:29:15,443 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:29:15,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:29:15,451 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:29:15,453 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:29:15,453 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:29:15,511 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:29:15,511 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:29:15,531 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:29:15,531 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:29:15,532 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:15,532 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:15,532 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:15,540 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:29:15,543 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:29:15,563 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:29:15,564 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:29:15,564 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:29:15,565 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:29:15,602 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:29:15,624 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:29:15,634 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:29:15,649 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:29:15,667 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:29:15,684 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:29:15,703 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:29:15,712 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:29:15,722 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:29:15,733 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:29:15,743 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:29:15,760 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:29:15,771 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:29:15,780 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:29:15,791 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:29:15,799 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:29:15,799 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:29:15,799 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:29:15,800 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:29:15,800 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:29:15,802 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:29:15,804 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:29:15,804 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:29:15,804 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:29:15,847 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:29:15,847 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:29:15,848 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:29:15,848 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:29:15,848 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:29:15,849 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:29:15,852 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:29:15,852 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:29:15,878 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:29:15,880 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:29:15,881 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:29:15,881 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:29:15,882 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:29:15,918 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:29:15,919 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:29:15,920 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:29:15,922 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:29:15,922 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:29:15,923 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:29:15,924 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:29:15,925 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:29:15,926 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:29:15,927 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:29:15,927 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:29:15,927 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:29:15,927 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:29:15,976 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:29:15,976 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:29:15,976 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:15,977 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:15,977 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:15,991 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:29:15,997 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:29:16,003 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:29:16,007 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:29:16,013 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:29:16,020 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:29:16,034 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:29:16,041 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:29:16,063 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:29:16,081 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:29:16,105 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:29:16,121 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:29:16,142 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:29:16,165 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:29:16,182 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:29:16,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:29:16,221 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:29:16,244 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:29:16,261 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:29:16,282 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:29:16,306 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:29:16,321 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:29:16,344 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:29:16,364 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:29:16,369 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:29:16,373 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:29:16,377 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:29:16,381 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:29:16,385 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:29:16,389 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:29:16,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:29:16,396 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:29:16,400 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:29:16,405 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:29:16,409 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:29:16,415 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:29:16,419 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:29:16,423 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:29:16,426 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:29:16,454 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:29:16,457 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:29:16,460 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:29:16,460 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:29:16,461 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:29:16,461 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:29:16,462 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:29:16,462 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:29:16,463 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:29:16,464 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:29:16,464 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:29:16,465 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:29:16,478 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:29:16,478 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:29:16,479 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:29:16,479 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:29:16,482 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:29:16,487 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:29:16,487 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:29:16,488 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:29:16,488 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:29:16,489 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:29:16,493 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:29:16,522 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:29:16,547 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:29:16,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:29:16,610 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:29:16,697 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:29:16,712 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:29:16,761 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:29:16,820 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:29:16,834 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:29:16,882 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 21:29:16,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:29:16,902 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:29:16,940 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:29:16,951 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:29:16,980 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:29:16,997 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,017 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:29:17,046 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:29:17,076 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,098 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,118 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:29:17,137 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,161 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,177 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:29:17,197 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:17,220 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:29:17,255 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:29:17,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:29:17,311 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:29:17,342 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:29:17,367 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:29:17,382 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:29:17,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:29:17,424 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:29:17,441 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:29:17,463 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:29:17,482 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:29:17,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:29:17,522 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:29:17,541 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 21:29:17,542 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:29:17,543 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:29:17,545 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:29:17,546 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:29:17,546 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 21:29:17,546 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:29:17,547 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:29:17,547 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:29:17,547 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:29:17,547 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:29:17,548 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:29:17,548 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:29:17,548 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:17,549 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 21:29:17,549 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:17,558 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:17,559 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:17,559 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:17,585 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:29:17,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:29:17,586 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:29:17,586 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:29:17,591 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:29:17,592 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:29:17,593 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:29:17,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:29:17,594 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:29:17,598 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:29:17,598 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:29:17,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:29:17,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:29:17,599 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:29:17,600 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:29:17,604 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:29:17,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:29:17,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:29:17,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:29:17,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:29:17,609 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:29:17,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:29:17,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:29:17,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:29:17,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:29:17,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:29:17,615 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:29:17,616 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:29:17,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:29:17,617 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:29:17,620 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:29:17,621 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:17,624 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 21:29:17,624 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:17,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:29:17.678, foo, 2016-07-05 21:29:17.678, foo, 0}
2016-07-05 21:29:17,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:29:17.679, foo, 2016-07-05 21:29:17.679, foo, 0}
2016-07-05 21:29:17,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:29:17.68, foo, 2016-07-05 21:29:17.68, foo, 0}
2016-07-05 21:29:17,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:29:17.68, foo, 2016-07-05 21:29:17.68, foo, 0}
2016-07-05 21:29:17,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:29:17.681, foo, 2016-07-05 21:29:17.681, foo, 0}
2016-07-05 21:29:17,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:29:17.682, foo, 2016-07-05 21:29:17.682, foo, 0}
2016-07-05 21:29:17,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:29:17.682, foo, 2016-07-05 21:29:17.682, foo, 0}
2016-07-05 21:29:17,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:29:17.683, foo, 2016-07-05 21:29:17.683, foo, 0}
2016-07-05 21:29:17,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:29:17.684, foo, 2016-07-05 21:29:17.684, foo, 0}
2016-07-05 21:29:17,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:29:17.684, foo, 2016-07-05 21:29:17.684, foo, 0}
2016-07-05 21:29:17,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:29:17.685, foo, 2016-07-05 21:29:17.685, foo, 0}
2016-07-05 21:29:17,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:29:17.685, foo, 2016-07-05 21:29:17.685, foo, 0}
2016-07-05 21:29:17,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:29:17.686, foo, 2016-07-05 21:29:17.686, foo, 0}
2016-07-05 21:29:17,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:29:17.687, foo, 2016-07-05 21:29:17.687, foo, 0}
2016-07-05 21:29:17,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:29:17.688, foo, 2016-07-05 21:29:17.688, foo, 0}
2016-07-05 21:29:17,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:29:17.689, foo, 2016-07-05 21:29:17.689, foo, 0}
2016-07-05 21:29:17,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:29:17.69, foo, 2016-07-05 21:29:17.69, foo, 0}
2016-07-05 21:29:17,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:29:17.691, foo, 2016-07-05 21:29:17.691, foo, 0}
2016-07-05 21:29:17,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:29:17.693, foo, 2016-07-05 21:29:17.693, foo, 0}
2016-07-05 21:29:17,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:29:17.695, foo, 2016-07-05 21:29:17.695, foo, 0}
2016-07-05 21:29:17,711 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:29:17,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:29:17.712, foo, 2016-07-05 21:29:17.712, foo, 0}
2016-07-05 21:29:17,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:29:17.714, foo, 2016-07-05 21:29:17.714, foo, 0}
2016-07-05 21:29:17,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:29:17.715, foo, 2016-07-05 21:29:17.715, foo, 0}
2016-07-05 21:29:17,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:29:17.717, foo, 2016-07-05 21:29:17.717, foo, 0}
2016-07-05 21:29:17,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:29:17.717, foo, 2016-07-05 21:29:17.717, foo, 0}
2016-07-05 21:29:17,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:29:17.718, foo, 2016-07-05 21:29:17.718, foo, 0}
2016-07-05 21:29:17,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:29:17.719, foo, 2016-07-05 21:29:17.719, foo, 0}
2016-07-05 21:29:17,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:29:17.72, foo, 2016-07-05 21:29:17.72, foo, 0}
2016-07-05 21:29:17,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:29:17.721, foo, 2016-07-05 21:29:17.721, foo, 0}
2016-07-05 21:29:17,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:29:17.722, foo, 2016-07-05 21:29:17.722, foo, 0}
2016-07-05 21:29:17,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:29:17.723, foo, 2016-07-05 21:29:17.723, foo, 0}
2016-07-05 21:29:17,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:29:17.724, foo, 2016-07-05 21:29:17.724, foo, 0}
2016-07-05 21:29:17,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:29:17.726, foo, 2016-07-05 21:29:17.726, foo, 0}
2016-07-05 21:29:17,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:29:17.727, foo, 2016-07-05 21:29:17.727, foo, 0}
2016-07-05 21:29:17,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:29:17.729, foo, 2016-07-05 21:29:17.729, foo, 0}
2016-07-05 21:29:17,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:29:17.73, foo, 2016-07-05 21:29:17.73, foo, 0}
2016-07-05 21:29:17,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:29:17.731, foo, 2016-07-05 21:29:17.731, foo, 0}
2016-07-05 21:29:17,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:29:17.731, foo, 2016-07-05 21:29:17.731, foo, 0}
2016-07-05 21:29:17,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:29:17.732, foo, 2016-07-05 21:29:17.732, foo, 0}
2016-07-05 21:29:17,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:29:17.734, foo, 2016-07-05 21:29:17.734, foo, 0}
2016-07-05 21:29:17,750 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:29:17,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:29:17,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:29:17,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:29:17,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:29:17,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:29:17,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:29:17,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:29:17,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:29:17,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:29:17,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:29:17,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:29:17,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:29:17,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:29:17,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:29:17,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:29:17,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:29:17,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:29:17,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:29:17,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:29:17,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:29:17,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:29:17,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:29:17,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:29:17,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:29:17,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:29:17,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:29:17,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:29:17,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:29:17,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:29:17,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:29:17,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:29:17,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:29:17,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:29:17,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:29:17,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:29:17,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:29:17,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:29:17,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:29:17,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:29:17,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:29:17,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:29:17,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:29:17,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:29:17,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:29:17,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:29:17,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:29:17,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:29:17,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:29:17,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:29:17,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:29:17,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:29:17,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:29:17,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:29:17,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:29:17,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:29:17,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:29:17,836 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:29:17,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:29:17.837, foo, 2016-07-05 21:29:17.837, foo, 0}
2016-07-05 21:29:17,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:29:17.839, foo, 2016-07-05 21:29:17.839, foo, 0}
2016-07-05 21:29:17,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:29:17.839, foo, 2016-07-05 21:29:17.839, foo, 0}
2016-07-05 21:29:17,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:29:17.84, foo, 2016-07-05 21:29:17.84, foo, 0}
2016-07-05 21:29:17,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:29:17.84, foo, 2016-07-05 21:29:17.84, foo, 0}
2016-07-05 21:29:17,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:29:17.841, foo, 2016-07-05 21:29:17.841, foo, 0}
2016-07-05 21:29:17,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:29:17.841, foo, 2016-07-05 21:29:17.841, foo, 0}
2016-07-05 21:29:17,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:29:17.841, foo, 2016-07-05 21:29:17.841, foo, 0}
2016-07-05 21:29:17,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:29:17.842, foo, 2016-07-05 21:29:17.842, foo, 0}
2016-07-05 21:29:17,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:29:17.842, foo, 2016-07-05 21:29:17.842, foo, 0}
2016-07-05 21:29:17,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:29:17.843, foo, 2016-07-05 21:29:17.843, foo, 0}
2016-07-05 21:29:17,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:29:17.843, foo, 2016-07-05 21:29:17.843, foo, 0}
2016-07-05 21:29:17,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:29:17.843, foo, 2016-07-05 21:29:17.843, foo, 0}
2016-07-05 21:29:17,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:29:17.844, foo, 2016-07-05 21:29:17.844, foo, 0}
2016-07-05 21:29:17,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:29:17.844, foo, 2016-07-05 21:29:17.844, foo, 0}
2016-07-05 21:29:17,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:29:17.844, foo, 2016-07-05 21:29:17.844, foo, 0}
2016-07-05 21:29:17,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:29:17.845, foo, 2016-07-05 21:29:17.845, foo, 0}
2016-07-05 21:29:17,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:29:17.845, foo, 2016-07-05 21:29:17.845, foo, 0}
2016-07-05 21:29:17,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:29:17.845, foo, 2016-07-05 21:29:17.845, foo, 0}
2016-07-05 21:29:17,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:29:17.846, foo, 2016-07-05 21:29:17.846, foo, 0}
2016-07-05 21:29:17,856 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:29:17,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:29:17.856, foo, 2016-07-05 21:29:17.856, foo, 0}
2016-07-05 21:29:17,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:29:17.857, foo, 2016-07-05 21:29:17.857, foo, 0}
2016-07-05 21:29:17,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:29:17.858, foo, 2016-07-05 21:29:17.858, foo, 0}
2016-07-05 21:29:17,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:29:17.858, foo, 2016-07-05 21:29:17.858, foo, 0}
2016-07-05 21:29:17,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:29:17.858, foo, 2016-07-05 21:29:17.858, foo, 0}
2016-07-05 21:29:17,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:29:17.859, foo, 2016-07-05 21:29:17.859, foo, 0}
2016-07-05 21:29:17,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:29:17.859, foo, 2016-07-05 21:29:17.859, foo, 0}
2016-07-05 21:29:17,859 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:29:17.859, foo, 2016-07-05 21:29:17.859, foo, 0}
2016-07-05 21:29:17,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:29:17.86, foo, 2016-07-05 21:29:17.86, foo, 0}
2016-07-05 21:29:17,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:29:17.86, foo, 2016-07-05 21:29:17.86, foo, 0}
2016-07-05 21:29:17,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:29:17.86, foo, 2016-07-05 21:29:17.86, foo, 0}
2016-07-05 21:29:17,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:29:17.861, foo, 2016-07-05 21:29:17.861, foo, 0}
2016-07-05 21:29:17,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:29:17.861, foo, 2016-07-05 21:29:17.861, foo, 0}
2016-07-05 21:29:17,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:29:17.861, foo, 2016-07-05 21:29:17.861, foo, 0}
2016-07-05 21:29:17,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:29:17.862, foo, 2016-07-05 21:29:17.862, foo, 0}
2016-07-05 21:29:17,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:29:17.862, foo, 2016-07-05 21:29:17.862, foo, 0}
2016-07-05 21:29:17,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:29:17.862, foo, 2016-07-05 21:29:17.862, foo, 0}
2016-07-05 21:29:17,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:29:17.863, foo, 2016-07-05 21:29:17.863, foo, 0}
2016-07-05 21:29:17,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:29:17.863, foo, 2016-07-05 21:29:17.863, foo, 0}
2016-07-05 21:29:17,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:29:17.863, foo, 2016-07-05 21:29:17.863, foo, 0}
2016-07-05 21:29:17,875 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:29:17,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:29:17.876, foo, 2016-07-05 21:29:17.876, foo}
2016-07-05 21:29:17,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:29:17.877, foo, 2016-07-05 21:29:17.877, foo}
2016-07-05 21:29:17,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:29:17.878, foo, 2016-07-05 21:29:17.878, foo}
2016-07-05 21:29:17,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:29:17.878, foo, 2016-07-05 21:29:17.878, foo}
2016-07-05 21:29:17,883 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:29:17,883 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:29:17,883 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 21:29:17,883 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:29:17,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:29:17.911, foo, 2016-07-05 21:29:17.911, foo, 0}
2016-07-05 21:29:17,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:29:17.912, foo, 2016-07-05 21:29:17.912, foo, 0}
2016-07-05 21:29:17,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:29:17.913, foo, 2016-07-05 21:29:17.913, foo, 0}
2016-07-05 21:29:17,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:29:17.913, foo, 2016-07-05 21:29:17.913, foo, 0}
2016-07-05 21:29:17,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:29:17.914, foo, 2016-07-05 21:29:17.914, foo, 0}
2016-07-05 21:29:17,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:29:17.914, foo, 2016-07-05 21:29:17.914, foo, 0}
2016-07-05 21:29:17,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:29:17.915, foo, 2016-07-05 21:29:17.915, foo, 0}
2016-07-05 21:29:17,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:29:17.915, foo, 2016-07-05 21:29:17.915, foo, 0}
2016-07-05 21:29:17,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:29:17.915, foo, 2016-07-05 21:29:17.915, foo, 0}
2016-07-05 21:29:17,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:29:17.916, foo, 2016-07-05 21:29:17.916, foo, 0}
2016-07-05 21:29:17,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:29:17.916, foo, 2016-07-05 21:29:17.916, foo, 0}
2016-07-05 21:29:17,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:29:17.917, foo, 2016-07-05 21:29:17.917, foo, 0}
2016-07-05 21:29:17,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:29:17.917, foo, 2016-07-05 21:29:17.917, foo, 0}
2016-07-05 21:29:17,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:29:17.917, foo, 2016-07-05 21:29:17.917, foo, 0}
2016-07-05 21:29:17,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:29:17.918, foo, 2016-07-05 21:29:17.918, foo, 0}
2016-07-05 21:29:17,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:29:17.918, foo, 2016-07-05 21:29:17.918, foo, 0}
2016-07-05 21:29:17,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:29:17.919, foo, 2016-07-05 21:29:17.919, foo, 0}
2016-07-05 21:29:17,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:29:17.919, foo, 2016-07-05 21:29:17.919, foo, 0}
2016-07-05 21:29:17,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:29:17.92, foo, 2016-07-05 21:29:17.92, foo, 0}
2016-07-05 21:29:17,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:29:17.92, foo, 2016-07-05 21:29:17.92, foo, 0}
2016-07-05 21:29:17,936 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:29:17,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:29:17.937, foo, 2016-07-05 21:29:17.937, foo, 0}
2016-07-05 21:29:17,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:29:17.939, foo, 2016-07-05 21:29:17.939, foo, 0}
2016-07-05 21:29:17,940 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:29:17.94, foo, 2016-07-05 21:29:17.94, foo, 0}
2016-07-05 21:29:17,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:29:17.94, foo, 2016-07-05 21:29:17.94, foo, 0}
2016-07-05 21:29:17,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:29:17.941, foo, 2016-07-05 21:29:17.941, foo, 0}
2016-07-05 21:29:17,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:29:17.942, foo, 2016-07-05 21:29:17.942, foo, 0}
2016-07-05 21:29:17,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:29:17.942, foo, 2016-07-05 21:29:17.942, foo, 0}
2016-07-05 21:29:17,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:29:17.943, foo, 2016-07-05 21:29:17.943, foo, 0}
2016-07-05 21:29:17,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:29:17.944, foo, 2016-07-05 21:29:17.944, foo, 0}
2016-07-05 21:29:17,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:29:17.945, foo, 2016-07-05 21:29:17.945, foo, 0}
2016-07-05 21:29:17,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:29:17.946, foo, 2016-07-05 21:29:17.946, foo, 0}
2016-07-05 21:29:17,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:29:17.947, foo, 2016-07-05 21:29:17.947, foo, 0}
2016-07-05 21:29:17,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:29:17.948, foo, 2016-07-05 21:29:17.948, foo, 0}
2016-07-05 21:29:17,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:29:17.948, foo, 2016-07-05 21:29:17.948, foo, 0}
2016-07-05 21:29:17,949 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:29:17.949, foo, 2016-07-05 21:29:17.949, foo, 0}
2016-07-05 21:29:17,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:29:17.955, foo, 2016-07-05 21:29:17.955, foo, 0}
2016-07-05 21:29:17,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:29:17.956, foo, 2016-07-05 21:29:17.956, foo, 0}
2016-07-05 21:29:17,956 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:29:17.956, foo, 2016-07-05 21:29:17.956, foo, 0}
2016-07-05 21:29:17,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:29:17.957, foo, 2016-07-05 21:29:17.957, foo, 0}
2016-07-05 21:29:17,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:29:17.958, foo, 2016-07-05 21:29:17.958, foo, 0}
2016-07-05 21:29:17,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:29:17.958, foo, 2016-07-05 21:29:17.958, foo, 0}
2016-07-05 21:29:17,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:29:17.959, foo, 2016-07-05 21:29:17.959, foo, 0}
2016-07-05 21:29:17,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:29:17.959, foo, 2016-07-05 21:29:17.959, foo, 0}
2016-07-05 21:29:17,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:29:17.96, foo, 2016-07-05 21:29:17.96, foo, 0}
2016-07-05 21:29:17,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:29:17.961, foo, 2016-07-05 21:29:17.961, foo, 0}
2016-07-05 21:29:17,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:29:17.961, foo, 2016-07-05 21:29:17.961, foo, 0}
2016-07-05 21:29:17,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:29:17.962, foo, 2016-07-05 21:29:17.962, foo, 0}
2016-07-05 21:29:17,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:29:17.963, foo, 2016-07-05 21:29:17.963, foo, 0}
2016-07-05 21:29:17,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:29:17.963, foo, 2016-07-05 21:29:17.963, foo, 0}
2016-07-05 21:29:17,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:29:17.964, foo, 2016-07-05 21:29:17.964, foo, 0}
2016-07-05 21:29:17,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:29:17.964, foo, 2016-07-05 21:29:17.964, foo, 0}
2016-07-05 21:29:17,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:29:17.967, foo, 2016-07-05 21:29:17.967, foo, 0}
2016-07-05 21:29:17,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:17.968, foo, 2016-07-05 21:29:17.968, foo, 0}
2016-07-05 21:29:17,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:17.969, foo, 2016-07-05 21:29:17.969, foo, 0}
2016-07-05 21:29:17,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:29:17.97, foo, 2016-07-05 21:29:17.97, foo, 0}
2016-07-05 21:29:17,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:17.972, foo, 2016-07-05 21:29:17.972, foo, 0}
2016-07-05 21:29:17,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:29:17.973, foo, 2016-07-05 21:29:17.973, foo, 0}
2016-07-05 21:29:17,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:29:17.974, foo, 2016-07-05 21:29:17.974, foo, 0}
2016-07-05 21:29:17,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:29:17.975, foo, 2016-07-05 21:29:17.975, foo, 0}
2016-07-05 21:29:17,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:29:17.976, foo, 2016-07-05 21:29:17.976, foo, 0}
2016-07-05 21:29:17,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:29:17.978, foo, 2016-07-05 21:29:17.978, foo, 0}
2016-07-05 21:29:17,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:29:17.979, foo, 2016-07-05 21:29:17.979, foo, 0}
2016-07-05 21:29:17,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:29:17.98, foo, 2016-07-05 21:29:17.98, foo, 0}
2016-07-05 21:29:17,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:17.98, foo, 2016-07-05 21:29:17.98, foo, 0}
2016-07-05 21:29:17,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:17.981, foo, 2016-07-05 21:29:17.981, foo, 0}
2016-07-05 21:29:17,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:29:17.981, foo, 2016-07-05 21:29:17.981, foo, 0}
2016-07-05 21:29:17,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:17.985, foo, 2016-07-05 21:29:17.985, foo, 0}
2016-07-05 21:29:17,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:29:17.985, foo, 2016-07-05 21:29:17.985, foo, 0}
2016-07-05 21:29:17,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:29:17.986, foo, 2016-07-05 21:29:17.986, foo, 0}
2016-07-05 21:29:17,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:29:17.987, foo, 2016-07-05 21:29:17.987, foo, 0}
2016-07-05 21:29:17,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:29:17.988, foo, 2016-07-05 21:29:17.988, foo, 0}
2016-07-05 21:29:17,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:29:17.99, foo, 2016-07-05 21:29:17.99, foo, 0}
2016-07-05 21:29:17,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:29:17.991, foo, 2016-07-05 21:29:17.991, foo, 0}
2016-07-05 21:29:17,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:29:17.992, foo, 2016-07-05 21:29:17.992, foo, 0}
2016-07-05 21:29:17,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:29:17.993, foo, 2016-07-05 21:29:17.993, foo, 0}
2016-07-05 21:29:17,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:29:17.994, foo, 2016-07-05 21:29:17.994, foo, 0}
2016-07-05 21:29:17,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:29:17.995, foo, 2016-07-05 21:29:17.995, foo, 0}
2016-07-05 21:29:17,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:29:17.996, foo, 2016-07-05 21:29:17.996, foo, 0}
2016-07-05 21:29:17,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:29:17.997, foo, 2016-07-05 21:29:17.997, foo, 0}
2016-07-05 21:29:17,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:29:17.998, foo, 2016-07-05 21:29:17.998, foo, 0}
2016-07-05 21:29:17,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:29:17.999, foo, 2016-07-05 21:29:17.999, foo, 0}
2016-07-05 21:29:18,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:29:18.0, foo, 2016-07-05 21:29:18.0, foo, 0}
2016-07-05 21:29:18,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:29:18.001, foo, 2016-07-05 21:29:18.001, foo, 0}
2016-07-05 21:29:18,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:29:18.002, foo, 2016-07-05 21:29:18.002, foo, 0}
2016-07-05 21:29:18,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:29:18.003, foo, 2016-07-05 21:29:18.003, foo, 0}
2016-07-05 21:29:18,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:29:18.003, foo, 2016-07-05 21:29:18.004, foo, 0}
2016-07-05 21:29:18,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:29:18.004, foo, 2016-07-05 21:29:18.004, foo, 0}
2016-07-05 21:29:18,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:29:18.005, foo, 2016-07-05 21:29:18.005, foo, 0}
2016-07-05 21:29:18,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:29:18.006, foo, 2016-07-05 21:29:18.006, foo, 0}
2016-07-05 21:29:18,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:29:18.007, foo, 2016-07-05 21:29:18.007, foo, 0}
2016-07-05 21:29:18,063 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:29:18,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:29:18.064, foo, 2016-07-05 21:29:18.064, foo}
2016-07-05 21:29:18,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:29:18.066, foo, 2016-07-05 21:29:18.066, foo}
2016-07-05 21:29:18,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:29:18.066, foo, 2016-07-05 21:29:18.066, foo}
2016-07-05 21:29:18,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:29:18.067, foo, 2016-07-05 21:29:18.067, foo}
2016-07-05 21:29:18,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:29:18.067, foo, 2016-07-05 21:29:18.067, foo}
2016-07-05 21:29:18,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:29:18.068, foo, 2016-07-05 21:29:18.068, foo}
2016-07-05 21:29:18,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:29:18.069, foo, 2016-07-05 21:29:18.069, foo}
2016-07-05 21:29:18,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:29:18.069, foo, 2016-07-05 21:29:18.069, foo}
2016-07-05 21:29:18,070 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:29:18.07, foo, 2016-07-05 21:29:18.07, foo}
2016-07-05 21:29:18,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:29:18.071, foo, 2016-07-05 21:29:18.071, foo}
2016-07-05 21:29:18,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:29:18.071, foo, 2016-07-05 21:29:18.071, foo}
2016-07-05 21:29:18,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:29:18.072, foo, 2016-07-05 21:29:18.072, foo}
2016-07-05 21:29:18,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:29:18.073, foo, 2016-07-05 21:29:18.073, foo}
2016-07-05 21:29:18,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:29:18.074, foo, 2016-07-05 21:29:18.074, foo}
2016-07-05 21:29:18,074 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:29:18.074, foo, 2016-07-05 21:29:18.074, foo}
2016-07-05 21:29:18,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:29:18.075, foo, 2016-07-05 21:29:18.075, foo}
2016-07-05 21:29:18,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:29:18.075, foo, 2016-07-05 21:29:18.075, foo}
2016-07-05 21:29:18,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:29:18.081, foo, 2016-07-05 21:29:18.081, foo}
2016-07-05 21:29:18,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:29:18.081, foo, 2016-07-05 21:29:18.081, foo}
2016-07-05 21:29:18,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:29:18.082, foo, 2016-07-05 21:29:18.082, foo}
2016-07-05 21:29:18,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:29:18.082, foo, 2016-07-05 21:29:18.082, foo}
2016-07-05 21:29:18,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:29:18.083, foo, 2016-07-05 21:29:18.083, foo}
2016-07-05 21:29:18,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:29:18.084, foo, 2016-07-05 21:29:18.084, foo}
2016-07-05 21:29:18,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:29:18.084, foo, 2016-07-05 21:29:18.084, foo}
2016-07-05 21:29:18,085 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:29:18.085, foo, 2016-07-05 21:29:18.085, foo}
2016-07-05 21:29:18,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:29:18.086, foo, 2016-07-05 21:29:18.086, foo}
2016-07-05 21:29:18,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:29:18.087, foo, 2016-07-05 21:29:18.087, foo}
2016-07-05 21:29:18,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:29:18.087, foo, 2016-07-05 21:29:18.087, foo}
2016-07-05 21:29:18,088 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:29:18.088, foo, 2016-07-05 21:29:18.088, foo}
2016-07-05 21:29:18,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:18.089, foo, 2016-07-05 21:29:18.089, foo}
2016-07-05 21:29:18,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:18.09, foo, 2016-07-05 21:29:18.09, foo}
2016-07-05 21:29:18,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:29:18.091, foo, 2016-07-05 21:29:18.091, foo}
2016-07-05 21:29:18,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:29:18.092, foo, 2016-07-05 21:29:18.092, foo}
2016-07-05 21:29:18,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:29:18.093, foo, 2016-07-05 21:29:18.093, foo}
2016-07-05 21:29:18,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:29:18.094, foo, 2016-07-05 21:29:18.094, foo}
2016-07-05 21:29:18,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:29:18.095, foo, 2016-07-05 21:29:18.095, foo}
2016-07-05 21:29:18,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:29:18.097, foo, 2016-07-05 21:29:18.097, foo}
2016-07-05 21:29:18,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:29:18.097, foo, 2016-07-05 21:29:18.097, foo}
2016-07-05 21:29:18,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:29:18.098, foo, 2016-07-05 21:29:18.098, foo}
2016-07-05 21:29:18,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:29:18.099, foo, 2016-07-05 21:29:18.099, foo}
2016-07-05 21:29:18,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:29:18.099, foo, 2016-07-05 21:29:18.099, foo}
2016-07-05 21:29:18,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:29:18.1, foo, 2016-07-05 21:29:18.1, foo}
2016-07-05 21:29:18,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:29:18.1, foo, 2016-07-05 21:29:18.1, foo}
2016-07-05 21:29:18,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:29:18.101, foo, 2016-07-05 21:29:18.101, foo}
2016-07-05 21:29:18,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:29:18.101, foo, 2016-07-05 21:29:18.101, foo}
2016-07-05 21:29:18,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:29:18.102, foo, 2016-07-05 21:29:18.102, foo}
2016-07-05 21:29:18,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:29:18.102, foo, 2016-07-05 21:29:18.102, foo}
2016-07-05 21:29:18,103 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:29:18.103, foo, 2016-07-05 21:29:18.103, foo}
2016-07-05 21:29:18,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:29:18.104, foo, 2016-07-05 21:29:18.104, foo}
2016-07-05 21:29:18,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:29:18.105, foo, 2016-07-05 21:29:18.105, foo}
2016-07-05 21:29:18,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:29:18.105, foo, 2016-07-05 21:29:18.105, foo}
2016-07-05 21:29:18,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:29:18.106, foo, 2016-07-05 21:29:18.106, foo}
2016-07-05 21:29:18,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:29:18.106, foo, 2016-07-05 21:29:18.106, foo}
2016-07-05 21:29:18,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:18.106, foo, 2016-07-05 21:29:18.106, foo}
2016-07-05 21:29:18,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:29:18.107, foo, 2016-07-05 21:29:18.107, foo}
2016-07-05 21:29:18,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:29:18.107, foo, 2016-07-05 21:29:18.107, foo}
2016-07-05 21:29:18,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:29:18.114, foo, 2016-07-05 21:29:18.114, foo}
2016-07-05 21:29:18,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:29:18.114, foo, 2016-07-05 21:29:18.114, foo}
2016-07-05 21:29:18,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:29:18.115, foo, 2016-07-05 21:29:18.115, foo}
2016-07-05 21:29:18,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:29:18.115, foo, 2016-07-05 21:29:18.115, foo}
2016-07-05 21:29:18,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:29:18.116, foo, 2016-07-05 21:29:18.116, foo}
2016-07-05 21:29:18,116 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:29:18.116, foo, 2016-07-05 21:29:18.116, foo}
2016-07-05 21:29:18,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:29:18.117, foo, 2016-07-05 21:29:18.117, foo}
2016-07-05 21:29:18,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:29:18.117, foo, 2016-07-05 21:29:18.117, foo}
2016-07-05 21:29:18,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:18.118, foo, 2016-07-05 21:29:18.118, foo}
2016-07-05 21:29:18,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:29:18.118, foo, 2016-07-05 21:29:18.118, foo}
2016-07-05 21:29:18,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:29:18.118, foo, 2016-07-05 21:29:18.118, foo}
2016-07-05 21:29:18,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:29:18.119, foo, 2016-07-05 21:29:18.119, foo}
2016-07-05 21:29:18,119 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:29:18.119, foo, 2016-07-05 21:29:18.119, foo}
2016-07-05 21:29:18,120 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:29:18.12, foo, 2016-07-05 21:29:18.12, foo}
2016-07-05 21:29:18,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:29:18.121, foo, 2016-07-05 21:29:18.121, foo}
2016-07-05 21:29:18,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:29:18.121, foo, 2016-07-05 21:29:18.121, foo}
2016-07-05 21:29:18,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:29:18.122, foo, 2016-07-05 21:29:18.122, foo}
2016-07-05 21:29:18,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:29:18.123, foo, 2016-07-05 21:29:18.123, foo}
2016-07-05 21:29:18,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:29:18.124, foo, 2016-07-05 21:29:18.124, foo}
2016-07-05 21:29:18,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:29:18.126, foo, 2016-07-05 21:29:18.126, foo}
2016-07-05 21:29:18,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:29:18.127, foo, 2016-07-05 21:29:18.127, foo}
2016-07-05 21:29:18,128 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:29:18.128, foo, 2016-07-05 21:29:18.128, foo}
2016-07-05 21:29:18,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:29:18.129, foo, 2016-07-05 21:29:18.129, foo}
2016-07-05 21:29:18,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:29:18.13, foo, 2016-07-05 21:29:18.13, foo}
2016-07-05 21:29:18,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:29:18.13, foo, 2016-07-05 21:29:18.13, foo}
2016-07-05 21:29:18,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:29:18.131, foo, 2016-07-05 21:29:18.131, foo}
2016-07-05 21:29:18,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:18.131, foo, 2016-07-05 21:29:18.131, foo}
2016-07-05 21:29:18,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:18.132, foo, 2016-07-05 21:29:18.132, foo}
2016-07-05 21:29:18,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:18.132, foo, 2016-07-05 21:29:18.132, foo}
2016-07-05 21:29:18,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:29:18.133, foo, 2016-07-05 21:29:18.133, foo}
2016-07-05 21:29:18,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:29:18.134, foo, 2016-07-05 21:29:18.134, foo}
2016-07-05 21:29:18,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:29:18.134, foo, 2016-07-05 21:29:18.134, foo}
2016-07-05 21:29:18,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:29:18.135, foo, 2016-07-05 21:29:18.135, foo}
2016-07-05 21:29:18,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:29:18.136, foo, 2016-07-05 21:29:18.136, foo}
2016-07-05 21:29:18,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:29:18.143, foo, 2016-07-05 21:29:18.143, foo}
2016-07-05 21:29:18,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:29:18.147, foo, 2016-07-05 21:29:18.147, foo}
2016-07-05 21:29:18,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:29:18.147, foo, 2016-07-05 21:29:18.147, foo}
2016-07-05 21:29:18,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:29:18.148, foo, 2016-07-05 21:29:18.148, foo}
2016-07-05 21:29:18,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:29:18.15, foo, 2016-07-05 21:29:18.15, foo}
2016-07-05 21:29:18,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:29:18.151, foo, 2016-07-05 21:29:18.151, foo}
2016-07-05 21:29:18,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:29:18.151, foo, 2016-07-05 21:29:18.151, foo}
2016-07-05 21:29:18,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:29:18.152, foo, 2016-07-05 21:29:18.152, foo}
2016-07-05 21:29:18,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:29:18.152, foo, 2016-07-05 21:29:18.152, foo}
2016-07-05 21:29:18,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:29:18.153, foo, 2016-07-05 21:29:18.153, foo}
2016-07-05 21:29:18,219 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:29:18,220 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:29:18,220 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:29:18,220 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:29:18,220 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:29:18,221 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:29:18,221 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:29:18,221 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:29:18,222 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:29:18,224 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:29:18,225 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:29:18,226 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:29:18,227 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:29:18,227 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:29:18,228 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:29:18,230 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 21:29:18,230 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 21:29:18,230 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 21:29:18,231 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 21:29:18,231 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 21:29:18,231 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 21:29:18,234 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 21:29:18,235 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column for display order
alter table PRODUCT_STATUS add DISPLAY_ORDER INTEGER NOT NULL after PRODUCT_STATUS_NAME
2016-07-05 21:29:18,273 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 1 where PRODUCT_STATUS_CODE= 'ONS'
2016-07-05 21:29:18,274 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 2 where PRODUCT_STATUS_CODE= 'PST'
2016-07-05 21:29:18,275 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 3 where PRODUCT_STATUS_CODE= 'SST'
2016-07-05 21:29:18,276 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint unique(DISPLAY_ORDER)
2016-07-05 21:29:18,298 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- create table MEMBER_FOLLOWING
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:29:18,317 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_MY_MEMBER 
    foreign key (MY_MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:18,333 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_YOUR_MEMBER 
    foreign key (YOUR_MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:29:18,352 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FOLLOWING_UNIQUE_REVERSE on MEMBER_FOLLOWING(YOUR_MEMBER_ID, MY_MEMBER_ID)
2016-07-05 21:29:18,367 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FOLLOWING_FOLLOW_DATETIME on MEMBER_FOLLOWING(FOLLOW_DATETIME)
2016-07-05 21:29:18,386 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=10 failure=0
2016-07-05 21:29:18,386 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=10 failure=0 (in 1 files)
2016-07-05 21:29:18,387 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:29:18,387 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:29:18,387 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:29:18,388 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:29:18,388 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:29:18,388 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:29:18,388 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=0 failure=0 (in 0 files)
2016-07-05 21:29:18,388 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:29:18,388 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:29:18,389 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:29:18,389 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:29:18,389 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:29:18,389 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:29:18,389 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:29:18,391 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:29:18,398 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:29:18,403 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:29:18,403 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:29:18,403 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:29:18,404 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:29:18,422 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:29:18,438 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:29:18,447 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:29:18,456 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:29:18,466 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:29:18,475 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:29:18,482 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:29:18,490 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:29:18,500 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:29:18,507 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:29:18,515 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:29:18,525 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:29:18,534 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:29:18,542 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:29:18,551 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:29:18,558 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:29:18,558 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:29:18,558 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:29:18,559 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:29:18,559 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:29:18,559 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:29:18,559 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:29:18,560 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:29:18,560 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:29:18,568 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck diffmap file: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:29:18,569 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the AlterCheck result file: playsql/migration/schema/alter-check-result.html
2016-07-05 21:29:18,569 [main] INFO  (DfAlterCheckProcess#schemaDiff():896) - 
2016-07-05 21:29:18,570 [main] INFO  (DfAlterCheckProcess#schemaDiff():897) - +-----------------+
2016-07-05 21:29:18,583 [main] INFO  (DfAlterCheckProcess#schemaDiff():898) - |                 |
2016-07-05 21:29:18,583 [main] INFO  (DfAlterCheckProcess#schemaDiff():899) - |   Schema Diff   |
2016-07-05 21:29:18,583 [main] INFO  (DfAlterCheckProcess#schemaDiff():900) - |                 |
2016-07-05 21:29:18,583 [main] INFO  (DfAlterCheckProcess#schemaDiff():901) - +-----------------|
2016-07-05 21:29:18,602 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:29:18,688 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2016-07-05 21:29:18,767 [main] INFO  (DfAlterCheckProcess#processDifference():916) - 
2016-07-05 21:29:18,767 [main] INFO  (DfAlterCheckProcess#processDifference():917) - +---------------------+
2016-07-05 21:29:18,768 [main] INFO  (DfAlterCheckProcess#processDifference():918) - |                     |
2016-07-05 21:29:18,768 [main] INFO  (DfAlterCheckProcess#processDifference():919) - |   Different Story   |
2016-07-05 21:29:18,768 [main] INFO  (DfAlterCheckProcess#processDifference():920) - |                     |
2016-07-05 21:29:18,768 [main] INFO  (DfAlterCheckProcess#processDifference():921) - +---------------------+
2016-07-05 21:29:18,769 [main] INFO  (DfAlterCheckProcess#serializeSchemaDiff():931) - ...Serializing schema diff: playsql/migration/schema/migration-alter-check.diffmap
2016-07-05 21:29:18,773 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 21:29:18,776 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for previous schema: playsql/migration/schema/migration-previous-schema.xml
2016-07-05 21:29:18,777 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:29:18,811 [main] INFO  (DfReplaceSchemaTask#initControlContext():504) - 
2016-07-05 21:29:18,811 [main] INFO  (DfReplaceSchemaTask#initControlContext():505) - ...Preparing generation of alter check
2016-07-05 21:29:18,819 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2016-07-05 21:29:19,020 [main] INFO  (Database#doEnableDocumentOutputDirectory():1179) - ...Setting up documentOutputDirectory: ./output/doc
2016-07-05 21:29:19,027 [main] INFO  (Database#enableMigrationOutputDirectory():1193) - ...Setting up migrationOutputDirectory: playsql/migration/schema
2016-07-05 21:29:19,028 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():157) - ...Loading schema history
2016-07-05 21:29:19,031 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():161) -  -> found history: count=1
2016-07-05 21:29:19,136 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:29:19,176 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfAlterCheckDifferenceFoundException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Found the differences between AlterDDL and NextDDL.

[Advice]
Make sure your AlterDDL are correct,
and after that, execute AlterCheck again.

You can see the details at
 'playsql/migration/schema/alter-check-result.html'.

[Diff Date]
2016/07/05 21:29:18
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.handleAlterDiff(DfAlterCheckProcess.java:970)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.processDifference(DfAlterCheckProcess.java:924)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:466)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2016-07-05 21:29:19,199 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:29:19,202 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m09s353ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=10 failure=0 (in 1 files)
  o alter-schema.sql
  x (found alter diff)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:31:34,648 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:31:34,652 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:31:34,653 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:31:34,657 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:31:34,659 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:31:34,659 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:31:34,664 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:31:36,030 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:31:36,031 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:31:36,032 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:31:36,032 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:31:36,040 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:31:36,476 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:31:36,476 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:31:36,488 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 21:31:36,503 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:31:36,506 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:31:36,506 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:31:36,507 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:31:36,507 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:31:36,507 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:31:36,530 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:31:36,531 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:31:36,532 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:31:36,532 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:31:36,532 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:31:36,533 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:31:36,551 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:31:36,552 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:36,553 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:31:36,597 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:31:36,602 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:31:36,607 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:31:36,613 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:31:36,624 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:31:36,632 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:31:36,644 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:31:36,668 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:31:36,686 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:31:36,711 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:31:36,733 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_following drop foreign key FK_MEMBER_FOLLOWING_MY_MEMBER
2016-07-05 21:31:36,753 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_following drop foreign key FK_MEMBER_FOLLOWING_YOUR_MEMBER
2016-07-05 21:31:36,773 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:31:36,790 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:31:36,815 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:31:36,833 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:31:36,852 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:31:36,873 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:31:36,890 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:31:36,903 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:31:36,920 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:31:36,932 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:31:36,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:31:36,971 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:31:36,993 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:31:37,020 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:31:37,024 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:31:37,029 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:31:37,034 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:31:37,039 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:31:37,042 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:31:37,045 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:31:37,050 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:31:37,054 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:31:37,057 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:31:37,060 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:31:37,064 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:31:37,068 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:31:37,071 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:31:37,074 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:31:37,078 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:31:37,154 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:31:37,157 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:31:37,161 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:31:37,162 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:31:37,162 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:31:37,162 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:31:37,163 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:31:37,163 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:31:37,169 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:31:37,172 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:31:37,173 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:31:37,175 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:31:37,199 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:31:37,199 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:31:37,201 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:31:37,201 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:31:37,204 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:31:37,207 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:31:37,208 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:31:37,209 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:31:37,209 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:31:37,210 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:31:37,215 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:31:37,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:31:37,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:31:37,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:31:37,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:31:37,499 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:31:37,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:31:37,629 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:31:37,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:31:37,762 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:31:37,776 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:31:37,825 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:31:37,836 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:31:37,872 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:31:37,909 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:31:37,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:31:37,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:31:37,987 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,006 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:31:38,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:31:38,048 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,067 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,087 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:31:38,107 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,126 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,145 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:31:38,166 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:38,193 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:31:38,221 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:31:38,239 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:31:38,274 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:31:38,299 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:31:38,329 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:31:38,354 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:31:38,373 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:31:38,391 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:31:38,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:31:38,432 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:31:38,453 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:31:38,474 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:31:38,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:31:38,514 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=41 failure=0
2016-07-05 21:31:38,515 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:31:38,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:31:38,519 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:31:38,522 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:31:38,522 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=45 failure=0 (in 3 files)
2016-07-05 21:31:38,523 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:31:38,648 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:31:38,649 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:31:38,649 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:31:38,649 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:31:38,649 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:31:38,649 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:31:38,676 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:38,677 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:31:38,677 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:38,940 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:31:38,940 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:38,941 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:31:38,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:31:39,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:31:39,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:31:39,103 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:31:39,109 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:31:39,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:31:39,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:31:39,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:31:39,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:31:39,121 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:31:39,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:31:39,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:31:39,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:31:39,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:31:39,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:31:39,134 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:31:39,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:31:39,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:31:39,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:31:39,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:31:39,143 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:31:39,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:31:39,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:31:39,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:31:39,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:31:39,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:31:39,154 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:31:39,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:31:39,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:31:39,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:31:39,162 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:31:39,164 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:39,164 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:31:39,164 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:39,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:31:39.293, foo, 2016-07-05 21:31:39.293, foo, 0}
2016-07-05 21:31:39,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:31:39.301, foo, 2016-07-05 21:31:39.301, foo, 0}
2016-07-05 21:31:39,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:31:39.303, foo, 2016-07-05 21:31:39.303, foo, 0}
2016-07-05 21:31:39,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:31:39.306, foo, 2016-07-05 21:31:39.306, foo, 0}
2016-07-05 21:31:39,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:31:39.308, foo, 2016-07-05 21:31:39.308, foo, 0}
2016-07-05 21:31:39,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:31:39.309, foo, 2016-07-05 21:31:39.309, foo, 0}
2016-07-05 21:31:39,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:31:39.316, foo, 2016-07-05 21:31:39.316, foo, 0}
2016-07-05 21:31:39,319 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:31:39.319, foo, 2016-07-05 21:31:39.319, foo, 0}
2016-07-05 21:31:39,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:31:39.322, foo, 2016-07-05 21:31:39.322, foo, 0}
2016-07-05 21:31:39,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:31:39.325, foo, 2016-07-05 21:31:39.325, foo, 0}
2016-07-05 21:31:39,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:31:39.326, foo, 2016-07-05 21:31:39.326, foo, 0}
2016-07-05 21:31:39,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:31:39.328, foo, 2016-07-05 21:31:39.328, foo, 0}
2016-07-05 21:31:39,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:31:39.329, foo, 2016-07-05 21:31:39.329, foo, 0}
2016-07-05 21:31:39,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:31:39.331, foo, 2016-07-05 21:31:39.331, foo, 0}
2016-07-05 21:31:39,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:31:39.334, foo, 2016-07-05 21:31:39.334, foo, 0}
2016-07-05 21:31:39,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:31:39.336, foo, 2016-07-05 21:31:39.336, foo, 0}
2016-07-05 21:31:39,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:31:39.344, foo, 2016-07-05 21:31:39.344, foo, 0}
2016-07-05 21:31:39,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:31:39.345, foo, 2016-07-05 21:31:39.345, foo, 0}
2016-07-05 21:31:39,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:31:39.348, foo, 2016-07-05 21:31:39.348, foo, 0}
2016-07-05 21:31:39,359 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:31:39.359, foo, 2016-07-05 21:31:39.359, foo, 0}
2016-07-05 21:31:39,381 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:31:39,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:31:39.383, foo, 2016-07-05 21:31:39.383, foo, 0}
2016-07-05 21:31:39,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:31:39.388, foo, 2016-07-05 21:31:39.388, foo, 0}
2016-07-05 21:31:39,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:31:39.392, foo, 2016-07-05 21:31:39.392, foo, 0}
2016-07-05 21:31:39,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:31:39.395, foo, 2016-07-05 21:31:39.395, foo, 0}
2016-07-05 21:31:39,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:31:39.397, foo, 2016-07-05 21:31:39.397, foo, 0}
2016-07-05 21:31:39,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:31:39.4, foo, 2016-07-05 21:31:39.4, foo, 0}
2016-07-05 21:31:39,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:31:39.403, foo, 2016-07-05 21:31:39.403, foo, 0}
2016-07-05 21:31:39,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:31:39.407, foo, 2016-07-05 21:31:39.407, foo, 0}
2016-07-05 21:31:39,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:31:39.41, foo, 2016-07-05 21:31:39.41, foo, 0}
2016-07-05 21:31:39,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:31:39.412, foo, 2016-07-05 21:31:39.412, foo, 0}
2016-07-05 21:31:39,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:31:39.414, foo, 2016-07-05 21:31:39.414, foo, 0}
2016-07-05 21:31:39,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:31:39.416, foo, 2016-07-05 21:31:39.416, foo, 0}
2016-07-05 21:31:39,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:31:39.419, foo, 2016-07-05 21:31:39.419, foo, 0}
2016-07-05 21:31:39,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:31:39.424, foo, 2016-07-05 21:31:39.424, foo, 0}
2016-07-05 21:31:39,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:31:39.426, foo, 2016-07-05 21:31:39.426, foo, 0}
2016-07-05 21:31:39,428 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:31:39.428, foo, 2016-07-05 21:31:39.428, foo, 0}
2016-07-05 21:31:39,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:31:39.43, foo, 2016-07-05 21:31:39.43, foo, 0}
2016-07-05 21:31:39,432 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:31:39.432, foo, 2016-07-05 21:31:39.432, foo, 0}
2016-07-05 21:31:39,433 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:31:39.433, foo, 2016-07-05 21:31:39.433, foo, 0}
2016-07-05 21:31:39,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:31:39.435, foo, 2016-07-05 21:31:39.435, foo, 0}
2016-07-05 21:31:39,456 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:31:39,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:31:39,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:31:39,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:31:39,461 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:31:39,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:31:39,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:31:39,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:31:39,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:31:39,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:31:39,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:31:39,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:31:39,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:31:39,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:31:39,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:31:39,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:31:39,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:31:39,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:31:39,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:31:39,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:31:39,478 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:31:39,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:31:39,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:31:39,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:31:39,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:31:39,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:31:39,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:31:39,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:31:39,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:31:39,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:31:39,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:31:39,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:31:39,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:31:39,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:31:39,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:31:39,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:31:39,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:31:39,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:31:39,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:31:39,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:31:39,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:31:39,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:31:39,503 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:31:39,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:31:39,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:31:39,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:31:39,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:31:39,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:31:39,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:31:39,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:31:39,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:31:39,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:31:39,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:31:39,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:31:39,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:31:39,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:31:39,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:31:39,563 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:31:39,564 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:31:39.564, foo, 2016-07-05 21:31:39.564, foo, 0}
2016-07-05 21:31:39,565 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:31:39.565, foo, 2016-07-05 21:31:39.565, foo, 0}
2016-07-05 21:31:39,566 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:31:39.566, foo, 2016-07-05 21:31:39.566, foo, 0}
2016-07-05 21:31:39,567 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:31:39.567, foo, 2016-07-05 21:31:39.567, foo, 0}
2016-07-05 21:31:39,568 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:31:39.568, foo, 2016-07-05 21:31:39.568, foo, 0}
2016-07-05 21:31:39,569 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:31:39.569, foo, 2016-07-05 21:31:39.569, foo, 0}
2016-07-05 21:31:39,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:31:39.57, foo, 2016-07-05 21:31:39.57, foo, 0}
2016-07-05 21:31:39,570 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:31:39.57, foo, 2016-07-05 21:31:39.57, foo, 0}
2016-07-05 21:31:39,571 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:31:39.571, foo, 2016-07-05 21:31:39.571, foo, 0}
2016-07-05 21:31:39,572 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:31:39.572, foo, 2016-07-05 21:31:39.572, foo, 0}
2016-07-05 21:31:39,573 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:31:39.573, foo, 2016-07-05 21:31:39.573, foo, 0}
2016-07-05 21:31:39,575 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:31:39.575, foo, 2016-07-05 21:31:39.575, foo, 0}
2016-07-05 21:31:39,576 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:31:39.576, foo, 2016-07-05 21:31:39.576, foo, 0}
2016-07-05 21:31:39,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:31:39.576, foo, 2016-07-05 21:31:39.576, foo, 0}
2016-07-05 21:31:39,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:31:39.577, foo, 2016-07-05 21:31:39.577, foo, 0}
2016-07-05 21:31:39,578 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:31:39.578, foo, 2016-07-05 21:31:39.578, foo, 0}
2016-07-05 21:31:39,579 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:31:39.579, foo, 2016-07-05 21:31:39.579, foo, 0}
2016-07-05 21:31:39,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:31:39.58, foo, 2016-07-05 21:31:39.58, foo, 0}
2016-07-05 21:31:39,580 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:31:39.58, foo, 2016-07-05 21:31:39.58, foo, 0}
2016-07-05 21:31:39,581 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:31:39.581, foo, 2016-07-05 21:31:39.581, foo, 0}
2016-07-05 21:31:39,604 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:31:39,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:31:39.605, foo, 2016-07-05 21:31:39.605, foo, 0}
2016-07-05 21:31:39,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:31:39.607, foo, 2016-07-05 21:31:39.607, foo, 0}
2016-07-05 21:31:39,608 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:31:39.608, foo, 2016-07-05 21:31:39.608, foo, 0}
2016-07-05 21:31:39,609 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:31:39.609, foo, 2016-07-05 21:31:39.609, foo, 0}
2016-07-05 21:31:39,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:31:39.61, foo, 2016-07-05 21:31:39.61, foo, 0}
2016-07-05 21:31:39,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:31:39.611, foo, 2016-07-05 21:31:39.611, foo, 0}
2016-07-05 21:31:39,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:31:39.612, foo, 2016-07-05 21:31:39.612, foo, 0}
2016-07-05 21:31:39,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:31:39.612, foo, 2016-07-05 21:31:39.612, foo, 0}
2016-07-05 21:31:39,613 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:31:39.613, foo, 2016-07-05 21:31:39.613, foo, 0}
2016-07-05 21:31:39,614 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:31:39.614, foo, 2016-07-05 21:31:39.614, foo, 0}
2016-07-05 21:31:39,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:31:39.626, foo, 2016-07-05 21:31:39.626, foo, 0}
2016-07-05 21:31:39,627 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:31:39.627, foo, 2016-07-05 21:31:39.627, foo, 0}
2016-07-05 21:31:39,628 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:31:39.628, foo, 2016-07-05 21:31:39.628, foo, 0}
2016-07-05 21:31:39,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:31:39.628, foo, 2016-07-05 21:31:39.628, foo, 0}
2016-07-05 21:31:39,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:31:39.629, foo, 2016-07-05 21:31:39.629, foo, 0}
2016-07-05 21:31:39,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:31:39.63, foo, 2016-07-05 21:31:39.63, foo, 0}
2016-07-05 21:31:39,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:31:39.63, foo, 2016-07-05 21:31:39.63, foo, 0}
2016-07-05 21:31:39,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:31:39.631, foo, 2016-07-05 21:31:39.631, foo, 0}
2016-07-05 21:31:39,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:31:39.632, foo, 2016-07-05 21:31:39.632, foo, 0}
2016-07-05 21:31:39,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:31:39.632, foo, 2016-07-05 21:31:39.632, foo, 0}
2016-07-05 21:31:39,648 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:31:39,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:31:39.649, foo, 2016-07-05 21:31:39.649, foo}
2016-07-05 21:31:39,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:31:39.651, foo, 2016-07-05 21:31:39.651, foo}
2016-07-05 21:31:39,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:31:39.663, foo, 2016-07-05 21:31:39.663, foo}
2016-07-05 21:31:39,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:31:39.676, foo, 2016-07-05 21:31:39.676, foo}
2016-07-05 21:31:39,684 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:31:39,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:31:39,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:31:39,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:31:39,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:31:39,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:31:39,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:31:39,691 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:31:39,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:31:39,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:31:39,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:31:39,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:31:39,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:31:39,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:31:39,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:31:39,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:31:39,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:31:39,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:31:39,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:31:39,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:31:39,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:31:39,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:31:39,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:31:39,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:31:39,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:31:39,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:31:39,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:31:39,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:31:39,718 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:31:39,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:31:39,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:31:39,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:31:39,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:31:39,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:31:39,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:31:39,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:31:39,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:31:39,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:31:39,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:31:39,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:31:39,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:31:39,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:31:39,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:31:39,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:31:39,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:31:39,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:31:39,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:31:39,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:31:39,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:31:39,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:31:39,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:31:39,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:31:39,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:31:39,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:31:39,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:31:39,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:31:39,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:31:39,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:31:39,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:31:39,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:31:39,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:31:39,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:31:39,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:31:39,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:31:39,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:31:39,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:31:39,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:31:39,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:31:39,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:31:39,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:31:39,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:31:39,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:31:39,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:31:39,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:31:39,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:31:39,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:31:39,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:31:39,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:31:39,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:31:39,802 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:31:39,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:31:39,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:31:39,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:31:39,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:31:39,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:31:39,807 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:31:39,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:31:39,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:31:39,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:31:39,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:31:39,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:31:39,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:31:39,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:31:39,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:31:39,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:31:39,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:31:39,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:31:39,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:31:39,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:31:39,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:31:39,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:31:39,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:31:39,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:31:39,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:31:39,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:31:39,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:31:39,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:31:39,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:31:39,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:31:39,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:31:39,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:31:39,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:31:39,916 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:31:39,916 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:39,916 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:31:39,917 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:39,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:31:39.978, foo, 2016-07-05 21:31:39.978, foo, 0}
2016-07-05 21:31:39,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:31:39.98, foo, 2016-07-05 21:31:39.98, foo, 0}
2016-07-05 21:31:39,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:31:39.981, foo, 2016-07-05 21:31:39.981, foo, 0}
2016-07-05 21:31:39,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:31:39.981, foo, 2016-07-05 21:31:39.981, foo, 0}
2016-07-05 21:31:39,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:31:39.982, foo, 2016-07-05 21:31:39.982, foo, 0}
2016-07-05 21:31:39,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:31:39.983, foo, 2016-07-05 21:31:39.983, foo, 0}
2016-07-05 21:31:39,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:31:39.984, foo, 2016-07-05 21:31:39.984, foo, 0}
2016-07-05 21:31:39,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:31:39.984, foo, 2016-07-05 21:31:39.984, foo, 0}
2016-07-05 21:31:39,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:31:39.989, foo, 2016-07-05 21:31:39.989, foo, 0}
2016-07-05 21:31:39,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:31:39.991, foo, 2016-07-05 21:31:39.991, foo, 0}
2016-07-05 21:31:39,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:31:39.991, foo, 2016-07-05 21:31:39.991, foo, 0}
2016-07-05 21:31:39,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:31:39.992, foo, 2016-07-05 21:31:39.992, foo, 0}
2016-07-05 21:31:39,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:31:39.993, foo, 2016-07-05 21:31:39.993, foo, 0}
2016-07-05 21:31:39,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:31:39.994, foo, 2016-07-05 21:31:39.994, foo, 0}
2016-07-05 21:31:39,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:31:39.994, foo, 2016-07-05 21:31:39.994, foo, 0}
2016-07-05 21:31:39,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:31:39.994, foo, 2016-07-05 21:31:39.994, foo, 0}
2016-07-05 21:31:39,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:31:39.995, foo, 2016-07-05 21:31:39.995, foo, 0}
2016-07-05 21:31:39,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:31:39.995, foo, 2016-07-05 21:31:39.995, foo, 0}
2016-07-05 21:31:39,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:31:39.999, foo, 2016-07-05 21:31:39.999, foo, 0}
2016-07-05 21:31:40,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:31:40.0, foo, 2016-07-05 21:31:40.0, foo, 0}
2016-07-05 21:31:40,014 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:31:40,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:31:40.015, foo, 2016-07-05 21:31:40.015, foo, 0}
2016-07-05 21:31:40,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:31:40.017, foo, 2016-07-05 21:31:40.017, foo, 0}
2016-07-05 21:31:40,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:31:40.02, foo, 2016-07-05 21:31:40.02, foo, 0}
2016-07-05 21:31:40,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:31:40.022, foo, 2016-07-05 21:31:40.022, foo, 0}
2016-07-05 21:31:40,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:31:40.024, foo, 2016-07-05 21:31:40.024, foo, 0}
2016-07-05 21:31:40,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:31:40.026, foo, 2016-07-05 21:31:40.026, foo, 0}
2016-07-05 21:31:40,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:31:40.027, foo, 2016-07-05 21:31:40.027, foo, 0}
2016-07-05 21:31:40,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:31:40.028, foo, 2016-07-05 21:31:40.028, foo, 0}
2016-07-05 21:31:40,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:31:40.031, foo, 2016-07-05 21:31:40.031, foo, 0}
2016-07-05 21:31:40,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:31:40.032, foo, 2016-07-05 21:31:40.032, foo, 0}
2016-07-05 21:31:40,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:31:40.034, foo, 2016-07-05 21:31:40.034, foo, 0}
2016-07-05 21:31:40,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:31:40.039, foo, 2016-07-05 21:31:40.039, foo, 0}
2016-07-05 21:31:40,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:31:40.041, foo, 2016-07-05 21:31:40.041, foo, 0}
2016-07-05 21:31:40,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:31:40.042, foo, 2016-07-05 21:31:40.042, foo, 0}
2016-07-05 21:31:40,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:31:40.044, foo, 2016-07-05 21:31:40.044, foo, 0}
2016-07-05 21:31:40,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:31:40.045, foo, 2016-07-05 21:31:40.045, foo, 0}
2016-07-05 21:31:40,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:31:40.047, foo, 2016-07-05 21:31:40.047, foo, 0}
2016-07-05 21:31:40,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:31:40.11, foo, 2016-07-05 21:31:40.11, foo, 0}
2016-07-05 21:31:40,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:31:40.13, foo, 2016-07-05 21:31:40.13, foo, 0}
2016-07-05 21:31:40,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:31:40.132, foo, 2016-07-05 21:31:40.132, foo, 0}
2016-07-05 21:31:40,134 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:31:40.134, foo, 2016-07-05 21:31:40.134, foo, 0}
2016-07-05 21:31:40,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:31:40.135, foo, 2016-07-05 21:31:40.135, foo, 0}
2016-07-05 21:31:40,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:31:40.136, foo, 2016-07-05 21:31:40.136, foo, 0}
2016-07-05 21:31:40,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:31:40.137, foo, 2016-07-05 21:31:40.137, foo, 0}
2016-07-05 21:31:40,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:31:40.139, foo, 2016-07-05 21:31:40.139, foo, 0}
2016-07-05 21:31:40,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:31:40.141, foo, 2016-07-05 21:31:40.141, foo, 0}
2016-07-05 21:31:40,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:31:40.142, foo, 2016-07-05 21:31:40.142, foo, 0}
2016-07-05 21:31:40,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:31:40.144, foo, 2016-07-05 21:31:40.144, foo, 0}
2016-07-05 21:31:40,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:31:40.148, foo, 2016-07-05 21:31:40.148, foo, 0}
2016-07-05 21:31:40,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:31:40.149, foo, 2016-07-05 21:31:40.149, foo, 0}
2016-07-05 21:31:40,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:31:40.152, foo, 2016-07-05 21:31:40.152, foo, 0}
2016-07-05 21:31:40,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:31:40.16, foo, 2016-07-05 21:31:40.16, foo, 0}
2016-07-05 21:31:40,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:40.161, foo, 2016-07-05 21:31:40.161, foo, 0}
2016-07-05 21:31:40,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:40.163, foo, 2016-07-05 21:31:40.163, foo, 0}
2016-07-05 21:31:40,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:31:40.165, foo, 2016-07-05 21:31:40.165, foo, 0}
2016-07-05 21:31:40,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:40.166, foo, 2016-07-05 21:31:40.166, foo, 0}
2016-07-05 21:31:40,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:31:40.167, foo, 2016-07-05 21:31:40.167, foo, 0}
2016-07-05 21:31:40,168 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:31:40.168, foo, 2016-07-05 21:31:40.168, foo, 0}
2016-07-05 21:31:40,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:31:40.169, foo, 2016-07-05 21:31:40.169, foo, 0}
2016-07-05 21:31:40,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:31:40.169, foo, 2016-07-05 21:31:40.169, foo, 0}
2016-07-05 21:31:40,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:31:40.173, foo, 2016-07-05 21:31:40.173, foo, 0}
2016-07-05 21:31:40,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:31:40.174, foo, 2016-07-05 21:31:40.174, foo, 0}
2016-07-05 21:31:40,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:31:40.175, foo, 2016-07-05 21:31:40.175, foo, 0}
2016-07-05 21:31:40,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:40.176, foo, 2016-07-05 21:31:40.176, foo, 0}
2016-07-05 21:31:40,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:40.177, foo, 2016-07-05 21:31:40.177, foo, 0}
2016-07-05 21:31:40,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:31:40.178, foo, 2016-07-05 21:31:40.178, foo, 0}
2016-07-05 21:31:40,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:40.179, foo, 2016-07-05 21:31:40.179, foo, 0}
2016-07-05 21:31:40,179 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:31:40.179, foo, 2016-07-05 21:31:40.179, foo, 0}
2016-07-05 21:31:40,180 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:31:40.18, foo, 2016-07-05 21:31:40.18, foo, 0}
2016-07-05 21:31:40,181 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:31:40.181, foo, 2016-07-05 21:31:40.181, foo, 0}
2016-07-05 21:31:40,182 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:31:40.182, foo, 2016-07-05 21:31:40.182, foo, 0}
2016-07-05 21:31:40,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:31:40.184, foo, 2016-07-05 21:31:40.184, foo, 0}
2016-07-05 21:31:40,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:31:40.191, foo, 2016-07-05 21:31:40.191, foo, 0}
2016-07-05 21:31:40,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:40.193, foo, 2016-07-05 21:31:40.193, foo, 0}
2016-07-05 21:31:40,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:40.194, foo, 2016-07-05 21:31:40.194, foo, 0}
2016-07-05 21:31:40,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:31:40.195, foo, 2016-07-05 21:31:40.195, foo, 0}
2016-07-05 21:31:40,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:40.195, foo, 2016-07-05 21:31:40.195, foo, 0}
2016-07-05 21:31:40,196 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:31:40.196, foo, 2016-07-05 21:31:40.196, foo, 0}
2016-07-05 21:31:40,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:31:40.197, foo, 2016-07-05 21:31:40.197, foo, 0}
2016-07-05 21:31:40,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:31:40.198, foo, 2016-07-05 21:31:40.198, foo, 0}
2016-07-05 21:31:40,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:31:40.198, foo, 2016-07-05 21:31:40.198, foo, 0}
2016-07-05 21:31:40,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:31:40.199, foo, 2016-07-05 21:31:40.199, foo, 0}
2016-07-05 21:31:40,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:31:40.2, foo, 2016-07-05 21:31:40.2, foo, 0}
2016-07-05 21:31:40,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:31:40.204, foo, 2016-07-05 21:31:40.204, foo, 0}
2016-07-05 21:31:40,205 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:31:40.205, foo, 2016-07-05 21:31:40.205, foo, 0}
2016-07-05 21:31:40,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:31:40.206, foo, 2016-07-05 21:31:40.206, foo, 0}
2016-07-05 21:31:40,208 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:31:40.208, foo, 2016-07-05 21:31:40.208, foo, 0}
2016-07-05 21:31:40,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:31:40.209, foo, 2016-07-05 21:31:40.209, foo, 0}
2016-07-05 21:31:40,210 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:31:40.21, foo, 2016-07-05 21:31:40.21, foo, 0}
2016-07-05 21:31:40,211 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:31:40.211, foo, 2016-07-05 21:31:40.211, foo, 0}
2016-07-05 21:31:40,257 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:31:40,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:31:40.259, foo, 2016-07-05 21:31:40.259, foo}
2016-07-05 21:31:40,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:31:40.261, foo, 2016-07-05 21:31:40.261, foo}
2016-07-05 21:31:40,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:31:40.262, foo, 2016-07-05 21:31:40.262, foo}
2016-07-05 21:31:40,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:31:40.263, foo, 2016-07-05 21:31:40.263, foo}
2016-07-05 21:31:40,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:31:40.264, foo, 2016-07-05 21:31:40.264, foo}
2016-07-05 21:31:40,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:31:40.302, foo, 2016-07-05 21:31:40.302, foo}
2016-07-05 21:31:40,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:31:40.303, foo, 2016-07-05 21:31:40.303, foo}
2016-07-05 21:31:40,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:31:40.303, foo, 2016-07-05 21:31:40.303, foo}
2016-07-05 21:31:40,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:31:40.304, foo, 2016-07-05 21:31:40.304, foo}
2016-07-05 21:31:40,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:31:40.305, foo, 2016-07-05 21:31:40.305, foo}
2016-07-05 21:31:40,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:31:40.306, foo, 2016-07-05 21:31:40.306, foo}
2016-07-05 21:31:40,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:31:40.308, foo, 2016-07-05 21:31:40.308, foo}
2016-07-05 21:31:40,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:31:40.309, foo, 2016-07-05 21:31:40.309, foo}
2016-07-05 21:31:40,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:31:40.31, foo, 2016-07-05 21:31:40.31, foo}
2016-07-05 21:31:40,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:31:40.31, foo, 2016-07-05 21:31:40.31, foo}
2016-07-05 21:31:40,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:31:40.311, foo, 2016-07-05 21:31:40.311, foo}
2016-07-05 21:31:40,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:31:40.312, foo, 2016-07-05 21:31:40.312, foo}
2016-07-05 21:31:40,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:31:40.313, foo, 2016-07-05 21:31:40.313, foo}
2016-07-05 21:31:40,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:31:40.314, foo, 2016-07-05 21:31:40.314, foo}
2016-07-05 21:31:40,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:31:40.326, foo, 2016-07-05 21:31:40.326, foo}
2016-07-05 21:31:40,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:31:40.328, foo, 2016-07-05 21:31:40.328, foo}
2016-07-05 21:31:40,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:31:40.329, foo, 2016-07-05 21:31:40.329, foo}
2016-07-05 21:31:40,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:31:40.33, foo, 2016-07-05 21:31:40.33, foo}
2016-07-05 21:31:40,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:31:40.331, foo, 2016-07-05 21:31:40.331, foo}
2016-07-05 21:31:40,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:31:40.331, foo, 2016-07-05 21:31:40.331, foo}
2016-07-05 21:31:40,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:31:40.332, foo, 2016-07-05 21:31:40.332, foo}
2016-07-05 21:31:40,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:31:40.333, foo, 2016-07-05 21:31:40.333, foo}
2016-07-05 21:31:40,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:31:40.334, foo, 2016-07-05 21:31:40.334, foo}
2016-07-05 21:31:40,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:31:40.334, foo, 2016-07-05 21:31:40.334, foo}
2016-07-05 21:31:40,338 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:40.338, foo, 2016-07-05 21:31:40.338, foo}
2016-07-05 21:31:40,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:40.339, foo, 2016-07-05 21:31:40.339, foo}
2016-07-05 21:31:40,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:40.34, foo, 2016-07-05 21:31:40.34, foo}
2016-07-05 21:31:40,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:31:40.34, foo, 2016-07-05 21:31:40.34, foo}
2016-07-05 21:31:40,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:31:40.341, foo, 2016-07-05 21:31:40.341, foo}
2016-07-05 21:31:40,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:31:40.342, foo, 2016-07-05 21:31:40.342, foo}
2016-07-05 21:31:40,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:31:40.343, foo, 2016-07-05 21:31:40.343, foo}
2016-07-05 21:31:40,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:31:40.344, foo, 2016-07-05 21:31:40.344, foo}
2016-07-05 21:31:40,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:31:40.345, foo, 2016-07-05 21:31:40.345, foo}
2016-07-05 21:31:40,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:31:40.345, foo, 2016-07-05 21:31:40.345, foo}
2016-07-05 21:31:40,347 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:31:40.347, foo, 2016-07-05 21:31:40.347, foo}
2016-07-05 21:31:40,348 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:31:40.348, foo, 2016-07-05 21:31:40.348, foo}
2016-07-05 21:31:40,349 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:31:40.349, foo, 2016-07-05 21:31:40.349, foo}
2016-07-05 21:31:40,350 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:31:40.35, foo, 2016-07-05 21:31:40.35, foo}
2016-07-05 21:31:40,352 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:31:40.352, foo, 2016-07-05 21:31:40.352, foo}
2016-07-05 21:31:40,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:31:40.353, foo, 2016-07-05 21:31:40.353, foo}
2016-07-05 21:31:40,355 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:31:40.355, foo, 2016-07-05 21:31:40.355, foo}
2016-07-05 21:31:40,358 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:31:40.358, foo, 2016-07-05 21:31:40.358, foo}
2016-07-05 21:31:40,360 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:31:40.36, foo, 2016-07-05 21:31:40.36, foo}
2016-07-05 21:31:40,361 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:31:40.361, foo, 2016-07-05 21:31:40.361, foo}
2016-07-05 21:31:40,362 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:31:40.362, foo, 2016-07-05 21:31:40.362, foo}
2016-07-05 21:31:40,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:31:40.363, foo, 2016-07-05 21:31:40.363, foo}
2016-07-05 21:31:40,363 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:31:40.363, foo, 2016-07-05 21:31:40.363, foo}
2016-07-05 21:31:40,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:31:40.364, foo, 2016-07-05 21:31:40.364, foo}
2016-07-05 21:31:40,365 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:40.365, foo, 2016-07-05 21:31:40.365, foo}
2016-07-05 21:31:40,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:31:40.374, foo, 2016-07-05 21:31:40.374, foo}
2016-07-05 21:31:40,375 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:31:40.375, foo, 2016-07-05 21:31:40.375, foo}
2016-07-05 21:31:40,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:31:40.376, foo, 2016-07-05 21:31:40.376, foo}
2016-07-05 21:31:40,376 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:31:40.376, foo, 2016-07-05 21:31:40.376, foo}
2016-07-05 21:31:40,377 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:31:40.377, foo, 2016-07-05 21:31:40.377, foo}
2016-07-05 21:31:40,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:31:40.378, foo, 2016-07-05 21:31:40.378, foo}
2016-07-05 21:31:40,378 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:31:40.378, foo, 2016-07-05 21:31:40.378, foo}
2016-07-05 21:31:40,379 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:31:40.379, foo, 2016-07-05 21:31:40.379, foo}
2016-07-05 21:31:40,380 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:31:40.38, foo, 2016-07-05 21:31:40.38, foo}
2016-07-05 21:31:40,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:31:40.381, foo, 2016-07-05 21:31:40.381, foo}
2016-07-05 21:31:40,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:40.383, foo, 2016-07-05 21:31:40.383, foo}
2016-07-05 21:31:40,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:31:40.384, foo, 2016-07-05 21:31:40.384, foo}
2016-07-05 21:31:40,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:31:40.387, foo, 2016-07-05 21:31:40.387, foo}
2016-07-05 21:31:40,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:31:40.388, foo, 2016-07-05 21:31:40.388, foo}
2016-07-05 21:31:40,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:31:40.39, foo, 2016-07-05 21:31:40.39, foo}
2016-07-05 21:31:40,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:31:40.392, foo, 2016-07-05 21:31:40.392, foo}
2016-07-05 21:31:40,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:31:40.393, foo, 2016-07-05 21:31:40.393, foo}
2016-07-05 21:31:40,394 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:31:40.394, foo, 2016-07-05 21:31:40.394, foo}
2016-07-05 21:31:40,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:31:40.395, foo, 2016-07-05 21:31:40.395, foo}
2016-07-05 21:31:40,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:31:40.395, foo, 2016-07-05 21:31:40.395, foo}
2016-07-05 21:31:40,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:31:40.396, foo, 2016-07-05 21:31:40.396, foo}
2016-07-05 21:31:40,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:31:40.397, foo, 2016-07-05 21:31:40.397, foo}
2016-07-05 21:31:40,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:31:40.404, foo, 2016-07-05 21:31:40.404, foo}
2016-07-05 21:31:40,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:31:40.405, foo, 2016-07-05 21:31:40.405, foo}
2016-07-05 21:31:40,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:31:40.406, foo, 2016-07-05 21:31:40.406, foo}
2016-07-05 21:31:40,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:31:40.406, foo, 2016-07-05 21:31:40.406, foo}
2016-07-05 21:31:40,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:31:40.407, foo, 2016-07-05 21:31:40.407, foo}
2016-07-05 21:31:40,408 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:31:40.408, foo, 2016-07-05 21:31:40.408, foo}
2016-07-05 21:31:40,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:40.409, foo, 2016-07-05 21:31:40.409, foo}
2016-07-05 21:31:40,409 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:40.409, foo, 2016-07-05 21:31:40.409, foo}
2016-07-05 21:31:40,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:40.41, foo, 2016-07-05 21:31:40.41, foo}
2016-07-05 21:31:40,410 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:40.41, foo, 2016-07-05 21:31:40.41, foo}
2016-07-05 21:31:40,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:31:40.411, foo, 2016-07-05 21:31:40.411, foo}
2016-07-05 21:31:40,411 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:40.411, foo, 2016-07-05 21:31:40.411, foo}
2016-07-05 21:31:40,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:31:40.412, foo, 2016-07-05 21:31:40.412, foo}
2016-07-05 21:31:40,412 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:31:40.412, foo, 2016-07-05 21:31:40.412, foo}
2016-07-05 21:31:40,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:31:40.413, foo, 2016-07-05 21:31:40.413, foo}
2016-07-05 21:31:40,413 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:31:40.413, foo, 2016-07-05 21:31:40.413, foo}
2016-07-05 21:31:40,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:31:40.414, foo, 2016-07-05 21:31:40.414, foo}
2016-07-05 21:31:40,414 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:31:40.414, foo, 2016-07-05 21:31:40.414, foo}
2016-07-05 21:31:40,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:31:40.415, foo, 2016-07-05 21:31:40.415, foo}
2016-07-05 21:31:40,415 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:31:40.415, foo, 2016-07-05 21:31:40.415, foo}
2016-07-05 21:31:40,416 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:31:40.416, foo, 2016-07-05 21:31:40.416, foo}
2016-07-05 21:31:40,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:31:40.417, foo, 2016-07-05 21:31:40.417, foo}
2016-07-05 21:31:40,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:31:40.418, foo, 2016-07-05 21:31:40.418, foo}
2016-07-05 21:31:40,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:31:40.42, foo, 2016-07-05 21:31:40.42, foo}
2016-07-05 21:31:40,482 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:31:40,483 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:31:40,513 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:40,527 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:31:40,537 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:31:40,540 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:31:40,544 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:31:40,547 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:31:40,550 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:31:40,570 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:31:40,572 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:31:40,575 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:31:40,578 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:31:40,580 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:31:40,588 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:31:40,589 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:31:40,589 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:31:40,590 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:31:40,590 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:31:40,591 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:31:40,602 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:31:40,603 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:31:40,609 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:31:40,611 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:31:40,612 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:31:40,614 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:31:40,614 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:31:40,648 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:31:40,648 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:31:40,680 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:31:40,680 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:31:40,680 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:31:40,680 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:40,681 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:31:40,688 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:31:40,692 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:31:40,707 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:31:40,708 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:31:40,709 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:31:40,709 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:31:40,732 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:31:40,752 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:31:40,768 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:31:40,780 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:31:40,798 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:31:40,814 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:31:40,826 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:31:40,837 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:31:40,848 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:31:40,862 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:31:40,869 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:31:40,885 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:31:40,899 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:31:40,911 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:31:40,921 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:31:40,930 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:31:40,930 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:31:40,931 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:31:40,931 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:31:40,931 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:31:40,933 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:31:40,935 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:31:40,937 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:31:40,937 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:31:40,989 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:31:40,990 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:31:40,990 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:31:40,990 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:31:40,990 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:31:40,991 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:31:40,993 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:31:40,994 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:31:41,034 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:31:41,036 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:31:41,037 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:31:41,038 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:31:41,039 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:31:41,040 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:31:41,040 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:31:41,041 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:31:41,043 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:31:41,045 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:31:41,046 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:31:41,046 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:31:41,048 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:31:41,078 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:31:41,079 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:31:41,079 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:31:41,080 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:31:41,080 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:31:41,080 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:31:41,080 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:31:41,080 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:31:41,081 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:41,081 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:31:41,095 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:31:41,099 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:31:41,106 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:31:41,112 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:31:41,118 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:31:41,147 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:31:41,162 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:31:41,169 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:31:41,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:31:41,203 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:31:41,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:31:41,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:31:41,255 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:31:41,273 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:31:41,293 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:31:41,314 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:31:41,332 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:31:41,357 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:31:41,373 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:31:41,396 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:31:41,414 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:31:41,432 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:31:41,455 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:31:41,474 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:31:41,477 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:31:41,480 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:31:41,483 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:31:41,486 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:31:41,489 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:31:41,493 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:31:41,497 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:31:41,500 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:31:41,504 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:31:41,507 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:31:41,509 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:31:41,512 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:31:41,515 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:31:41,518 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:31:41,520 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:31:41,539 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:31:41,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:31:41,542 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:31:41,543 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:31:41,543 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:31:41,543 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:31:41,543 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:31:41,544 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:31:41,544 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:31:41,545 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:31:41,545 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:31:41,545 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:31:41,553 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:31:41,554 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:31:41,554 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:31:41,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:31:41,557 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:31:41,560 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:31:41,561 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:31:41,562 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:31:41,562 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:31:41,563 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:31:41,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:31:41,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:31:41,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:31:41,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:31:41,672 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:31:41,739 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:31:41,749 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:31:41,801 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:31:41,866 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:31:41,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:31:41,926 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2016-07-05 21:31:41,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:31:41,945 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:31:41,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:31:42,003 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:31:42,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:31:42,054 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,075 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:31:42,099 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:31:42,116 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,134 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,155 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:31:42,175 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,193 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,214 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:31:42,236 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:42,261 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:31:42,289 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:31:42,318 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:31:42,345 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:31:42,369 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:31:42,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:31:42,409 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:31:42,429 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:31:42,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:31:42,469 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:31:42,489 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:31:42,510 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:31:42,530 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:31:42,550 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:31:42,569 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2016-07-05 21:31:42,570 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:31:42,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:31:42,572 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:31:42,573 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:31:42,574 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=44 failure=0 (in 3 files)
2016-07-05 21:31:42,574 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:31:42,574 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:31:42,575 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:31:42,575 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:31:42,575 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:31:42,575 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:31:42,575 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:31:42,576 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:42,577 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/common/xls/10-master.xls)
2016-07-05 21:31:42,577 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:42,586 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:31:42,587 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:31:42,587 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:31:42,604 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:31:42,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:31:42,605 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:31:42,606 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:31:42,609 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:31:42,610 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:31:42,611 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:31:42,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:31:42,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:31:42,617 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:31:42,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:31:42,618 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:31:42,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:31:42,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:31:42,619 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:31:42,624 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:31:42,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:31:42,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:31:42,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:31:42,626 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:31:42,629 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:31:42,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:31:42,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:31:42,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:31:42,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:31:42,631 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:31:42,635 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:31:42,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能}
2016-07-05 21:31:42,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止}
2016-07-05 21:31:42,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止}
2016-07-05 21:31:42,643 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:31:42,644 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:42,645 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/20-member.xls)
2016-07-05 21:31:42,645 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:42,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:31:42.684, foo, 2016-07-05 21:31:42.684, foo, 0}
2016-07-05 21:31:42,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:31:42.686, foo, 2016-07-05 21:31:42.686, foo, 0}
2016-07-05 21:31:42,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:31:42.686, foo, 2016-07-05 21:31:42.686, foo, 0}
2016-07-05 21:31:42,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:31:42.687, foo, 2016-07-05 21:31:42.687, foo, 0}
2016-07-05 21:31:42,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:31:42.688, foo, 2016-07-05 21:31:42.688, foo, 0}
2016-07-05 21:31:42,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:31:42.688, foo, 2016-07-05 21:31:42.688, foo, 0}
2016-07-05 21:31:42,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:31:42.689, foo, 2016-07-05 21:31:42.689, foo, 0}
2016-07-05 21:31:42,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:31:42.689, foo, 2016-07-05 21:31:42.689, foo, 0}
2016-07-05 21:31:42,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:31:42.69, foo, 2016-07-05 21:31:42.69, foo, 0}
2016-07-05 21:31:42,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:31:42.69, foo, 2016-07-05 21:31:42.69, foo, 0}
2016-07-05 21:31:42,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:31:42.69, foo, 2016-07-05 21:31:42.69, foo, 0}
2016-07-05 21:31:42,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:31:42.695, foo, 2016-07-05 21:31:42.695, foo, 0}
2016-07-05 21:31:42,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:31:42.696, foo, 2016-07-05 21:31:42.696, foo, 0}
2016-07-05 21:31:42,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:31:42.697, foo, 2016-07-05 21:31:42.697, foo, 0}
2016-07-05 21:31:42,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:31:42.698, foo, 2016-07-05 21:31:42.698, foo, 0}
2016-07-05 21:31:42,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:31:42.699, foo, 2016-07-05 21:31:42.699, foo, 0}
2016-07-05 21:31:42,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:31:42.7, foo, 2016-07-05 21:31:42.7, foo, 0}
2016-07-05 21:31:42,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:31:42.7, foo, 2016-07-05 21:31:42.7, foo, 0}
2016-07-05 21:31:42,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:31:42.701, foo, 2016-07-05 21:31:42.701, foo, 0}
2016-07-05 21:31:42,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:31:42.702, foo, 2016-07-05 21:31:42.702, foo, 0}
2016-07-05 21:31:42,720 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:31:42,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:31:42.721, foo, 2016-07-05 21:31:42.721, foo, 0}
2016-07-05 21:31:42,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:31:42.722, foo, 2016-07-05 21:31:42.722, foo, 0}
2016-07-05 21:31:42,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:31:42.723, foo, 2016-07-05 21:31:42.723, foo, 0}
2016-07-05 21:31:42,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:31:42.725, foo, 2016-07-05 21:31:42.725, foo, 0}
2016-07-05 21:31:42,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:31:42.726, foo, 2016-07-05 21:31:42.726, foo, 0}
2016-07-05 21:31:42,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:31:42.726, foo, 2016-07-05 21:31:42.726, foo, 0}
2016-07-05 21:31:42,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:31:42.727, foo, 2016-07-05 21:31:42.727, foo, 0}
2016-07-05 21:31:42,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:31:42.727, foo, 2016-07-05 21:31:42.727, foo, 0}
2016-07-05 21:31:42,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:31:42.728, foo, 2016-07-05 21:31:42.728, foo, 0}
2016-07-05 21:31:42,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:31:42.729, foo, 2016-07-05 21:31:42.729, foo, 0}
2016-07-05 21:31:42,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:31:42.729, foo, 2016-07-05 21:31:42.729, foo, 0}
2016-07-05 21:31:42,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:31:42.735, foo, 2016-07-05 21:31:42.735, foo, 0}
2016-07-05 21:31:42,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:31:42.736, foo, 2016-07-05 21:31:42.736, foo, 0}
2016-07-05 21:31:42,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:31:42.737, foo, 2016-07-05 21:31:42.737, foo, 0}
2016-07-05 21:31:42,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:31:42.737, foo, 2016-07-05 21:31:42.738, foo, 0}
2016-07-05 21:31:42,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:31:42.738, foo, 2016-07-05 21:31:42.738, foo, 0}
2016-07-05 21:31:42,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:31:42.739, foo, 2016-07-05 21:31:42.739, foo, 0}
2016-07-05 21:31:42,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:31:42.74, foo, 2016-07-05 21:31:42.74, foo, 0}
2016-07-05 21:31:42,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:31:42.741, foo, 2016-07-05 21:31:42.741, foo, 0}
2016-07-05 21:31:42,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:31:42.742, foo, 2016-07-05 21:31:42.742, foo, 0}
2016-07-05 21:31:42,761 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:31:42,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:31:42,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:31:42,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:31:42,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:31:42,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:31:42,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:31:42,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:31:42,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:31:42,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:31:42,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:31:42,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:31:42,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:31:42,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:31:42,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:31:42,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:31:42,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:31:42,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:31:42,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:31:42,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:31:42,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:31:42,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:31:42,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:31:42,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:31:42,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:31:42,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:31:42,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:31:42,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:31:42,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:31:42,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:31:42,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:31:42,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:31:42,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:31:42,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:31:42,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:31:42,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:31:42,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:31:42,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:31:42,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:31:42,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:31:42,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:31:42,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:31:42,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:31:42,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:31:42,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:31:42,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:31:42,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:31:42,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:31:42,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:31:42,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:31:42,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:31:42,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:31:42,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:31:42,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:31:42,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:31:42,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:31:42,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:31:42,833 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:31:42,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:31:42.834, foo, 2016-07-05 21:31:42.834, foo, 0}
2016-07-05 21:31:42,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:31:42.835, foo, 2016-07-05 21:31:42.835, foo, 0}
2016-07-05 21:31:42,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:31:42.836, foo, 2016-07-05 21:31:42.836, foo, 0}
2016-07-05 21:31:42,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:31:42.836, foo, 2016-07-05 21:31:42.836, foo, 0}
2016-07-05 21:31:42,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:31:42.837, foo, 2016-07-05 21:31:42.837, foo, 0}
2016-07-05 21:31:42,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:31:42.837, foo, 2016-07-05 21:31:42.837, foo, 0}
2016-07-05 21:31:42,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:31:42.838, foo, 2016-07-05 21:31:42.838, foo, 0}
2016-07-05 21:31:42,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:31:42.838, foo, 2016-07-05 21:31:42.838, foo, 0}
2016-07-05 21:31:42,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:31:42.838, foo, 2016-07-05 21:31:42.838, foo, 0}
2016-07-05 21:31:42,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:31:42.839, foo, 2016-07-05 21:31:42.839, foo, 0}
2016-07-05 21:31:42,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:31:42.839, foo, 2016-07-05 21:31:42.839, foo, 0}
2016-07-05 21:31:42,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:31:42.84, foo, 2016-07-05 21:31:42.84, foo, 0}
2016-07-05 21:31:42,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:31:42.84, foo, 2016-07-05 21:31:42.84, foo, 0}
2016-07-05 21:31:42,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:31:42.841, foo, 2016-07-05 21:31:42.841, foo, 0}
2016-07-05 21:31:42,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:31:42.841, foo, 2016-07-05 21:31:42.841, foo, 0}
2016-07-05 21:31:42,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:31:42.842, foo, 2016-07-05 21:31:42.842, foo, 0}
2016-07-05 21:31:42,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:31:42.843, foo, 2016-07-05 21:31:42.843, foo, 0}
2016-07-05 21:31:42,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:31:42.843, foo, 2016-07-05 21:31:42.843, foo, 0}
2016-07-05 21:31:42,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:31:42.844, foo, 2016-07-05 21:31:42.844, foo, 0}
2016-07-05 21:31:42,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:31:42.844, foo, 2016-07-05 21:31:42.844, foo, 0}
2016-07-05 21:31:42,859 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:31:42,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:31:42.86, foo, 2016-07-05 21:31:42.86, foo, 0}
2016-07-05 21:31:42,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:31:42.861, foo, 2016-07-05 21:31:42.861, foo, 0}
2016-07-05 21:31:42,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:31:42.861, foo, 2016-07-05 21:31:42.861, foo, 0}
2016-07-05 21:31:42,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:31:42.862, foo, 2016-07-05 21:31:42.862, foo, 0}
2016-07-05 21:31:42,862 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:31:42.862, foo, 2016-07-05 21:31:42.862, foo, 0}
2016-07-05 21:31:42,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:31:42.863, foo, 2016-07-05 21:31:42.863, foo, 0}
2016-07-05 21:31:42,863 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:31:42.863, foo, 2016-07-05 21:31:42.863, foo, 0}
2016-07-05 21:31:42,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:31:42.864, foo, 2016-07-05 21:31:42.864, foo, 0}
2016-07-05 21:31:42,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:31:42.864, foo, 2016-07-05 21:31:42.864, foo, 0}
2016-07-05 21:31:42,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:31:42.864, foo, 2016-07-05 21:31:42.864, foo, 0}
2016-07-05 21:31:42,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:31:42.865, foo, 2016-07-05 21:31:42.865, foo, 0}
2016-07-05 21:31:42,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:31:42.886, foo, 2016-07-05 21:31:42.886, foo, 0}
2016-07-05 21:31:42,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:31:42.887, foo, 2016-07-05 21:31:42.887, foo, 0}
2016-07-05 21:31:42,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:31:42.887, foo, 2016-07-05 21:31:42.887, foo, 0}
2016-07-05 21:31:42,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:31:42.888, foo, 2016-07-05 21:31:42.888, foo, 0}
2016-07-05 21:31:42,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:31:42.888, foo, 2016-07-05 21:31:42.888, foo, 0}
2016-07-05 21:31:42,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:31:42.888, foo, 2016-07-05 21:31:42.888, foo, 0}
2016-07-05 21:31:42,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:31:42.889, foo, 2016-07-05 21:31:42.889, foo, 0}
2016-07-05 21:31:42,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:31:42.889, foo, 2016-07-05 21:31:42.889, foo, 0}
2016-07-05 21:31:42,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:31:42.89, foo, 2016-07-05 21:31:42.89, foo, 0}
2016-07-05 21:31:42,906 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:31:42,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:31:42.907, foo, 2016-07-05 21:31:42.907, foo}
2016-07-05 21:31:42,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:31:42.908, foo, 2016-07-05 21:31:42.908, foo}
2016-07-05 21:31:42,909 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:31:42.909, foo, 2016-07-05 21:31:42.909, foo}
2016-07-05 21:31:42,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:31:42.926, foo, 2016-07-05 21:31:42.926, foo}
2016-07-05 21:31:42,931 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:31:42,931 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:31:42,932 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/migration/previous/data/ut/xls/30-product.xls)
2016-07-05 21:31:42,932 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:31:42,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:31:42.962, foo, 2016-07-05 21:31:42.962, foo, 0}
2016-07-05 21:31:42,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:31:42.964, foo, 2016-07-05 21:31:42.964, foo, 0}
2016-07-05 21:31:42,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:31:42.965, foo, 2016-07-05 21:31:42.965, foo, 0}
2016-07-05 21:31:42,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:31:42.965, foo, 2016-07-05 21:31:42.965, foo, 0}
2016-07-05 21:31:42,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:31:42.973, foo, 2016-07-05 21:31:42.973, foo, 0}
2016-07-05 21:31:42,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:31:42.974, foo, 2016-07-05 21:31:42.974, foo, 0}
2016-07-05 21:31:42,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:31:42.974, foo, 2016-07-05 21:31:42.974, foo, 0}
2016-07-05 21:31:42,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:31:42.975, foo, 2016-07-05 21:31:42.975, foo, 0}
2016-07-05 21:31:42,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:31:42.975, foo, 2016-07-05 21:31:42.975, foo, 0}
2016-07-05 21:31:42,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:31:42.976, foo, 2016-07-05 21:31:42.976, foo, 0}
2016-07-05 21:31:42,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:31:42.977, foo, 2016-07-05 21:31:42.977, foo, 0}
2016-07-05 21:31:42,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:31:42.977, foo, 2016-07-05 21:31:42.977, foo, 0}
2016-07-05 21:31:42,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:31:42.978, foo, 2016-07-05 21:31:42.978, foo, 0}
2016-07-05 21:31:42,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:31:42.978, foo, 2016-07-05 21:31:42.978, foo, 0}
2016-07-05 21:31:42,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:31:42.979, foo, 2016-07-05 21:31:42.979, foo, 0}
2016-07-05 21:31:43,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:31:43.003, foo, 2016-07-05 21:31:43.003, foo, 0}
2016-07-05 21:31:43,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:31:43.003, foo, 2016-07-05 21:31:43.003, foo, 0}
2016-07-05 21:31:43,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:31:43.004, foo, 2016-07-05 21:31:43.004, foo, 0}
2016-07-05 21:31:43,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:31:43.004, foo, 2016-07-05 21:31:43.004, foo, 0}
2016-07-05 21:31:43,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:31:43.005, foo, 2016-07-05 21:31:43.005, foo, 0}
2016-07-05 21:31:43,025 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:31:43,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:31:43.026, foo, 2016-07-05 21:31:43.026, foo, 0}
2016-07-05 21:31:43,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:31:43.027, foo, 2016-07-05 21:31:43.027, foo, 0}
2016-07-05 21:31:43,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:31:43.028, foo, 2016-07-05 21:31:43.028, foo, 0}
2016-07-05 21:31:43,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:31:43.028, foo, 2016-07-05 21:31:43.028, foo, 0}
2016-07-05 21:31:43,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:31:43.029, foo, 2016-07-05 21:31:43.029, foo, 0}
2016-07-05 21:31:43,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:31:43.029, foo, 2016-07-05 21:31:43.029, foo, 0}
2016-07-05 21:31:43,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:31:43.029, foo, 2016-07-05 21:31:43.029, foo, 0}
2016-07-05 21:31:43,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:31:43.03, foo, 2016-07-05 21:31:43.03, foo, 0}
2016-07-05 21:31:43,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:31:43.03, foo, 2016-07-05 21:31:43.03, foo, 0}
2016-07-05 21:31:43,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:31:43.031, foo, 2016-07-05 21:31:43.031, foo, 0}
2016-07-05 21:31:43,058 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:31:43.058, foo, 2016-07-05 21:31:43.058, foo, 0}
2016-07-05 21:31:43,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:31:43.059, foo, 2016-07-05 21:31:43.059, foo, 0}
2016-07-05 21:31:43,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:31:43.059, foo, 2016-07-05 21:31:43.059, foo, 0}
2016-07-05 21:31:43,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:31:43.06, foo, 2016-07-05 21:31:43.06, foo, 0}
2016-07-05 21:31:43,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:31:43.06, foo, 2016-07-05 21:31:43.06, foo, 0}
2016-07-05 21:31:43,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:31:43.061, foo, 2016-07-05 21:31:43.061, foo, 0}
2016-07-05 21:31:43,061 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:31:43.061, foo, 2016-07-05 21:31:43.061, foo, 0}
2016-07-05 21:31:43,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:31:43.062, foo, 2016-07-05 21:31:43.062, foo, 0}
2016-07-05 21:31:43,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:31:43.094, foo, 2016-07-05 21:31:43.094, foo, 0}
2016-07-05 21:31:43,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:31:43.095, foo, 2016-07-05 21:31:43.095, foo, 0}
2016-07-05 21:31:43,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:31:43.096, foo, 2016-07-05 21:31:43.096, foo, 0}
2016-07-05 21:31:43,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:31:43.096, foo, 2016-07-05 21:31:43.096, foo, 0}
2016-07-05 21:31:43,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:31:43.097, foo, 2016-07-05 21:31:43.097, foo, 0}
2016-07-05 21:31:43,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:31:43.097, foo, 2016-07-05 21:31:43.097, foo, 0}
2016-07-05 21:31:43,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:31:43.098, foo, 2016-07-05 21:31:43.098, foo, 0}
2016-07-05 21:31:43,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:31:43.099, foo, 2016-07-05 21:31:43.099, foo, 0}
2016-07-05 21:31:43,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:31:43.121, foo, 2016-07-05 21:31:43.121, foo, 0}
2016-07-05 21:31:43,121 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:31:43.121, foo, 2016-07-05 21:31:43.121, foo, 0}
2016-07-05 21:31:43,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:31:43.122, foo, 2016-07-05 21:31:43.122, foo, 0}
2016-07-05 21:31:43,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:31:43.123, foo, 2016-07-05 21:31:43.123, foo, 0}
2016-07-05 21:31:43,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:31:43.124, foo, 2016-07-05 21:31:43.124, foo, 0}
2016-07-05 21:31:43,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:31:43.125, foo, 2016-07-05 21:31:43.125, foo, 0}
2016-07-05 21:31:43,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:43.126, foo, 2016-07-05 21:31:43.126, foo, 0}
2016-07-05 21:31:43,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:43.127, foo, 2016-07-05 21:31:43.127, foo, 0}
2016-07-05 21:31:43,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:31:43.14, foo, 2016-07-05 21:31:43.14, foo, 0}
2016-07-05 21:31:43,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:43.141, foo, 2016-07-05 21:31:43.141, foo, 0}
2016-07-05 21:31:43,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:31:43.142, foo, 2016-07-05 21:31:43.142, foo, 0}
2016-07-05 21:31:43,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:31:43.143, foo, 2016-07-05 21:31:43.143, foo, 0}
2016-07-05 21:31:43,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:31:43.143, foo, 2016-07-05 21:31:43.143, foo, 0}
2016-07-05 21:31:43,144 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:31:43.144, foo, 2016-07-05 21:31:43.144, foo, 0}
2016-07-05 21:31:43,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:31:43.145, foo, 2016-07-05 21:31:43.145, foo, 0}
2016-07-05 21:31:43,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:31:43.145, foo, 2016-07-05 21:31:43.145, foo, 0}
2016-07-05 21:31:43,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:31:43.146, foo, 2016-07-05 21:31:43.146, foo, 0}
2016-07-05 21:31:43,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:43.147, foo, 2016-07-05 21:31:43.147, foo, 0}
2016-07-05 21:31:43,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:43.147, foo, 2016-07-05 21:31:43.147, foo, 0}
2016-07-05 21:31:43,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:31:43.148, foo, 2016-07-05 21:31:43.148, foo, 0}
2016-07-05 21:31:43,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:43.149, foo, 2016-07-05 21:31:43.149, foo, 0}
2016-07-05 21:31:43,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:31:43.15, foo, 2016-07-05 21:31:43.15, foo, 0}
2016-07-05 21:31:43,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:31:43.15, foo, 2016-07-05 21:31:43.15, foo, 0}
2016-07-05 21:31:43,151 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:31:43.151, foo, 2016-07-05 21:31:43.151, foo, 0}
2016-07-05 21:31:43,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:31:43.152, foo, 2016-07-05 21:31:43.152, foo, 0}
2016-07-05 21:31:43,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:31:43.153, foo, 2016-07-05 21:31:43.153, foo, 0}
2016-07-05 21:31:43,153 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:31:43.153, foo, 2016-07-05 21:31:43.153, foo, 0}
2016-07-05 21:31:43,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:31:43.154, foo, 2016-07-05 21:31:43.154, foo, 0}
2016-07-05 21:31:43,155 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:31:43.155, foo, 2016-07-05 21:31:43.155, foo, 0}
2016-07-05 21:31:43,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:31:43.159, foo, 2016-07-05 21:31:43.159, foo, 0}
2016-07-05 21:31:43,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:31:43.16, foo, 2016-07-05 21:31:43.16, foo, 0}
2016-07-05 21:31:43,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:31:43.161, foo, 2016-07-05 21:31:43.161, foo, 0}
2016-07-05 21:31:43,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:31:43.162, foo, 2016-07-05 21:31:43.162, foo, 0}
2016-07-05 21:31:43,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:31:43.164, foo, 2016-07-05 21:31:43.164, foo, 0}
2016-07-05 21:31:43,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:31:43.165, foo, 2016-07-05 21:31:43.165, foo, 0}
2016-07-05 21:31:43,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:31:43.167, foo, 2016-07-05 21:31:43.167, foo, 0}
2016-07-05 21:31:43,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:31:43.169, foo, 2016-07-05 21:31:43.169, foo, 0}
2016-07-05 21:31:43,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:31:43.17, foo, 2016-07-05 21:31:43.17, foo, 0}
2016-07-05 21:31:43,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:31:43.17, foo, 2016-07-05 21:31:43.17, foo, 0}
2016-07-05 21:31:43,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:31:43.171, foo, 2016-07-05 21:31:43.171, foo, 0}
2016-07-05 21:31:43,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:31:43.171, foo, 2016-07-05 21:31:43.171, foo, 0}
2016-07-05 21:31:43,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:31:43.172, foo, 2016-07-05 21:31:43.172, foo, 0}
2016-07-05 21:31:43,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:31:43.173, foo, 2016-07-05 21:31:43.173, foo, 0}
2016-07-05 21:31:43,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:31:43.174, foo, 2016-07-05 21:31:43.174, foo, 0}
2016-07-05 21:31:43,218 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:31:43,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:31:43.219, foo, 2016-07-05 21:31:43.219, foo}
2016-07-05 21:31:43,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:31:43.22, foo, 2016-07-05 21:31:43.22, foo}
2016-07-05 21:31:43,221 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:31:43.221, foo, 2016-07-05 21:31:43.221, foo}
2016-07-05 21:31:43,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:31:43.222, foo, 2016-07-05 21:31:43.222, foo}
2016-07-05 21:31:43,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:31:43.222, foo, 2016-07-05 21:31:43.222, foo}
2016-07-05 21:31:43,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:31:43.223, foo, 2016-07-05 21:31:43.223, foo}
2016-07-05 21:31:43,223 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:31:43.223, foo, 2016-07-05 21:31:43.223, foo}
2016-07-05 21:31:43,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:31:43.224, foo, 2016-07-05 21:31:43.224, foo}
2016-07-05 21:31:43,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:31:43.224, foo, 2016-07-05 21:31:43.224, foo}
2016-07-05 21:31:43,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:31:43.225, foo, 2016-07-05 21:31:43.225, foo}
2016-07-05 21:31:43,225 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:31:43.225, foo, 2016-07-05 21:31:43.225, foo}
2016-07-05 21:31:43,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:31:43.226, foo, 2016-07-05 21:31:43.226, foo}
2016-07-05 21:31:43,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:31:43.226, foo, 2016-07-05 21:31:43.226, foo}
2016-07-05 21:31:43,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:31:43.227, foo, 2016-07-05 21:31:43.227, foo}
2016-07-05 21:31:43,227 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:31:43.227, foo, 2016-07-05 21:31:43.227, foo}
2016-07-05 21:31:43,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:31:43.228, foo, 2016-07-05 21:31:43.228, foo}
2016-07-05 21:31:43,228 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:31:43.228, foo, 2016-07-05 21:31:43.228, foo}
2016-07-05 21:31:43,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:31:43.229, foo, 2016-07-05 21:31:43.229, foo}
2016-07-05 21:31:43,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:31:43.229, foo, 2016-07-05 21:31:43.229, foo}
2016-07-05 21:31:43,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:31:43.23, foo, 2016-07-05 21:31:43.23, foo}
2016-07-05 21:31:43,230 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:31:43.23, foo, 2016-07-05 21:31:43.23, foo}
2016-07-05 21:31:43,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:31:43.231, foo, 2016-07-05 21:31:43.231, foo}
2016-07-05 21:31:43,231 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:31:43.231, foo, 2016-07-05 21:31:43.231, foo}
2016-07-05 21:31:43,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:31:43.232, foo, 2016-07-05 21:31:43.232, foo}
2016-07-05 21:31:43,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:31:43.233, foo, 2016-07-05 21:31:43.233, foo}
2016-07-05 21:31:43,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:31:43.233, foo, 2016-07-05 21:31:43.233, foo}
2016-07-05 21:31:43,234 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:31:43.234, foo, 2016-07-05 21:31:43.234, foo}
2016-07-05 21:31:43,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:31:43.235, foo, 2016-07-05 21:31:43.235, foo}
2016-07-05 21:31:43,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:31:43.235, foo, 2016-07-05 21:31:43.235, foo}
2016-07-05 21:31:43,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:43.236, foo, 2016-07-05 21:31:43.236, foo}
2016-07-05 21:31:43,236 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:43.236, foo, 2016-07-05 21:31:43.236, foo}
2016-07-05 21:31:43,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:31:43.237, foo, 2016-07-05 21:31:43.237, foo}
2016-07-05 21:31:43,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:31:43.237, foo, 2016-07-05 21:31:43.237, foo}
2016-07-05 21:31:43,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:31:43.238, foo, 2016-07-05 21:31:43.238, foo}
2016-07-05 21:31:43,238 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:31:43.238, foo, 2016-07-05 21:31:43.238, foo}
2016-07-05 21:31:43,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:31:43.239, foo, 2016-07-05 21:31:43.239, foo}
2016-07-05 21:31:43,239 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:31:43.239, foo, 2016-07-05 21:31:43.239, foo}
2016-07-05 21:31:43,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:31:43.24, foo, 2016-07-05 21:31:43.24, foo}
2016-07-05 21:31:43,240 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:31:43.24, foo, 2016-07-05 21:31:43.24, foo}
2016-07-05 21:31:43,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:31:43.241, foo, 2016-07-05 21:31:43.241, foo}
2016-07-05 21:31:43,241 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:31:43.241, foo, 2016-07-05 21:31:43.241, foo}
2016-07-05 21:31:43,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:31:43.242, foo, 2016-07-05 21:31:43.242, foo}
2016-07-05 21:31:43,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:31:43.242, foo, 2016-07-05 21:31:43.242, foo}
2016-07-05 21:31:43,242 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:31:43.242, foo, 2016-07-05 21:31:43.242, foo}
2016-07-05 21:31:43,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:31:43.243, foo, 2016-07-05 21:31:43.243, foo}
2016-07-05 21:31:43,243 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:31:43.243, foo, 2016-07-05 21:31:43.243, foo}
2016-07-05 21:31:43,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:31:43.244, foo, 2016-07-05 21:31:43.244, foo}
2016-07-05 21:31:43,244 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:31:43.244, foo, 2016-07-05 21:31:43.244, foo}
2016-07-05 21:31:43,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:31:43.245, foo, 2016-07-05 21:31:43.245, foo}
2016-07-05 21:31:43,245 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:31:43.245, foo, 2016-07-05 21:31:43.245, foo}
2016-07-05 21:31:43,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:31:43.246, foo, 2016-07-05 21:31:43.246, foo}
2016-07-05 21:31:43,246 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:31:43.246, foo, 2016-07-05 21:31:43.246, foo}
2016-07-05 21:31:43,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:31:43.247, foo, 2016-07-05 21:31:43.247, foo}
2016-07-05 21:31:43,247 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:43.247, foo, 2016-07-05 21:31:43.247, foo}
2016-07-05 21:31:43,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:31:43.248, foo, 2016-07-05 21:31:43.248, foo}
2016-07-05 21:31:43,248 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:31:43.248, foo, 2016-07-05 21:31:43.248, foo}
2016-07-05 21:31:43,249 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:31:43.249, foo, 2016-07-05 21:31:43.249, foo}
2016-07-05 21:31:43,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:31:43.249, foo, 2016-07-05 21:31:43.249, foo}
2016-07-05 21:31:43,250 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:31:43.25, foo, 2016-07-05 21:31:43.25, foo}
2016-07-05 21:31:43,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:31:43.251, foo, 2016-07-05 21:31:43.251, foo}
2016-07-05 21:31:43,251 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:31:43.251, foo, 2016-07-05 21:31:43.251, foo}
2016-07-05 21:31:43,252 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:31:43.252, foo, 2016-07-05 21:31:43.252, foo}
2016-07-05 21:31:43,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:31:43.253, foo, 2016-07-05 21:31:43.253, foo}
2016-07-05 21:31:43,253 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:31:43.253, foo, 2016-07-05 21:31:43.253, foo}
2016-07-05 21:31:43,254 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:43.254, foo, 2016-07-05 21:31:43.254, foo}
2016-07-05 21:31:43,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:31:43.255, foo, 2016-07-05 21:31:43.255, foo}
2016-07-05 21:31:43,255 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:31:43.255, foo, 2016-07-05 21:31:43.255, foo}
2016-07-05 21:31:43,256 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:31:43.256, foo, 2016-07-05 21:31:43.256, foo}
2016-07-05 21:31:43,257 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:31:43.257, foo, 2016-07-05 21:31:43.257, foo}
2016-07-05 21:31:43,258 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:31:43.258, foo, 2016-07-05 21:31:43.258, foo}
2016-07-05 21:31:43,260 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:31:43.26, foo, 2016-07-05 21:31:43.26, foo}
2016-07-05 21:31:43,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:31:43.261, foo, 2016-07-05 21:31:43.261, foo}
2016-07-05 21:31:43,261 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:31:43.261, foo, 2016-07-05 21:31:43.261, foo}
2016-07-05 21:31:43,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:31:43.262, foo, 2016-07-05 21:31:43.262, foo}
2016-07-05 21:31:43,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:31:43.262, foo, 2016-07-05 21:31:43.262, foo}
2016-07-05 21:31:43,263 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:31:43.263, foo, 2016-07-05 21:31:43.263, foo}
2016-07-05 21:31:43,264 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:31:43.264, foo, 2016-07-05 21:31:43.264, foo}
2016-07-05 21:31:43,265 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:31:43.265, foo, 2016-07-05 21:31:43.265, foo}
2016-07-05 21:31:43,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:31:43.265, foo, 2016-07-05 21:31:43.265, foo}
2016-07-05 21:31:43,266 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:31:43.266, foo, 2016-07-05 21:31:43.266, foo}
2016-07-05 21:31:43,267 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:31:43.267, foo, 2016-07-05 21:31:43.267, foo}
2016-07-05 21:31:43,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:31:43.267, foo, 2016-07-05 21:31:43.267, foo}
2016-07-05 21:31:43,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:43.268, foo, 2016-07-05 21:31:43.268, foo}
2016-07-05 21:31:43,269 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:43.269, foo, 2016-07-05 21:31:43.269, foo}
2016-07-05 21:31:43,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:43.271, foo, 2016-07-05 21:31:43.271, foo}
2016-07-05 21:31:43,271 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:31:43.271, foo, 2016-07-05 21:31:43.271, foo}
2016-07-05 21:31:43,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:31:43.272, foo, 2016-07-05 21:31:43.272, foo}
2016-07-05 21:31:43,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:31:43.273, foo, 2016-07-05 21:31:43.273, foo}
2016-07-05 21:31:43,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:31:43.273, foo, 2016-07-05 21:31:43.273, foo}
2016-07-05 21:31:43,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:31:43.274, foo, 2016-07-05 21:31:43.274, foo}
2016-07-05 21:31:43,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:31:43.275, foo, 2016-07-05 21:31:43.275, foo}
2016-07-05 21:31:43,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:31:43.276, foo, 2016-07-05 21:31:43.276, foo}
2016-07-05 21:31:43,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:31:43.278, foo, 2016-07-05 21:31:43.278, foo}
2016-07-05 21:31:43,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:31:43.279, foo, 2016-07-05 21:31:43.279, foo}
2016-07-05 21:31:43,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:31:43.28, foo, 2016-07-05 21:31:43.28, foo}
2016-07-05 21:31:43,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:31:43.281, foo, 2016-07-05 21:31:43.281, foo}
2016-07-05 21:31:43,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:31:43.282, foo, 2016-07-05 21:31:43.282, foo}
2016-07-05 21:31:43,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:31:43.283, foo, 2016-07-05 21:31:43.283, foo}
2016-07-05 21:31:43,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:31:43.284, foo, 2016-07-05 21:31:43.284, foo}
2016-07-05 21:31:43,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:31:43.284, foo, 2016-07-05 21:31:43.284, foo}
2016-07-05 21:31:43,334 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:31:43,335 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:31:43,335 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:31:43,335 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:31:43,336 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:31:43,336 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:31:43,336 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:31:43,336 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:31:43,337 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:31:43,339 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:31:43,341 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:31:43,348 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:31:43,352 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:31:43,354 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:31:43,355 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:31:43,357 [main] INFO  (DfAlterCheckProcess#alterSchema():592) - 
2016-07-05 21:31:43,358 [main] INFO  (DfAlterCheckProcess#alterSchema():593) - +------------------+
2016-07-05 21:31:43,358 [main] INFO  (DfAlterCheckProcess#alterSchema():594) - |                  |
2016-07-05 21:31:43,358 [main] INFO  (DfAlterCheckProcess#alterSchema():595) - |   Alter Schema   |
2016-07-05 21:31:43,358 [main] INFO  (DfAlterCheckProcess#alterSchema():596) - |                  |
2016-07-05 21:31:43,358 [main] INFO  (DfAlterCheckProcess#alterSchema():597) - +------------------+
2016-07-05 21:31:43,363 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: alter-schema.sql
2016-07-05 21:31:43,364 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- add column for display order
alter table PRODUCT_STATUS add DISPLAY_ORDER INTEGER NOT NULL after PRODUCT_STATUS_NAME
2016-07-05 21:31:43,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 1 where PRODUCT_STATUS_CODE= 'ONS'
2016-07-05 21:31:43,414 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 2 where PRODUCT_STATUS_CODE= 'PST'
2016-07-05 21:31:43,416 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - update PRODUCT_STATUS set DISPLAY_ORDER = 3 where PRODUCT_STATUS_CODE= 'SST'
2016-07-05 21:31:43,417 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - alter table PRODUCT_STATUS add constraint unique(DISPLAY_ORDER)
2016-07-05 21:31:43,433 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- create table MEMBER_FOLLOWING
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_MY_MEMBER 
    foreign key (MY_MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:31:43,436 [main] INFO  (DfSqlFileFireMan#fire():89) - {Alter Schema}: success=5 failure=1 *break (in 1 files)
2016-07-05 21:31:43,436 [main] INFO  (DfAlterCheckProcess#markAlterNG():944) - ...Marking alter-NG: playsql/migration/alter-NG.dfmark
2016-07-05 21:31:43,451 [main] INFO  (DfRefreshResourceProcess#show():297) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2016-07-05 21:31:43,467 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.7.13

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.SQLFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute the SQL!

[SQL File]
playsql/migration/alter/alter-schema.sql

[Executed SQL]
-- create table MEMBER_FOLLOWING
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_MY_MEMBER 
    foreign key (MY_MEMBER_ID) references MEMBER (MEMBER_ID)

[SQLState]
42S02

[ErrorCode]
1146

[SQLException]
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException
Table 'maihamadb.member_following' doesn't exist
* * * * * * * * * */
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.throwSQLFailureException(DfSqlFileRunnerBase.java:587)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:80)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerBase.runTransaction(DfSqlFileRunnerBase.java:122)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.processSqlFile(DfSqlFileFireMan.java:169)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess$5.processSqlFile(DfAlterCheckProcess.java:741)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileFireMan.fire(DfSqlFileFireMan.java:67)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.executeAlterSql(DfAlterCheckProcess.java:669)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.alterSchema(DfAlterCheckProcess.java:599)
	at org.dbflute.logic.replaceschema.process.DfAlterCheckProcess.checkAlter(DfAlterCheckProcess.java:457)
	at org.dbflute.task.DfReplaceSchemaTask.doProcessAlterCheck(DfReplaceSchemaTask.java:195)
	at org.dbflute.task.DfReplaceSchemaTask.processAlterCheck(DfReplaceSchemaTask.java:185)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:155)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:183)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'maihamadb.member_following' doesn't exist
	at sun.reflect.GeneratedConstructorAccessor42.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:377)
	at com.mysql.jdbc.Util.getInstance(Util.java:360)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3887)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3823)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2435)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2582)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2526)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:848)
	at com.mysql.jdbc.StatementImpl.execute(StatementImpl.java:742)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.processNonDispatch(DfSqlFileRunnerExecute.java:98)
	at org.dbflute.helper.jdbc.sqlfile.DfSqlFileRunnerExecute.execSQL(DfSqlFileRunnerExecute.java:66)
	... 30 more
2016-07-05 21:31:43,539 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2016-07-05 21:31:43,545 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m08s921ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 5.7.13)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Alter Schema}: success=5 failure=1 *break (in 1 files)
  x alter-schema.sql
   >> (failed: Look at the exception message)
    * * * * * * * * * * *
    * Migration Failure *
    * * * * * * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2016-07-05 21:33:24,971 [main] INFO  (DfReplaceSchemaTask#begin():91) - +------------------------------------------+
2016-07-05 21:33:24,976 [main] INFO  (DfReplaceSchemaTask#begin():92) - |                                          |
2016-07-05 21:33:24,977 [main] INFO  (DfReplaceSchemaTask#begin():93) - |              ReplaceSchema               |
2016-07-05 21:33:24,983 [main] INFO  (DfReplaceSchemaTask#begin():96) - |               (AlterCheck)               |
2016-07-05 21:33:24,984 [main] INFO  (DfReplaceSchemaTask#begin():101) - |                                          |
2016-07-05 21:33:24,984 [main] INFO  (DfReplaceSchemaTask#begin():102) - +------------------------------------------+
2016-07-05 21:33:24,987 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():342) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2016-07-05 21:33:28,883 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2016-07-05 21:33:28,884 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2016-07-05 21:33:28,884 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb
2016-07-05 21:33:28,885 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2016-07-05 21:33:28,896 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2016-07-05 21:33:29,325 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 5.7.13
2016-07-05 21:33:29,326 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.33 ( Revision: alexander.soklakov@oracle.com-20140908134200-8ukofe1izi0r2b63 ) for JDBC 4.0
2016-07-05 21:33:29,337 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the alter-NG mark: playsql/migration/alter-NG.dfmark
2016-07-05 21:33:29,338 [main] INFO  (DfAlterCheckProcess#deleteFile():1285) - ...Deleting the SchemaXml file for next schema: playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:33:29,356 [main] INFO  (DfAlterCheckProcess#replaceSchema():482) - 
2016-07-05 21:33:29,357 [main] INFO  (DfAlterCheckProcess#replaceSchema():483) - +--------------------+
2016-07-05 21:33:29,358 [main] INFO  (DfAlterCheckProcess#replaceSchema():484) - |                    |
2016-07-05 21:33:29,358 [main] INFO  (DfAlterCheckProcess#replaceSchema():485) - |   Replace Schema   |
2016-07-05 21:33:29,358 [main] INFO  (DfAlterCheckProcess#replaceSchema():486) - |                    |
2016-07-05 21:33:29,359 [main] INFO  (DfAlterCheckProcess#replaceSchema():487) - +--------------------+
2016-07-05 21:33:29,369 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:33:29,370 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:33:29,370 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:33:29,371 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:33:29,371 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:33:29,371 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:33:29,387 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:33:29,388 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:33:29,389 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:33:29,520 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:33:29,526 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:33:29,531 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:33:29,539 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:33:29,550 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:33:29,565 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:33:29,585 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:33:29,611 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:33:29,626 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:33:29,650 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:33:29,666 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:33:29,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:33:29,710 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:33:29,726 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:33:29,750 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:33:29,765 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:33:29,779 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:33:29,796 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:33:29,819 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:33:29,839 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:33:29,856 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:33:29,878 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:33:29,901 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:33:29,904 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:33:29,908 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:33:29,912 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:33:29,915 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:33:29,921 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:33:29,925 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:33:29,929 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:33:29,933 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:33:29,936 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:33:29,939 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:33:29,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:33:29,946 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:33:29,949 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:33:29,953 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:33:30,016 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:33:30,019 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:33:30,022 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:33:30,023 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:33:30,023 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:33:30,023 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:33:30,024 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:33:30,024 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:33:30,029 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:33:30,033 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:33:30,034 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
2016-07-05 21:33:30,035 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():520) - ...Creating a connection for additional user: root
2016-07-05 21:33:30,049 [main] INFO  (DfCreateSchemaProcess$1#dispatch():321) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2016-07-05 21:33:30,049 [main] INFO  (DfCreateSchemaProcess$1#dispatch():323) -  -> Can't create database 'maihamadb'; database exists
2016-07-05 21:33:30,051 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():433) - ...Reviving the user 'system' until the end of this SQL file
2016-07-05 21:33:30,051 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.*
  to maihamadb@localhost identified by 'maihamadb'
2016-07-05 21:33:30,054 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2016-07-05 21:33:30,057 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:33:30,058 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-10-basic.sql
2016-07-05 21:33:30,058 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():370) - ...Saying good-bye to the user 'system' again
2016-07-05 21:33:30,059 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():374) - ...Clearing revived users
2016-07-05 21:33:30,059 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():381) - ...Coming back to the main user from the user 'system'
2016-07-05 21:33:30,064 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2016-07-05 21:33:30,081 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2016-07-05 21:33:30,144 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2016-07-05 21:33:30,154 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REMINDER_USE_COUNT INTEGER NOT NULL COMMENT 'リマインダ回数: 忘れっぽい人を分析するためのもの。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2016-07-05 21:33:30,228 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
	MEMBER_SERVICE_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員サービスID: 代理キー。律儀にIDの役割を分ける',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    SERVICE_POINT_COUNT INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_SERVICE_ID),
    UNIQUE (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2016-07-05 21:33:30,239 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2016-07-05 21:33:30,250 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2016-07-05 21:33:30,319 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2016-07-05 21:33:30,393 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2016-07-05 21:33:30,465 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2016-07-05 21:33:30,475 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (PRODUCT_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='商品ステータス'
2016-07-05 21:33:30,486 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2016-07-05 21:33:30,525 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2016-07-05 21:33:30,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2016-07-05 21:33:30,596 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2016-07-05 21:33:30,607 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_FOLLOWING(
    MEMBER_FOLLOWING_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員フォローイングID: 連番',
    MY_MEMBER_ID INTEGER NOT NULL COMMENT 'わたし: 気になった人がいて...勇気を振り絞った会員のID。',
    YOUR_MEMBER_ID INTEGER NOT NULL COMMENT 'あなた: いきなりのアクションに...ちょっと心揺らいだ会員のID。',
    FOLLOW_DATETIME DATETIME NOT NULL COMMENT 'その瞬間: ふりかえるとちょっと恥ずかしい気持ちになる日時',
    PRIMARY KEY (MEMBER_FOLLOWING_ID),
    UNIQUE (MY_MEMBER_ID, YOUR_MEMBER_ID)
) COMMENT='会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。'
2016-07-05 21:33:30,648 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:33:30,667 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,692 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2016-07-05 21:33:30,717 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2016-07-05 21:33:30,742 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,768 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2016-07-05 21:33:30,813 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,831 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2016-07-05 21:33:30,878 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:30,903 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2016-07-05 21:33:30,925 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2016-07-05 21:33:30,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:33:30,989 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2016-07-05 21:33:31,017 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2016-07-05 21:33:31,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_MY_MEMBER 
    foreign key (MY_MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:31,065 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_FOLLOWING add constraint FK_MEMBER_FOLLOWING_YOUR_MEMBER 
    foreign key (YOUR_MEMBER_ID) references MEMBER (MEMBER_ID)
2016-07-05 21:33:31,083 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FOLLOWING_UNIQUE_REVERSE on MEMBER_FOLLOWING(YOUR_MEMBER_ID, MY_MEMBER_ID)
2016-07-05 21:33:31,099 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FOLLOWING_FOLLOW_DATETIME on MEMBER_FOLLOWING(FOLLOW_DATETIME)
2016-07-05 21:33:31,117 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME)
2016-07-05 21:33:31,137 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME)
2016-07-05 21:33:31,157 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2016-07-05 21:33:31,179 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT)
2016-07-05 21:33:31,198 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2016-07-05 21:33:31,219 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2016-07-05 21:33:31,243 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2016-07-05 21:33:31,258 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2016-07-05 21:33:31,281 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2016-07-05 21:33:31,299 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=45 failure=0
2016-07-05 21:33:31,300 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-50-procedure.sql
2016-07-05 21:33:31,301 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_IN_OUT_PARAMETER(
	in v_in_varchar varchar(32)
	, out v_out_varchar varchar(32)
	, inout v_inout_varchar varchar(32)
)
begin
	set v_out_varchar = v_inout_varchar;
	set v_inout_varchar = v_in_varchar;
end;

2016-07-05 21:33:31,303 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create procedure SP_RETURN_RESULT_SET(in birthdateFrom DATE)
begin
  select MEMBER_NAME, BIRTHDATE, MEMBER_STATUS_CODE
    from MEMBER
   where BIRTHDATE >= birthdateFrom
   order by BIRTHDATE desc, MEMBER_ID asc;
  select MEMBER_STATUS_CODE, MEMBER_STATUS_NAME
    from MEMBER_STATUS
   order by DISPLAY_ORDER;
end;

2016-07-05 21:33:31,305 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2016-07-05 21:33:31,305 [main] INFO  (DfSqlFileFireMan#fire():89) - {Create Schema}: success=49 failure=0 (in 3 files)
2016-07-05 21:33:31,306 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():564) - ...Closing connections to change-users: [system]
2016-07-05 21:33:31,437 [main] INFO  (DfLoadDataProcess#execute():129) - 
2016-07-05 21:33:31,438 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2016-07-05 21:33:31,438 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2016-07-05 21:33:31,439 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2016-07-05 21:33:31,439 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2016-07-05 21:33:31,439 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2016-07-05 21:33:31,467 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:33:31,467 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/common/xls/10-master.xls)
2016-07-05 21:33:31,468 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:33:31,743 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:33:31,743 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:33:31,743 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:33:31,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2016-07-05 21:33:31,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2016-07-05 21:33:31,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2016-07-05 21:33:31,899 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():212) - ...Skipping the terminal garbage row
2016-07-05 21:33:31,903 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to MEMBER_STATUS
2016-07-05 21:33:31,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{1, アメリカ}
2016-07-05 21:33:31,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{2, カナダ}
2016-07-05 21:33:31,907 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{3, 中国}
2016-07-05 21:33:31,908 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - REGION:{4, 千葉}
2016-07-05 21:33:31,914 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to REGION
2016-07-05 21:33:31,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2016-07-05 21:33:31,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2016-07-05 21:33:31,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2016-07-05 21:33:31,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2016-07-05 21:33:31,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2016-07-05 21:33:31,927 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to SERVICE_RANK
2016-07-05 21:33:31,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2016-07-05 21:33:31,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2016-07-05 21:33:31,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2016-07-05 21:33:31,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2016-07-05 21:33:31,935 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2016-07-05 21:33:31,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2016-07-05 21:33:31,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{FOD, 食品, null}
2016-07-05 21:33:31,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2016-07-05 21:33:31,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2016-07-05 21:33:31,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2016-07-05 21:33:31,946 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2016-07-05 21:33:31,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{ONS, 生産販売可能, 1}
2016-07-05 21:33:31,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{PST, 生産中止, 2}
2016-07-05 21:33:31,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT_STATUS:{SST, 販売中止, 3}
2016-07-05 21:33:31,957 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 3 rows are loaded to PRODUCT_STATUS
2016-07-05 21:33:31,960 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:33:31,960 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/20-member.xls)
2016-07-05 21:33:31,961 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:33:32,118 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2016-07-05 21:33:32.118, foo, 2016-07-05 21:33:32.118, foo, 0}
2016-07-05 21:33:32,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2016-07-05 21:33:32.125, foo, 2016-07-05 21:33:32.125, foo, 0}
2016-07-05 21:33:32,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2016-07-05 21:33:32.127, foo, 2016-07-05 21:33:32.127, foo, 0}
2016-07-05 21:33:32,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2016-07-05 21:33:32.129, foo, 2016-07-05 21:33:32.129, foo, 0}
2016-07-05 21:33:32,131 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2016-07-05 21:33:32.131, foo, 2016-07-05 21:33:32.131, foo, 0}
2016-07-05 21:33:32,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2016-07-05 21:33:32.133, foo, 2016-07-05 21:33:32.133, foo, 0}
2016-07-05 21:33:32,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:33:32.135, foo, 2016-07-05 21:33:32.135, foo, 0}
2016-07-05 21:33:32,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2016-07-05 21:33:32.137, foo, 2016-07-05 21:33:32.137, foo, 0}
2016-07-05 21:33:32,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2016-07-05 21:33:32.139, foo, 2016-07-05 21:33:32.139, foo, 0}
2016-07-05 21:33:32,142 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2016-07-05 21:33:32.141, foo, 2016-07-05 21:33:32.141, foo, 0}
2016-07-05 21:33:32,143 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2016-07-05 21:33:32.142, foo, 2016-07-05 21:33:32.142, foo, 0}
2016-07-05 21:33:32,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2016-07-05 21:33:32.145, foo, 2016-07-05 21:33:32.145, foo, 0}
2016-07-05 21:33:32,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2016-07-05 21:33:32.147, foo, 2016-07-05 21:33:32.147, foo, 0}
2016-07-05 21:33:32,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2016-07-05 21:33:32.149, foo, 2016-07-05 21:33:32.149, foo, 0}
2016-07-05 21:33:32,152 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2016-07-05 21:33:32.152, foo, 2016-07-05 21:33:32.152, foo, 0}
2016-07-05 21:33:32,154 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2016-07-05 21:33:32.154, foo, 2016-07-05 21:33:32.154, foo, 0}
2016-07-05 21:33:32,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2016-07-05 21:33:32.156, foo, 2016-07-05 21:33:32.156, foo, 0}
2016-07-05 21:33:32,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2016-07-05 21:33:32.157, foo, 2016-07-05 21:33:32.157, foo, 0}
2016-07-05 21:33:32,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2016-07-05 21:33:32.16, foo, 2016-07-05 21:33:32.16, foo, 0}
2016-07-05 21:33:32,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2016-07-05 21:33:32.162, foo, 2016-07-05 21:33:32.162, foo, 0}
2016-07-05 21:33:32,183 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER
2016-07-05 21:33:32,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2016-07-05 21:33:32.185, foo, 2016-07-05 21:33:32.185, foo, 0}
2016-07-05 21:33:32,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2016-07-05 21:33:32.188, foo, 2016-07-05 21:33:32.188, foo, 0}
2016-07-05 21:33:32,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2016-07-05 21:33:32.191, foo, 2016-07-05 21:33:32.191, foo, 0}
2016-07-05 21:33:32,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2016-07-05 21:33:32.194, foo, 2016-07-05 21:33:32.194, foo, 0}
2016-07-05 21:33:32,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2016-07-05 21:33:32.197, foo, 2016-07-05 21:33:32.197, foo, 0}
2016-07-05 21:33:32,199 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2016-07-05 21:33:32.199, foo, 2016-07-05 21:33:32.199, foo, 0}
2016-07-05 21:33:32,202 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2016-07-05 21:33:32.202, foo, 2016-07-05 21:33:32.202, foo, 0}
2016-07-05 21:33:32,204 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2016-07-05 21:33:32.204, foo, 2016-07-05 21:33:32.204, foo, 0}
2016-07-05 21:33:32,206 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2016-07-05 21:33:32.206, foo, 2016-07-05 21:33:32.206, foo, 0}
2016-07-05 21:33:32,209 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2016-07-05 21:33:32.209, foo, 2016-07-05 21:33:32.209, foo, 0}
2016-07-05 21:33:32,212 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2016-07-05 21:33:32.212, foo, 2016-07-05 21:33:32.212, foo, 0}
2016-07-05 21:33:32,216 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2016-07-05 21:33:32.216, foo, 2016-07-05 21:33:32.216, foo, 0}
2016-07-05 21:33:32,219 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2016-07-05 21:33:32.219, foo, 2016-07-05 21:33:32.219, foo, 0}
2016-07-05 21:33:32,222 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2016-07-05 21:33:32.221, foo, 2016-07-05 21:33:32.221, foo, 0}
2016-07-05 21:33:32,224 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2016-07-05 21:33:32.224, foo, 2016-07-05 21:33:32.224, foo, 0}
2016-07-05 21:33:32,226 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2016-07-05 21:33:32.226, foo, 2016-07-05 21:33:32.226, foo, 0}
2016-07-05 21:33:32,229 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2016-07-05 21:33:32.229, foo, 2016-07-05 21:33:32.229, foo, 0}
2016-07-05 21:33:32,233 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2016-07-05 21:33:32.233, foo, 2016-07-05 21:33:32.233, foo, 0}
2016-07-05 21:33:32,235 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2016-07-05 21:33:32.235, foo, 2016-07-05 21:33:32.235, foo, 0}
2016-07-05 21:33:32,237 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2016-07-05 21:33:32.237, foo, 2016-07-05 21:33:32.237, foo, 0}
2016-07-05 21:33:32,271 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_ADDRESS
2016-07-05 21:33:32,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:33:32,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2016-07-05 21:33:32,274 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2016-07-05 21:33:32,275 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2016-07-05 21:33:32,276 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2016-07-05 21:33:32,277 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2016-07-05 21:33:32,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2016-07-05 21:33:32,278 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2016-07-05 21:33:32,279 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2016-07-05 21:33:32,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2016-07-05 21:33:32,280 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2016-07-05 21:33:32,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2016-07-05 21:33:32,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2016-07-05 21:33:32,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2016-07-05 21:33:32,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2016-07-05 21:33:32,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2016-07-05 21:33:32,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2016-07-05 21:33:32,286 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2016-07-05 21:33:32,287 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2016-07-05 21:33:32,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2016-07-05 21:33:32,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2016-07-05 21:33:32,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2016-07-05 21:33:32,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2016-07-05 21:33:32,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2016-07-05 21:33:32,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2016-07-05 21:33:32,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2016-07-05 21:33:32,293 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2016-07-05 21:33:32,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2016-07-05 21:33:32,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2016-07-05 21:33:32,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2016-07-05 21:33:32,301 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2016-07-05 21:33:32,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2016-07-05 21:33:32,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2016-07-05 21:33:32,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2016-07-05 21:33:32,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2016-07-05 21:33:32,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2016-07-05 21:33:32,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2016-07-05 21:33:32,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2016-07-05 21:33:32,308 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2016-07-05 21:33:32,309 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2016-07-05 21:33:32,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2016-07-05 21:33:32,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2016-07-05 21:33:32,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2016-07-05 21:33:32,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2016-07-05 21:33:32,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2016-07-05 21:33:32,316 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2016-07-05 21:33:32,317 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2016-07-05 21:33:32,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2016-07-05 21:33:32,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2016-07-05 21:33:32,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2016-07-05 21:33:32,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2016-07-05 21:33:32,324 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2016-07-05 21:33:32,325 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2016-07-05 21:33:32,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2016-07-05 21:33:32,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2016-07-05 21:33:32,331 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2016-07-05 21:33:32,379 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 56 rows are loaded to MEMBER_LOGIN
2016-07-05 21:33:32,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 1, 2016-07-05 21:33:32.381, foo, 2016-07-05 21:33:32.381, foo, 0}
2016-07-05 21:33:32,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2, 2016-07-05 21:33:32.383, foo, 2016-07-05 21:33:32.383, foo, 0}
2016-07-05 21:33:32,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 3, 2016-07-05 21:33:32.385, foo, 2016-07-05 21:33:32.385, foo, 0}
2016-07-05 21:33:32,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 4, 2016-07-05 21:33:32.387, foo, 2016-07-05 21:33:32.387, foo, 0}
2016-07-05 21:33:32,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 5, 2016-07-05 21:33:32.388, foo, 2016-07-05 21:33:32.388, foo, 0}
2016-07-05 21:33:32,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 6, 2016-07-05 21:33:32.389, foo, 2016-07-05 21:33:32.389, foo, 0}
2016-07-05 21:33:32,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 7, 2016-07-05 21:33:32.39, foo, 2016-07-05 21:33:32.39, foo, 0}
2016-07-05 21:33:32,391 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 8, 2016-07-05 21:33:32.391, foo, 2016-07-05 21:33:32.391, foo, 0}
2016-07-05 21:33:32,392 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 9, 2016-07-05 21:33:32.392, foo, 2016-07-05 21:33:32.392, foo, 0}
2016-07-05 21:33:32,393 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 10, 2016-07-05 21:33:32.393, foo, 2016-07-05 21:33:32.393, foo, 0}
2016-07-05 21:33:32,395 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 11, 2016-07-05 21:33:32.395, foo, 2016-07-05 21:33:32.395, foo, 0}
2016-07-05 21:33:32,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 12, 2016-07-05 21:33:32.396, foo, 2016-07-05 21:33:32.396, foo, 0}
2016-07-05 21:33:32,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 13, 2016-07-05 21:33:32.398, foo, 2016-07-05 21:33:32.398, foo, 0}
2016-07-05 21:33:32,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 14, 2016-07-05 21:33:32.4, foo, 2016-07-05 21:33:32.4, foo, 0}
2016-07-05 21:33:32,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 15, 2016-07-05 21:33:32.403, foo, 2016-07-05 21:33:32.403, foo, 0}
2016-07-05 21:33:32,439 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 16, 2016-07-05 21:33:32.439, foo, 2016-07-05 21:33:32.439, foo, 0}
2016-07-05 21:33:32,442 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 17, 2016-07-05 21:33:32.442, foo, 2016-07-05 21:33:32.442, foo, 0}
2016-07-05 21:33:32,443 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 18, 2016-07-05 21:33:32.443, foo, 2016-07-05 21:33:32.443, foo, 0}
2016-07-05 21:33:32,444 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 19, 2016-07-05 21:33:32.443, foo, 2016-07-05 21:33:32.443, foo, 0}
2016-07-05 21:33:32,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 20, 2016-07-05 21:33:32.444, foo, 2016-07-05 21:33:32.444, foo, 0}
2016-07-05 21:33:32,470 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SECURITY
2016-07-05 21:33:32,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{1, 1, 1234, PLT, 2016-07-05 21:33:32.471, foo, 2016-07-05 21:33:32.471, foo, 0}
2016-07-05 21:33:32,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{2, 2, 2345, GLD, 2016-07-05 21:33:32.474, foo, 2016-07-05 21:33:32.474, foo, 0}
2016-07-05 21:33:32,475 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{3, 3, 3456, GLD, 2016-07-05 21:33:32.475, foo, 2016-07-05 21:33:32.475, foo, 0}
2016-07-05 21:33:32,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{4, 4, 875, BRZ, 2016-07-05 21:33:32.476, foo, 2016-07-05 21:33:32.476, foo, 0}
2016-07-05 21:33:32,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{5, 5, 1111, BRZ, 2016-07-05 21:33:32.477, foo, 2016-07-05 21:33:32.477, foo, 0}
2016-07-05 21:33:32,479 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{6, 6, 5422, SIL, 2016-07-05 21:33:32.479, foo, 2016-07-05 21:33:32.479, foo, 0}
2016-07-05 21:33:32,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{7, 7, 24678, SIL, 2016-07-05 21:33:32.479, foo, 2016-07-05 21:33:32.479, foo, 0}
2016-07-05 21:33:32,480 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{8, 8, 234, SIL, 2016-07-05 21:33:32.48, foo, 2016-07-05 21:33:32.48, foo, 0}
2016-07-05 21:33:32,481 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{9, 9, 3, SIL, 2016-07-05 21:33:32.481, foo, 2016-07-05 21:33:32.481, foo, 0}
2016-07-05 21:33:32,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{10, 10, 98765, PLT, 2016-07-05 21:33:32.482, foo, 2016-07-05 21:33:32.482, foo, 0}
2016-07-05 21:33:32,483 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{11, 11, 34, GLD, 2016-07-05 21:33:32.483, foo, 2016-07-05 21:33:32.483, foo, 0}
2016-07-05 21:33:32,484 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{12, 12, 532, PLT, 2016-07-05 21:33:32.484, foo, 2016-07-05 21:33:32.484, foo, 0}
2016-07-05 21:33:32,485 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{13, 13, 23678, GLD, 2016-07-05 21:33:32.485, foo, 2016-07-05 21:33:32.485, foo, 0}
2016-07-05 21:33:32,509 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{14, 14, 432, GLD, 2016-07-05 21:33:32.509, foo, 2016-07-05 21:33:32.509, foo, 0}
2016-07-05 21:33:32,510 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{15, 15, 543, BRZ, 2016-07-05 21:33:32.51, foo, 2016-07-05 21:33:32.51, foo, 0}
2016-07-05 21:33:32,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{16, 16, 23545, PLT, 2016-07-05 21:33:32.511, foo, 2016-07-05 21:33:32.511, foo, 0}
2016-07-05 21:33:32,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{17, 17, 2345, GLD, 2016-07-05 21:33:32.512, foo, 2016-07-05 21:33:32.512, foo, 0}
2016-07-05 21:33:32,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{18, 18, 8763, SIL, 2016-07-05 21:33:32.513, foo, 2016-07-05 21:33:32.513, foo, 0}
2016-07-05 21:33:32,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{19, 19, 34567, SIL, 2016-07-05 21:33:32.514, foo, 2016-07-05 21:33:32.514, foo, 0}
2016-07-05 21:33:32,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_SERVICE:{20, 20, 43, GLD, 2016-07-05 21:33:32.515, foo, 2016-07-05 21:33:32.515, foo, 0}
2016-07-05 21:33:32,533 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to MEMBER_SERVICE
2016-07-05 21:33:32,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2016-07-05 21:33:32.535, foo, 2016-07-05 21:33:32.535, foo}
2016-07-05 21:33:32,577 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2016-07-05 21:33:32.577, foo, 2016-07-05 21:33:32.577, foo}
2016-07-05 21:33:32,583 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2016-07-05 21:33:32.583, foo, 2016-07-05 21:33:32.583, foo}
2016-07-05 21:33:32,584 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2016-07-05 21:33:32.584, foo, 2016-07-05 21:33:32.584, foo}
2016-07-05 21:33:32,605 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2016-07-05 21:33:32,606 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{1, 1, 2, 2006/12/24 23:59:59}
2016-07-05 21:33:32,607 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{2, 1, 3, 2007/11/11 16:16:16}
2016-07-05 21:33:32,612 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{3, 1, 4, 2006/12/23 22:56:29}
2016-07-05 21:33:32,620 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{4, 1, 5, 2007/11/01 02:13:00}
2016-07-05 21:33:32,621 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{5, 1, 6, 2012/05/24 23:12:59}
2016-07-05 21:33:32,622 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{6, 1, 9, 2005/11/11 16:32:01}
2016-07-05 21:33:32,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{7, 1, 15, 2006/01/28 23:59:59}
2016-07-05 21:33:32,623 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{8, 1, 18, 2007/11/09 16:23:00}
2016-07-05 21:33:32,624 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{9, 2, 1, 2009/12/22 23:59:59}
2016-07-05 21:33:32,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{10, 2, 3, 2007/11/11 09:01:00}
2016-07-05 21:33:32,629 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{11, 2, 4, 2006/11/23 23:59:59}
2016-07-05 21:33:32,630 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{12, 2, 9, 2012/11/15 12:43:00}
2016-07-05 21:33:32,640 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{13, 2, 14, 2006/12/24 23:59:59}
2016-07-05 21:33:32,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{14, 2, 19, 2011/04/01 16:23:01}
2016-07-05 21:33:32,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{15, 3, 1, 2006/12/24 23:59:20}
2016-07-05 21:33:32,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{16, 3, 2, 2008/05/01 12:23:02}
2016-07-05 21:33:32,648 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{17, 3, 4, 2006/12/24 23:59:21}
2016-07-05 21:33:32,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{18, 3, 6, 2009/06/11 17:23:03}
2016-07-05 21:33:32,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{19, 3, 9, 2010/12/24 23:59:22}
2016-07-05 21:33:32,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{20, 3, 10, 2007/11/01 16:12:04}
2016-07-05 21:33:32,655 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{21, 4, 1, 2006/12/24 23:59:23}
2016-07-05 21:33:32,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{22, 4, 2, 2007/11/01 16:23:05}
2016-07-05 21:33:32,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{23, 4, 3, 2011/12/24 23:59:24}
2016-07-05 21:33:32,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{24, 4, 4, 2007/11/01 16:23:06}
2016-07-05 21:33:32,675 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{25, 4, 5, 2013/05/24 11:59:25}
2016-07-05 21:33:32,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{26, 4, 6, 2007/06/21 01:23:57}
2016-07-05 21:33:32,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{27, 4, 9, 2006/12/24 23:59:26}
2016-07-05 21:33:32,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{28, 4, 11, 2007/11/01 16:23:08}
2016-07-05 21:33:32,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{29, 4, 12, 2013/02/24 23:59:27}
2016-07-05 21:33:32,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{30, 4, 13, 2012/11/01 16:23:03}
2016-07-05 21:33:32,683 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{31, 4, 14, 2006/07/24 23:59:28}
2016-07-05 21:33:32,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{32, 4, 15, 2007/11/01 17:23:10}
2016-07-05 21:33:32,685 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{33, 4, 16, 2007/11/01 16:23:10}
2016-07-05 21:33:32,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{34, 4, 17, 2006/07/24 23:59:29}
2016-07-05 21:33:32,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{35, 4, 18, 2011/11/01 17:23:11}
2016-07-05 21:33:32,689 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{36, 4, 19, 2007/11/01 16:23:11}
2016-07-05 21:33:32,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{37, 5, 1, 2008/07/24 23:59:30}
2016-07-05 21:33:32,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{38, 5, 3, 2007/11/01 17:23:12}
2016-07-05 21:33:32,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{39, 5, 6, 2007/11/01 16:23:12}
2016-07-05 21:33:32,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{40, 6, 1, 2006/07/24 23:59:31}
2016-07-05 21:33:32,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{41, 6, 2, 2007/11/01 17:23:13}
2016-07-05 21:33:32,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{42, 6, 3, 2007/11/01 16:23:13}
2016-07-05 21:33:32,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{43, 6, 4, 2006/07/24 23:52:32}
2016-07-05 21:33:32,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{44, 6, 5, 2007/11/01 11:23:14}
2016-07-05 21:33:32,700 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{45, 6, 6, 2007/11/21 06:23:14}
2016-07-05 21:33:32,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{46, 8, 1, 2011/07/24 23:52:33}
2016-07-05 21:33:32,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{47, 8, 2, 2007/11/01 11:23:15}
2016-07-05 21:33:32,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{48, 8, 3, 2007/11/21 06:23:15}
2016-07-05 21:33:32,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{49, 9, 1, 2006/07/24 23:52:34}
2016-07-05 21:33:32,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{50, 9, 2, 208/11/01 11:23:16}
2016-07-05 21:33:32,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{51, 9, 3, 2007/11/21 06:23:16}
2016-07-05 21:33:32,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{52, 9, 10, 2006/07/24 23:52:35}
2016-07-05 21:33:32,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{53, 9, 20, 2009/11/01 11:23:17}
2016-07-05 21:33:32,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{54, 10, 1, 2007/11/21 06:23:17}
2016-07-05 21:33:32,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{55, 10, 2, 2006/07/24 23:52:36}
2016-07-05 21:33:32,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{56, 10, 3, 2010/11/01 11:23:18}
2016-07-05 21:33:32,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{57, 10, 4, 2006/12/21 23:59:59}
2016-07-05 21:33:32,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{58, 10, 5, 2007/11/1 16:16:16}
2016-07-05 21:33:32,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{59, 10, 6, 2006/08/23 22:56:29}
2016-07-05 21:33:32,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{60, 10, 9, 2007/11/01 02:11:00}
2016-07-05 21:33:32,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{61, 10, 11, 2012/05/24 23:12:59}
2016-07-05 21:33:32,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{62, 10, 12, 2005/11/10 16:32:01}
2016-07-05 21:33:32,715 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{63, 10, 13, 2006/01/28 23:59:59}
2016-07-05 21:33:32,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{64, 10, 14, 2007/10/09 16:23:00}
2016-07-05 21:33:32,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{65, 10, 15, 2009/12/22 23:59:59}
2016-07-05 21:33:32,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{66, 10, 16, 2007/11/01 09:01:00}
2016-07-05 21:33:32,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{67, 10, 17, 2006/11/23 23:59:59}
2016-07-05 21:33:32,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{68, 10, 18, 2011/11/15 12:43:00}
2016-07-05 21:33:32,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{69, 10, 19, 2006/07/24 23:59:59}
2016-07-05 21:33:32,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{70, 10, 20, 2011/08/01 16:23:01}
2016-07-05 21:33:32,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{71, 11, 12, 2006/09/24 23:59:20}
2016-07-05 21:33:32,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{72, 11, 13, 2008/01/01 12:23:02}
2016-07-05 21:33:32,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{73, 11, 14, 2006/12/24 23:59:21}
2016-07-05 21:33:32,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{74, 11, 15, 2009/02/11 17:23:03}
2016-07-05 21:33:32,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{75, 11, 16, 2010/03/24 23:59:22}
2016-07-05 21:33:32,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{76, 11, 17, 2007/09/01 16:12:04}
2016-07-05 21:33:32,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{77, 11, 19, 2006/12/24 23:59:23}
2016-07-05 21:33:32,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{78, 12, 1, 2007/11/01 16:23:05}
2016-07-05 21:33:32,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{79, 12, 11, 2011/05/24 23:59:24}
2016-07-05 21:33:32,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{80, 12, 13, 2007/11/01 16:23:06}
2016-07-05 21:33:32,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{81, 12, 14, 2013/06/24 11:59:25}
2016-07-05 21:33:32,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{82, 12, 15, 2007/06/21 01:23:57}
2016-07-05 21:33:32,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{83, 12, 19, 2006/12/24 23:59:26}
2016-07-05 21:33:32,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{84, 13, 11, 2007/08/01 16:23:08}
2016-07-05 21:33:32,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{85, 13, 12, 2013/02/24 23:59:27}
2016-07-05 21:33:32,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{86, 13, 14, 2012/11/01 16:23:03}
2016-07-05 21:33:32,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{87, 14, 1, 2006/07/24 23:59:28}
2016-07-05 21:33:32,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{88, 14, 10, 2012/05/24 23:12:59}
2016-07-05 21:33:32,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{89, 14, 11, 2005/11/10 16:32:01}
2016-07-05 21:33:32,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{90, 14, 20, 2006/01/28 23:59:59}
2016-07-05 21:33:32,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{91, 16, 17, 2007/10/09 16:23:00}
2016-07-05 21:33:32,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{92, 17, 16, 2009/12/22 23:59:59}
2016-07-05 21:33:32,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{93, 18, 1, 2007/11/01 09:01:00}
2016-07-05 21:33:32,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{94, 18, 2, 2006/11/23 23:59:59}
2016-07-05 21:33:32,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{95, 18, 3, 2011/11/15 12:43:00}
2016-07-05 21:33:32,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{96, 18, 4, 2006/07/24 23:59:59}
2016-07-05 21:33:32,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{97, 18, 5, 2011/08/01 16:23:01}
2016-07-05 21:33:32,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{98, 18, 6, 2006/09/24 23:59:20}
2016-07-05 21:33:32,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{99, 18, 9, 2008/01/01 12:23:02}
2016-07-05 21:33:32,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{100, 18, 11, 2006/12/24 23:59:21}
2016-07-05 21:33:32,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{101, 18, 12, 2009/02/11 17:23:03}
2016-07-05 21:33:32,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{102, 18, 13, 2010/03/24 23:59:22}
2016-07-05 21:33:32,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{103, 18, 14, 2007/09/01 16:12:04}
2016-07-05 21:33:32,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{104, 18, 15, 2006/12/24 23:59:23}
2016-07-05 21:33:32,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{105, 19, 1, 2007/11/01 16:23:05}
2016-07-05 21:33:32,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{106, 19, 10, 2011/05/24 23:59:24}
2016-07-05 21:33:32,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{107, 19, 11, 2007/11/01 16:23:06}
2016-07-05 21:33:32,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{108, 19, 12, 2013/06/24 11:59:25}
2016-07-05 21:33:32,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{109, 19, 20, 2013/06/24 11:59:25}
2016-07-05 21:33:32,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{110, 20, 10, 2013/06/24 11:59:25}
2016-07-05 21:33:32,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - MEMBER_FOLLOWING:{111, 20, 19, 2013/06/24 11:59:25}
2016-07-05 21:33:32,863 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 111 rows are loaded to MEMBER_FOLLOWING
2016-07-05 21:33:32,864 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2016-07-05 21:33:32,864 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():129) - writeData(playsql/data/ut/xls/30-product.xls)
2016-07-05 21:33:32,864 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():130) - = = = = = = =/
2016-07-05 21:33:32,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2016-07-05 21:33:32.918, foo, 2016-07-05 21:33:32.918, foo, 0}
2016-07-05 21:33:32,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2016-07-05 21:33:32.92, foo, 2016-07-05 21:33:32.92, foo, 0}
2016-07-05 21:33:32,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2016-07-05 21:33:32.92, foo, 2016-07-05 21:33:32.92, foo, 0}
2016-07-05 21:33:32,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2016-07-05 21:33:32.921, foo, 2016-07-05 21:33:32.921, foo, 0}
2016-07-05 21:33:32,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2016-07-05 21:33:32.922, foo, 2016-07-05 21:33:32.922, foo, 0}
2016-07-05 21:33:32,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2016-07-05 21:33:32.922, foo, 2016-07-05 21:33:32.922, foo, 0}
2016-07-05 21:33:32,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2016-07-05 21:33:32.923, foo, 2016-07-05 21:33:32.923, foo, 0}
2016-07-05 21:33:32,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2016-07-05 21:33:32.923, foo, 2016-07-05 21:33:32.923, foo, 0}
2016-07-05 21:33:32,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2016-07-05 21:33:32.925, foo, 2016-07-05 21:33:32.925, foo, 0}
2016-07-05 21:33:32,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2016-07-05 21:33:32.926, foo, 2016-07-05 21:33:32.926, foo, 0}
2016-07-05 21:33:32,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2016-07-05 21:33:32.928, foo, 2016-07-05 21:33:32.928, foo, 0}
2016-07-05 21:33:32,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2016-07-05 21:33:32.929, foo, 2016-07-05 21:33:32.929, foo, 0}
2016-07-05 21:33:32,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2016-07-05 21:33:32.93, foo, 2016-07-05 21:33:32.93, foo, 0}
2016-07-05 21:33:32,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2016-07-05 21:33:32.931, foo, 2016-07-05 21:33:32.931, foo, 0}
2016-07-05 21:33:32,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, 500000, 2016-07-05 21:33:32.932, foo, 2016-07-05 21:33:32.932, foo, 0}
2016-07-05 21:33:32,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, 4000000, 2016-07-05 21:33:32.932, foo, 2016-07-05 21:33:32.932, foo, 0}
2016-07-05 21:33:32,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2016-07-05 21:33:32.933, foo, 2016-07-05 21:33:32.933, foo, 0}
2016-07-05 21:33:32,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2016-07-05 21:33:32.934, foo, 2016-07-05 21:33:32.934, foo, 0}
2016-07-05 21:33:32,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2016-07-05 21:33:32.935, foo, 2016-07-05 21:33:32.935, foo, 0}
2016-07-05 21:33:32,936 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2016-07-05 21:33:32.936, foo, 2016-07-05 21:33:32.936, foo, 0}
2016-07-05 21:33:32,952 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 20 rows are loaded to PRODUCT
2016-07-05 21:33:32,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2016-07-05 21:33:32.953, foo, 2016-07-05 21:33:32.954, foo, 0}
2016-07-05 21:33:32,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2016-07-05 21:33:32.956, foo, 2016-07-05 21:33:32.956, foo, 0}
2016-07-05 21:33:32,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2016-07-05 21:33:32.958, foo, 2016-07-05 21:33:32.958, foo, 0}
2016-07-05 21:33:32,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2016-07-05 21:33:32.959, foo, 2016-07-05 21:33:32.959, foo, 0}
2016-07-05 21:33:32,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2016-07-05 21:33:32.96, foo, 2016-07-05 21:33:32.96, foo, 0}
2016-07-05 21:33:32,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2016-07-05 21:33:32.961, foo, 2016-07-05 21:33:32.961, foo, 0}
2016-07-05 21:33:32,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2016-07-05 21:33:32.962, foo, 2016-07-05 21:33:32.962, foo, 0}
2016-07-05 21:33:32,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2016-07-05 21:33:32.964, foo, 2016-07-05 21:33:32.964, foo, 0}
2016-07-05 21:33:32,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2016-07-05 21:33:32.965, foo, 2016-07-05 21:33:32.965, foo, 0}
2016-07-05 21:33:32,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2016-07-05 21:33:32.967, foo, 2016-07-05 21:33:32.967, foo, 0}
2016-07-05 21:33:32,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2016-07-05 21:33:32.969, foo, 2016-07-05 21:33:32.969, foo, 0}
2016-07-05 21:33:32,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2016-07-05 21:33:32.971, foo, 2016-07-05 21:33:32.971, foo, 0}
2016-07-05 21:33:32,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2016-07-05 21:33:32.974, foo, 2016-07-05 21:33:32.974, foo, 0}
2016-07-05 21:33:32,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2016-07-05 21:33:32.976, foo, 2016-07-05 21:33:32.976, foo, 0}
2016-07-05 21:33:32,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2016-07-05 21:33:32.979, foo, 2016-07-05 21:33:32.979, foo, 0}
2016-07-05 21:33:32,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2016-07-05 21:33:32.98, foo, 2016-07-05 21:33:32.98, foo, 0}
2016-07-05 21:33:32,981 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2016-07-05 21:33:32.981, foo, 2016-07-05 21:33:32.981, foo, 0}
2016-07-05 21:33:32,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2016-07-05 21:33:32.982, foo, 2016-07-05 21:33:32.982, foo, 0}
2016-07-05 21:33:32,983 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2016-07-05 21:33:32.983, foo, 2016-07-05 21:33:32.983, foo, 0}
2016-07-05 21:33:32,984 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2016-07-05 21:33:32.984, foo, 2016-07-05 21:33:32.984, foo, 0}
2016-07-05 21:33:32,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2016-07-05 21:33:32.987, foo, 2016-07-05 21:33:32.987, foo, 0}
2016-07-05 21:33:32,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2016-07-05 21:33:32.991, foo, 2016-07-05 21:33:32.991, foo, 0}
2016-07-05 21:33:32,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2016-07-05 21:33:32.991, foo, 2016-07-05 21:33:32.991, foo, 0}
2016-07-05 21:33:32,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2016-07-05 21:33:32.992, foo, 2016-07-05 21:33:32.992, foo, 0}
2016-07-05 21:33:32,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2016-07-05 21:33:32.993, foo, 2016-07-05 21:33:32.993, foo, 0}
2016-07-05 21:33:32,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2016-07-05 21:33:32.994, foo, 2016-07-05 21:33:32.994, foo, 0}
2016-07-05 21:33:32,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2016-07-05 21:33:32.995, foo, 2016-07-05 21:33:32.995, foo, 0}
2016-07-05 21:33:32,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2016-07-05 21:33:32.996, foo, 2016-07-05 21:33:32.996, foo, 0}
2016-07-05 21:33:32,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2016-07-05 21:33:32.998, foo, 2016-07-05 21:33:32.998, foo, 0}
2016-07-05 21:33:32,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2016-07-05 21:33:32.999, foo, 2016-07-05 21:33:32.999, foo, 0}
2016-07-05 21:33:33,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2016-07-05 21:33:33.001, foo, 2016-07-05 21:33:33.001, foo, 0}
2016-07-05 21:33:33,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:33:33.003, foo, 2016-07-05 21:33:33.003, foo, 0}
2016-07-05 21:33:33,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:33:33.004, foo, 2016-07-05 21:33:33.004, foo, 0}
2016-07-05 21:33:33,006 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:33:33.006, foo, 2016-07-05 21:33:33.006, foo, 0}
2016-07-05 21:33:33,007 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:33:33.007, foo, 2016-07-05 21:33:33.007, foo, 0}
2016-07-05 21:33:33,008 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:33:33.008, foo, 2016-07-05 21:33:33.008, foo, 0}
2016-07-05 21:33:33,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2016-07-05 21:33:33.009, foo, 2016-07-05 21:33:33.009, foo, 0}
2016-07-05 21:33:33,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:33:33.011, foo, 2016-07-05 21:33:33.011, foo, 0}
2016-07-05 21:33:33,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:33:33.012, foo, 2016-07-05 21:33:33.012, foo, 0}
2016-07-05 21:33:33,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2016-07-05 21:33:33.012, foo, 2016-07-05 21:33:33.012, foo, 0}
2016-07-05 21:33:33,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2016-07-05 21:33:33.013, foo, 2016-07-05 21:33:33.013, foo, 0}
2016-07-05 21:33:33,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2016-07-05 21:33:33.014, foo, 2016-07-05 21:33:33.014, foo, 0}
2016-07-05 21:33:33,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2016-07-05 21:33:33.015, foo, 2016-07-05 21:33:33.015, foo, 0}
2016-07-05 21:33:33,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2016-07-05 21:33:33.016, foo, 2016-07-05 21:33:33.016, foo, 0}
2016-07-05 21:33:33,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:33:33.017, foo, 2016-07-05 21:33:33.017, foo, 0}
2016-07-05 21:33:33,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2016-07-05 21:33:33.018, foo, 2016-07-05 21:33:33.018, foo, 0}
2016-07-05 21:33:33,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:33:33.022, foo, 2016-07-05 21:33:33.022, foo, 0}
2016-07-05 21:33:33,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2016-07-05 21:33:33.023, foo, 2016-07-05 21:33:33.023, foo, 0}
2016-07-05 21:33:33,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2016-07-05 21:33:33.023, foo, 2016-07-05 21:33:33.023, foo, 0}
2016-07-05 21:33:33,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2016-07-05 21:33:33.024, foo, 2016-07-05 21:33:33.024, foo, 0}
2016-07-05 21:33:33,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2016-07-05 21:33:33.025, foo, 2016-07-05 21:33:33.025, foo, 0}
2016-07-05 21:33:33,025 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2016-07-05 21:33:33.025, foo, 2016-07-05 21:33:33.025, foo, 0}
2016-07-05 21:33:33,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2016-07-05 21:33:33.026, foo, 2016-07-05 21:33:33.026, foo, 0}
2016-07-05 21:33:33,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2016-07-05 21:33:33.027, foo, 2016-07-05 21:33:33.027, foo, 0}
2016-07-05 21:33:33,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2016-07-05 21:33:33.028, foo, 2016-07-05 21:33:33.028, foo, 0}
2016-07-05 21:33:33,029 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2016-07-05 21:33:33.029, foo, 2016-07-05 21:33:33.029, foo, 0}
2016-07-05 21:33:33,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2016-07-05 21:33:33.03, foo, 2016-07-05 21:33:33.03, foo, 0}
2016-07-05 21:33:33,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2016-07-05 21:33:33.031, foo, 2016-07-05 21:33:33.031, foo, 0}
2016-07-05 21:33:33,033 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2016-07-05 21:33:33.033, foo, 2016-07-05 21:33:33.033, foo, 0}
2016-07-05 21:33:33,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2016-07-05 21:33:33.035, foo, 2016-07-05 21:33:33.035, foo, 0}
2016-07-05 21:33:33,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2016-07-05 21:33:33.036, foo, 2016-07-05 21:33:33.036, foo, 0}
2016-07-05 21:33:33,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2016-07-05 21:33:33.037, foo, 2016-07-05 21:33:33.037, foo, 0}
2016-07-05 21:33:33,038 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2016-07-05 21:33:33.038, foo, 2016-07-05 21:33:33.038, foo, 0}
2016-07-05 21:33:33,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2016-07-05 21:33:33.039, foo, 2016-07-05 21:33:33.039, foo, 0}
2016-07-05 21:33:33,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2016-07-05 21:33:33.041, foo, 2016-07-05 21:33:33.041, foo, 0}
2016-07-05 21:33:33,042 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2016-07-05 21:33:33.042, foo, 2016-07-05 21:33:33.042, foo, 0}
2016-07-05 21:33:33,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2016-07-05 21:33:33.043, foo, 2016-07-05 21:33:33.043, foo, 0}
2016-07-05 21:33:33,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2016-07-05 21:33:33.044, foo, 2016-07-05 21:33:33.044, foo, 0}
2016-07-05 21:33:33,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2016-07-05 21:33:33.044, foo, 2016-07-05 21:33:33.044, foo, 0}
2016-07-05 21:33:33,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2016-07-05 21:33:33.045, foo, 2016-07-05 21:33:33.045, foo, 0}
2016-07-05 21:33:33,088 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 70 rows are loaded to PURCHASE
2016-07-05 21:33:33,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2016-07-05 21:33:33.089, foo, 2016-07-05 21:33:33.089, foo}
2016-07-05 21:33:33,090 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2016-07-05 21:33:33.09, foo, 2016-07-05 21:33:33.09, foo}
2016-07-05 21:33:33,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2016-07-05 21:33:33.091, foo, 2016-07-05 21:33:33.091, foo}
2016-07-05 21:33:33,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2016-07-05 21:33:33.092, foo, 2016-07-05 21:33:33.092, foo}
2016-07-05 21:33:33,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2016-07-05 21:33:33.092, foo, 2016-07-05 21:33:33.092, foo}
2016-07-05 21:33:33,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2016-07-05 21:33:33.093, foo, 2016-07-05 21:33:33.093, foo}
2016-07-05 21:33:33,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2016-07-05 21:33:33.094, foo, 2016-07-05 21:33:33.094, foo}
2016-07-05 21:33:33,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2016-07-05 21:33:33.095, foo, 2016-07-05 21:33:33.095, foo}
2016-07-05 21:33:33,096 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2016-07-05 21:33:33.096, foo, 2016-07-05 21:33:33.096, foo}
2016-07-05 21:33:33,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2016-07-05 21:33:33.097, foo, 2016-07-05 21:33:33.097, foo}
2016-07-05 21:33:33,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2016-07-05 21:33:33.098, foo, 2016-07-05 21:33:33.098, foo}
2016-07-05 21:33:33,100 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2016-07-05 21:33:33.1, foo, 2016-07-05 21:33:33.1, foo}
2016-07-05 21:33:33,101 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2016-07-05 21:33:33.101, foo, 2016-07-05 21:33:33.101, foo}
2016-07-05 21:33:33,102 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2016-07-05 21:33:33.102, foo, 2016-07-05 21:33:33.102, foo}
2016-07-05 21:33:33,104 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2016-07-05 21:33:33.104, foo, 2016-07-05 21:33:33.104, foo}
2016-07-05 21:33:33,105 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2016-07-05 21:33:33.104, foo, 2016-07-05 21:33:33.105, foo}
2016-07-05 21:33:33,106 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2016-07-05 21:33:33.106, foo, 2016-07-05 21:33:33.106, foo}
2016-07-05 21:33:33,107 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2016-07-05 21:33:33.107, foo, 2016-07-05 21:33:33.107, foo}
2016-07-05 21:33:33,108 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2016-07-05 21:33:33.108, foo, 2016-07-05 21:33:33.108, foo}
2016-07-05 21:33:33,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2016-07-05 21:33:33.109, foo, 2016-07-05 21:33:33.109, foo}
2016-07-05 21:33:33,109 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2016-07-05 21:33:33.109, foo, 2016-07-05 21:33:33.109, foo}
2016-07-05 21:33:33,110 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2016-07-05 21:33:33.11, foo, 2016-07-05 21:33:33.11, foo}
2016-07-05 21:33:33,111 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2016-07-05 21:33:33.111, foo, 2016-07-05 21:33:33.111, foo}
2016-07-05 21:33:33,112 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2016-07-05 21:33:33.112, foo, 2016-07-05 21:33:33.112, foo}
2016-07-05 21:33:33,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2016-07-05 21:33:33.113, foo, 2016-07-05 21:33:33.113, foo}
2016-07-05 21:33:33,113 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:33:33.113, foo, 2016-07-05 21:33:33.113, foo}
2016-07-05 21:33:33,114 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2016-07-05 21:33:33.114, foo, 2016-07-05 21:33:33.114, foo}
2016-07-05 21:33:33,115 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2016-07-05 21:33:33.115, foo, 2016-07-05 21:33:33.115, foo}
2016-07-05 21:33:33,117 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2016-07-05 21:33:33.117, foo, 2016-07-05 21:33:33.117, foo}
2016-07-05 21:33:33,122 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:33:33.122, foo, 2016-07-05 21:33:33.122, foo}
2016-07-05 21:33:33,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:33:33.123, foo, 2016-07-05 21:33:33.123, foo}
2016-07-05 21:33:33,123 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2016-07-05 21:33:33.123, foo, 2016-07-05 21:33:33.123, foo}
2016-07-05 21:33:33,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2016-07-05 21:33:33.124, foo, 2016-07-05 21:33:33.124, foo}
2016-07-05 21:33:33,124 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2016-07-05 21:33:33.124, foo, 2016-07-05 21:33:33.124, foo}
2016-07-05 21:33:33,125 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2016-07-05 21:33:33.125, foo, 2016-07-05 21:33:33.125, foo}
2016-07-05 21:33:33,126 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2016-07-05 21:33:33.126, foo, 2016-07-05 21:33:33.126, foo}
2016-07-05 21:33:33,127 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2016-07-05 21:33:33.126, foo, 2016-07-05 21:33:33.126, foo}
2016-07-05 21:33:33,129 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2016-07-05 21:33:33.129, foo, 2016-07-05 21:33:33.129, foo}
2016-07-05 21:33:33,130 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2016-07-05 21:33:33.13, foo, 2016-07-05 21:33:33.13, foo}
2016-07-05 21:33:33,132 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2016-07-05 21:33:33.132, foo, 2016-07-05 21:33:33.132, foo}
2016-07-05 21:33:33,133 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2016-07-05 21:33:33.133, foo, 2016-07-05 21:33:33.133, foo}
2016-07-05 21:33:33,135 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2016-07-05 21:33:33.135, foo, 2016-07-05 21:33:33.135, foo}
2016-07-05 21:33:33,136 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2016-07-05 21:33:33.136, foo, 2016-07-05 21:33:33.136, foo}
2016-07-05 21:33:33,137 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2016-07-05 21:33:33.137, foo, 2016-07-05 21:33:33.137, foo}
2016-07-05 21:33:33,138 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2016-07-05 21:33:33.138, foo, 2016-07-05 21:33:33.138, foo}
2016-07-05 21:33:33,139 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2016-07-05 21:33:33.139, foo, 2016-07-05 21:33:33.139, foo}
2016-07-05 21:33:33,140 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2016-07-05 21:33:33.14, foo, 2016-07-05 21:33:33.14, foo}
2016-07-05 21:33:33,141 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2016-07-05 21:33:33.141, foo, 2016-07-05 21:33:33.141, foo}
2016-07-05 21:33:33,145 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2016-07-05 21:33:33.145, foo, 2016-07-05 21:33:33.145, foo}
2016-07-05 21:33:33,146 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2016-07-05 21:33:33.146, foo, 2016-07-05 21:33:33.146, foo}
2016-07-05 21:33:33,147 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2016-07-05 21:33:33.147, foo, 2016-07-05 21:33:33.147, foo}
2016-07-05 21:33:33,148 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2016-07-05 21:33:33.148, foo, 2016-07-05 21:33:33.148, foo}
2016-07-05 21:33:33,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2016-07-05 21:33:33.148, foo, 2016-07-05 21:33:33.149, foo}
2016-07-05 21:33:33,149 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2016-07-05 21:33:33.149, foo, 2016-07-05 21:33:33.149, foo}
2016-07-05 21:33:33,150 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2016-07-05 21:33:33.15, foo, 2016-07-05 21:33:33.15, foo}
2016-07-05 21:33:33,156 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2016-07-05 21:33:33.156, foo, 2016-07-05 21:33:33.156, foo}
2016-07-05 21:33:33,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2016-07-05 21:33:33.157, foo, 2016-07-05 21:33:33.157, foo}
2016-07-05 21:33:33,157 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2016-07-05 21:33:33.157, foo, 2016-07-05 21:33:33.157, foo}
2016-07-05 21:33:33,158 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2016-07-05 21:33:33.158, foo, 2016-07-05 21:33:33.158, foo}
2016-07-05 21:33:33,159 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2016-07-05 21:33:33.159, foo, 2016-07-05 21:33:33.159, foo}
2016-07-05 21:33:33,160 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2016-07-05 21:33:33.16, foo, 2016-07-05 21:33:33.16, foo}
2016-07-05 21:33:33,161 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2016-07-05 21:33:33.161, foo, 2016-07-05 21:33:33.161, foo}
2016-07-05 21:33:33,162 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2016-07-05 21:33:33.162, foo, 2016-07-05 21:33:33.162, foo}
2016-07-05 21:33:33,163 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2016-07-05 21:33:33.163, foo, 2016-07-05 21:33:33.163, foo}
2016-07-05 21:33:33,164 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:33:33.164, foo, 2016-07-05 21:33:33.164, foo}
2016-07-05 21:33:33,165 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2016-07-05 21:33:33.165, foo, 2016-07-05 21:33:33.165, foo}
2016-07-05 21:33:33,166 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2016-07-05 21:33:33.166, foo, 2016-07-05 21:33:33.166, foo}
2016-07-05 21:33:33,167 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2016-07-05 21:33:33.167, foo, 2016-07-05 21:33:33.167, foo}
2016-07-05 21:33:33,169 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2016-07-05 21:33:33.169, foo, 2016-07-05 21:33:33.169, foo}
2016-07-05 21:33:33,170 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2016-07-05 21:33:33.17, foo, 2016-07-05 21:33:33.17, foo}
2016-07-05 21:33:33,171 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2016-07-05 21:33:33.171, foo, 2016-07-05 21:33:33.171, foo}
2016-07-05 21:33:33,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2016-07-05 21:33:33.172, foo, 2016-07-05 21:33:33.172, foo}
2016-07-05 21:33:33,172 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2016-07-05 21:33:33.172, foo, 2016-07-05 21:33:33.172, foo}
2016-07-05 21:33:33,173 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2016-07-05 21:33:33.173, foo, 2016-07-05 21:33:33.173, foo}
2016-07-05 21:33:33,174 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2016-07-05 21:33:33.174, foo, 2016-07-05 21:33:33.174, foo}
2016-07-05 21:33:33,175 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2016-07-05 21:33:33.175, foo, 2016-07-05 21:33:33.175, foo}
2016-07-05 21:33:33,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2016-07-05 21:33:33.175, foo, 2016-07-05 21:33:33.175, foo}
2016-07-05 21:33:33,176 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2016-07-05 21:33:33.176, foo, 2016-07-05 21:33:33.176, foo}
2016-07-05 21:33:33,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2016-07-05 21:33:33.177, foo, 2016-07-05 21:33:33.177, foo}
2016-07-05 21:33:33,177 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2016-07-05 21:33:33.177, foo, 2016-07-05 21:33:33.177, foo}
2016-07-05 21:33:33,178 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2016-07-05 21:33:33.178, foo, 2016-07-05 21:33:33.178, foo}
2016-07-05 21:33:33,184 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2016-07-05 21:33:33.183, foo, 2016-07-05 21:33:33.183, foo}
2016-07-05 21:33:33,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:33:33.184, foo, 2016-07-05 21:33:33.184, foo}
2016-07-05 21:33:33,185 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:33:33.185, foo, 2016-07-05 21:33:33.185, foo}
2016-07-05 21:33:33,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:33:33.186, foo, 2016-07-05 21:33:33.186, foo}
2016-07-05 21:33:33,186 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2016-07-05 21:33:33.186, foo, 2016-07-05 21:33:33.186, foo}
2016-07-05 21:33:33,187 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2016-07-05 21:33:33.187, foo, 2016-07-05 21:33:33.187, foo}
2016-07-05 21:33:33,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2016-07-05 21:33:33.188, foo, 2016-07-05 21:33:33.188, foo}
2016-07-05 21:33:33,188 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2016-07-05 21:33:33.188, foo, 2016-07-05 21:33:33.188, foo}
2016-07-05 21:33:33,189 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2016-07-05 21:33:33.189, foo, 2016-07-05 21:33:33.189, foo}
2016-07-05 21:33:33,190 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2016-07-05 21:33:33.19, foo, 2016-07-05 21:33:33.19, foo}
2016-07-05 21:33:33,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2016-07-05 21:33:33.191, foo, 2016-07-05 21:33:33.191, foo}
2016-07-05 21:33:33,191 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2016-07-05 21:33:33.191, foo, 2016-07-05 21:33:33.191, foo}
2016-07-05 21:33:33,192 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2016-07-05 21:33:33.192, foo, 2016-07-05 21:33:33.192, foo}
2016-07-05 21:33:33,193 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2016-07-05 21:33:33.193, foo, 2016-07-05 21:33:33.193, foo}
2016-07-05 21:33:33,194 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2016-07-05 21:33:33.194, foo, 2016-07-05 21:33:33.194, foo}
2016-07-05 21:33:33,195 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2016-07-05 21:33:33.195, foo, 2016-07-05 21:33:33.195, foo}
2016-07-05 21:33:33,197 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2016-07-05 21:33:33.197, foo, 2016-07-05 21:33:33.197, foo}
2016-07-05 21:33:33,198 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2016-07-05 21:33:33.198, foo, 2016-07-05 21:33:33.198, foo}
2016-07-05 21:33:33,200 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1081) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2016-07-05 21:33:33.199, foo, 2016-07-05 21:33:33.199, foo}
2016-07-05 21:33:33,257 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1097) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2016-07-05 21:33:33,258 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():378) - ...Checking implicit set of classification
2016-07-05 21:33:33,278 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:33:33,291 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment, DISPLAY_ORDER as cls_displayOrder
  from MEMBER_STATUS order by DISPLAY_ORDER
2016-07-05 21:33:33,299 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2016-07-05 21:33:33,303 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2016-07-05 21:33:33,307 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2016-07-05 21:33:33,314 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2016-07-05 21:33:33,317 [main] INFO  (DfClassificationProperties#setupTableClassification():673) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2016-07-05 21:33:33,330 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:33:33,332 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2016-07-05 21:33:33,334 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2016-07-05 21:33:33,336 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2016-07-05 21:33:33,338 [main] INFO  (DfImplicitClassificationChecker#check():69) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2016-07-05 21:33:33,345 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2016-07-05 21:33:33,347 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2016-07-05 21:33:33,348 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2016-07-05 21:33:33,348 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2016-07-05 21:33:33,349 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2016-07-05 21:33:33,349 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2016-07-05 21:33:33,359 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: take-finally.sql
2016-07-05 21:33:33,360 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Member addresses should be only one at any time.
-- - - - - - - - - - -/
select adr.MEMBER_ADDRESS_ID, adr.MEMBER_ID
     , adr.VALID_BEGIN_DATE, adr.VALID_END_DATE
     , adr.ADDRESS
  from MEMBER_ADDRESS adr
 where exists (select subadr.MEMBER_ADDRESS_ID
                 from MEMBER_ADDRESS subadr
                where subadr.MEMBER_ID = adr.MEMBER_ID
                  and subadr.VALID_BEGIN_DATE > adr.VALID_BEGIN_DATE
                  -- 有効期間が一日だけ重複しているパターンも検出
                  and subadr.VALID_BEGIN_DATE <= adr.VALID_END_DATE
       )
2016-07-05 21:33:33,368 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 正式会員日時を持ってる仮会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'PRV'
   and mem.FORMALIZED_DATETIME is not NULL
2016-07-05 21:33:33,371 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- まだ生まれていない会員がいないこと
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.BIRTHDATE > now()
2016-07-05 21:33:33,372 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:assertListZero#
-- /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 退会会員が退会情報を持っていることをアサート
-- - - - - - - - - - -/
select *
  from MEMBER mem
 where mem.MEMBER_STATUS_CODE = 'WDL'
   and not exists (select wdl.MEMBER_ID
                     from MEMBER_WITHDRAWAL wdl
                    where wdl.MEMBER_ID = mem.MEMBER_ID
       )
2016-07-05 21:33:33,374 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2016-07-05 21:33:33,374 [main] INFO  (DfSqlFileFireMan#fire():89) - {Take Finally}: success=4 failure=0 (in 1 files)
2016-07-05 21:33:33,412 [main] INFO  (DfSchemaXmlSerializer#serialize():285) - 
2016-07-05 21:33:33,413 [main] INFO  (DfSchemaXmlSerializer#serialize():286) - ...Starting to process JDBC to SchemaXML
2016-07-05 21:33:33,452 [main] INFO  (DfSchemaXmlSerializer#generateXML():359) - ...Getting DB connection
2016-07-05 21:33:33,452 [main] INFO  (DfSchemaXmlSerializer#generateXML():362) - ...Getting DB meta data
2016-07-05 21:33:33,452 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:33:33,453 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:33:33,453 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:33:33,460 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2016-07-05 21:33:33,464 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2016-07-05 21:33:33,482 [main] INFO  (DfSchemaXmlSerializer#processTable():419) - 
2016-07-05 21:33:33,483 [main] INFO  (DfSchemaXmlSerializer#processTable():420) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2016-07-05 21:33:33,484 [main] INFO  (DfSchemaXmlSerializer#processTable():421) - $ [Table List]
2016-07-05 21:33:33,484 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2016-07-05 21:33:33,525 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2016-07-05 21:33:33,541 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_following(TABLE) // 会員フォローイング: とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
2016-07-05 21:33:33,553 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2016-07-05 21:33:33,564 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2016-07-05 21:33:33,575 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2016-07-05 21:33:33,586 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_status(TABLE) // 会員ステータス
2016-07-05 21:33:33,594 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2016-07-05 21:33:33,604 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product(TABLE) // 商品
2016-07-05 21:33:33,615 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2016-07-05 21:33:33,624 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.product_status(TABLE) // 商品ステータス
2016-07-05 21:33:33,632 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2016-07-05 21:33:33,646 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2016-07-05 21:33:33,655 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2016-07-05 21:33:33,662 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2016-07-05 21:33:33,670 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():501) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2016-07-05 21:33:33,678 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - $ 
2016-07-05 21:33:33,679 [main] INFO  (DfSchemaXmlSerializer#processTable():434) - $ [Table Count]
2016-07-05 21:33:33,679 [main] INFO  (DfSchemaXmlSerializer#processTable():435) - $ 16
2016-07-05 21:33:33,679 [main] INFO  (DfSchemaXmlSerializer#processTable():436) - $ = = = = = = = = = =/
2016-07-05 21:33:33,679 [main] INFO  (DfSchemaXmlSerializer#processTable():437) - 
2016-07-05 21:33:33,681 [main] INFO  (DfSchemaXmlSerializer#processSequence():796) - ...Getting sequences
2016-07-05 21:33:33,683 [main] INFO  (DfSchemaXmlSerializer#serialize():300) - ...Serializing XML:
2016-07-05 21:33:33,683 [main] INFO  (DfSchemaXmlSerializer#serialize():301) -   filePath = playsql/migration/schema/migration-next-schema.xml
2016-07-05 21:33:33,683 [main] INFO  (DfSchemaXmlSerializer#serialize():302) -   encoding = UTF-8
2016-07-05 21:33:33,725 [main] INFO  (DfAlterCheckProcess#rollbackSchema():536) - 
2016-07-05 21:33:33,725 [main] INFO  (DfAlterCheckProcess#rollbackSchema():537) - +----------------------+
2016-07-05 21:33:33,725 [main] INFO  (DfAlterCheckProcess#rollbackSchema():538) - |                      |
2016-07-05 21:33:33,726 [main] INFO  (DfAlterCheckProcess#rollbackSchema():539) - |   Roll-back Schema   |
2016-07-05 21:33:33,726 [main] INFO  (DfAlterCheckProcess#rollbackSchema():540) - |                      |
2016-07-05 21:33:33,726 [main] INFO  (DfAlterCheckProcess#rollbackSchema():541) - +----------------------+
2016-07-05 21:33:33,729 [main] INFO  (DfAlterCheckProcess#deleteExtractedPreviousResource():289) - ...Deleting the extracted previous resources
2016-07-05 21:33:33,729 [main] INFO  (DfAlterCheckProcess#extractPreviousResource():383) - ...Extracting the previous resources from zip: playsql/migration/previous/previous-20160705-2058.zip
2016-07-05 21:33:33,748 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/.DS_Store
2016-07-05 21:33:33,750 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/.DS_Store
2016-07-05 21:33:33,751 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/.DS_Store
2016-07-05 21:33:33,752 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/10-master.xls
2016-07-05 21:33:33,752 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/common/xls/xls-data-result.dfmark
2016-07-05 21:33:33,753 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/.DS_Store
2016-07-05 21:33:33,754 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/20-member.xls
2016-07-05 21:33:33,772 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/30-product.xls
2016-07-05 21:33:33,773 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/defaultValueMap.dataprop
2016-07-05 21:33:33,774 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/data/ut/xls/xls-data-result.dfmark
2016-07-05 21:33:33,774 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-00-system.sql
2016-07-05 21:33:33,775 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-10-basic.sql
2016-07-05 21:33:33,776 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/replace-schema-50-procedure.sql
2016-07-05 21:33:33,776 [main] INFO  (DfAlterCheckProcess$3#accept():390) -   playsql/migration/previous/take-finally.sql
2016-07-05 21:33:33,778 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():229) - 
2016-07-05 21:33:33,778 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():230) - * * * * * * * * * * *
2016-07-05 21:33:33,779 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():231) - *                   *
2016-07-05 21:33:33,780 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():232) - * Initialize Schema *
2016-07-05 21:33:33,780 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():233) - *                   *
2016-07-05 21:33:33,780 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():234) - * * * * * * * * * * *
2016-07-05 21:33:33,781 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2016-07-05 21:33:33,781 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2016-07-05 21:33:33,781 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2016-07-05 21:33:33,793 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_address
2016-07-05 21:33:33,800 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_following
2016-07-05 21:33:33,806 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_login
2016-07-05 21:33:33,811 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_security
2016-07-05 21:33:33,817 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_service
2016-07-05 21:33:33,824 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table member_withdrawal
2016-07-05 21:33:33,837 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - truncate table purchase_payment
2016-07-05 21:33:33,844 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2016-07-05 21:33:33,858 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2016-07-05 21:33:33,876 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2016-07-05 21:33:33,898 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_following drop foreign key FK_MEMBER_FOLLOWING_MY_MEMBER
2016-07-05 21:33:33,917 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_following drop foreign key FK_MEMBER_FOLLOWING_YOUR_MEMBER
2016-07-05 21:33:33,938 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2016-07-05 21:33:33,956 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2016-07-05 21:33:33,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2016-07-05 21:33:33,986 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2016-07-05 21:33:34,006 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2016-07-05 21:33:34,027 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2016-07-05 21:33:34,046 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2016-07-05 21:33:34,068 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2016-07-05 21:33:34,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2016-07-05 21:33:34,108 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2016-07-05 21:33:34,128 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2016-07-05 21:33:34,146 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2016-07-05 21:33:34,168 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2016-07-05 21:33:34,188 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member
2016-07-05 21:33:34,191 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_address
2016-07-05 21:33:34,195 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_following
2016-07-05 21:33:34,199 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_login
2016-07-05 21:33:34,202 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_security
2016-07-05 21:33:34,207 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_service
2016-07-05 21:33:34,213 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_status
2016-07-05 21:33:34,220 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table member_withdrawal
2016-07-05 21:33:34,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product
2016-07-05 21:33:34,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_category
2016-07-05 21:33:34,228 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table product_status
2016-07-05 21:33:34,232 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase
2016-07-05 21:33:34,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table purchase_payment
2016-07-05 21:33:34,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table region
2016-07-05 21:33:34,243 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table service_rank
2016-07-05 21:33:34,250 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop table withdrawal_reason
2016-07-05 21:33:34,273 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_IN_OUT_PARAMETER
2016-07-05 21:33:34,276 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():609) - drop procedure SP_RETURN_RESULT_SET
2016-07-05 21:33:34,279 [main] INFO  (DfCreateSchemaProcess#createSchema():266) - 
2016-07-05 21:33:34,279 [main] INFO  (DfCreateSchemaProcess#createSchema():267) - * * * * * * * * *
2016-07-05 21:33:34,279 [main] INFO  (DfCreateSchemaProcess#createSchema():268) - *               *
2016-07-05 21:33:34,279 [main] INFO  (DfCreateSchemaProcess#createSchema():269) - * Create Schema *
2016-07-05 21:33:34,280 [main] INFO  (DfCreateSchemaProcess#createSchema():270) - *               *
2016-07-05 21:33:34,280 [main] INFO  (DfCreateSchemaProcess#createSchema():271) - * * * * * * * * *
2016-07-05 21:33:34,280 [main] INFO  (DfSqlFileFireMan#fire():64) - ...Firing: replace-schema-00-system.sql
2016-07-05 21:33:34,281 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2016-07-05 21:33:34,282 [main] INFO  (DfCreateSchemaProcess$1#dispatch():295) - ...Creating a connection to system
